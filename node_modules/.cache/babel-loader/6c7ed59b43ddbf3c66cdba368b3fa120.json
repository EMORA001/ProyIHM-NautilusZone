{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { mul } from '../ops/mul';\nimport { scalar } from '../ops/scalar';\nimport { zerosLike } from '../ops/zeros_like';\nimport { registerClass } from '../serialization';\nimport { SGDOptimizer } from './sgd_optimizer';\n/** @doclink Optimizer */\n\nexport class MomentumOptimizer extends SGDOptimizer {\n  constructor(learningRate, momentum) {\n    let useNesterov = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    super(learningRate);\n    this.learningRate = learningRate;\n    this.momentum = momentum;\n    this.useNesterov = useNesterov;\n    this.accumulations = [];\n    this.m = scalar(this.momentum);\n  }\n\n  applyGradients(variableGradients) {\n    const variableNames = Array.isArray(variableGradients) ? variableGradients.map(item => item.name) : Object.keys(variableGradients);\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n\n      if (this.accumulations[i] == null) {\n        const trainable = false;\n        this.accumulations[i] = {\n          originalName: `${name}/momentum`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n\n      const accumulation = this.accumulations[i].variable;\n      const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n\n      if (gradient == null) {\n        return;\n      }\n\n      tidy(() => {\n        let newValue;\n        const newAccumulation = add(mul(this.m, accumulation), gradient);\n\n        if (this.useNesterov) {\n          newValue = add(mul(this.c, add(gradient, mul(newAccumulation, this.m))), value);\n        } else {\n          newValue = add(mul(this.c, newAccumulation), value);\n        }\n\n        accumulation.assign(newAccumulation);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  dispose() {\n    this.m.dispose();\n\n    if (this.accumulations != null) {\n      dispose(this.accumulations.map(v => v.variable));\n    }\n  }\n  /**\n   * Sets the momentum of the optimizer.\n   *\n   * @param momentum\n   */\n\n\n  setMomentum(momentum) {\n    this.momentum = momentum;\n  }\n\n  async getWeights() {\n    // Order matters for Python compatibility.\n    return [await this.saveIterations()].concat(this.accumulations.map(v => ({\n      name: v.originalName,\n      tensor: v.variable\n    })));\n  }\n\n  async setWeights(weightValues) {\n    weightValues = await this.extractIterations(weightValues);\n    const trainable = false;\n    this.accumulations = weightValues.map(v => ({\n      originalName: v.name,\n      variable: v.tensor.variable(trainable)\n    }));\n  }\n\n  getConfig() {\n    return {\n      'learningRate': this.learningRate,\n      'momentum': this.momentum,\n      'useNesterov': this.useNesterov\n    };\n  }\n  /** @nocollapse */\n\n\n  static fromConfig(cls, config) {\n    return new cls(config['learningRate'], config['momentum'], config['useNesterov']);\n  }\n\n}\n/** @nocollapse */\n\nMomentumOptimizer.className = 'Momentum'; // Name matters for Python compatibility.\n\nregisterClass(MomentumOptimizer);","map":{"version":3,"sources":["../../../../../../tfjs-core/src/optimizers/momentum_optimizer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {add} from '../ops/add';\nimport {mul} from '../ops/mul';\nimport {scalar} from '../ops/scalar';\nimport {zerosLike} from '../ops/zeros_like';\nimport {ConfigDict, registerClass, Serializable, SerializableConstructor} from '../serialization';\nimport {Scalar, Tensor} from '../tensor';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {OptimizerVariable} from './optimizer';\nimport {SGDOptimizer} from './sgd_optimizer';\n\n/** @doclink Optimizer */\nexport class MomentumOptimizer extends SGDOptimizer {\n  /** @nocollapse */\n  static className = 'Momentum';  // Name matters for Python compatibility.\n  private m: Scalar;\n  private accumulations: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, private momentum: number,\n      private useNesterov = false) {\n    super(learningRate);\n    this.m = scalar(this.momentum);\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      if (this.accumulations[i] == null) {\n        const trainable = false;\n        this.accumulations[i] = {\n          originalName: `${name}/momentum`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n\n      const accumulation = this.accumulations[i].variable;\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n\n      tidy(() => {\n        let newValue: Tensor;\n        const newAccumulation = add(mul(this.m, accumulation), gradient);\n        if (this.useNesterov) {\n          newValue = add(\n              mul(this.c, add(gradient, mul(newAccumulation, this.m))), value);\n        } else {\n          newValue = add(mul(this.c, newAccumulation), value);\n        }\n        accumulation.assign(newAccumulation);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  dispose(): void {\n    this.m.dispose();\n    if (this.accumulations != null) {\n      dispose(this.accumulations.map(v => v.variable));\n    }\n  }\n\n  /**\n   * Sets the momentum of the optimizer.\n   *\n   * @param momentum\n   */\n  setMomentum(momentum: number) {\n    this.momentum = momentum;\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    return [await this.saveIterations()].concat(this.accumulations.map(\n        v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    const trainable = false;\n    this.accumulations = weightValues.map(\n        v => ({originalName: v.name, variable: v.tensor.variable(trainable)}));\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'momentum': this.momentum,\n      'useNesterov': this.useNesterov\n    };\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(\n        config['learningRate'], config['momentum'], config['useNesterov']);\n  }\n}\nregisterClass(MomentumOptimizer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}