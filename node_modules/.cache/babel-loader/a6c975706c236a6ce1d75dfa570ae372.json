{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, tidy, util } from '@tensorflow/tfjs-core';\nimport { getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContenxt, parseNodeName } from '../operations/executors/utils';\nimport { executeOp } from '../operations/operation_executor';\nimport { ExecutionContext } from './execution_context';\nimport { getExecutionSubgraph, getNodesInTopologicalOrder, isControlFlow } from './model_analysis';\nexport class GraphExecutor {\n  /**\n   *\n   * @param graph Graph the model or function graph to be executed.\n   * @param parent When building function exector you need to set the parent\n   * executor. Since the weights and function executor maps are set at parant\n   * level, that function executor can access the function maps and weight maps\n   * through the parent.\n   */\n  constructor(graph, parent) {\n    this.graph = graph;\n    this.parent = parent;\n    this.compiledMap = new Map();\n    this._weightMap = {};\n    this.SEPERATOR = ',';\n    this._functions = {};\n    this._functionExecutorMap = {};\n    this.intermediateTensors = {};\n    this.keepTensorForDebug = false;\n    this._outputs = graph.outputs;\n    this._inputs = graph.inputs;\n    this._initNodes = graph.initNodes;\n    this._signature = graph.signature;\n    this._functions = graph.functions; // create sub-graph executors\n\n    if (graph.functions != null) {\n      Object.keys(graph.functions).forEach(name => {\n        this._functionExecutorMap[name] = new GraphExecutor(graph.functions[name], this);\n      });\n    }\n  }\n\n  get weightIds() {\n    return this.parent ? this.parent.weightIds : this._weightIds;\n  }\n\n  get functionExecutorMap() {\n    return this.parent ? this.parent.functionExecutorMap : this._functionExecutorMap;\n  }\n\n  get weightMap() {\n    return this.parent ? this.parent.weightMap : this._weightMap;\n  }\n\n  set weightMap(weightMap) {\n    const weightIds = Object.keys(weightMap).map(key => weightMap[key].map(tensor => tensor.id));\n    this._weightIds = [].concat(...weightIds);\n    this._weightMap = weightMap;\n  }\n  /**\n   * Set `ResourceManager` shared by executors of a model.\n   * @param resourceManager: `ResourceManager` of the `GraphModel`.\n   */\n\n\n  set resourceManager(resourceManager) {\n    this._resourceManager = resourceManager;\n  }\n\n  get inputs() {\n    return this._inputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ? node.attrParams['shape'].value : undefined,\n        dtype: node.attrParams['dtype'] ? node.attrParams['dtype'].value : undefined\n      };\n    });\n  }\n\n  get outputs() {\n    return this._outputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ? node.attrParams['shape'].value : undefined,\n        dtype: node.attrParams['dtype'] ? node.attrParams['dtype'].value : undefined\n      };\n    });\n  }\n\n  get inputNodes() {\n    return this._inputs.map(node => node.signatureKey || node.name);\n  }\n\n  get outputNodes() {\n    return this._outputs.map(node => {\n      const name = node.signatureKey || node.name;\n      return node.defaultOutput ? `${name}:${node.defaultOutput}` : name;\n    });\n  }\n\n  get functions() {\n    return Object.keys(this._functions).reduce((map, key) => {\n      map[key] = this._functions[key].signature;\n      return map;\n    }, {});\n  }\n\n  getCompilationKey(inputs, outputs) {\n    const sortedInputs = inputs.map(node => node.name).sort();\n    const sortedOutputs = outputs.map(node => node.name).sort();\n    return sortedInputs.join(this.SEPERATOR) + '--' + sortedOutputs.join(this.SEPERATOR);\n  }\n  /**\n   * Compiles the inference graph and returns the minimal set of nodes that are\n   * required for execution, in the correct execution order.\n   */\n\n\n  compile(inputs, outputs) {\n    const executionInfo = getExecutionSubgraph(inputs, outputs, this.weightMap, this._initNodes);\n    const {\n      missingInputs,\n      dynamicNode,\n      syncInputs\n    } = executionInfo;\n\n    if (dynamicNode != null) {\n      throw new Error(`This execution contains the node '${dynamicNode.name}', which has ` + `the dynamic op '${dynamicNode.op}'. Please use ` + `model.executeAsync() instead. Alternatively, to avoid the ` + `dynamic ops, specify the inputs [${syncInputs}]`);\n    }\n\n    if (missingInputs.length > 0) {\n      const outNames = outputs.map(n => n.name);\n      const inNames = Object.keys(inputs);\n      throw new Error(`Cannot compute the outputs [${outNames}] from the provided inputs ` + `[${inNames}]. Missing the following inputs: [${missingInputs}]`);\n    }\n\n    return getNodesInTopologicalOrder(this.graph, this.weightMap, executionInfo);\n  }\n  /**\n   * Executes the inference for given input tensors.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs Optional. output node name from the Tensorflow model, if\n   * no outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   */\n\n\n  execute(inputs, outputs) {\n    inputs = this.mapInputs(inputs);\n    const names = Object.keys(inputs).sort();\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    outputs = this.mapOutputs(outputs);\n    this.checkOutputs(outputs);\n    const inputNodes = names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputs.map(name => parseNodeName(name)[0]);\n    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n    this.resetIntermediateTensors(); // If no outputs are specified, then use the default outputs of the model.\n\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n\n    const compilationKey = this.getCompilationKey(inputNodes, outputNodes); // Do nothing if the compiled graph cache contains the input.\n\n    let orderedNodes = this.compiledMap.get(compilationKey);\n\n    if (orderedNodes == null) {\n      orderedNodes = this.compile(inputs, outputNodes);\n      this.compiledMap.set(compilationKey, orderedNodes);\n    }\n\n    const tensorArrayMap = {};\n    const tensorListMap = {};\n    return tidy(() => {\n      const context = new ExecutionContext(this.weightMap, tensorArrayMap, tensorListMap, this.functionExecutorMap);\n      const tensorsMap = Object.assign({}, this.weightMap);\n      Object.keys(inputs).forEach(name => {\n        const [nodeName, index] = parseNodeName(name);\n        const tensors = [];\n        tensors[index] = inputs[name];\n        tensorsMap[nodeName] = tensors;\n      });\n      const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n      const intermediateTensorConsumerCount = {};\n\n      for (let i = 0; i < orderedNodes.length; i++) {\n        const node = orderedNodes[i];\n\n        if (!tensorsMap[node.name]) {\n          const tensors = executeOp(node, tensorsMap, context, this._resourceManager);\n\n          if (util.isPromise(tensors)) {\n            throw new Error(`The execution of the op '${node.op}' returned a promise. ` + `Please use model.executeAsync() instead.`);\n          }\n\n          tensorsMap[node.name] = tensors;\n          this.checkTensorForDisposal(node.name, node, tensorsMap, context, tensorsToKeep, outputNodeNames, intermediateTensorConsumerCount);\n        }\n      } // dispose the context for the root executor\n\n\n      if (this.parent == null) {\n        context.dispose(tensorsToKeep);\n      }\n\n      return outputs.map(name => getTensor(name, tensorsMap, context));\n    });\n  }\n\n  getFrozenTensorIds(tensorMap) {\n    const ids = [].concat.apply([], Object.keys(tensorMap).map(key => tensorMap[key]).map(tensors => tensors.map(tensor => tensor.id)));\n    return new Set(ids);\n  }\n\n  checkTensorForDisposal(nodeName, node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount) {\n    // Skip output nodes and any control flow nodes, since its dependency is\n    // tricky to track correctly.\n    if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {\n      return;\n    }\n\n    tensorMap[nodeName].forEach(tensor => {\n      if (tensor != null) {\n        intermediateTensorConsumerCount[tensor.id] = (intermediateTensorConsumerCount[tensor.id] || 0) + node.children.length;\n      }\n    });\n    node.inputs.forEach(input => {\n      // Skip any control flow nodes, since its dependency is tricky to track\n      // correctly.\n      if (input.category !== 'control') {\n        const tensors = getTensorsForCurrentContenxt(input.name, tensorMap, context);\n\n        if (tensors != null) {\n          tensors.forEach(tensor => {\n            if (tensor && !tensor.kept && !tensorsToKeep.has(tensor.id)) {\n              const count = intermediateTensorConsumerCount[tensor.id];\n\n              if (count === 1) {\n                if (!this.keepTensorForDebug) {\n                  tensor.dispose();\n                } else {\n                  const [nodeName, index] = getNodeNameAndIndex(node.name, context);\n\n                  if (this.intermediateTensors[nodeName]) {\n                    this.intermediateTensors[nodeName][index] = tensor;\n                  } else {\n                    this.intermediateTensors[nodeName] = [];\n                    this.intermediateTensors[nodeName][index] = tensor;\n                  }\n                }\n\n                delete intermediateTensorConsumerCount[tensor.id];\n              } else if (count != null) {\n                // only intermediate nodes has count set, inputs and weights are\n                // not.\n                intermediateTensorConsumerCount[tensor.id]--;\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n\n\n  async executeAsync(inputs, outputs) {\n    return this._executeAsync(inputs, outputs);\n  }\n\n  disposeIntermediateTensors() {\n    if (!this.intermediateTensors) {\n      return;\n    }\n\n    Object.keys(this.intermediateTensors).forEach(key => this.intermediateTensors[key].forEach(tensor => tensor.dispose()));\n    this.disposeTensorsMap();\n  }\n\n  disposeTensorsMap() {\n    if (!this.tensorsMap) {\n      return;\n    }\n\n    Object.keys(this.tensorsMap).forEach(key => {\n      const tensorArray = this.tensorsMap[key];\n      tensorArray.forEach(tensor => {\n        if (tensor && !tensor.kept && !tensor.isDisposed && !this.keepIds.has(tensor.id)) {\n          tensor.dispose();\n        }\n      });\n    });\n  }\n\n  getIntermediateTensors() {\n    return this.tensorsMap;\n  }\n\n  resetIntermediateTensors() {\n    for (const key in this.intermediateTensors) {\n      this.intermediateTensors[key].forEach(tensor => tensor.dispose());\n      delete this.intermediateTensors[key];\n    }\n  }\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs Optional. output node name from the Tensorflow model,\n   * if no outputs are specified, the default outputs of the model would be\n   * used. You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   * @param isFunctionExecution Optional. Flag for executing a function.\n   * @param tensorArrayMap Optional, global TensorArray map by id. Used for\n   * function execution.\n   * @param tensorArrayMap Optinal global TensorList map by id. Used for\n   * function execution.\n   */\n\n\n  async _executeAsync(inputs, outputs) {\n    let isFunctionExecution = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let tensorArrayMap = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let tensorListMap = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n    if (!isFunctionExecution) {\n      inputs = this.mapInputs(inputs);\n      this.checkInputs(inputs);\n      this.checkInputShapeAndType(inputs);\n      outputs = this.mapOutputs(outputs);\n      this.checkOutputs(outputs);\n    } // For model debug.\n\n\n    try {\n      this.keepTensorForDebug = env().getBool('KEEP_INTERMEDIATE_TENSORS');\n    } catch (e) {\n      console.warn(e.message);\n    }\n\n    this.resetIntermediateTensors();\n    const context = new ExecutionContext(this.weightMap, tensorArrayMap, tensorListMap, this.functionExecutorMap); // Graph with control flow op requires runtime evaluation of the execution\n    // order, while without control flow the execution order is pre-determined\n    // in the compile method.\n\n    this.tensorsMap = await this.executeWithControlFlow(inputs, context, outputs, isFunctionExecution);\n    const results = outputs.map(name => getTensor(name, this.tensorsMap, context)); // dispose all the intermediate tensors\n\n    const outputIds = results.map(t => t.id);\n    const inputIds = Object.keys(inputs).map(name => inputs[name].id);\n    this.keepIds = new Set([...outputIds, ...inputIds, ...this.weightIds]);\n\n    if (!this.keepTensorForDebug) {\n      this.disposeTensorsMap();\n    } // dispose the context for the root executor\n\n\n    if (this.parent == null) {\n      context.dispose(this.keepIds);\n    }\n\n    return results;\n  }\n\n  async executeFunctionAsync(inputs, tensorArrayMap, tensorListMap) {\n    const mappedInputs = inputs.reduce((map, tensor, index) => {\n      map[this.inputs[index].name] = tensor;\n      return map;\n    }, {});\n    return this._executeAsync(mappedInputs, this.outputNodes, true, tensorArrayMap, tensorListMap);\n  }\n  /**\n   * When there are control flow nodes in the graph, the graph execution use\n   * ExecutionContext to keep track of the frames and loop iterators.\n   * @param inputs placeholder tensors for the graph.\n   * @param context the execution context object for current execution.\n   * @param outputNames Optional. output node name from the Tensorflow model,\n   * if no outputs are specified, the default outputs of the model would be\n   * used. You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   * @param isFunctionExecution Flag for executing a function.\n   */\n\n\n  async executeWithControlFlow(inputs, context, outputNames, isFunctionExecution) {\n    const names = Object.keys(inputs);\n    const inputNodes = names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputNames.map(name => parseNodeName(name)[0]);\n    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]); // If no outputs are specified, then use the default outputs of the model.\n\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n\n    const {\n      usedNodes,\n      missingInputs,\n      dynamicNode,\n      syncInputs\n    } = getExecutionSubgraph(inputs, outputNodes, this.weightMap, this._initNodes); // First nodes to execute include inputNodes, weights, and initNodes.\n\n    const stack = [...inputNodes, ...this.graph.weights, ...(this._initNodes || [])].map(node => {\n      return {\n        node,\n        contexts: context.currentContext\n      };\n    });\n    const tensorsMap = Object.assign({}, this.weightMap);\n    Object.keys(inputs).forEach(name => {\n      const [nodeName, index] = parseNodeName(name);\n      const tensors = [];\n      tensors[index] = inputs[name];\n      tensorsMap[nodeName] = tensors;\n    });\n    const intermediateTensorConsumerCount = {};\n    const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n    const added = {};\n\n    while (stack.length > 0) {\n      const promises = this.processStack(inputNodes, stack, context, tensorsMap, added, tensorsToKeep, outputNodeNames, intermediateTensorConsumerCount, usedNodes);\n      await Promise.all(promises);\n    }\n\n    if (dynamicNode == null && !isFunctionExecution) {\n      console.warn(`This model execution did not contain any nodes with control flow ` + `or dynamic output shapes. You can use model.execute() instead.`);\n    }\n\n    const missingOutputs = outputNodes.filter(node => !isControlFlow(node) && !getTensor(node.name, tensorsMap, context)).map(node => node.name);\n\n    if (missingOutputs.length > 0) {\n      let alternativeMsg = '';\n\n      if (dynamicNode != null) {\n        alternativeMsg = `Alternatively, to avoid the dynamic ops, use model.execute() ` + `and specify the inputs [${syncInputs}]`;\n      }\n\n      throw new Error(`Cannot compute the outputs [${missingOutputs}] from the provided ` + `inputs [${names}]. Consider providing the following inputs: ` + `[${missingInputs}]. ${alternativeMsg}`);\n    }\n\n    return tensorsMap;\n  }\n\n  processStack(inputNodes, stack, context, tensorMap, added, tensorsToKeep, outputNames, intermediateTensorConsumerCount, usedNodes) {\n    const promises = [];\n\n    while (stack.length > 0) {\n      const item = stack.pop();\n      context.currentContext = item.contexts;\n      let nodeName = ''; // The tensor of the Enter op with isConstant set should be set\n      // in the parent scope, so it will be available as constant for the\n      // whole loop.\n\n      if (item.node.op === 'Enter' && getParamValue('isConstant', item.node, tensorMap, context)) {\n        [nodeName] = getNodeNameAndIndex(item.node.name, context);\n      } // only process nodes that are not in the tensorMap yet, this include\n      // inputNodes and internal initNodes.\n\n\n      if (tensorMap[item.node.name] == null) {\n        const tensors = executeOp(item.node, tensorMap, context, this._resourceManager);\n\n        if (!nodeName) {\n          [nodeName] = getNodeNameAndIndex(item.node.name, context);\n        }\n\n        const currentContext = context.currentContext;\n\n        if (util.isPromise(tensors)) {\n          promises.push(tensors.then(t => {\n            tensorMap[nodeName] = t;\n            context.currentContext = currentContext;\n            this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount);\n            this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);\n            return t;\n          }));\n        } else {\n          tensorMap[nodeName] = tensors;\n          this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount);\n          this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);\n        }\n      } else {\n        this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);\n      }\n    }\n\n    return promises;\n  }\n\n  processChildNodes(node, stack, context, tensorMap, added, usedNodes) {\n    node.children.forEach(childNode => {\n      const [nodeName] = getNodeNameAndIndex(childNode.name, context);\n\n      if (added[nodeName] || !usedNodes.has(childNode.name)) {\n        return;\n      } // Merge op can be pushed if any of its inputs has value.\n\n\n      if (childNode.op === 'Merge') {\n        if (childNode.inputNames.some(name => {\n          return !!getTensor(name, tensorMap, context);\n        })) {\n          added[nodeName] = true;\n          stack.push({\n            contexts: context.currentContext,\n            node: childNode\n          });\n        }\n      } else // Otherwise all inputs must to have value.\n        if (childNode.inputNames.every(name => {\n          return !!getTensor(name, tensorMap, context);\n        })) {\n          added[nodeName] = true;\n          stack.push({\n            contexts: context.currentContext,\n            node: childNode\n          });\n        }\n    });\n  }\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n\n\n  dispose() {\n    Object.keys(this.weightMap).forEach(key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n  }\n\n  checkInputShapeAndType(inputs) {\n    Object.keys(inputs).forEach(name => {\n      const input = inputs[name];\n      const [nodeName] = parseNodeName(name);\n      const node = this.graph.nodes[nodeName];\n\n      if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n        const shape = node.attrParams['shape'].value;\n        const match = shape.length === input.shape.length && input.shape.every((dim, index) => shape[index] === -1 || shape[index] === dim);\n        util.assert(match, () => `The shape of dict['${node.name}'] provided in ` + `model.execute(dict) must be [${shape}], but was ` + `[${input.shape}]`);\n      }\n\n      if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n        util.assert(input.dtype === node.attrParams['dtype'].value, () => `The dtype of dict['${node.name}'] provided in ` + `model.execute(dict) must be ` + `${node.attrParams['dtype'].value}, but was ${input.dtype}`);\n      }\n    });\n  }\n\n  mapInputs(inputs) {\n    const result = {};\n\n    for (const inputName in inputs) {\n      if (this._signature != null && this._signature.inputs != null && this._signature.inputs[inputName] != null) {\n        const tensor = this._signature.inputs[inputName];\n        result[tensor.name] = inputs[inputName];\n      } else {\n        result[inputName] = inputs[inputName];\n      }\n    }\n\n    return result;\n  }\n\n  checkInputs(inputs) {\n    const notInGraph = Object.keys(inputs).filter(name => {\n      const [nodeName] = parseNodeName(name);\n      return this.graph.nodes[nodeName] == null;\n    });\n\n    if (notInGraph.length > 0) {\n      throw new Error(`The dict provided in model.execute(dict) has ` + `keys: [${notInGraph}] that are not part of graph`);\n    }\n  }\n\n  mapOutputs(outputs) {\n    return outputs.map(name => {\n      if (this._signature != null && this._signature.outputs != null && this._signature.outputs[name] != null) {\n        const tensor = this._signature.outputs[name];\n        return tensor.name;\n      }\n\n      return name;\n    }, {});\n  }\n\n  checkOutputs(outputs) {\n    outputs.forEach(name => {\n      const [normalizedName] = parseNodeName(name);\n\n      if (!this.graph.nodes[normalizedName]) {\n        throw new Error(`The output '${name}' is not found in the graph`);\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../../../../tfjs-converter/src/executor/graph_executor.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkB,GAAlB,EAA+C,IAA/C,EAAqD,IAArD,QAAgE,uBAAhE;AAIA,SAAQ,mBAAR,EAA6B,aAA7B,EAA4C,SAA5C,EAAuD,4BAAvD,EAAqF,aAArF,QAAyG,+BAAzG;AACA,SAAQ,SAAR,QAAwB,kCAAxB;AAGA,SAAQ,gBAAR,QAAqD,qBAArD;AACA,SAAQ,oBAAR,EAA8B,0BAA9B,EAA0D,aAA1D,QAA8E,kBAA9E;AASA,OAAM,MAAO,aAAP,CAAoB;EA2FxB;;;;;;;AAOG;EACH,WAAA,CAAoB,KAApB,EAA0C,MAA1C,EAAgE;IAA5C,KAAA,KAAA,GAAA,KAAA;IAAsB,KAAA,MAAA,GAAA,MAAA;IAlGlC,KAAA,WAAA,GAAmC,IAAI,GAAJ,EAAnC;IACA,KAAA,UAAA,GAA8B,EAA9B;IAMA,KAAA,SAAA,GAAY,GAAZ;IACA,KAAA,UAAA,GAAqC,EAArC;IACA,KAAA,oBAAA,GAA0D,EAA1D;IAEA,KAAA,mBAAA,GAAuC,EAAvC;IAGA,KAAA,kBAAA,GAAqB,KAArB;IAqFN,KAAK,QAAL,GAAgB,KAAK,CAAC,OAAtB;IACA,KAAK,OAAL,GAAe,KAAK,CAAC,MAArB;IACA,KAAK,UAAL,GAAkB,KAAK,CAAC,SAAxB;IACA,KAAK,UAAL,GAAkB,KAAK,CAAC,SAAxB;IACA,KAAK,UAAL,GAAkB,KAAK,CAAC,SAAxB,CAL8D,CAM9D;;IACA,IAAI,KAAK,CAAC,SAAN,IAAmB,IAAvB,EAA6B;MAC3B,MAAM,CAAC,IAAP,CAAY,KAAK,CAAC,SAAlB,EAA6B,OAA7B,CAAqC,IAAI,IAAG;QAC1C,KAAK,oBAAL,CAA0B,IAA1B,IACI,IAAI,aAAJ,CAAkB,KAAK,CAAC,SAAN,CAAgB,IAAhB,CAAlB,EAAyC,IAAzC,CADJ;MAED,CAHD;IAID;EACF;;EA/FY,IAAT,SAAS,GAAA;IACX,OAAO,KAAK,MAAL,GAAc,KAAK,MAAL,CAAY,SAA1B,GAAsC,KAAK,UAAlD;EACD;;EAEsB,IAAnB,mBAAmB,GAAA;IACrB,OAAO,KAAK,MAAL,GAAc,KAAK,MAAL,CAAY,mBAA1B,GACc,KAAK,oBAD1B;EAED;;EAEY,IAAT,SAAS,GAAA;IACX,OAAO,KAAK,MAAL,GAAc,KAAK,MAAL,CAAY,SAA1B,GAAsC,KAAK,UAAlD;EACD;;EAEY,IAAT,SAAS,CAAC,SAAD,EAA2B;IACtC,MAAM,SAAS,GAAG,MAAM,CAAC,IAAP,CAAY,SAAZ,EAAuB,GAAvB,CACd,GAAG,IAAI,SAAS,CAAC,GAAD,CAAT,CAAe,GAAf,CAAmB,MAAM,IAAI,MAAM,CAAC,EAApC,CADO,CAAlB;IAEA,KAAK,UAAL,GAAkB,GAAG,MAAH,CAAU,GAAG,SAAb,CAAlB;IACA,KAAK,UAAL,GAAkB,SAAlB;EACD;EAED;;;AAGG;;;EACgB,IAAf,eAAe,CAAC,eAAD,EAAiC;IAClD,KAAK,gBAAL,GAAwB,eAAxB;EACD;;EAES,IAAN,MAAM,GAAA;IACR,OAAO,KAAK,OAAL,CAAa,GAAb,CAAiB,IAAI,IAAG;MAC7B,OAAO;QACL,IAAI,EAAE,IAAI,CAAC,IADN;QAEL,KAAK,EAAE,IAAI,CAAC,UAAL,CAAgB,OAAhB,IACH,IAAI,CAAC,UAAL,CAAgB,OAAhB,EAAyB,KADtB,GAEH,SAJC;QAKL,KAAK,EAAE,IAAI,CAAC,UAAL,CAAgB,OAAhB,IACH,IAAI,CAAC,UAAL,CAAgB,OAAhB,EAAyB,KADtB,GAEH;MAPC,CAAP;IASD,CAVM,CAAP;EAWD;;EAEU,IAAP,OAAO,GAAA;IACT,OAAO,KAAK,QAAL,CAAc,GAAd,CAAkB,IAAI,IAAG;MAC9B,OAAO;QACL,IAAI,EAAE,IAAI,CAAC,IADN;QAEL,KAAK,EAAE,IAAI,CAAC,UAAL,CAAgB,OAAhB,IACH,IAAI,CAAC,UAAL,CAAgB,OAAhB,EAAyB,KADtB,GAEH,SAJC;QAKL,KAAK,EAAE,IAAI,CAAC,UAAL,CAAgB,OAAhB,IACH,IAAI,CAAC,UAAL,CAAgB,OAAhB,EAAyB,KADtB,GAEH;MAPC,CAAP;IASD,CAVM,CAAP;EAWD;;EAEa,IAAV,UAAU,GAAA;IACZ,OAAO,KAAK,OAAL,CAAa,GAAb,CAAiB,IAAI,IAAI,IAAI,CAAC,YAAL,IAAqB,IAAI,CAAC,IAAnD,CAAP;EACD;;EAEc,IAAX,WAAW,GAAA;IACb,OAAO,KAAK,QAAL,CAAc,GAAd,CAAmB,IAAD,IAAS;MAChC,MAAM,IAAI,GAAG,IAAI,CAAC,YAAL,IAAqB,IAAI,CAAC,IAAvC;MACA,OAAO,IAAI,CAAC,aAAL,GAAsB,GAAG,IAAI,IAAI,IAAI,CAAC,aAAa,EAAnD,GAAyD,IAAhE;IACD,CAHM,CAAP;EAID;;EAEY,IAAT,SAAS,GAAA;IACX,OAAO,MAAM,CAAC,IAAP,CAAY,KAAK,UAAjB,EAA6B,MAA7B,CAAoC,CAAC,GAAD,EAAM,GAAN,KAAa;MACtD,GAAG,CAAC,GAAD,CAAH,GAAW,KAAK,UAAL,CAAgB,GAAhB,EAAqB,SAAhC;MACA,OAAO,GAAP;IACD,CAHM,EAGJ,EAHI,CAAP;EAID;;EAyBO,iBAAiB,CAAC,MAAD,EAAiB,OAAjB,EAAgC;IACvD,MAAM,YAAY,GAAG,MAAM,CAAC,GAAP,CAAW,IAAI,IAAI,IAAI,CAAC,IAAxB,EAA8B,IAA9B,EAArB;IACA,MAAM,aAAa,GAAG,OAAO,CAAC,GAAR,CAAY,IAAI,IAAI,IAAI,CAAC,IAAzB,EAA+B,IAA/B,EAAtB;IACA,OAAO,YAAY,CAAC,IAAb,CAAkB,KAAK,SAAvB,IAAoC,IAApC,GACH,aAAa,CAAC,IAAd,CAAmB,KAAK,SAAxB,CADJ;EAED;EAED;;;AAGG;;;EACK,OAAO,CAAC,MAAD,EAAyB,OAAzB,EAAwC;IACrD,MAAM,aAAa,GACf,oBAAoB,CAAC,MAAD,EAAS,OAAT,EAAkB,KAAK,SAAvB,EAAkC,KAAK,UAAvC,CADxB;IAEA,MAAM;MAAC,aAAD;MAAgB,WAAhB;MAA6B;IAA7B,IAA2C,aAAjD;;IACA,IAAI,WAAW,IAAI,IAAnB,EAAyB;MACvB,MAAM,IAAI,KAAJ,CACF,qCAAqC,WAAW,CAAC,IAAI,eAArD,GACA,mBAAmB,WAAW,CAAC,EAAE,gBADjC,GAEA,4DAFA,GAGA,oCAAoC,UAAU,GAJ5C,CAAN;IAKD;;IAED,IAAI,aAAa,CAAC,MAAd,GAAuB,CAA3B,EAA8B;MAC5B,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAR,CAAY,CAAC,IAAI,CAAC,CAAC,IAAnB,CAAjB;MACA,MAAM,OAAO,GAAG,MAAM,CAAC,IAAP,CAAY,MAAZ,CAAhB;MACA,MAAM,IAAI,KAAJ,CACF,+BAA+B,QAAQ,6BAAvC,GACA,IAAI,OAAO,qCAAqC,aAAa,GAF3D,CAAN;IAGD;;IAED,OAAO,0BAA0B,CAC7B,KAAK,KADwB,EACjB,KAAK,SADY,EACD,aADC,CAAjC;EAED;EAED;;;;;;;;AAQG;;;EACH,OAAO,CAAC,MAAD,EAAyB,OAAzB,EAA2C;IAChD,MAAM,GAAG,KAAK,SAAL,CAAe,MAAf,CAAT;IACA,MAAM,KAAK,GAAG,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,IAApB,EAAd;IACA,KAAK,WAAL,CAAiB,MAAjB;IACA,KAAK,sBAAL,CAA4B,MAA5B;IACA,OAAO,GAAG,KAAK,UAAL,CAAgB,OAAhB,CAAV;IACA,KAAK,YAAL,CAAkB,OAAlB;IACA,MAAM,UAAU,GACZ,KAAK,CAAC,GAAN,CAAU,IAAI,IAAI,KAAK,KAAL,CAAW,KAAX,CAAiB,aAAa,CAAC,IAAD,CAAb,CAAoB,CAApB,CAAjB,CAAlB,CADJ;IAEA,MAAM,eAAe,GAAG,OAAO,CAAC,GAAR,CAAY,IAAI,IAAI,aAAa,CAAC,IAAD,CAAb,CAAoB,CAApB,CAApB,CAAxB;IACA,IAAI,WAAW,GAAG,eAAe,CAAC,GAAhB,CAAoB,IAAI,IAAI,KAAK,KAAL,CAAW,KAAX,CAAiB,IAAjB,CAA5B,CAAlB;IACA,KAAK,wBAAL,GAXgD,CAYhD;;IACA,IAAI,WAAW,CAAC,MAAZ,KAAuB,CAA3B,EAA8B;MAC5B,WAAW,GAAG,KAAK,QAAnB;IACD;;IAED,MAAM,cAAc,GAAG,KAAK,iBAAL,CAAuB,UAAvB,EAAmC,WAAnC,CAAvB,CAjBgD,CAmBhD;;IACA,IAAI,YAAY,GAAG,KAAK,WAAL,CAAiB,GAAjB,CAAqB,cAArB,CAAnB;;IACA,IAAI,YAAY,IAAI,IAApB,EAA0B;MACxB,YAAY,GAAG,KAAK,OAAL,CAAa,MAAb,EAAqB,WAArB,CAAf;MACA,KAAK,WAAL,CAAiB,GAAjB,CAAqB,cAArB,EAAqC,YAArC;IACD;;IAED,MAAM,cAAc,GAAmB,EAAvC;IACA,MAAM,aAAa,GAAkB,EAArC;IAEA,OAAO,IAAI,CAAC,MAAK;MACf,MAAM,OAAO,GAAG,IAAI,gBAAJ,CACZ,KAAK,SADO,EACI,cADJ,EACoB,aADpB,EAEZ,KAAK,mBAFO,CAAhB;MAGA,MAAM,UAAU,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAwB,KAAK,SAA7B,CAAhB;MAEA,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,OAApB,CAA4B,IAAI,IAAG;QACjC,MAAM,CAAC,QAAD,EAAW,KAAX,IAAoB,aAAa,CAAC,IAAD,CAAvC;QACA,MAAM,OAAO,GAAa,EAA1B;QACA,OAAO,CAAC,KAAD,CAAP,GAAiB,MAAM,CAAC,IAAD,CAAvB;QACA,UAAU,CAAC,QAAD,CAAV,GAAuB,OAAvB;MACD,CALD;MAOA,MAAM,aAAa,GAAG,KAAK,kBAAL,CAAwB,UAAxB,CAAtB;MACA,MAAM,+BAA+B,GAA4B,EAAjE;;MACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,YAAY,CAAC,MAAjC,EAAyC,CAAC,EAA1C,EAA8C;QAC5C,MAAM,IAAI,GAAG,YAAY,CAAC,CAAD,CAAzB;;QACA,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAN,CAAf,EAA4B;UAC1B,MAAM,OAAO,GACT,SAAS,CAAC,IAAD,EAAO,UAAP,EAAmB,OAAnB,EAA4B,KAAK,gBAAjC,CADb;;UAGA,IAAI,IAAI,CAAC,SAAL,CAAe,OAAf,CAAJ,EAA6B;YAC3B,MAAM,IAAI,KAAJ,CACF,4BAA4B,IAAI,CAAC,EAAE,wBAAnC,GACA,0CAFE,CAAN;UAGD;;UACD,UAAU,CAAC,IAAI,CAAC,IAAN,CAAV,GAAwB,OAAxB;UACA,KAAK,sBAAL,CACI,IAAI,CAAC,IADT,EACe,IADf,EACqB,UADrB,EACiC,OADjC,EAC0C,aAD1C,EAEI,eAFJ,EAEqB,+BAFrB;QAGD;MACF,CA/Bc,CAgCf;;;MACA,IAAI,KAAK,MAAL,IAAe,IAAnB,EAAyB;QACvB,OAAO,CAAC,OAAR,CAAgB,aAAhB;MACD;;MACD,OAAO,OAAO,CAAC,GAAR,CAAY,IAAI,IAAI,SAAS,CAAC,IAAD,EAAO,UAAP,EAAmB,OAAnB,CAA7B,CAAP;IACD,CArCU,CAAX;EAsCD;;EAEO,kBAAkB,CAAC,SAAD,EAA2B;IACnD,MAAM,GAAG,GAAG,GAAG,MAAH,CAAU,KAAV,CACR,EADQ,EAER,MAAM,CAAC,IAAP,CAAY,SAAZ,EACK,GADL,CACS,GAAG,IAAI,SAAS,CAAC,GAAD,CADzB,EAEK,GAFL,CAES,OAAO,IAAI,OAAO,CAAC,GAAR,CAAY,MAAM,IAAI,MAAM,CAAC,EAA7B,CAFpB,CAFQ,CAAZ;IAKA,OAAO,IAAI,GAAJ,CAAQ,GAAR,CAAP;EACD;;EACO,sBAAsB,CAC1B,QAD0B,EACR,IADQ,EACI,SADJ,EAE1B,OAF0B,EAEC,aAFD,EAG1B,WAH0B,EAI1B,+BAJ0B,EAI8B;IAC1D;IACA;IACA,IAAI,IAAI,CAAC,QAAL,KAAkB,SAAlB,IAA+B,WAAW,CAAC,OAAZ,CAAoB,QAApB,MAAkC,CAAC,CAAtE,EAAyE;MACvE;IACD;;IAED,SAAS,CAAC,QAAD,CAAT,CAAoB,OAApB,CAA4B,MAAM,IAAG;MACnC,IAAI,MAAM,IAAI,IAAd,EAAoB;QAClB,+BAA+B,CAAC,MAAM,CAAC,EAAR,CAA/B,GACI,CAAC,+BAA+B,CAAC,MAAM,CAAC,EAAR,CAA/B,IAA8C,CAA/C,IACA,IAAI,CAAC,QAAL,CAAc,MAFlB;MAGD;IACF,CAND;IAOA,IAAI,CAAC,MAAL,CAAY,OAAZ,CAAoB,KAAK,IAAG;MAC1B;MACA;MACA,IAAI,KAAK,CAAC,QAAN,KAAmB,SAAvB,EAAkC;QAChC,MAAM,OAAO,GACT,4BAA4B,CAAC,KAAK,CAAC,IAAP,EAAa,SAAb,EAAwB,OAAxB,CADhC;;QAEA,IAAI,OAAO,IAAI,IAAf,EAAqB;UACnB,OAAO,CAAC,OAAR,CAAgB,MAAM,IAAG;YACvB,IAAI,MAAM,IAAI,CAAC,MAAM,CAAC,IAAlB,IAA0B,CAAC,aAAa,CAAC,GAAd,CAAkB,MAAM,CAAC,EAAzB,CAA/B,EAA6D;cAC3D,MAAM,KAAK,GAAG,+BAA+B,CAAC,MAAM,CAAC,EAAR,CAA7C;;cACA,IAAI,KAAK,KAAK,CAAd,EAAiB;gBACf,IAAI,CAAC,KAAK,kBAAV,EAA8B;kBAC5B,MAAM,CAAC,OAAP;gBACD,CAFD,MAEO;kBACL,MAAM,CAAC,QAAD,EAAW,KAAX,IACF,mBAAmB,CAAC,IAAI,CAAC,IAAN,EAAY,OAAZ,CADvB;;kBAEA,IAAI,KAAK,mBAAL,CAAyB,QAAzB,CAAJ,EAAwC;oBACtC,KAAK,mBAAL,CAAyB,QAAzB,EAAmC,KAAnC,IAA4C,MAA5C;kBACD,CAFD,MAEO;oBACL,KAAK,mBAAL,CAAyB,QAAzB,IAAqC,EAArC;oBACA,KAAK,mBAAL,CAAyB,QAAzB,EAAmC,KAAnC,IAA4C,MAA5C;kBACD;gBACF;;gBACD,OAAO,+BAA+B,CAAC,MAAM,CAAC,EAAR,CAAtC;cACD,CAdD,MAcO,IAAI,KAAK,IAAI,IAAb,EAAmB;gBACxB;gBACA;gBACA,+BAA+B,CAAC,MAAM,CAAC,EAAR,CAA/B;cACD;YACF;UACF,CAvBD;QAwBD;MACF;IACF,CAjCD;EAkCD;EAED;;;;;;;;AAQG;;;EACe,MAAZ,YAAY,CAAC,MAAD,EAAyB,OAAzB,EAA2C;IAE3D,OAAO,KAAK,aAAL,CAAmB,MAAnB,EAA2B,OAA3B,CAAP;EACD;;EAED,0BAA0B,GAAA;IACxB,IAAI,CAAC,KAAK,mBAAV,EAA+B;MAC7B;IACD;;IACD,MAAM,CAAC,IAAP,CAAY,KAAK,mBAAjB,EACK,OADL,CAEQ,GAAG,IAAI,KAAK,mBAAL,CAAyB,GAAzB,EAA8B,OAA9B,CACH,MAAM,IAAI,MAAM,CAAC,OAAP,EADP,CAFf;IAIA,KAAK,iBAAL;EACD;;EAEO,iBAAiB,GAAA;IACvB,IAAI,CAAC,KAAK,UAAV,EAAsB;MACpB;IACD;;IACD,MAAM,CAAC,IAAP,CAAY,KAAK,UAAjB,EAA6B,OAA7B,CAAqC,GAAG,IAAG;MACzC,MAAM,WAAW,GAAG,KAAK,UAAL,CAAgB,GAAhB,CAApB;MACA,WAAW,CAAC,OAAZ,CAAoB,MAAM,IAAG;QAC3B,IAAI,MAAM,IAAI,CAAC,MAAM,CAAC,IAAlB,IAA0B,CAAC,MAAM,CAAC,UAAlC,IACA,CAAC,KAAK,OAAL,CAAa,GAAb,CAAiB,MAAM,CAAC,EAAxB,CADL,EACkC;UAChC,MAAM,CAAC,OAAP;QACD;MACF,CALD;IAMD,CARD;EASD;;EAED,sBAAsB,GAAA;IACpB,OAAO,KAAK,UAAZ;EACD;;EAEO,wBAAwB,GAAA;IAC9B,KAAK,MAAM,GAAX,IAAkB,KAAK,mBAAvB,EAA4C;MAC1C,KAAK,mBAAL,CAAyB,GAAzB,EAA8B,OAA9B,CAAsC,MAAM,IAAI,MAAM,CAAC,OAAP,EAAhD;MACA,OAAO,KAAK,mBAAL,CAAyB,GAAzB,CAAP;IACD;EACF;EAED;;;;;;;;;;;;;AAaG;;;EACwB,MAAb,aAAa,CACvB,MADuB,EACC,OADD,EAGU;IAAA,IAFW,mBAEX,uEAFiC,KAEjC;IAAA,IADjC,cACiC,uEADA,EACA;IAAA,IAAjC,aAAiC,uEAAF,EAAE;;IACnC,IAAI,CAAC,mBAAL,EAA0B;MACxB,MAAM,GAAG,KAAK,SAAL,CAAe,MAAf,CAAT;MACA,KAAK,WAAL,CAAiB,MAAjB;MACA,KAAK,sBAAL,CAA4B,MAA5B;MACA,OAAO,GAAG,KAAK,UAAL,CAAgB,OAAhB,CAAV;MACA,KAAK,YAAL,CAAkB,OAAlB;IACD,CAPkC,CASnC;;;IACA,IAAI;MACF,KAAK,kBAAL,GAA0B,GAAG,GAAG,OAAN,CAAc,2BAAd,CAA1B;IACD,CAFD,CAEE,OAAO,CAAP,EAAU;MACV,OAAO,CAAC,IAAR,CAAa,CAAC,CAAC,OAAf;IACD;;IACD,KAAK,wBAAL;IAEA,MAAM,OAAO,GAAG,IAAI,gBAAJ,CACZ,KAAK,SADO,EACI,cADJ,EACoB,aADpB,EAEZ,KAAK,mBAFO,CAAhB,CAjBmC,CAqBnC;IACA;IACA;;IACA,KAAK,UAAL,GAAkB,MAAM,KAAK,sBAAL,CACpB,MADoB,EACZ,OADY,EACH,OADG,EACM,mBADN,CAAxB;IAEA,MAAM,OAAO,GACT,OAAO,CAAC,GAAR,CAAY,IAAI,IAAI,SAAS,CAAC,IAAD,EAAO,KAAK,UAAZ,EAAwB,OAAxB,CAA7B,CADJ,CA1BmC,CA6BnC;;IACA,MAAM,SAAS,GAAG,OAAO,CAAC,GAAR,CAAY,CAAC,IAAI,CAAC,CAAC,EAAnB,CAAlB;IACA,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,GAApB,CAAwB,IAAI,IAAI,MAAM,CAAC,IAAD,CAAN,CAAa,EAA7C,CAAjB;IACA,KAAK,OAAL,GACI,IAAI,GAAJ,CAAgB,CAAC,GAAG,SAAJ,EAAe,GAAG,QAAlB,EAA4B,GAAG,KAAK,SAApC,CAAhB,CADJ;;IAEA,IAAI,CAAC,KAAK,kBAAV,EAA8B;MAC5B,KAAK,iBAAL;IACD,CApCkC,CAsCnC;;;IACA,IAAI,KAAK,MAAL,IAAe,IAAnB,EAAyB;MACvB,OAAO,CAAC,OAAR,CAAgB,KAAK,OAArB;IACD;;IAED,OAAO,OAAP;EACD;;EAEyB,MAApB,oBAAoB,CACtB,MADsB,EACJ,cADI,EAEtB,aAFsB,EAEM;IAC9B,MAAM,YAAY,GAAG,MAAM,CAAC,MAAP,CAAc,CAAC,GAAD,EAAM,MAAN,EAAc,KAAd,KAAuB;MACxD,GAAG,CAAC,KAAK,MAAL,CAAY,KAAZ,EAAmB,IAApB,CAAH,GAA+B,MAA/B;MACA,OAAO,GAAP;IACD,CAHoB,EAGlB,EAHkB,CAArB;IAKA,OAAO,KAAK,aAAL,CACH,YADG,EACW,KAAK,WADhB,EAC6B,IAD7B,EACmC,cADnC,EACmD,aADnD,CAAP;EAED;EAED;;;;;;;;;;AAUG;;;EACiC,MAAtB,sBAAsB,CAChC,MADgC,EACR,OADQ,EACmB,WADnB,EAEhC,mBAFgC,EAEH;IAC/B,MAAM,KAAK,GAAG,MAAM,CAAC,IAAP,CAAY,MAAZ,CAAd;IACA,MAAM,UAAU,GACZ,KAAK,CAAC,GAAN,CAAU,IAAI,IAAI,KAAK,KAAL,CAAW,KAAX,CAAiB,aAAa,CAAC,IAAD,CAAb,CAAoB,CAApB,CAAjB,CAAlB,CADJ;IAEA,MAAM,eAAe,GAAG,WAAW,CAAC,GAAZ,CAAgB,IAAI,IAAI,aAAa,CAAC,IAAD,CAAb,CAAoB,CAApB,CAAxB,CAAxB;IACA,IAAI,WAAW,GAAG,eAAe,CAAC,GAAhB,CAAoB,IAAI,IAAI,KAAK,KAAL,CAAW,KAAX,CAAiB,IAAjB,CAA5B,CAAlB,CAL+B,CAO/B;;IACA,IAAI,WAAW,CAAC,MAAZ,KAAuB,CAA3B,EAA8B;MAC5B,WAAW,GAAG,KAAK,QAAnB;IACD;;IAED,MAAM;MAAC,SAAD;MAAY,aAAZ;MAA2B,WAA3B;MAAwC;IAAxC,IACF,oBAAoB,CAChB,MADgB,EACR,WADQ,EACK,KAAK,SADV,EACqB,KAAK,UAD1B,CADxB,CAZ+B,CAgB/B;;IACA,MAAM,KAAK,GAAuB,CAChC,GAAG,UAD6B,EACjB,GAAG,KAAK,KAAL,CAAW,OADG,EACM,IAAI,KAAK,UAAL,IAAmB,EAAvB,CADN,EAEhC,GAFgC,CAE5B,IAAI,IAAG;MACX,OAAO;QAAC,IAAD;QAAO,QAAQ,EAAE,OAAO,CAAC;MAAzB,CAAP;IACD,CAJiC,CAAlC;IAKA,MAAM,UAAU,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAwB,KAAK,SAA7B,CAAhB;IACA,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,OAApB,CAA4B,IAAI,IAAG;MACjC,MAAM,CAAC,QAAD,EAAW,KAAX,IAAoB,aAAa,CAAC,IAAD,CAAvC;MACA,MAAM,OAAO,GAAa,EAA1B;MACA,OAAO,CAAC,KAAD,CAAP,GAAiB,MAAM,CAAC,IAAD,CAAvB;MACA,UAAU,CAAC,QAAD,CAAV,GAAuB,OAAvB;IACD,CALD;IAMA,MAAM,+BAA+B,GAA4B,EAAjE;IACA,MAAM,aAAa,GAAG,KAAK,kBAAL,CAAwB,UAAxB,CAAtB;IACA,MAAM,KAAK,GAA6B,EAAxC;;IACA,OAAO,KAAK,CAAC,MAAN,GAAe,CAAtB,EAAyB;MACvB,MAAM,QAAQ,GAAG,KAAK,YAAL,CACb,UADa,EACD,KADC,EACM,OADN,EACe,UADf,EAC2B,KAD3B,EACkC,aADlC,EAEb,eAFa,EAEI,+BAFJ,EAEqC,SAFrC,CAAjB;MAGA,MAAM,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAN;IACD;;IACD,IAAI,WAAW,IAAI,IAAf,IAAuB,CAAC,mBAA5B,EAAiD;MAC/C,OAAO,CAAC,IAAR,CACI,mEAAA,GACA,gEAFJ;IAGD;;IACD,MAAM,cAAc,GAChB,WAAW,CACN,MADL,CAEQ,IAAI,IAAI,CAAC,aAAa,CAAC,IAAD,CAAd,IACJ,CAAC,SAAS,CAAC,IAAI,CAAC,IAAN,EAAY,UAAZ,EAAwB,OAAxB,CAHtB,EAIK,GAJL,CAIS,IAAI,IAAI,IAAI,CAAC,IAJtB,CADJ;;IAMA,IAAI,cAAc,CAAC,MAAf,GAAwB,CAA5B,EAA+B;MAC7B,IAAI,cAAc,GAAG,EAArB;;MACA,IAAI,WAAW,IAAI,IAAnB,EAAyB;QACvB,cAAc,GACV,+DAAA,GACA,2BAA2B,UAAU,GAFzC;MAGD;;MACD,MAAM,IAAI,KAAJ,CACF,+BAA+B,cAAc,sBAA7C,GACA,WAAW,KAAK,8CADhB,GAEA,IAAI,aAAa,MAAM,cAAc,EAHnC,CAAN;IAID;;IACD,OAAO,UAAP;EACD;;EAEO,YAAY,CAChB,UADgB,EACI,KADJ,EAC+B,OAD/B,EAEhB,SAFgB,EAEY,KAFZ,EAGhB,aAHgB,EAGY,WAHZ,EAIhB,+BAJgB,EAKhB,SALgB,EAKM;IACxB,MAAM,QAAQ,GAA6B,EAA3C;;IACA,OAAO,KAAK,CAAC,MAAN,GAAe,CAAtB,EAAyB;MACvB,MAAM,IAAI,GAAG,KAAK,CAAC,GAAN,EAAb;MACA,OAAO,CAAC,cAAR,GAAyB,IAAI,CAAC,QAA9B;MACA,IAAI,QAAQ,GAAG,EAAf,CAHuB,CAIvB;MACA;MACA;;MACA,IAAI,IAAI,CAAC,IAAL,CAAU,EAAV,KAAiB,OAAjB,IACA,aAAa,CAAC,YAAD,EAAe,IAAI,CAAC,IAApB,EAA0B,SAA1B,EAAqC,OAArC,CADjB,EACgE;QAC9D,CAAC,QAAD,IAAa,mBAAmB,CAAC,IAAI,CAAC,IAAL,CAAU,IAAX,EAAiB,OAAjB,CAAhC;MACD,CAVsB,CAYvB;MACA;;;MACA,IAAI,SAAS,CAAC,IAAI,CAAC,IAAL,CAAU,IAAX,CAAT,IAA6B,IAAjC,EAAuC;QACrC,MAAM,OAAO,GACT,SAAS,CAAC,IAAI,CAAC,IAAN,EAAY,SAAZ,EAAuB,OAAvB,EAAgC,KAAK,gBAArC,CADb;;QAEA,IAAI,CAAC,QAAL,EAAe;UACb,CAAC,QAAD,IAAa,mBAAmB,CAAC,IAAI,CAAC,IAAL,CAAU,IAAX,EAAiB,OAAjB,CAAhC;QACD;;QACD,MAAM,cAAc,GAAG,OAAO,CAAC,cAA/B;;QACA,IAAI,IAAI,CAAC,SAAL,CAAe,OAAf,CAAJ,EAA6B;UAC3B,QAAQ,CAAC,IAAT,CAAc,OAAO,CAAC,IAAR,CAAa,CAAC,IAAG;YAC7B,SAAS,CAAC,QAAD,CAAT,GAAsB,CAAtB;YACA,OAAO,CAAC,cAAR,GAAyB,cAAzB;YACA,KAAK,sBAAL,CACI,QADJ,EACc,IAAI,CAAC,IADnB,EACyB,SADzB,EACoC,OADpC,EAC6C,aAD7C,EAEI,WAFJ,EAEiB,+BAFjB;YAGA,KAAK,iBAAL,CACI,IAAI,CAAC,IADT,EACe,KADf,EACsB,OADtB,EAC+B,SAD/B,EAC0C,KAD1C,EACiD,SADjD;YAEA,OAAO,CAAP;UACD,CATa,CAAd;QAUD,CAXD,MAWO;UACL,SAAS,CAAC,QAAD,CAAT,GAAsB,OAAtB;UACA,KAAK,sBAAL,CACI,QADJ,EACc,IAAI,CAAC,IADnB,EACyB,SADzB,EACoC,OADpC,EAC6C,aAD7C,EAEI,WAFJ,EAEiB,+BAFjB;UAGA,KAAK,iBAAL,CACI,IAAI,CAAC,IADT,EACe,KADf,EACsB,OADtB,EAC+B,SAD/B,EAC0C,KAD1C,EACiD,SADjD;QAED;MACF,CA1BD,MA0BO;QACL,KAAK,iBAAL,CACI,IAAI,CAAC,IADT,EACe,KADf,EACsB,OADtB,EAC+B,SAD/B,EAC0C,KAD1C,EACiD,SADjD;MAED;IACF;;IACD,OAAO,QAAP;EACD;;EAEO,iBAAiB,CACrB,IADqB,EACT,KADS,EACkB,OADlB,EAErB,SAFqB,EAEO,KAFP,EAGrB,SAHqB,EAGC;IACxB,IAAI,CAAC,QAAL,CAAc,OAAd,CAAuB,SAAD,IAAc;MAClC,MAAM,CAAC,QAAD,IAAe,mBAAmB,CAAC,SAAS,CAAC,IAAX,EAAiB,OAAjB,CAAxC;;MACA,IAAI,KAAK,CAAC,QAAD,CAAL,IAAmB,CAAC,SAAS,CAAC,GAAV,CAAc,SAAS,CAAC,IAAxB,CAAxB,EAAuD;QACrD;MACD,CAJiC,CAKlC;;;MACA,IAAI,SAAS,CAAC,EAAV,KAAiB,OAArB,EAA8B;QAC5B,IAAI,SAAS,CAAC,UAAV,CAAqB,IAArB,CAA0B,IAAI,IAAG;UAC/B,OAAO,CAAC,CAAC,SAAS,CAAC,IAAD,EAAO,SAAP,EAAkB,OAAlB,CAAlB;QACD,CAFD,CAAJ,EAEQ;UACN,KAAK,CAAC,QAAD,CAAL,GAAkB,IAAlB;UACA,KAAK,CAAC,IAAN,CAAW;YAAC,QAAQ,EAAE,OAAO,CAAC,cAAnB;YAAmC,IAAI,EAAE;UAAzC,CAAX;QACD;MACF,CAPD,MAOQ;QACJ,IAAI,SAAS,CAAC,UAAV,CAAqB,KAArB,CAA2B,IAAI,IAAG;UAChC,OAAO,CAAC,CAAC,SAAS,CAAC,IAAD,EAAO,SAAP,EAAkB,OAAlB,CAAlB;QACD,CAFD,CAAJ,EAEQ;UACV,KAAK,CAAC,QAAD,CAAL,GAAkB,IAAlB;UACA,KAAK,CAAC,IAAN,CAAW;YAAC,QAAQ,EAAE,OAAO,CAAC,cAAnB;YAAmC,IAAI,EAAE;UAAzC,CAAX;QACD;IACF,CApBD;EAqBD;EAED;;AAEG;;;EACH,OAAO,GAAA;IACL,MAAM,CAAC,IAAP,CAAY,KAAK,SAAjB,EACK,OADL,CAEQ,GAAG,IAAI,KAAK,SAAL,CAAe,GAAf,EAAoB,OAApB,CAA4B,MAAM,IAAI,MAAM,CAAC,OAAP,EAAtC,CAFf;EAGD;;EAEO,sBAAsB,CAAC,MAAD,EAAuB;IACnD,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,OAApB,CAA4B,IAAI,IAAG;MACjC,MAAM,KAAK,GAAG,MAAM,CAAC,IAAD,CAApB;MACA,MAAM,CAAC,QAAD,IAAe,aAAa,CAAC,IAAD,CAAlC;MACA,MAAM,IAAI,GAAG,KAAK,KAAL,CAAW,KAAX,CAAiB,QAAjB,CAAb;;MACA,IAAI,IAAI,CAAC,UAAL,CAAgB,OAAhB,KAA4B,IAAI,CAAC,UAAL,CAAgB,OAAhB,EAAyB,KAAzD,EAAgE;QAC9D,MAAM,KAAK,GAAG,IAAI,CAAC,UAAL,CAAgB,OAAhB,EAAyB,KAAvC;QACA,MAAM,KAAK,GAAG,KAAK,CAAC,MAAN,KAAiB,KAAK,CAAC,KAAN,CAAY,MAA7B,IACV,KAAK,CAAC,KAAN,CAAY,KAAZ,CACI,CAAC,GAAD,EAAM,KAAN,KAAgB,KAAK,CAAC,KAAD,CAAL,KAAiB,CAAC,CAAlB,IAAuB,KAAK,CAAC,KAAD,CAAL,KAAiB,GAD5D,CADJ;QAGA,IAAI,CAAC,MAAL,CACI,KADJ,EAEI,MAAM,sBAAsB,IAAI,CAAC,IAAI,iBAA/B,GACF,gCAAgC,KAAK,aADnC,GAEF,IAAI,KAAK,CAAC,KAAK,GAJvB;MAKD;;MACD,IAAI,IAAI,CAAC,UAAL,CAAgB,OAAhB,KAA4B,IAAI,CAAC,UAAL,CAAgB,OAAhB,EAAyB,KAAzD,EAAgE;QAC9D,IAAI,CAAC,MAAL,CACI,KAAK,CAAC,KAAN,KAAgB,IAAI,CAAC,UAAL,CAAgB,OAAhB,EAAyB,KAD7C,EAEI,MAAM,sBAAsB,IAAI,CAAC,IAAI,iBAA/B,GACF,8BADE,GAEF,GAAG,IAAI,CAAC,UAAL,CAAgB,OAAhB,EAAyB,KAAK,aAAa,KAAK,CAAC,KAAK,EAJjE;MAKD;IACF,CAtBD;EAuBD;;EAEO,SAAS,CAAC,MAAD,EAAuB;IACtC,MAAM,MAAM,GAAmB,EAA/B;;IACA,KAAK,MAAM,SAAX,IAAwB,MAAxB,EAAgC;MAC9B,IAAI,KAAK,UAAL,IAAmB,IAAnB,IAA2B,KAAK,UAAL,CAAgB,MAAhB,IAA0B,IAArD,IACA,KAAK,UAAL,CAAgB,MAAhB,CAAuB,SAAvB,KAAqC,IADzC,EAC+C;QAC7C,MAAM,MAAM,GAAG,KAAK,UAAL,CAAgB,MAAhB,CAAuB,SAAvB,CAAf;QACA,MAAM,CAAC,MAAM,CAAC,IAAR,CAAN,GAAsB,MAAM,CAAC,SAAD,CAA5B;MACD,CAJD,MAIO;QACL,MAAM,CAAC,SAAD,CAAN,GAAoB,MAAM,CAAC,SAAD,CAA1B;MACD;IACF;;IACD,OAAO,MAAP;EACD;;EAEO,WAAW,CAAC,MAAD,EAAuB;IACxC,MAAM,UAAU,GAAG,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,MAApB,CAA2B,IAAI,IAAG;MACnD,MAAM,CAAC,QAAD,IAAa,aAAa,CAAC,IAAD,CAAhC;MACA,OAAO,KAAK,KAAL,CAAW,KAAX,CAAiB,QAAjB,KAA8B,IAArC;IACD,CAHkB,CAAnB;;IAIA,IAAI,UAAU,CAAC,MAAX,GAAoB,CAAxB,EAA2B;MACzB,MAAM,IAAI,KAAJ,CACF,+CAAA,GACA,UAAU,UAAU,8BAFlB,CAAN;IAGD;EACF;;EAEO,UAAU,CAAC,OAAD,EAAkB;IAClC,OAAO,OAAO,CAAC,GAAR,CAAY,IAAI,IAAG;MACxB,IAAI,KAAK,UAAL,IAAmB,IAAnB,IAA2B,KAAK,UAAL,CAAgB,OAAhB,IAA2B,IAAtD,IACA,KAAK,UAAL,CAAgB,OAAhB,CAAwB,IAAxB,KAAiC,IADrC,EAC2C;QACzC,MAAM,MAAM,GAAG,KAAK,UAAL,CAAgB,OAAhB,CAAwB,IAAxB,CAAf;QACA,OAAO,MAAM,CAAC,IAAd;MACD;;MACD,OAAO,IAAP;IACD,CAPM,EAOJ,EAPI,CAAP;EAQD;;EAEO,YAAY,CAAC,OAAD,EAAkB;IACpC,OAAO,CAAC,OAAR,CAAgB,IAAI,IAAG;MACrB,MAAM,CAAC,cAAD,IAAmB,aAAa,CAAC,IAAD,CAAtC;;MACA,IAAI,CAAC,KAAK,KAAL,CAAW,KAAX,CAAiB,cAAjB,CAAL,EAAuC;QACrC,MAAM,IAAI,KAAJ,CAAU,eAAe,IAAI,6BAA7B,CAAN;MACD;IACF,CALD;EAMD;;AA7oBuB","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, env, NamedTensorMap, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {ISignatureDef} from '../data/compiled_api';\nimport {NamedTensorsMap, TensorArrayMap, TensorInfo, TensorListMap} from '../data/types';\nimport {getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContenxt, parseNodeName} from '../operations/executors/utils';\nimport {executeOp} from '../operations/operation_executor';\nimport {Graph, Node} from '../operations/types';\n\nimport {ExecutionContext, ExecutionContextInfo} from './execution_context';\nimport {getExecutionSubgraph, getNodesInTopologicalOrder, isControlFlow} from './model_analysis';\nimport {ResourceManager} from './resource_manager';\nimport {FunctionExecutor} from './types';\n\ninterface NodeWithContexts {\n  contexts: ExecutionContextInfo[];\n  node: Node;\n}\n\nexport class GraphExecutor implements FunctionExecutor {\n  private compiledMap: Map<string, Node[]> = new Map();\n  private _weightMap: NamedTensorsMap = {};\n  private _weightIds: number[];\n  private _signature: ISignatureDef;\n  private _inputs: Node[];\n  private _outputs: Node[];\n  private _initNodes: Node[];  // Internal init nodes to start initialization.\n  private SEPERATOR = ',';\n  private _functions: {[key: string]: Graph} = {};\n  private _functionExecutorMap: {[key: string]: FunctionExecutor} = {};\n  private _resourceManager: ResourceManager;\n  private intermediateTensors: NamedTensorsMap = {};\n  private keepIds: Set<number>;\n  private tensorsMap: NamedTensorsMap;\n  private keepTensorForDebug = false;\n\n  get weightIds(): number[] {\n    return this.parent ? this.parent.weightIds : this._weightIds;\n  }\n\n  get functionExecutorMap(): {[key: string]: FunctionExecutor} {\n    return this.parent ? this.parent.functionExecutorMap :\n                         this._functionExecutorMap;\n  }\n\n  get weightMap(): NamedTensorsMap {\n    return this.parent ? this.parent.weightMap : this._weightMap;\n  }\n\n  set weightMap(weightMap: NamedTensorsMap) {\n    const weightIds = Object.keys(weightMap).map(\n        key => weightMap[key].map(tensor => tensor.id));\n    this._weightIds = [].concat(...weightIds);\n    this._weightMap = weightMap;\n  }\n\n  /**\n   * Set `ResourceManager` shared by executors of a model.\n   * @param resourceManager: `ResourceManager` of the `GraphModel`.\n   */\n  set resourceManager(resourceManager: ResourceManager) {\n    this._resourceManager = resourceManager;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this._inputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get outputs(): TensorInfo[] {\n    return this._outputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get inputNodes(): string[] {\n    return this._inputs.map(node => node.signatureKey || node.name);\n  }\n\n  get outputNodes(): string[] {\n    return this._outputs.map((node) => {\n      const name = node.signatureKey || node.name;\n      return node.defaultOutput ? (`${name}:${node.defaultOutput}`) : name;\n    });\n  }\n\n  get functions(): {[key: string]: ISignatureDef} {\n    return Object.keys(this._functions).reduce((map, key) => {\n      map[key] = this._functions[key].signature;\n      return map;\n    }, {} as {[key: string]: ISignatureDef});\n  }\n\n  /**\n   *\n   * @param graph Graph the model or function graph to be executed.\n   * @param parent When building function exector you need to set the parent\n   * executor. Since the weights and function executor maps are set at parant\n   * level, that function executor can access the function maps and weight maps\n   * through the parent.\n   */\n  constructor(private graph: Graph, private parent?: GraphExecutor) {\n    this._outputs = graph.outputs;\n    this._inputs = graph.inputs;\n    this._initNodes = graph.initNodes;\n    this._signature = graph.signature;\n    this._functions = graph.functions;\n    // create sub-graph executors\n    if (graph.functions != null) {\n      Object.keys(graph.functions).forEach(name => {\n        this._functionExecutorMap[name] =\n            new GraphExecutor(graph.functions[name], this);\n      });\n    }\n  }\n\n  private getCompilationKey(inputs: Node[], outputs: Node[]): string {\n    const sortedInputs = inputs.map(node => node.name).sort();\n    const sortedOutputs = outputs.map(node => node.name).sort();\n    return sortedInputs.join(this.SEPERATOR) + '--' +\n        sortedOutputs.join(this.SEPERATOR);\n  }\n\n  /**\n   * Compiles the inference graph and returns the minimal set of nodes that are\n   * required for execution, in the correct execution order.\n   */\n  private compile(inputs: NamedTensorMap, outputs: Node[]): Node[] {\n    const executionInfo =\n        getExecutionSubgraph(inputs, outputs, this.weightMap, this._initNodes);\n    const {missingInputs, dynamicNode, syncInputs} = executionInfo;\n    if (dynamicNode != null) {\n      throw new Error(\n          `This execution contains the node '${dynamicNode.name}', which has ` +\n          `the dynamic op '${dynamicNode.op}'. Please use ` +\n          `model.executeAsync() instead. Alternatively, to avoid the ` +\n          `dynamic ops, specify the inputs [${syncInputs}]`);\n    }\n\n    if (missingInputs.length > 0) {\n      const outNames = outputs.map(n => n.name);\n      const inNames = Object.keys(inputs);\n      throw new Error(\n          `Cannot compute the outputs [${outNames}] from the provided inputs ` +\n          `[${inNames}]. Missing the following inputs: [${missingInputs}]`);\n    }\n\n    return getNodesInTopologicalOrder(\n        this.graph, this.weightMap, executionInfo);\n  }\n\n  /**\n   * Executes the inference for given input tensors.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs Optional. output node name from the Tensorflow model, if\n   * no outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   */\n  execute(inputs: NamedTensorMap, outputs?: string[]): Tensor[] {\n    inputs = this.mapInputs(inputs);\n    const names = Object.keys(inputs).sort();\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    outputs = this.mapOutputs(outputs);\n    this.checkOutputs(outputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputs.map(name => parseNodeName(name)[0]);\n    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n    this.resetIntermediateTensors();\n    // If no outputs are specified, then use the default outputs of the model.\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n\n    const compilationKey = this.getCompilationKey(inputNodes, outputNodes);\n\n    // Do nothing if the compiled graph cache contains the input.\n    let orderedNodes = this.compiledMap.get(compilationKey);\n    if (orderedNodes == null) {\n      orderedNodes = this.compile(inputs, outputNodes);\n      this.compiledMap.set(compilationKey, orderedNodes);\n    }\n\n    const tensorArrayMap: TensorArrayMap = {};\n    const tensorListMap: TensorListMap = {};\n\n    return tidy(() => {\n      const context = new ExecutionContext(\n          this.weightMap, tensorArrayMap, tensorListMap,\n          this.functionExecutorMap);\n      const tensorsMap: NamedTensorsMap = {...this.weightMap};\n\n      Object.keys(inputs).forEach(name => {\n        const [nodeName, index] = parseNodeName(name);\n        const tensors: Tensor[] = [];\n        tensors[index] = inputs[name];\n        tensorsMap[nodeName] = tensors;\n      });\n\n      const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n      const intermediateTensorConsumerCount: {[key: number]: number} = {};\n      for (let i = 0; i < orderedNodes.length; i++) {\n        const node = orderedNodes[i];\n        if (!tensorsMap[node.name]) {\n          const tensors =\n              executeOp(node, tensorsMap, context, this._resourceManager) as\n              Tensor[];\n          if (util.isPromise(tensors)) {\n            throw new Error(\n                `The execution of the op '${node.op}' returned a promise. ` +\n                `Please use model.executeAsync() instead.`);\n          }\n          tensorsMap[node.name] = tensors;\n          this.checkTensorForDisposal(\n              node.name, node, tensorsMap, context, tensorsToKeep,\n              outputNodeNames, intermediateTensorConsumerCount);\n        }\n      }\n      // dispose the context for the root executor\n      if (this.parent == null) {\n        context.dispose(tensorsToKeep);\n      }\n      return outputs.map(name => getTensor(name, tensorsMap, context));\n    });\n  }\n\n  private getFrozenTensorIds(tensorMap: NamedTensorsMap): Set<number> {\n    const ids = [].concat.apply(\n        [],\n        Object.keys(tensorMap)\n            .map(key => tensorMap[key])\n            .map(tensors => tensors.map(tensor => tensor.id)));\n    return new Set(ids);\n  }\n  private checkTensorForDisposal(\n      nodeName: string, node: Node, tensorMap: NamedTensorsMap,\n      context: ExecutionContext, tensorsToKeep: Set<number>,\n      outputNames: string[],\n      intermediateTensorConsumerCount: {[key: string]: number}) {\n    // Skip output nodes and any control flow nodes, since its dependency is\n    // tricky to track correctly.\n    if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {\n      return;\n    }\n\n    tensorMap[nodeName].forEach(tensor => {\n      if (tensor != null) {\n        intermediateTensorConsumerCount[tensor.id] =\n            (intermediateTensorConsumerCount[tensor.id] || 0) +\n            node.children.length;\n      }\n    });\n    node.inputs.forEach(input => {\n      // Skip any control flow nodes, since its dependency is tricky to track\n      // correctly.\n      if (input.category !== 'control') {\n        const tensors =\n            getTensorsForCurrentContenxt(input.name, tensorMap, context);\n        if (tensors != null) {\n          tensors.forEach(tensor => {\n            if (tensor && !tensor.kept && !tensorsToKeep.has(tensor.id)) {\n              const count = intermediateTensorConsumerCount[tensor.id];\n              if (count === 1) {\n                if (!this.keepTensorForDebug) {\n                  tensor.dispose();\n                } else {\n                  const [nodeName, index] =\n                      getNodeNameAndIndex(node.name, context);\n                  if (this.intermediateTensors[nodeName]) {\n                    this.intermediateTensors[nodeName][index] = tensor;\n                  } else {\n                    this.intermediateTensors[nodeName] = [];\n                    this.intermediateTensors[nodeName][index] = tensor;\n                  }\n                }\n                delete intermediateTensorConsumerCount[tensor.id];\n              } else if (count != null) {\n                // only intermediate nodes has count set, inputs and weights are\n                // not.\n                intermediateTensorConsumerCount[tensor.id]--;\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  async executeAsync(inputs: NamedTensorMap, outputs?: string[]):\n      Promise<Tensor[]> {\n    return this._executeAsync(inputs, outputs);\n  }\n\n  disposeIntermediateTensors() {\n    if (!this.intermediateTensors) {\n      return;\n    }\n    Object.keys(this.intermediateTensors)\n        .forEach(\n            key => this.intermediateTensors[key].forEach(\n                tensor => tensor.dispose()));\n    this.disposeTensorsMap();\n  }\n\n  private disposeTensorsMap() {\n    if (!this.tensorsMap) {\n      return;\n    }\n    Object.keys(this.tensorsMap).forEach(key => {\n      const tensorArray = this.tensorsMap[key];\n      tensorArray.forEach(tensor => {\n        if (tensor && !tensor.kept && !tensor.isDisposed &&\n            !this.keepIds.has(tensor.id)) {\n          tensor.dispose();\n        }\n      });\n    });\n  }\n\n  getIntermediateTensors(): NamedTensorsMap {\n    return this.tensorsMap;\n  }\n\n  private resetIntermediateTensors() {\n    for (const key in this.intermediateTensors) {\n      this.intermediateTensors[key].forEach(tensor => tensor.dispose());\n      delete this.intermediateTensors[key];\n    }\n  }\n\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs Optional. output node name from the Tensorflow model,\n   * if no outputs are specified, the default outputs of the model would be\n   * used. You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   * @param isFunctionExecution Optional. Flag for executing a function.\n   * @param tensorArrayMap Optional, global TensorArray map by id. Used for\n   * function execution.\n   * @param tensorArrayMap Optinal global TensorList map by id. Used for\n   * function execution.\n   */\n  private async _executeAsync(\n      inputs: NamedTensorMap, outputs?: string[], isFunctionExecution = false,\n      tensorArrayMap: TensorArrayMap = {},\n      tensorListMap: TensorListMap = {}): Promise<Tensor[]> {\n    if (!isFunctionExecution) {\n      inputs = this.mapInputs(inputs);\n      this.checkInputs(inputs);\n      this.checkInputShapeAndType(inputs);\n      outputs = this.mapOutputs(outputs);\n      this.checkOutputs(outputs);\n    }\n\n    // For model debug.\n    try {\n      this.keepTensorForDebug = env().getBool('KEEP_INTERMEDIATE_TENSORS');\n    } catch (e) {\n      console.warn(e.message);\n    }\n    this.resetIntermediateTensors();\n\n    const context = new ExecutionContext(\n        this.weightMap, tensorArrayMap, tensorListMap,\n        this.functionExecutorMap);\n\n    // Graph with control flow op requires runtime evaluation of the execution\n    // order, while without control flow the execution order is pre-determined\n    // in the compile method.\n    this.tensorsMap = await this.executeWithControlFlow(\n        inputs, context, outputs, isFunctionExecution);\n    const results =\n        outputs.map(name => getTensor(name, this.tensorsMap, context));\n\n    // dispose all the intermediate tensors\n    const outputIds = results.map(t => t.id);\n    const inputIds = Object.keys(inputs).map(name => inputs[name].id);\n    this.keepIds =\n        new Set<number>([...outputIds, ...inputIds, ...this.weightIds]);\n    if (!this.keepTensorForDebug) {\n      this.disposeTensorsMap();\n    }\n\n    // dispose the context for the root executor\n    if (this.parent == null) {\n      context.dispose(this.keepIds);\n    }\n\n    return results;\n  }\n\n  async executeFunctionAsync(\n      inputs: Tensor[], tensorArrayMap: TensorArrayMap,\n      tensorListMap: TensorListMap): Promise<Tensor[]> {\n    const mappedInputs = inputs.reduce((map, tensor, index) => {\n      map[this.inputs[index].name] = tensor;\n      return map;\n    }, {} as NamedTensorMap);\n\n    return this._executeAsync(\n        mappedInputs, this.outputNodes, true, tensorArrayMap, tensorListMap);\n  }\n\n  /**\n   * When there are control flow nodes in the graph, the graph execution use\n   * ExecutionContext to keep track of the frames and loop iterators.\n   * @param inputs placeholder tensors for the graph.\n   * @param context the execution context object for current execution.\n   * @param outputNames Optional. output node name from the Tensorflow model,\n   * if no outputs are specified, the default outputs of the model would be\n   * used. You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   * @param isFunctionExecution Flag for executing a function.\n   */\n  private async executeWithControlFlow(\n      inputs: NamedTensorMap, context: ExecutionContext, outputNames?: string[],\n      isFunctionExecution?: boolean): Promise<NamedTensorsMap> {\n    const names = Object.keys(inputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputNames.map(name => parseNodeName(name)[0]);\n    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n\n    // If no outputs are specified, then use the default outputs of the model.\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n\n    const {usedNodes, missingInputs, dynamicNode, syncInputs} =\n        getExecutionSubgraph(\n            inputs, outputNodes, this.weightMap, this._initNodes);\n\n    // First nodes to execute include inputNodes, weights, and initNodes.\n    const stack: NodeWithContexts[] = [\n      ...inputNodes, ...this.graph.weights, ...(this._initNodes || [])\n    ].map(node => {\n      return {node, contexts: context.currentContext};\n    });\n    const tensorsMap: NamedTensorsMap = {...this.weightMap};\n    Object.keys(inputs).forEach(name => {\n      const [nodeName, index] = parseNodeName(name);\n      const tensors: Tensor[] = [];\n      tensors[index] = inputs[name];\n      tensorsMap[nodeName] = tensors;\n    });\n    const intermediateTensorConsumerCount: {[key: number]: number} = {};\n    const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n    const added: {[key: string]: boolean} = {};\n    while (stack.length > 0) {\n      const promises = this.processStack(\n          inputNodes, stack, context, tensorsMap, added, tensorsToKeep,\n          outputNodeNames, intermediateTensorConsumerCount, usedNodes);\n      await Promise.all(promises);\n    }\n    if (dynamicNode == null && !isFunctionExecution) {\n      console.warn(\n          `This model execution did not contain any nodes with control flow ` +\n          `or dynamic output shapes. You can use model.execute() instead.`);\n    }\n    const missingOutputs =\n        outputNodes\n            .filter(\n                node => !isControlFlow(node) &&\n                    !getTensor(node.name, tensorsMap, context))\n            .map(node => node.name);\n    if (missingOutputs.length > 0) {\n      let alternativeMsg = '';\n      if (dynamicNode != null) {\n        alternativeMsg =\n            `Alternatively, to avoid the dynamic ops, use model.execute() ` +\n            `and specify the inputs [${syncInputs}]`;\n      }\n      throw new Error(\n          `Cannot compute the outputs [${missingOutputs}] from the provided ` +\n          `inputs [${names}]. Consider providing the following inputs: ` +\n          `[${missingInputs}]. ${alternativeMsg}`);\n    }\n    return tensorsMap;\n  }\n\n  private processStack(\n      inputNodes: Node[], stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      tensorsToKeep: Set<number>, outputNames: string[],\n      intermediateTensorConsumerCount: {[key: number]: number},\n      usedNodes: Set<string>) {\n    const promises: Array<Promise<Tensor[]>> = [];\n    while (stack.length > 0) {\n      const item = stack.pop();\n      context.currentContext = item.contexts;\n      let nodeName = '';\n      // The tensor of the Enter op with isConstant set should be set\n      // in the parent scope, so it will be available as constant for the\n      // whole loop.\n      if (item.node.op === 'Enter' &&\n          getParamValue('isConstant', item.node, tensorMap, context)) {\n        [nodeName] = getNodeNameAndIndex(item.node.name, context);\n      }\n\n      // only process nodes that are not in the tensorMap yet, this include\n      // inputNodes and internal initNodes.\n      if (tensorMap[item.node.name] == null) {\n        const tensors =\n            executeOp(item.node, tensorMap, context, this._resourceManager);\n        if (!nodeName) {\n          [nodeName] = getNodeNameAndIndex(item.node.name, context);\n        }\n        const currentContext = context.currentContext;\n        if (util.isPromise(tensors)) {\n          promises.push(tensors.then(t => {\n            tensorMap[nodeName] = t;\n            context.currentContext = currentContext;\n            this.checkTensorForDisposal(\n                nodeName, item.node, tensorMap, context, tensorsToKeep,\n                outputNames, intermediateTensorConsumerCount);\n            this.processChildNodes(\n                item.node, stack, context, tensorMap, added, usedNodes);\n            return t;\n          }));\n        } else {\n          tensorMap[nodeName] = tensors;\n          this.checkTensorForDisposal(\n              nodeName, item.node, tensorMap, context, tensorsToKeep,\n              outputNames, intermediateTensorConsumerCount);\n          this.processChildNodes(\n              item.node, stack, context, tensorMap, added, usedNodes);\n        }\n      } else {\n        this.processChildNodes(\n            item.node, stack, context, tensorMap, added, usedNodes);\n      }\n    }\n    return promises;\n  }\n\n  private processChildNodes(\n      node: Node, stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      usedNodes: Set<string>) {\n    node.children.forEach((childNode) => {\n      const [nodeName, ] = getNodeNameAndIndex(childNode.name, context);\n      if (added[nodeName] || !usedNodes.has(childNode.name)) {\n        return;\n      }\n      // Merge op can be pushed if any of its inputs has value.\n      if (childNode.op === 'Merge') {\n        if (childNode.inputNames.some(name => {\n              return !!getTensor(name, tensorMap, context);\n            })) {\n          added[nodeName] = true;\n          stack.push({contexts: context.currentContext, node: childNode});\n        }\n      } else  // Otherwise all inputs must to have value.\n          if (childNode.inputNames.every(name => {\n                return !!getTensor(name, tensorMap, context);\n              })) {\n        added[nodeName] = true;\n        stack.push({contexts: context.currentContext, node: childNode});\n      }\n    });\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  dispose() {\n    Object.keys(this.weightMap)\n        .forEach(\n            key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n  }\n\n  private checkInputShapeAndType(inputs: NamedTensorMap) {\n    Object.keys(inputs).forEach(name => {\n      const input = inputs[name];\n      const [nodeName, ] = parseNodeName(name);\n      const node = this.graph.nodes[nodeName];\n      if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n        const shape = node.attrParams['shape'].value as number[];\n        const match = shape.length === input.shape.length &&\n            input.shape.every(\n                (dim, index) => shape[index] === -1 || shape[index] === dim);\n        util.assert(\n            match,\n            () => `The shape of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be [${shape}], but was ` +\n                `[${input.shape}]`);\n      }\n      if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n        util.assert(\n            input.dtype === node.attrParams['dtype'].value as string,\n            () => `The dtype of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be ` +\n                `${node.attrParams['dtype'].value}, but was ${input.dtype}`);\n      }\n    });\n  }\n\n  private mapInputs(inputs: NamedTensorMap) {\n    const result: NamedTensorMap = {};\n    for (const inputName in inputs) {\n      if (this._signature != null && this._signature.inputs != null &&\n          this._signature.inputs[inputName] != null) {\n        const tensor = this._signature.inputs[inputName];\n        result[tensor.name] = inputs[inputName];\n      } else {\n        result[inputName] = inputs[inputName];\n      }\n    }\n    return result;\n  }\n\n  private checkInputs(inputs: NamedTensorMap) {\n    const notInGraph = Object.keys(inputs).filter(name => {\n      const [nodeName] = parseNodeName(name);\n      return this.graph.nodes[nodeName] == null;\n    });\n    if (notInGraph.length > 0) {\n      throw new Error(\n          `The dict provided in model.execute(dict) has ` +\n          `keys: [${notInGraph}] that are not part of graph`);\n    }\n  }\n\n  private mapOutputs(outputs: string[]) {\n    return outputs.map(name => {\n      if (this._signature != null && this._signature.outputs != null &&\n          this._signature.outputs[name] != null) {\n        const tensor = this._signature.outputs[name];\n        return tensor.name;\n      }\n      return name;\n    }, {});\n  }\n\n  private checkOutputs(outputs: string[]): void {\n    outputs.forEach(name => {\n      const [normalizedName] = parseNodeName(name);\n      if (!this.graph.nodes[normalizedName]) {\n        throw new Error(`The output '${name}' is not found in the graph`);\n      }\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}