{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Executor: Evaluates SymbolicTensor based on feeds.\n */\nimport { cast, dispose, memory, util } from '@tensorflow/tfjs-core';\nimport { ValueError } from '../errors';\nimport { LruCache } from '../utils/executor_utils';\nimport { toList } from '../utils/generic_utils';\nimport { InputLayer } from './input_layer';\nimport { SymbolicTensor } from './topology';\n/**\n * Helper function to check the dtype and shape compatibility of a feed value.\n */\n\nfunction assertFeedCompatibility(key, val) {\n  // Check dtype compatibility.\n  if (key.dtype == null || key.dtype === val.dtype) {\n    //  a.  If types match, return val tensor as is.\n    return val;\n  }\n\n  try {\n    //  b. Attempt to convert to expected type.\n    return cast(val, key.dtype);\n  } catch (err) {\n    //  c. If conversion fails, return helpful error.\n    throw new ValueError(`The dtype of the feed (${val.dtype}) can not be cast to the dtype ` + `of the key '${key.name}' (${key.dtype}).`);\n  }\n}\n/**\n * FeedDict: A mapping from unique SymbolicTensors to feed values for them.\n * A feed value is a concrete value represented as an `Tensor`.\n */\n\n\nexport class FeedDict {\n  /**\n   * Constructor, optionally does copy-construction.\n   * @param feeds An Array of `Feed`s, or another `FeedDict`, in which case\n   *   copy-construction will be performed.\n   */\n  constructor(feeds) {\n    this.id2Value = {};\n    this.id2Mask = {};\n    this.name2Id = {};\n\n    if (feeds instanceof FeedDict) {\n      for (const id in feeds.id2Value) {\n        this.id2Value[id] = feeds.id2Value[id];\n\n        if (id in feeds.id2Mask) {\n          this.id2Mask[id] = feeds.id2Mask[id];\n        }\n      }\n    } else {\n      if (feeds == null) {\n        return;\n      }\n\n      for (const feed of feeds) {\n        this.add(feed.key, feed.value);\n      }\n    }\n  }\n  /**\n   * Add a key-value pair to the FeedDict.\n   *\n   * @param key The key of the feed.\n   * @param value The value of the tensor feed.\n   * @param mask The value of the mask feed (optional).\n   * @returns This `FeedDict`.\n   * @throws ValueError: If the key `SymbolicTensor` already exists in the\n   *   `FeedDict`.\n   */\n\n\n  add(key, value, mask) {\n    if (this.id2Value[key.id] == null) {\n      this.id2Value[key.id] = assertFeedCompatibility(key, value);\n      this.name2Id[key.name] = key.id;\n\n      if (mask != null) {\n        this.id2Mask[key.id] = mask;\n      }\n    } else {\n      throw new ValueError(`Duplicate key: name=${key.name}, id=${key.id}`);\n    }\n\n    return this;\n  }\n  /**\n   * Add a Feed to the FeedDict.\n   * @param feed The new `Feed` to add.\n   * @returns This `FeedDict`.\n   */\n\n\n  addFeed(feed) {\n    this.add(feed.key, feed.value);\n  }\n  /**\n   * Probe whether a key already exists in the FeedDict.\n   * @param key\n   */\n\n\n  hasKey(key) {\n    return this.id2Value[key.id] != null;\n  }\n  /**\n   * Get all the SymbolicTensor available in this FeedDict.\n   */\n\n\n  names() {\n    return Object.keys(this.name2Id);\n  }\n  /**\n   * Get the feed value for given key.\n   * @param key The SymbolicTensor, or its name (as a string), of which the\n   *     value is sought.\n   * @returns If `key` exists, the corresponding feed value.\n   * @throws ValueError: If `key` does not exist in this `FeedDict`.\n   */\n\n\n  getValue(key) {\n    if (key instanceof SymbolicTensor) {\n      if (this.id2Value[key.id] == null) {\n        throw new ValueError(`Nonexistent key: ${key.name}`);\n      } else {\n        return this.id2Value[key.id];\n      }\n    } else {\n      const id = this.name2Id[key];\n\n      if (id == null) {\n        throw new ValueError(`Feed dict has no SymbolicTensor name: ${key}`);\n      }\n\n      return this.id2Value[id];\n    }\n  }\n  /**\n   * Get the feed mask for given key.\n   * @param key The SymbolicTensor, or its name (as a string), of which the\n   *     value is sought.\n   * @returns If `key` exists, the corresponding feed mask.\n   * @throws ValueError: If `key` does not exist in this `FeedDict`.\n   */\n\n\n  getMask(key) {\n    if (key instanceof SymbolicTensor) {\n      if (this.id2Value[key.id] == null) {\n        throw new ValueError(`Nonexistent key: ${key.name}`);\n      } else {\n        return this.id2Mask[key.id];\n      }\n    } else {\n      const id = this.name2Id[key];\n\n      if (id == null) {\n        throw new ValueError(`Feed dict has no SymbolicTensor name: ${key}`);\n      }\n\n      return this.id2Mask[id];\n    }\n  }\n  /** Dispose all mask Tensors held by this object. */\n\n\n  disposeMasks() {\n    if (this.id2Mask != null) {\n      dispose(this.id2Mask);\n    }\n  }\n\n} // Cache for topologically sorted SymbolicTensors for given execution\n// targets (i.e., fetches).\n\nexport const cachedSorted = new LruCache(); // Cache for recipient count maps for given execution targets (i.e., fetches).\n\nexport const cachedRecipientCounts = new LruCache();\nexport function updateCacheMaxEntries(maxEntries) {\n  if (cachedSorted != null) {\n    cachedSorted.setMaxEntries(maxEntries);\n  }\n\n  if (cachedRecipientCounts != null) {\n    cachedRecipientCounts.setMaxEntries(maxEntries);\n  }\n}\n/**\n * Execute a SymbolicTensor by using concrete feed values.\n *\n * A `SymbolicTensor` object is a node in a computation graph of TF.js\n * Layers. The object is backed by a source layer and input\n * `SymbolicTensor`s to the source layer. This method evaluates\n * the `call()` method of the source layer, using concrete values of the\n * inputs obtained from either\n * * `feedDict`, if the input key exists in `feedDict`, or else,\n * * a recursive call to `execute()` itself.\n *\n * @param x: The `SymbolicTensor` to execute.\n * @param feedDict: The feed values, as base condition of the recursion.\n *   execution.\n * @param kwargs: Optional keyword arguments.\n * @param probe: A probe object (of interface `ExecutionProbe`) used for\n *   testing memory footprint of `execute` calls.\n * @returns Result of the execution.\n * @throws ValueError: If any `SymbolicTensor`s from `InputLayer`s\n *   encountered during the execution lacks a feed value in `feedDict`.\n */\n\nexport function execute(fetches, feedDict, kwargs, probe) {\n  const training = kwargs == null ? false : kwargs['training'];\n  const arrayFetches = Array.isArray(fetches);\n  const fetchArray = arrayFetches ? fetches : [fetches];\n  const outputNames = fetchArray.map(t => t.name);\n  const finalOutputs = [];\n  const feedNames = feedDict.names();\n\n  for (const outputName of outputNames) {\n    if (feedNames.indexOf(outputName) !== -1) {\n      finalOutputs.push(feedDict.getValue(outputName));\n    } else {\n      finalOutputs.push(null);\n    }\n  }\n\n  if (probe != null) {\n    // For optional probing of memory footprint during execution.\n    probe.maxNumTensors = -Infinity;\n    probe.minNumTensors = Infinity;\n  } // Check cache.\n\n\n  const fetchAndFeedKey = outputNames.join(',') + '|' + feedDict.names().sort().join(',');\n  let sorted = cachedSorted.get(fetchAndFeedKey);\n  let recipientCounts;\n\n  if (sorted == null) {\n    // Cache doesn't contain the desired combination of fetches. Compute\n    // topological sort for the combination for the first time.\n    const out = getTopologicalSortAndRecipientCounts(fetchArray, feedDict);\n    sorted = out.sorted;\n    recipientCounts = out.recipientCounts; // Store results in cache for future use.\n\n    cachedSorted.put(fetchAndFeedKey, sorted);\n    cachedRecipientCounts.put(fetchAndFeedKey, recipientCounts);\n  }\n\n  recipientCounts = {};\n\n  if (!training) {\n    Object.assign(recipientCounts, cachedRecipientCounts.get(fetchAndFeedKey));\n  }\n\n  const internalFeedDict = new FeedDict(feedDict); // Start iterative execution on the topologically-sorted SymbolicTensors.\n\n  for (let i = 0; i < sorted.length; ++i) {\n    if (probe != null) {\n      // For optional probing of memory usage during execution.\n      const numTensors = memory().numTensors;\n\n      if (numTensors > probe.maxNumTensors) {\n        probe.maxNumTensors = numTensors;\n      }\n\n      if (numTensors < probe.minNumTensors) {\n        probe.minNumTensors = numTensors;\n      }\n    }\n\n    const symbolic = sorted[i];\n    const srcLayer = symbolic.sourceLayer;\n\n    if (srcLayer instanceof InputLayer) {\n      continue;\n    }\n\n    const inputValues = [];\n    const inputMasks = [];\n    const tensorsToDispose = [];\n    let maskExists = false;\n\n    for (const input of symbolic.inputs) {\n      const value = internalFeedDict.getValue(input);\n      const mask = internalFeedDict.getMask(input);\n      inputValues.push(value);\n      inputMasks.push(mask);\n\n      if (mask != null) {\n        maskExists = true;\n      }\n\n      if (!training) {\n        recipientCounts[input.name]--;\n\n        if (recipientCounts[input.name] === 0 && !feedDict.hasKey(input) && outputNames.indexOf(input.name) === -1 && !value.isDisposed && input.sourceLayer.stateful !== true) {\n          tensorsToDispose.push(value);\n        }\n      }\n    }\n\n    if (maskExists) {\n      kwargs = kwargs || {};\n      kwargs['mask'] = inputMasks[0];\n    }\n\n    const outputTensors = toList(srcLayer.apply(inputValues, kwargs));\n    let outputMask = null;\n\n    if (srcLayer.supportsMasking) {\n      outputMask = srcLayer.computeMask(inputValues, inputMasks);\n    }\n\n    const layerOutputs = getNodeOutputs(symbolic);\n    const outputSymbolicTensors = Array.isArray(layerOutputs) ? layerOutputs : [layerOutputs];\n\n    for (let i = 0; i < outputSymbolicTensors.length; ++i) {\n      if (!internalFeedDict.hasKey(outputSymbolicTensors[i])) {\n        internalFeedDict.add(outputSymbolicTensors[i], outputTensors[i], Array.isArray(outputMask) ? outputMask[0] : outputMask);\n      }\n\n      const index = outputNames.indexOf(outputSymbolicTensors[i].name);\n\n      if (index !== -1) {\n        finalOutputs[index] = outputTensors[i];\n      }\n    }\n\n    if (!training) {\n      // Clean up Tensors that are no longer needed.\n      dispose(tensorsToDispose);\n    }\n  } // NOTE(cais): Unlike intermediate tensors, we don't discard mask\n  // tensors as we go, because these tensors are sometimes passed over a\n  // series of mutliple layers, i.e., not obeying the immediate input\n  // relations in the graph. If this becomes a memory-usage concern,\n  // we can improve this in the future.\n\n\n  internalFeedDict.disposeMasks();\n  return arrayFetches ? finalOutputs : finalOutputs[0];\n}\n/**\n * Sort the `SymbolicTensor`s topologically, for an array of fetches.\n *\n * This function calls getTopologicalSortAndRecipientCountsForOneFetch and\n * merges their results.\n *\n * @param fetch The array of fetches requested. Must be a non-empty array.\n * @param feedDict The dictionary of fed values.\n * @returns sorted: Topologically-sorted array of SymbolicTensors.\n *   recipientCounts: Recipient counts for all SymbolicTensors in `sorted`.\n */\n\nfunction getTopologicalSortAndRecipientCounts(fetches, feedDict) {\n  util.assert(fetches != null && fetches.length > 0, () => `Expected at least one fetch, got none`);\n  let finalSorted = [];\n  let finalRecipientMap = {};\n\n  if (fetches.length === 1) {\n    // Special-casing 1 fetch for efficiency.\n    const out = getTopologicalSortAndRecipientCountsForOneFetch(fetches[0], feedDict);\n    finalSorted = out.sorted;\n    finalRecipientMap = out.recipientMap;\n  } else {\n    const visited = new Set();\n\n    for (const fetch of fetches) {\n      const {\n        sorted,\n        recipientMap\n      } = getTopologicalSortAndRecipientCountsForOneFetch(fetch, feedDict); // Merge sorted SymbolicTensor Arrays.\n\n      for (const symbolicTensor of sorted) {\n        if (!visited.has(symbolicTensor.name)) {\n          finalSorted.push(symbolicTensor);\n          visited.add(symbolicTensor.name);\n        }\n      } // Merge recipient maps.\n\n\n      for (const name in recipientMap) {\n        if (finalRecipientMap[name] == null) {\n          finalRecipientMap[name] = new Set();\n        }\n\n        recipientMap[name].forEach(recipient => finalRecipientMap[name].add(recipient));\n      }\n    }\n  }\n\n  return {\n    sorted: finalSorted,\n    recipientCounts: recipientMap2Counts(finalRecipientMap)\n  };\n}\n\nfunction recipientMap2Counts(recipientMap) {\n  const recipientCounts = {};\n\n  for (const name in recipientMap) {\n    recipientCounts[name] = recipientMap[name].size;\n  }\n\n  return recipientCounts;\n}\n/**\n * Sort the `SymbolicTensor`s topologically, for a single fetch.\n *\n * This helper function processes the upstream SymbolicTensors of a single\n * fetch.\n *\n * @param fetch The single fetch requested.\n * @param feedDict The dictionary of fed values.\n * @returns sorted: Topologically-sorted array of SymbolicTensors.\n *   recipientMap: Recipient names for all SymbolicTensors in `sorted`.\n */\n\n\nexport function getTopologicalSortAndRecipientCountsForOneFetch(fetch, feedDict) {\n  const visited = new Set();\n  const sorted = [];\n  const recipientMap = {}; // Put keys of the feedDict into visited first, so they don't have to be\n  // walked. This is needed in case where there are feeds for intermediate\n  // SymbolicTensors of the graph.\n\n  for (const key of feedDict.names()) {\n    visited.add(key);\n  }\n\n  const stack = [];\n  const marks = []; // Initial population of stack and marks.\n\n  stack.push(fetch);\n\n  while (stack.length > 0) {\n    const top = stack[stack.length - 1];\n\n    if (visited.has(top.name)) {\n      stack.pop();\n      continue;\n    }\n\n    const topIsMarked = marks[marks.length - 1] === stack.length - 1;\n\n    if (top.inputs.length === 0 || topIsMarked) {\n      // Input SymbolicTensor or all children have been visited.\n      stack.pop();\n      sorted.push(top);\n      visited.add(top.name);\n\n      if (topIsMarked) {\n        marks.pop();\n      }\n    } else {\n      // A non-input SymbolicTensor whose upstream SymbolicTensors haven't\n      // been visited yet. Push them onto the stack.\n      marks.push(stack.length - 1);\n\n      for (const input of top.inputs) {\n        // Increment the recipient count. Note that this needs to happen\n        // regardless of whether the SymbolicTensor has been visited before.\n        if (recipientMap[input.name] == null) {\n          recipientMap[input.name] = new Set();\n        }\n\n        recipientMap[input.name].add(top.name);\n\n        if (visited.has(input.name)) {\n          continue; // Avoid repeated visits to the same SymbolicTensor.\n        }\n\n        stack.push(input);\n      }\n    }\n  }\n\n  return {\n    sorted,\n    recipientMap\n  };\n}\n/**\n * Get the symbolic output tensors of the node to which a given fetch belongs.\n * @param fetch The fetched symbolic tensor.\n * @returns The Array of symbolic tensors output by the node to which `fetch`\n *   belongs.\n */\n\nfunction getNodeOutputs(fetch) {\n  let layerOutputs;\n\n  if (fetch.sourceLayer.inboundNodes.length === 1) {\n    layerOutputs = fetch.sourceLayer.output;\n  } else {\n    let nodeIndex = null;\n\n    for (let i = 0; i < fetch.sourceLayer.inboundNodes.length; ++i) {\n      for (const outputTensor of fetch.sourceLayer.inboundNodes[i].outputTensors) {\n        if (outputTensor.id === fetch.id) {\n          nodeIndex = i;\n          break;\n        }\n      }\n    }\n\n    layerOutputs = fetch.sourceLayer.getOutputAt(nodeIndex);\n  }\n\n  return layerOutputs;\n}","map":{"version":3,"sources":["../../../../../../tfjs-layers/src/engine/executor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Executor: Evaluates SymbolicTensor based on feeds.\n */\n\nimport {cast, dispose, memory, Tensor, util} from '@tensorflow/tfjs-core';\n\nimport {ValueError} from '../errors';\nimport {Kwargs} from '../types';\nimport {LruCache} from '../utils/executor_utils';\nimport {toList} from '../utils/generic_utils';\n\nimport {InputLayer} from './input_layer';\nimport {SymbolicTensor} from './topology';\n\n/**\n * Helper function to check the dtype and shape compatibility of a feed value.\n */\nfunction assertFeedCompatibility(key: SymbolicTensor, val: Tensor): Tensor {\n  // Check dtype compatibility.\n  if (key.dtype == null || key.dtype === val.dtype) {\n    //  a.  If types match, return val tensor as is.\n    return val;\n  }\n  try {\n    //  b. Attempt to convert to expected type.\n    return cast(val, key.dtype);\n  } catch (err) {\n    //  c. If conversion fails, return helpful error.\n    throw new ValueError(\n        `The dtype of the feed (${val.dtype}) can not be cast to the dtype ` +\n        `of the key '${key.name}' (${key.dtype}).`);\n  }\n}\n\n/**\n * A concrete Tensor value for a symbolic tensor as the key.\n */\nexport interface Feed {\n  key: SymbolicTensor;\n  value: Tensor;\n}\n\n/**\n * FeedDict: A mapping from unique SymbolicTensors to feed values for them.\n * A feed value is a concrete value represented as an `Tensor`.\n */\nexport class FeedDict {\n  private id2Value: {[id: number]: Tensor} = {};\n  private id2Mask: {[id: number]: Tensor} = {};\n  private name2Id: {[name: string]: number} = {};\n\n  /**\n   * Constructor, optionally does copy-construction.\n   * @param feeds An Array of `Feed`s, or another `FeedDict`, in which case\n   *   copy-construction will be performed.\n   */\n  constructor(feeds?: Feed[]|FeedDict) {\n    if (feeds instanceof FeedDict) {\n      for (const id in feeds.id2Value) {\n        this.id2Value[id] = feeds.id2Value[id];\n        if (id in feeds.id2Mask) {\n          this.id2Mask[id] = feeds.id2Mask[id];\n        }\n      }\n    } else {\n      if (feeds == null) {\n        return;\n      }\n      for (const feed of feeds) {\n        this.add(feed.key, feed.value);\n      }\n    }\n  }\n\n  /**\n   * Add a key-value pair to the FeedDict.\n   *\n   * @param key The key of the feed.\n   * @param value The value of the tensor feed.\n   * @param mask The value of the mask feed (optional).\n   * @returns This `FeedDict`.\n   * @throws ValueError: If the key `SymbolicTensor` already exists in the\n   *   `FeedDict`.\n   */\n  add(key: SymbolicTensor, value: Tensor, mask?: Tensor): FeedDict {\n    if (this.id2Value[key.id] == null) {\n      this.id2Value[key.id] = assertFeedCompatibility(key, value);\n      this.name2Id[key.name] = key.id;\n      if (mask != null) {\n        this.id2Mask[key.id] = mask;\n      }\n    } else {\n      throw new ValueError(`Duplicate key: name=${key.name}, id=${key.id}`);\n    }\n    return this;\n  }\n\n  /**\n   * Add a Feed to the FeedDict.\n   * @param feed The new `Feed` to add.\n   * @returns This `FeedDict`.\n   */\n  addFeed(feed: Feed) {\n    this.add(feed.key, feed.value);\n  }\n\n  /**\n   * Probe whether a key already exists in the FeedDict.\n   * @param key\n   */\n  hasKey(key: SymbolicTensor): boolean {\n    return this.id2Value[key.id] != null;\n  }\n\n  /**\n   * Get all the SymbolicTensor available in this FeedDict.\n   */\n  names(): string[] {\n    return Object.keys(this.name2Id);\n  }\n\n  /**\n   * Get the feed value for given key.\n   * @param key The SymbolicTensor, or its name (as a string), of which the\n   *     value is sought.\n   * @returns If `key` exists, the corresponding feed value.\n   * @throws ValueError: If `key` does not exist in this `FeedDict`.\n   */\n  getValue(key: SymbolicTensor|string): Tensor {\n    if (key instanceof SymbolicTensor) {\n      if (this.id2Value[key.id] == null) {\n        throw new ValueError(`Nonexistent key: ${key.name}`);\n      } else {\n        return this.id2Value[key.id];\n      }\n    } else {\n      const id = this.name2Id[key];\n      if (id == null) {\n        throw new ValueError(`Feed dict has no SymbolicTensor name: ${key}`);\n      }\n      return this.id2Value[id];\n    }\n  }\n\n  /**\n   * Get the feed mask for given key.\n   * @param key The SymbolicTensor, or its name (as a string), of which the\n   *     value is sought.\n   * @returns If `key` exists, the corresponding feed mask.\n   * @throws ValueError: If `key` does not exist in this `FeedDict`.\n   */\n  getMask(key: SymbolicTensor|string): Tensor {\n    if (key instanceof SymbolicTensor) {\n      if (this.id2Value[key.id] == null) {\n        throw new ValueError(`Nonexistent key: ${key.name}`);\n      } else {\n        return this.id2Mask[key.id];\n      }\n    } else {\n      const id = this.name2Id[key];\n      if (id == null) {\n        throw new ValueError(`Feed dict has no SymbolicTensor name: ${key}`);\n      }\n      return this.id2Mask[id];\n    }\n  }\n\n  /** Dispose all mask Tensors held by this object. */\n  disposeMasks() {\n    if (this.id2Mask != null) {\n      dispose(this.id2Mask);\n    }\n  }\n}\n\n// Cache for topologically sorted SymbolicTensors for given execution\n// targets (i.e., fetches).\nexport const cachedSorted: LruCache<SymbolicTensor[]> =\n    new LruCache<SymbolicTensor[]>();\n\n// Cache for recipient count maps for given execution targets (i.e., fetches).\nexport const cachedRecipientCounts: LruCache<RecipientCounts> =\n    new LruCache<RecipientCounts>();\n\nexport function updateCacheMaxEntries(maxEntries: number) {\n  if (cachedSorted != null) {\n    cachedSorted.setMaxEntries(maxEntries);\n  }\n  if (cachedRecipientCounts != null) {\n    cachedRecipientCounts.setMaxEntries(maxEntries);\n  }\n}\n\n/**\n * Interface for the optional object used for probing the memory\n * usage and other statistics during execution.\n */\nexport interface ExecutionProbe {\n  /**\n   * Maximum number of tensors that exist during all steps of the\n   * execution. Tensor counts are measured at the beginning of every\n   * step.\n   */\n  maxNumTensors?: number;\n\n  /**\n   * Minimum number of tensors that exist during all steps of the\n   * execution. Tensor counts are measured at the beginning of every\n   * step.\n   */\n  minNumTensors?: number;\n}\n\n/**\n * Execute a SymbolicTensor by using concrete feed values.\n *\n * A `SymbolicTensor` object is a node in a computation graph of TF.js\n * Layers. The object is backed by a source layer and input\n * `SymbolicTensor`s to the source layer. This method evaluates\n * the `call()` method of the source layer, using concrete values of the\n * inputs obtained from either\n * * `feedDict`, if the input key exists in `feedDict`, or else,\n * * a recursive call to `execute()` itself.\n *\n * @param x: The `SymbolicTensor` to execute.\n * @param feedDict: The feed values, as base condition of the recursion.\n *   execution.\n * @param kwargs: Optional keyword arguments.\n * @param probe: A probe object (of interface `ExecutionProbe`) used for\n *   testing memory footprint of `execute` calls.\n * @returns Result of the execution.\n * @throws ValueError: If any `SymbolicTensor`s from `InputLayer`s\n *   encountered during the execution lacks a feed value in `feedDict`.\n */\nexport function execute(\n    fetches: SymbolicTensor|SymbolicTensor[], feedDict: FeedDict,\n    kwargs?: Kwargs, probe?: ExecutionProbe): Tensor|\n    Tensor[]|[Tensor | Tensor[]] {\n  const training: boolean = kwargs == null ? false : kwargs['training'];\n\n  const arrayFetches = Array.isArray(fetches);\n  const fetchArray: SymbolicTensor[] =\n      arrayFetches ? fetches as SymbolicTensor[] : [fetches as SymbolicTensor];\n\n  const outputNames = fetchArray.map(t => t.name);\n  const finalOutputs: Tensor[] = [];\n  const feedNames = feedDict.names();\n  for (const outputName of outputNames) {\n    if (feedNames.indexOf(outputName) !== -1) {\n      finalOutputs.push(feedDict.getValue(outputName));\n    } else {\n      finalOutputs.push(null);\n    }\n  }\n\n  if (probe != null) {\n    // For optional probing of memory footprint during execution.\n    probe.maxNumTensors = -Infinity;\n    probe.minNumTensors = Infinity;\n  }\n\n  // Check cache.\n  const fetchAndFeedKey =\n      outputNames.join(',') + '|' + feedDict.names().sort().join(',');\n  let sorted: SymbolicTensor[] = cachedSorted.get(fetchAndFeedKey);\n  let recipientCounts: {[fetchName: string]: number};\n  if (sorted == null) {\n    // Cache doesn't contain the desired combination of fetches. Compute\n    // topological sort for the combination for the first time.\n    const out = getTopologicalSortAndRecipientCounts(fetchArray, feedDict);\n    sorted = out.sorted;\n    recipientCounts = out.recipientCounts;\n\n    // Store results in cache for future use.\n    cachedSorted.put(fetchAndFeedKey, sorted);\n    cachedRecipientCounts.put(fetchAndFeedKey, recipientCounts);\n  }\n  recipientCounts = {};\n  if (!training) {\n    Object.assign(recipientCounts, cachedRecipientCounts.get(fetchAndFeedKey));\n  }\n\n  const internalFeedDict = new FeedDict(feedDict);\n\n  // Start iterative execution on the topologically-sorted SymbolicTensors.\n  for (let i = 0; i < sorted.length; ++i) {\n    if (probe != null) {\n      // For optional probing of memory usage during execution.\n      const numTensors = memory().numTensors;\n      if (numTensors > probe.maxNumTensors) {\n        probe.maxNumTensors = numTensors;\n      }\n      if (numTensors < probe.minNumTensors) {\n        probe.minNumTensors = numTensors;\n      }\n    }\n\n    const symbolic = sorted[i];\n    const srcLayer = symbolic.sourceLayer;\n    if (srcLayer instanceof InputLayer) {\n      continue;\n    }\n    const inputValues: Tensor[] = [];\n    const inputMasks: Tensor[] = [];\n    const tensorsToDispose: Tensor[] = [];\n\n    let maskExists = false;\n    for (const input of symbolic.inputs) {\n      const value = internalFeedDict.getValue(input);\n      const mask = internalFeedDict.getMask(input);\n      inputValues.push(value);\n      inputMasks.push(mask);\n      if (mask != null) {\n        maskExists = true;\n      }\n      if (!training) {\n        recipientCounts[input.name]--;\n        if (recipientCounts[input.name] === 0 && !feedDict.hasKey(input) &&\n            outputNames.indexOf(input.name) === -1 && !value.isDisposed &&\n            input.sourceLayer.stateful !== true) {\n          tensorsToDispose.push(value);\n        }\n      }\n    }\n\n    if (maskExists) {\n      kwargs = kwargs || {};\n      kwargs['mask'] = inputMasks[0];\n    }\n    const outputTensors =\n        toList(srcLayer.apply(inputValues, kwargs)) as Tensor[];\n    let outputMask: Tensor|Tensor[] = null;\n    if (srcLayer.supportsMasking) {\n      outputMask = srcLayer.computeMask(inputValues, inputMasks);\n    }\n    const layerOutputs = getNodeOutputs(symbolic);\n    const outputSymbolicTensors =\n        Array.isArray(layerOutputs) ? layerOutputs : [layerOutputs];\n    for (let i = 0; i < outputSymbolicTensors.length; ++i) {\n      if (!internalFeedDict.hasKey(outputSymbolicTensors[i])) {\n        internalFeedDict.add(\n            outputSymbolicTensors[i], outputTensors[i],\n            Array.isArray(outputMask) ? outputMask[0] : outputMask);\n      }\n      const index = outputNames.indexOf(outputSymbolicTensors[i].name);\n      if (index !== -1) {\n        finalOutputs[index] = outputTensors[i];\n      }\n    }\n\n    if (!training) {\n      // Clean up Tensors that are no longer needed.\n      dispose(tensorsToDispose);\n    }\n  }\n  // NOTE(cais): Unlike intermediate tensors, we don't discard mask\n  // tensors as we go, because these tensors are sometimes passed over a\n  // series of mutliple layers, i.e., not obeying the immediate input\n  // relations in the graph. If this becomes a memory-usage concern,\n  // we can improve this in the future.\n  internalFeedDict.disposeMasks();\n\n  return arrayFetches ? finalOutputs : finalOutputs[0];\n}\n\ntype RecipientCounts = {\n  [fetchName: string]: number\n};\n\nexport type RecipientMap = {\n  [fetchName: string]: Set<string>;\n};\n\n/**\n * Sort the `SymbolicTensor`s topologically, for an array of fetches.\n *\n * This function calls getTopologicalSortAndRecipientCountsForOneFetch and\n * merges their results.\n *\n * @param fetch The array of fetches requested. Must be a non-empty array.\n * @param feedDict The dictionary of fed values.\n * @returns sorted: Topologically-sorted array of SymbolicTensors.\n *   recipientCounts: Recipient counts for all SymbolicTensors in `sorted`.\n */\nfunction getTopologicalSortAndRecipientCounts(\n    fetches: SymbolicTensor[], feedDict: FeedDict):\n    {sorted: SymbolicTensor[], recipientCounts: RecipientCounts} {\n  util.assert(\n      fetches != null && fetches.length > 0,\n      () => `Expected at least one fetch, got none`);\n\n  let finalSorted: SymbolicTensor[] = [];\n  let finalRecipientMap: RecipientMap = {};\n  if (fetches.length === 1) {\n    // Special-casing 1 fetch for efficiency.\n    const out =\n        getTopologicalSortAndRecipientCountsForOneFetch(fetches[0], feedDict);\n    finalSorted = out.sorted;\n    finalRecipientMap = out.recipientMap;\n  } else {\n    const visited = new Set<string>();\n    for (const fetch of fetches) {\n      const {sorted, recipientMap} =\n          getTopologicalSortAndRecipientCountsForOneFetch(fetch, feedDict);\n\n      // Merge sorted SymbolicTensor Arrays.\n      for (const symbolicTensor of sorted) {\n        if (!visited.has(symbolicTensor.name)) {\n          finalSorted.push(symbolicTensor);\n          visited.add(symbolicTensor.name);\n        }\n      }\n\n      // Merge recipient maps.\n      for (const name in recipientMap) {\n        if (finalRecipientMap[name] == null) {\n          finalRecipientMap[name] = new Set<string>();\n        }\n        recipientMap[name].forEach(\n            recipient => finalRecipientMap[name].add(recipient));\n      }\n    }\n  }\n  return {\n    sorted: finalSorted,\n    recipientCounts: recipientMap2Counts(finalRecipientMap)\n  };\n}\n\nfunction recipientMap2Counts(recipientMap: RecipientMap): RecipientCounts {\n  const recipientCounts: RecipientCounts = {};\n  for (const name in recipientMap) {\n    recipientCounts[name] = recipientMap[name].size;\n  }\n  return recipientCounts;\n}\n\n/**\n * Sort the `SymbolicTensor`s topologically, for a single fetch.\n *\n * This helper function processes the upstream SymbolicTensors of a single\n * fetch.\n *\n * @param fetch The single fetch requested.\n * @param feedDict The dictionary of fed values.\n * @returns sorted: Topologically-sorted array of SymbolicTensors.\n *   recipientMap: Recipient names for all SymbolicTensors in `sorted`.\n */\nexport function getTopologicalSortAndRecipientCountsForOneFetch(\n    fetch: SymbolicTensor, feedDict: FeedDict):\n    {sorted: SymbolicTensor[], recipientMap: RecipientMap} {\n  const visited = new Set<string>();\n  const sorted: SymbolicTensor[] = [];\n  const recipientMap: RecipientMap = {};\n\n  // Put keys of the feedDict into visited first, so they don't have to be\n  // walked. This is needed in case where there are feeds for intermediate\n  // SymbolicTensors of the graph.\n  for (const key of feedDict.names()) {\n    visited.add(key);\n  }\n\n  const stack: SymbolicTensor[] = [];\n  const marks: number[] = [];\n\n  // Initial population of stack and marks.\n  stack.push(fetch);\n\n  while (stack.length > 0) {\n    const top = stack[stack.length - 1];\n    if (visited.has(top.name)) {\n      stack.pop();\n      continue;\n    }\n    const topIsMarked = marks[marks.length - 1] === stack.length - 1;\n    if (top.inputs.length === 0 || topIsMarked) {\n      // Input SymbolicTensor or all children have been visited.\n      stack.pop();\n      sorted.push(top);\n      visited.add(top.name);\n      if (topIsMarked) {\n        marks.pop();\n      }\n    } else {\n      // A non-input SymbolicTensor whose upstream SymbolicTensors haven't\n      // been visited yet. Push them onto the stack.\n      marks.push(stack.length - 1);\n      for (const input of top.inputs) {\n        // Increment the recipient count. Note that this needs to happen\n        // regardless of whether the SymbolicTensor has been visited before.\n        if (recipientMap[input.name] == null) {\n          recipientMap[input.name] = new Set<string>();\n        }\n        recipientMap[input.name].add(top.name);\n\n        if (visited.has(input.name)) {\n          continue;  // Avoid repeated visits to the same SymbolicTensor.\n        }\n        stack.push(input);\n      }\n    }\n  }\n  return {sorted, recipientMap};\n}\n\n/**\n * Get the symbolic output tensors of the node to which a given fetch belongs.\n * @param fetch The fetched symbolic tensor.\n * @returns The Array of symbolic tensors output by the node to which `fetch`\n *   belongs.\n */\nfunction getNodeOutputs(fetch: SymbolicTensor): SymbolicTensor|\n    SymbolicTensor[] {\n  let layerOutputs: SymbolicTensor|SymbolicTensor[];\n  if (fetch.sourceLayer.inboundNodes.length === 1) {\n    layerOutputs = fetch.sourceLayer.output;\n  } else {\n    let nodeIndex: number = null;\n    for (let i = 0; i < fetch.sourceLayer.inboundNodes.length; ++i) {\n      for (const outputTensor of fetch.sourceLayer.inboundNodes[i]\n               .outputTensors) {\n        if (outputTensor.id === fetch.id) {\n          nodeIndex = i;\n          break;\n        }\n      }\n    }\n    layerOutputs = fetch.sourceLayer.getOutputAt(nodeIndex);\n  }\n  return layerOutputs;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}