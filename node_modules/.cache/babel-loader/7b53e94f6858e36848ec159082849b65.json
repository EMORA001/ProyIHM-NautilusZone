{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original Source: losses.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { tidy, util } from '@tensorflow/tfjs-core';\nimport { epsilon } from './backend/common';\nimport * as K from './backend/tfjs_backend';\nimport { ValueError } from './errors';\n/**\n * Normalizes a tensor wrt the L2 norm alongside the specified axis.\n * @param x\n * @param axis Axis along which to perform normalization.\n */\n\nexport function l2Normalize(x, axis) {\n  return tidy(() => {\n    if (x.dtype !== 'float32') {\n      x = tfc.cast(x, 'float32');\n    }\n\n    const squareSum = tfc.sum(K.square(x), axis, true);\n    const epsilonTensor = tfc.fill(squareSum.shape, epsilon());\n    const norm = tfc.sqrt(tfc.maximum(squareSum, epsilonTensor));\n    return tfc.div(x, norm);\n  });\n}\nexport function meanSquaredError(yTrue, yPred) {\n  return tidy(() => tfc.mean(K.square(tfc.sub(yPred, yTrue)), -1));\n}\nexport function meanAbsoluteError(yTrue, yPred) {\n  return tidy(() => tfc.mean(tfc.abs(tfc.sub(yPred, yTrue)), -1));\n}\nexport function meanAbsolutePercentageError(yTrue, yPred) {\n  return tidy(() => {\n    const diff = tfc.sub(yTrue, yPred);\n    const clippedTrue = tfc.clipByValue(tfc.abs(yTrue), epsilon(), Number.MAX_VALUE);\n    const absResult = tfc.abs(tfc.div(diff, clippedTrue));\n    return tfc.mul(100, tfc.mean(absResult, -1));\n  });\n}\nexport function meanSquaredLogarithmicError(yTrue, yPred) {\n  return tidy(() => {\n    const clippedPred = tfc.clipByValue(yPred, epsilon(), Number.MAX_VALUE);\n    const firstLog = tfc.log(tfc.add(1, clippedPred));\n    const clippedTrue = tfc.clipByValue(yTrue, epsilon(), Number.MAX_VALUE);\n    const secondLog = tfc.log(tfc.add(1, clippedTrue));\n    return tfc.mean(K.square(tfc.sub(firstLog, secondLog)), -1);\n  });\n}\nexport function squaredHinge(yTrue, yPred) {\n  return tidy(() => {\n    const maxResult = tfc.maximum(0, tfc.sub(1, tfc.mul(yTrue, yPred)));\n    return tfc.mean(K.square(maxResult), -1);\n  });\n}\nexport function hinge(yTrue, yPred) {\n  return tidy(() => {\n    const maxResult = tfc.maximum(0, tfc.sub(1, tfc.mul(yTrue, yPred)));\n    return tfc.mean(maxResult, -1);\n  });\n}\nexport function categoricalHinge(yTrue, yPred) {\n  return tidy(() => {\n    const pos = tfc.sum(tfc.mul(yTrue, yPred), -1);\n    const neg = tfc.max(tfc.mul(tfc.sub(1, yTrue), yPred), -1);\n    return tfc.maximum(0, tfc.add(1, tfc.sub(neg, pos)));\n  });\n}\n/**\n * Logarithm of the hyperbolic cosine of the prediction error.\n *\n * `log(cosh(x))` is approximately equal to `(x ** 2) / 2` for small `x` and\n * to `abs(x) - log(2)` for large `x`. This means that 'logcosh' works mostly\n * like the mean squared error, but will not be so strongly affected by the\n * occasional wildly incorrect prediction.\n */\n\nexport function logcosh(yTrue, yPred) {\n  return tidy(() => {\n    const log2 = Math.log(2);\n    const predictionDiff = tfc.sub(yPred, yTrue);\n    const logcoshResult = tfc.sub(tfc.add(predictionDiff, tfc.softplus(tfc.mul(-2, predictionDiff))), log2);\n    return tfc.mean(logcoshResult, -1);\n  });\n}\nexport function categoricalCrossentropy(target, output) {\n  let fromLogits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return tidy(() => {\n    if (fromLogits) {\n      output = tfc.softmax(output);\n    } else {\n      // scale preds so that the class probabilities of each sample sum to 1.\n      const outputSum = tfc.sum(output, output.shape.length - 1, true);\n      output = tfc.div(output, outputSum);\n    }\n\n    output = tfc.clipByValue(output, epsilon(), 1 - epsilon());\n    return tfc.neg(tfc.sum(tfc.mul(tfc.cast(target, 'float32'), tfc.log(output)), output.shape.length - 1));\n  });\n}\n/**\n * Categorical crossentropy with integer targets.\n *\n * @param target An integer tensor.\n * @param output A tensor resulting from a softmax (unless `fromLogits` is\n *  `true`, in which case `output` is expected to be the logits).\n * @param fromLogits Boolean, whether `output` is the result of a softmax, or is\n *   a tensor of logits.\n */\n\nexport function sparseCategoricalCrossentropy(target, output) {\n  let fromLogits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return tidy(() => {\n    const flatTarget = tfc.cast(tfc.floor(K.flatten(target)), 'int32');\n    output = tfc.clipByValue(output, epsilon(), 1 - epsilon());\n    const outputShape = output.shape;\n    const oneHotTarget = tfc.reshape(tfc.oneHot(flatTarget, outputShape[outputShape.length - 1]), outputShape);\n    return categoricalCrossentropy(oneHotTarget, output, fromLogits);\n  });\n}\n/**\n * From TensorFlow's implementation in nn_impl.py:\n *\n * For brevity, let `x = logits`, `z = labels`.  The logistic loss is\n *      z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))\n *    = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))\n *    = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))\n *    = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))\n *    = (1 - z) * x + log(1 + exp(-x))\n *    = x - x * z + log(1 + exp(-x))\n * For x < 0, to avoid overflow in exp(-x), we reformulate the above\n *      x - x * z + log(1 + exp(-x))\n *    = log(exp(x)) - x * z + log(1 + exp(-x))\n *    = - x * z + log(1 + exp(x))\n * Hence, to ensure stability and avoid overflow, the implementation uses this\n * equivalent formulation\n *    max(x, 0) - x * z + log(1 + exp(-abs(x)))\n *\n * @param labels The labels.\n * @param logits The logits.\n */\n\nexport function sigmoidCrossEntropyWithLogits(labels, logits) {\n  if (!util.arraysEqual(labels.shape, logits.shape)) {\n    throw new ValueError(`logits and labels must have the same shape, but got shapes ` + `${JSON.stringify(labels.shape)} and ${JSON.stringify(logits.shape)}`);\n  }\n\n  return tidy(() => {\n    // The logistic loss formula from above is\n    //   x - x * z + log(1 + exp(-x))\n    // For x < 0, a more numerically stable formula is\n    //   -x * z + log(1 + exp(x))\n    // Note that these two expressions can be combined into the following:\n    //   max(x, 0) - x * z + log(1 + exp(-abs(x)))\n    const reluLogits = tfc.relu(logits);\n    const negAbsLogits = tfc.neg(tfc.abs(logits));\n    return tfc.add(tfc.sub(reluLogits, tfc.mul(logits, labels)), tfc.log1p(tfc.exp(negAbsLogits)));\n  });\n}\nexport function binaryCrossentropy(yTrue, yPred) {\n  return tidy(() => {\n    let y;\n    y = tfc.clipByValue(yPred, epsilon(), 1 - epsilon());\n    y = tfc.log(tfc.div(y, tfc.sub(1, y)));\n    return tfc.mean(sigmoidCrossEntropyWithLogits(yTrue, y), -1);\n  });\n}\nexport function kullbackLeiblerDivergence(yTrue, yPred) {\n  return tidy(() => {\n    const clippedTrue = tfc.clipByValue(yTrue, epsilon(), 1);\n    const clippedPred = tfc.clipByValue(yPred, epsilon(), 1);\n    return tfc.sum(tfc.mul(yTrue, tfc.log(tfc.div(clippedTrue, clippedPred))), -1);\n  });\n}\nexport function poisson(yTrue, yPred) {\n  return tidy(() => {\n    const logPred = tfc.log(tfc.add(epsilon(), yPred));\n    return tfc.mean(tfc.sub(yPred, tfc.mul(yTrue, logPred)), -1);\n  });\n}\nexport function cosineProximity(yTrue, yPred) {\n  return tidy(() => {\n    const trueNormalized = l2Normalize(yTrue, -1);\n    const predNormalized = l2Normalize(yPred, -1);\n    const trueXPred = tfc.mul(trueNormalized, predNormalized);\n    return tfc.neg(tfc.sum(trueXPred, -1));\n  });\n}\nexport const mse = meanSquaredError;\nexport const MSE = meanSquaredError;\nexport const mae = meanAbsoluteError;\nexport const MAE = meanAbsoluteError;\nexport const mape = meanAbsolutePercentageError;\nexport const MAPE = meanAbsolutePercentageError;\nexport const msle = meanSquaredLogarithmicError;\nexport const MSLE = meanSquaredLogarithmicError;\nexport const kld = kullbackLeiblerDivergence;\nexport const KLD = kullbackLeiblerDivergence;\nexport const cosine = cosineProximity; // TODO(michaelterry): Add deserialize() function.\n\nexport const lossesMap = {\n  meanSquaredError,\n  meanAbsoluteError,\n  meanAbsolutePercentageError,\n  meanSquaredLogarithmicError,\n  squaredHinge,\n  hinge,\n  categoricalHinge,\n  logcosh,\n  categoricalCrossentropy,\n  sparseCategoricalCrossentropy,\n  binaryCrossentropy,\n  kullbackLeiblerDivergence,\n  poisson,\n  cosineProximity\n}; // Porting note: This diverges from the PyKeras implementation and may need to\n// change based on (de)serialization requirements.\n\nexport function get(identifierOrFn) {\n  if (typeof identifierOrFn === 'string') {\n    if (identifierOrFn in lossesMap) {\n      return lossesMap[identifierOrFn];\n    }\n\n    let errMsg = `Unknown loss ${identifierOrFn}`;\n\n    if (identifierOrFn.toLowerCase().includes('softmaxcrossentropy')) {\n      errMsg = `Unknown loss ${identifierOrFn}. ` + 'Use \"categoricalCrossentropy\" as the string name for ' + 'tf.losses.softmaxCrossEntropy';\n    }\n\n    throw new ValueError(errMsg);\n  } else {\n    return identifierOrFn;\n  }\n}","map":{"version":3,"sources":["../../../../../tfjs-layers/src/losses.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original Source: losses.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {Tensor, Tensor1D, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {epsilon} from './backend/common';\nimport * as K from './backend/tfjs_backend';\nimport {ValueError} from './errors';\nimport {LossOrMetricFn} from './types';\n\n/**\n * Normalizes a tensor wrt the L2 norm alongside the specified axis.\n * @param x\n * @param axis Axis along which to perform normalization.\n */\nexport function l2Normalize(x: Tensor, axis?: number): Tensor {\n  return tidy(() => {\n    if (x.dtype !== 'float32') {\n      x = tfc.cast(x, 'float32');\n    }\n    const squareSum = tfc.sum(K.square(x), axis, true);\n    const epsilonTensor = tfc.fill(squareSum.shape, epsilon());\n    const norm = tfc.sqrt(tfc.maximum(squareSum, epsilonTensor));\n    return tfc.div(x, norm);\n  });\n}\n\nexport function meanSquaredError(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => tfc.mean(K.square(tfc.sub(yPred, yTrue)), -1));\n}\n\nexport function meanAbsoluteError(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => tfc.mean(tfc.abs(tfc.sub(yPred, yTrue)), -1));\n}\n\nexport function meanAbsolutePercentageError(\n    yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const diff = tfc.sub(yTrue, yPred);\n    const clippedTrue =\n        tfc.clipByValue(tfc.abs(yTrue), epsilon(), Number.MAX_VALUE);\n    const absResult = tfc.abs(tfc.div(diff, clippedTrue));\n    return tfc.mul(100, tfc.mean(absResult, -1));\n  });\n}\n\nexport function meanSquaredLogarithmicError(\n    yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const clippedPred = tfc.clipByValue(yPred, epsilon(), Number.MAX_VALUE);\n    const firstLog = tfc.log(tfc.add(1, clippedPred));\n\n    const clippedTrue = tfc.clipByValue(yTrue, epsilon(), Number.MAX_VALUE);\n    const secondLog = tfc.log(tfc.add(1, clippedTrue));\n\n    return tfc.mean(K.square(tfc.sub(firstLog, secondLog)), -1);\n  });\n}\n\nexport function squaredHinge(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const maxResult = tfc.maximum(0, tfc.sub(1, tfc.mul(yTrue, yPred)));\n    return tfc.mean(K.square(maxResult), -1);\n  });\n}\n\nexport function hinge(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const maxResult = tfc.maximum(0, tfc.sub(1, tfc.mul(yTrue, yPred)));\n    return tfc.mean(maxResult, -1);\n  });\n}\n\nexport function categoricalHinge(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const pos = tfc.sum(tfc.mul(yTrue, yPred), -1);\n    const neg = tfc.max(tfc.mul(tfc.sub(1, yTrue), yPred), -1);\n    return tfc.maximum(0, tfc.add(1, tfc.sub(neg, pos)));\n  });\n}\n\n/**\n * Logarithm of the hyperbolic cosine of the prediction error.\n *\n * `log(cosh(x))` is approximately equal to `(x ** 2) / 2` for small `x` and\n * to `abs(x) - log(2)` for large `x`. This means that 'logcosh' works mostly\n * like the mean squared error, but will not be so strongly affected by the\n * occasional wildly incorrect prediction.\n */\nexport function logcosh(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const log2 = Math.log(2);\n    const predictionDiff = tfc.sub(yPred, yTrue);\n    const logcoshResult = tfc.sub(\n        tfc.add(predictionDiff, tfc.softplus(tfc.mul(-2, predictionDiff))),\n        log2);\n    return tfc.mean(logcoshResult, -1);\n  });\n}\n\nexport function categoricalCrossentropy(\n    target: Tensor, output: Tensor, fromLogits = false): Tensor {\n  return tidy(() => {\n    if (fromLogits) {\n      output = tfc.softmax(output);\n    } else {\n      // scale preds so that the class probabilities of each sample sum to 1.\n      const outputSum = tfc.sum(output, output.shape.length - 1, true);\n      output = tfc.div(output, outputSum);\n    }\n    output = tfc.clipByValue(output, epsilon(), 1 - epsilon());\n    return tfc.neg(tfc.sum(\n        tfc.mul(tfc.cast(target, 'float32'), tfc.log(output)),\n        output.shape.length - 1));\n  });\n}\n\n/**\n * Categorical crossentropy with integer targets.\n *\n * @param target An integer tensor.\n * @param output A tensor resulting from a softmax (unless `fromLogits` is\n *  `true`, in which case `output` is expected to be the logits).\n * @param fromLogits Boolean, whether `output` is the result of a softmax, or is\n *   a tensor of logits.\n */\nexport function sparseCategoricalCrossentropy(\n    target: Tensor, output: Tensor, fromLogits = false): Tensor {\n  return tidy(() => {\n    const flatTarget =\n        tfc.cast(tfc.floor(K.flatten(target)), 'int32') as Tensor1D;\n    output = tfc.clipByValue(output, epsilon(), 1 - epsilon());\n    const outputShape = output.shape;\n    const oneHotTarget = tfc.reshape(\n        tfc.oneHot(flatTarget, outputShape[outputShape.length - 1]),\n        outputShape);\n    return categoricalCrossentropy(oneHotTarget, output, fromLogits);\n  });\n}\n\n/**\n * From TensorFlow's implementation in nn_impl.py:\n *\n * For brevity, let `x = logits`, `z = labels`.  The logistic loss is\n *      z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))\n *    = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))\n *    = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))\n *    = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))\n *    = (1 - z) * x + log(1 + exp(-x))\n *    = x - x * z + log(1 + exp(-x))\n * For x < 0, to avoid overflow in exp(-x), we reformulate the above\n *      x - x * z + log(1 + exp(-x))\n *    = log(exp(x)) - x * z + log(1 + exp(-x))\n *    = - x * z + log(1 + exp(x))\n * Hence, to ensure stability and avoid overflow, the implementation uses this\n * equivalent formulation\n *    max(x, 0) - x * z + log(1 + exp(-abs(x)))\n *\n * @param labels The labels.\n * @param logits The logits.\n */\nexport function sigmoidCrossEntropyWithLogits(\n    labels: Tensor, logits: Tensor): Tensor {\n  if (!util.arraysEqual(labels.shape, logits.shape)) {\n    throw new ValueError(\n        `logits and labels must have the same shape, but got shapes ` +\n        `${JSON.stringify(labels.shape)} and ${JSON.stringify(logits.shape)}`);\n  }\n  return tidy(() => {\n    // The logistic loss formula from above is\n    //   x - x * z + log(1 + exp(-x))\n    // For x < 0, a more numerically stable formula is\n    //   -x * z + log(1 + exp(x))\n    // Note that these two expressions can be combined into the following:\n    //   max(x, 0) - x * z + log(1 + exp(-abs(x)))\n    const reluLogits = tfc.relu(logits);\n    const negAbsLogits = tfc.neg(tfc.abs(logits));\n    return tfc.add(\n        tfc.sub(reluLogits, tfc.mul(logits, labels)),\n        tfc.log1p(tfc.exp(negAbsLogits)));\n  });\n}\n\nexport function binaryCrossentropy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    let y: Tensor;\n    y = tfc.clipByValue(yPred, epsilon(), 1 - epsilon());\n    y = tfc.log(tfc.div(y, tfc.sub(1, y)));\n    return tfc.mean(sigmoidCrossEntropyWithLogits(yTrue, y), -1);\n  });\n}\n\nexport function kullbackLeiblerDivergence(\n    yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const clippedTrue = tfc.clipByValue(yTrue, epsilon(), 1);\n    const clippedPred = tfc.clipByValue(yPred, epsilon(), 1);\n    return tfc.sum(\n        tfc.mul(yTrue, tfc.log(tfc.div(clippedTrue, clippedPred))), -1);\n  });\n}\n\nexport function poisson(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const logPred = tfc.log(tfc.add(epsilon(), yPred));\n    return tfc.mean(tfc.sub(yPred, tfc.mul(yTrue, logPred)), -1);\n  });\n}\n\nexport function cosineProximity(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const trueNormalized = l2Normalize(yTrue, -1);\n    const predNormalized = l2Normalize(yPred, -1);\n    const trueXPred = tfc.mul(trueNormalized, predNormalized);\n    return tfc.neg(tfc.sum(trueXPred, -1));\n  });\n}\n\nexport const mse = meanSquaredError;\nexport const MSE = meanSquaredError;\nexport const mae = meanAbsoluteError;\nexport const MAE = meanAbsoluteError;\nexport const mape = meanAbsolutePercentageError;\nexport const MAPE = meanAbsolutePercentageError;\nexport const msle = meanSquaredLogarithmicError;\nexport const MSLE = meanSquaredLogarithmicError;\nexport const kld = kullbackLeiblerDivergence;\nexport const KLD = kullbackLeiblerDivergence;\nexport const cosine = cosineProximity;\n\n// TODO(michaelterry): Add deserialize() function.\n\nexport const lossesMap: {[functionName: string]: LossOrMetricFn} = {\n  meanSquaredError,\n  meanAbsoluteError,\n  meanAbsolutePercentageError,\n  meanSquaredLogarithmicError,\n  squaredHinge,\n  hinge,\n  categoricalHinge,\n  logcosh,\n  categoricalCrossentropy,\n  sparseCategoricalCrossentropy,\n  binaryCrossentropy,\n  kullbackLeiblerDivergence,\n  poisson,\n  cosineProximity\n};\n\n// Porting note: This diverges from the PyKeras implementation and may need to\n// change based on (de)serialization requirements.\nexport function get(identifierOrFn: string|LossOrMetricFn): LossOrMetricFn {\n  if (typeof identifierOrFn === 'string') {\n    if (identifierOrFn in lossesMap) {\n      return lossesMap[identifierOrFn];\n    }\n    let errMsg = `Unknown loss ${identifierOrFn}`;\n    if (identifierOrFn.toLowerCase().includes('softmaxcrossentropy')) {\n      errMsg = `Unknown loss ${identifierOrFn}. ` +\n          'Use \"categoricalCrossentropy\" as the string name for ' +\n          'tf.losses.softmaxCrossEntropy';\n    }\n    throw new ValueError(errMsg);\n  } else {\n    return identifierOrFn;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}