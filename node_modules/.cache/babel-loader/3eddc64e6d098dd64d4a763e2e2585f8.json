{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { op } from './operation';\nimport { randomNormal } from './random_normal';\n/**\n * Creates a `tf.Tensor` with values sampled from a normal distribution.\n *\n * The generated values will have mean 0 and standard deviation 1.\n *\n * ```js\n * tf.randomStandardNormal([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The data type of the output.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\n\nfunction randomStandardNormal_(shape, dtype, seed) {\n  if (dtype != null && dtype === 'bool') {\n    throw new Error(`Unsupported data type ${dtype}`);\n  }\n\n  return randomNormal(shape, 0, 1, dtype, seed);\n}\n\nexport const randomStandardNormal = op({\n  randomStandardNormal_\n});","map":{"version":3,"sources":["../../../../../../tfjs-core/src/ops/random_standard_normal.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAKH,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,YAAR,QAA2B,iBAA3B;AAEA;;;;;;;;;;;;;;AAcG;;AACH,SAAS,qBAAT,CACI,KADJ,EACwB,KADxB,EACmD,IADnD,EACgE;EAC9D,IAAI,KAAK,IAAI,IAAT,IAAkB,KAAkB,KAAK,MAA7C,EAAqD;IACnD,MAAM,IAAI,KAAJ,CAAU,yBAAyB,KAAK,EAAxC,CAAN;EACD;;EACD,OAAO,YAAY,CAAC,KAAD,EAAQ,CAAR,EAAW,CAAX,EAAc,KAAd,EAAqB,IAArB,CAAnB;AACD;;AAED,OAAO,MAAM,oBAAoB,GAAG,EAAE,CAAC;EAAC;AAAD,CAAD,CAA/B","sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {DataType, Rank, ShapeMap} from '../types';\n\nimport {op} from './operation';\nimport {randomNormal} from './random_normal';\n\n/**\n * Creates a `tf.Tensor` with values sampled from a normal distribution.\n *\n * The generated values will have mean 0 and standard deviation 1.\n *\n * ```js\n * tf.randomStandardNormal([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The data type of the output.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction randomStandardNormal_<R extends Rank>(\n    shape: ShapeMap[R], dtype?: 'float32'|'int32', seed?: number): Tensor<R> {\n  if (dtype != null && (dtype as DataType) === 'bool') {\n    throw new Error(`Unsupported data type ${dtype}`);\n  }\n  return randomNormal(shape, 0, 1, dtype, seed);\n}\n\nexport const randomStandardNormal = op({randomStandardNormal_});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}