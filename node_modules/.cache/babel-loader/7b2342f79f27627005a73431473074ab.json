{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Built-in metrics.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { tidy } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { NotImplementedError, ValueError } from './errors';\nimport { categoricalCrossentropy as categoricalCrossentropyLoss, cosineProximity, meanAbsoluteError, meanAbsolutePercentageError, meanSquaredError, sparseCategoricalCrossentropy as sparseCategoricalCrossentropyLoss } from './losses';\nimport { binaryCrossentropy as lossBinaryCrossentropy } from './losses';\nimport { lossesMap } from './losses';\nimport * as util from './utils/generic_utils';\nexport function binaryAccuracy(yTrue, yPred) {\n  return tidy(() => {\n    const threshold = tfc.mul(.5, tfc.onesLike(yPred));\n    const yPredThresholded = K.cast(tfc.greater(yPred, threshold), yTrue.dtype);\n    return tfc.mean(tfc.equal(yTrue, yPredThresholded), -1);\n  });\n}\nexport function categoricalAccuracy(yTrue, yPred) {\n  return tidy(() => K.cast(tfc.equal(tfc.argMax(yTrue, -1), tfc.argMax(yPred, -1)), 'float32'));\n}\n\nfunction truePositives(yTrue, yPred) {\n  return tidy(() => {\n    return tfc.cast(tfc.sum(tfc.logicalAnd(tfc.equal(yTrue, 1), tfc.equal(yPred, 1))), 'float32');\n  });\n}\n\nfunction falseNegatives(yTrue, yPred) {\n  return tidy(() => {\n    return tfc.cast(tfc.sum(tfc.logicalAnd(tfc.equal(yTrue, 1), tfc.equal(yPred, 0))), 'float32');\n  });\n}\n\nfunction falsePositives(yTrue, yPred) {\n  return tidy(() => {\n    return tfc.cast(tfc.sum(tfc.logicalAnd(tfc.equal(yTrue, 0), tfc.equal(yPred, 1))), 'float32');\n  });\n}\n\nexport function precision(yTrue, yPred) {\n  return tidy(() => {\n    const tp = truePositives(yTrue, yPred);\n    const fp = falsePositives(yTrue, yPred);\n    const denominator = tfc.add(tp, fp);\n    return tfc.cast(tfc.where(tfc.greater(denominator, 0), tfc.div(tp, denominator), 0), 'float32');\n  });\n}\nexport function recall(yTrue, yPred) {\n  return tidy(() => {\n    const tp = truePositives(yTrue, yPred);\n    const fn = falseNegatives(yTrue, yPred);\n    const denominator = tfc.add(tp, fn);\n    return tfc.cast(tfc.where(tfc.greater(denominator, 0), tfc.div(tp, denominator), 0), 'float32');\n  });\n}\nexport function binaryCrossentropy(yTrue, yPred) {\n  return lossBinaryCrossentropy(yTrue, yPred);\n}\nexport function sparseCategoricalAccuracy(yTrue, yPred) {\n  if (yTrue.rank === yPred.rank) {\n    yTrue = tfc.squeeze(yTrue, [yTrue.rank - 1]);\n  }\n\n  yPred = tfc.argMax(yPred, -1);\n\n  if (yPred.dtype !== yTrue.dtype) {\n    yPred = tfc.cast(yPred, yTrue.dtype);\n  }\n\n  return tfc.cast(tfc.equal(yTrue, yPred), 'float32');\n}\nexport function topKCategoricalAccuracy(yTrue, yPred) {\n  throw new NotImplementedError();\n}\nexport function sparseTopKCategoricalAccuracy(yTrue, yPred) {\n  throw new NotImplementedError();\n} // Aliases.\n\nexport const mse = meanSquaredError;\nexport const MSE = meanSquaredError;\nexport const mae = meanAbsoluteError;\nexport const MAE = meanAbsoluteError;\nexport const mape = meanAbsolutePercentageError;\nexport const MAPE = meanAbsolutePercentageError;\nexport const categoricalCrossentropy = categoricalCrossentropyLoss;\nexport const cosine = cosineProximity;\nexport const sparseCategoricalCrossentropy = sparseCategoricalCrossentropyLoss; // TODO(cais, nielsene): Add serialize().\n\nexport const metricsMap = {\n  binaryAccuracy,\n  categoricalAccuracy,\n  precision,\n  categoricalCrossentropy,\n  sparseCategoricalCrossentropy,\n  mse,\n  MSE,\n  mae,\n  MAE,\n  mape,\n  MAPE,\n  cosine\n};\nexport function get(identifier) {\n  if (typeof identifier === 'string' && identifier in metricsMap) {\n    return metricsMap[identifier];\n  } else if (typeof identifier !== 'string' && identifier != null) {\n    return identifier;\n  } else {\n    throw new ValueError(`Unknown metric ${identifier}`);\n  }\n}\n/**\n * Get the shortcut function name.\n *\n * If the fn name is a string,\n *   directly return the string name.\n * If the function is included in metricsMap or lossesMap,\n *   return key of the map.\n *   - If the function relative to multiple keys,\n *     return the first found key as the function name.\n *   - If the function exists in both lossesMap and metricsMap,\n *     search lossesMap first.\n * If the function is not included in metricsMap or lossesMap,\n *   return the function name.\n *\n * @param fn loss function, metric function, or short cut name.\n * @returns Loss or Metric name in string.\n */\n\nexport function getLossOrMetricName(fn) {\n  util.assert(fn !== null, `Unknown LossOrMetricFn ${fn}`);\n\n  if (typeof fn === 'string') {\n    return fn;\n  } else {\n    let fnName;\n\n    for (const key of Object.keys(lossesMap)) {\n      if (lossesMap[key] === fn) {\n        fnName = key;\n        break;\n      }\n    }\n\n    if (fnName !== undefined) {\n      return fnName;\n    }\n\n    for (const key of Object.keys(metricsMap)) {\n      if (metricsMap[key] === fn) {\n        fnName = key;\n        break;\n      }\n    }\n\n    if (fnName !== undefined) {\n      return fnName;\n    }\n\n    return fn.name;\n  }\n}","map":{"version":3,"sources":["../../../../../tfjs-layers/src/metrics.ts"],"names":[],"mappings":"AAAA;;;;;;;;AAQG;;AAEH;;AAEG;AAEH,OAAO,KAAK,GAAZ,MAAqB,uBAArB;AACA,SAAgB,IAAhB,QAA2B,uBAA3B;AAEA,OAAO,KAAK,CAAZ,MAAmB,wBAAnB;AACA,SAAQ,mBAAR,EAA6B,UAA7B,QAA8C,UAA9C;AACA,SAAQ,uBAAuB,IAAI,2BAAnC,EAAgE,eAAhE,EAAiF,iBAAjF,EAAoG,2BAApG,EAAiI,gBAAjI,EAAmJ,6BAA6B,IAAI,iCAApL,QAA4N,UAA5N;AACA,SAAQ,kBAAkB,IAAI,sBAA9B,QAA2D,UAA3D;AACA,SAAQ,SAAR,QAAwB,UAAxB;AAEA,OAAO,KAAK,IAAZ,MAAsB,uBAAtB;AAEA,OAAM,SAAU,cAAV,CAAyB,KAAzB,EAAwC,KAAxC,EAAqD;EACzD,OAAO,IAAI,CAAC,MAAK;IACf,MAAM,SAAS,GAAG,GAAG,CAAC,GAAJ,CAAQ,EAAR,EAAY,GAAG,CAAC,QAAJ,CAAa,KAAb,CAAZ,CAAlB;IACA,MAAM,gBAAgB,GAAG,CAAC,CAAC,IAAF,CAAO,GAAG,CAAC,OAAJ,CAAY,KAAZ,EAAmB,SAAnB,CAAP,EAAsC,KAAK,CAAC,KAA5C,CAAzB;IACA,OAAO,GAAG,CAAC,IAAJ,CAAS,GAAG,CAAC,KAAJ,CAAU,KAAV,EAAiB,gBAAjB,CAAT,EAA6C,CAAC,CAA9C,CAAP;EACD,CAJU,CAAX;AAKD;AAED,OAAM,SAAU,mBAAV,CAA8B,KAA9B,EAA6C,KAA7C,EAA0D;EAC9D,OAAO,IAAI,CACP,MAAM,CAAC,CAAC,IAAF,CACF,GAAG,CAAC,KAAJ,CAAU,GAAG,CAAC,MAAJ,CAAW,KAAX,EAAkB,CAAC,CAAnB,CAAV,EAAiC,GAAG,CAAC,MAAJ,CAAW,KAAX,EAAkB,CAAC,CAAnB,CAAjC,CADE,EACuD,SADvD,CADC,CAAX;AAGD;;AAED,SAAS,aAAT,CAAuB,KAAvB,EAAsC,KAAtC,EAAmD;EACjD,OAAO,IAAI,CAAC,MAAK;IACf,OAAO,GAAG,CAAC,IAAJ,CACH,GAAG,CAAC,GAAJ,CAAQ,GAAG,CAAC,UAAJ,CAAe,GAAG,CAAC,KAAJ,CAAU,KAAV,EAAiB,CAAjB,CAAf,EAAoC,GAAG,CAAC,KAAJ,CAAU,KAAV,EAAiB,CAAjB,CAApC,CAAR,CADG,EAEH,SAFG,CAAP;EAGD,CAJU,CAAX;AAKD;;AAED,SAAS,cAAT,CAAwB,KAAxB,EAAuC,KAAvC,EAAoD;EAClD,OAAO,IAAI,CAAC,MAAK;IACf,OAAO,GAAG,CAAC,IAAJ,CACH,GAAG,CAAC,GAAJ,CAAQ,GAAG,CAAC,UAAJ,CAAe,GAAG,CAAC,KAAJ,CAAU,KAAV,EAAiB,CAAjB,CAAf,EAAoC,GAAG,CAAC,KAAJ,CAAU,KAAV,EAAiB,CAAjB,CAApC,CAAR,CADG,EAEH,SAFG,CAAP;EAGD,CAJU,CAAX;AAKD;;AAED,SAAS,cAAT,CAAwB,KAAxB,EAAuC,KAAvC,EAAoD;EAClD,OAAO,IAAI,CAAC,MAAK;IACf,OAAO,GAAG,CAAC,IAAJ,CACH,GAAG,CAAC,GAAJ,CAAQ,GAAG,CAAC,UAAJ,CAAe,GAAG,CAAC,KAAJ,CAAU,KAAV,EAAiB,CAAjB,CAAf,EAAoC,GAAG,CAAC,KAAJ,CAAU,KAAV,EAAiB,CAAjB,CAApC,CAAR,CADG,EAEH,SAFG,CAAP;EAGD,CAJU,CAAX;AAKD;;AAED,OAAM,SAAU,SAAV,CAAoB,KAApB,EAAmC,KAAnC,EAAgD;EACpD,OAAO,IAAI,CAAC,MAAK;IACf,MAAM,EAAE,GAAG,aAAa,CAAC,KAAD,EAAQ,KAAR,CAAxB;IACA,MAAM,EAAE,GAAG,cAAc,CAAC,KAAD,EAAQ,KAAR,CAAzB;IAEA,MAAM,WAAW,GAAG,GAAG,CAAC,GAAJ,CAAQ,EAAR,EAAY,EAAZ,CAApB;IAEA,OAAO,GAAG,CAAC,IAAJ,CACH,GAAG,CAAC,KAAJ,CAAU,GAAG,CAAC,OAAJ,CAAY,WAAZ,EAAyB,CAAzB,CAAV,EAAuC,GAAG,CAAC,GAAJ,CAAQ,EAAR,EAAY,WAAZ,CAAvC,EAAiE,CAAjE,CADG,EAEH,SAFG,CAAP;EAGD,CATU,CAAX;AAUD;AAED,OAAM,SAAU,MAAV,CAAiB,KAAjB,EAAgC,KAAhC,EAA6C;EACjD,OAAO,IAAI,CAAC,MAAK;IACf,MAAM,EAAE,GAAG,aAAa,CAAC,KAAD,EAAQ,KAAR,CAAxB;IACA,MAAM,EAAE,GAAG,cAAc,CAAC,KAAD,EAAQ,KAAR,CAAzB;IAEA,MAAM,WAAW,GAAG,GAAG,CAAC,GAAJ,CAAQ,EAAR,EAAY,EAAZ,CAApB;IAEA,OAAO,GAAG,CAAC,IAAJ,CACH,GAAG,CAAC,KAAJ,CAAU,GAAG,CAAC,OAAJ,CAAY,WAAZ,EAAyB,CAAzB,CAAV,EAAuC,GAAG,CAAC,GAAJ,CAAQ,EAAR,EAAY,WAAZ,CAAvC,EAAiE,CAAjE,CADG,EAEH,SAFG,CAAP;EAGD,CATU,CAAX;AAUD;AAED,OAAM,SAAU,kBAAV,CAA6B,KAA7B,EAA4C,KAA5C,EAAyD;EAC7D,OAAO,sBAAsB,CAAC,KAAD,EAAQ,KAAR,CAA7B;AACD;AAED,OAAM,SAAU,yBAAV,CACF,KADE,EACa,KADb,EAC0B;EAC9B,IAAI,KAAK,CAAC,IAAN,KAAe,KAAK,CAAC,IAAzB,EAA+B;IAC7B,KAAK,GAAG,GAAG,CAAC,OAAJ,CAAY,KAAZ,EAAmB,CAAC,KAAK,CAAC,IAAN,GAAa,CAAd,CAAnB,CAAR;EACD;;EACD,KAAK,GAAG,GAAG,CAAC,MAAJ,CAAW,KAAX,EAAkB,CAAC,CAAnB,CAAR;;EACA,IAAI,KAAK,CAAC,KAAN,KAAgB,KAAK,CAAC,KAA1B,EAAiC;IAC/B,KAAK,GAAG,GAAG,CAAC,IAAJ,CAAS,KAAT,EAAgB,KAAK,CAAC,KAAtB,CAAR;EACD;;EACD,OAAO,GAAG,CAAC,IAAJ,CAAS,GAAG,CAAC,KAAJ,CAAU,KAAV,EAAiB,KAAjB,CAAT,EAAkC,SAAlC,CAAP;AACD;AAED,OAAM,SAAU,uBAAV,CAAkC,KAAlC,EAAiD,KAAjD,EAA8D;EAClE,MAAM,IAAI,mBAAJ,EAAN;AACD;AAED,OAAM,SAAU,6BAAV,CACF,KADE,EACa,KADb,EAC0B;EAC9B,MAAM,IAAI,mBAAJ,EAAN;AACD,C,CAED;;AACA,OAAO,MAAM,GAAG,GAAG,gBAAZ;AACP,OAAO,MAAM,GAAG,GAAG,gBAAZ;AACP,OAAO,MAAM,GAAG,GAAG,iBAAZ;AACP,OAAO,MAAM,GAAG,GAAG,iBAAZ;AACP,OAAO,MAAM,IAAI,GAAG,2BAAb;AACP,OAAO,MAAM,IAAI,GAAG,2BAAb;AACP,OAAO,MAAM,uBAAuB,GAAG,2BAAhC;AACP,OAAO,MAAM,MAAM,GAAG,eAAf;AACP,OAAO,MAAM,6BAA6B,GAAG,iCAAtC,C,CAEP;;AAEA,OAAO,MAAM,UAAU,GAA6C;EAClE,cADkE;EAElE,mBAFkE;EAGlE,SAHkE;EAIlE,uBAJkE;EAKlE,6BALkE;EAMlE,GANkE;EAOlE,GAPkE;EAQlE,GARkE;EASlE,GATkE;EAUlE,IAVkE;EAWlE,IAXkE;EAYlE;AAZkE,CAA7D;AAeP,OAAM,SAAU,GAAV,CAAc,UAAd,EAA+C;EACnD,IAAI,OAAO,UAAP,KAAsB,QAAtB,IAAkC,UAAU,IAAI,UAApD,EAAgE;IAC9D,OAAO,UAAU,CAAC,UAAD,CAAjB;EACD,CAFD,MAEO,IAAI,OAAO,UAAP,KAAsB,QAAtB,IAAkC,UAAU,IAAI,IAApD,EAA0D;IAC/D,OAAO,UAAP;EACD,CAFM,MAEA;IACL,MAAM,IAAI,UAAJ,CAAe,kBAAkB,UAAU,EAA3C,CAAN;EACD;AACF;AAED;;;;;;;;;;;;;;;;AAgBG;;AACH,OAAM,SAAU,mBAAV,CAA8B,EAA9B,EAAuD;EAC3D,IAAI,CAAC,MAAL,CAAY,EAAE,KAAK,IAAnB,EAAyB,0BAA0B,EAAE,EAArD;;EACA,IAAI,OAAO,EAAP,KAAc,QAAlB,EAA4B;IAC1B,OAAO,EAAP;EACD,CAFD,MAEO;IACL,IAAI,MAAJ;;IACA,KAAK,MAAM,GAAX,IAAkB,MAAM,CAAC,IAAP,CAAY,SAAZ,CAAlB,EAA0C;MACxC,IAAI,SAAS,CAAC,GAAD,CAAT,KAAmB,EAAvB,EAA2B;QACzB,MAAM,GAAG,GAAT;QACA;MACD;IACF;;IACD,IAAI,MAAM,KAAK,SAAf,EAA0B;MACxB,OAAO,MAAP;IACD;;IACD,KAAK,MAAM,GAAX,IAAkB,MAAM,CAAC,IAAP,CAAY,UAAZ,CAAlB,EAA2C;MACzC,IAAI,UAAU,CAAC,GAAD,CAAV,KAAoB,EAAxB,EAA4B;QAC1B,MAAM,GAAG,GAAT;QACA;MACD;IACF;;IACD,IAAI,MAAM,KAAK,SAAf,EAA0B;MACxB,OAAO,MAAP;IACD;;IACD,OAAQ,EAAe,CAAC,IAAxB;EACD;AACF","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Built-in metrics.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {Tensor, tidy} from '@tensorflow/tfjs-core';\n\nimport * as K from './backend/tfjs_backend';\nimport {NotImplementedError, ValueError} from './errors';\nimport {categoricalCrossentropy as categoricalCrossentropyLoss, cosineProximity, meanAbsoluteError, meanAbsolutePercentageError, meanSquaredError, sparseCategoricalCrossentropy as sparseCategoricalCrossentropyLoss} from './losses';\nimport {binaryCrossentropy as lossBinaryCrossentropy} from './losses';\nimport {lossesMap} from './losses';\nimport {LossOrMetricFn} from './types';\nimport * as util from './utils/generic_utils';\n\nexport function binaryAccuracy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const threshold = tfc.mul(.5, tfc.onesLike(yPred));\n    const yPredThresholded = K.cast(tfc.greater(yPred, threshold), yTrue.dtype);\n    return tfc.mean(tfc.equal(yTrue, yPredThresholded), -1);\n  });\n}\n\nexport function categoricalAccuracy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(\n      () => K.cast(\n          tfc.equal(tfc.argMax(yTrue, -1), tfc.argMax(yPred, -1)), 'float32'));\n}\n\nfunction truePositives(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    return tfc.cast(\n        tfc.sum(tfc.logicalAnd(tfc.equal(yTrue, 1), tfc.equal(yPred, 1))),\n        'float32');\n  });\n}\n\nfunction falseNegatives(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    return tfc.cast(\n        tfc.sum(tfc.logicalAnd(tfc.equal(yTrue, 1), tfc.equal(yPred, 0))),\n        'float32');\n  });\n}\n\nfunction falsePositives(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    return tfc.cast(\n        tfc.sum(tfc.logicalAnd(tfc.equal(yTrue, 0), tfc.equal(yPred, 1))),\n        'float32');\n  });\n}\n\nexport function precision(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const tp = truePositives(yTrue, yPred);\n    const fp = falsePositives(yTrue, yPred);\n\n    const denominator = tfc.add(tp, fp);\n\n    return tfc.cast(\n        tfc.where(tfc.greater(denominator, 0), tfc.div(tp, denominator), 0),\n        'float32');\n  });\n}\n\nexport function recall(yTrue: Tensor, yPred: Tensor): Tensor {\n  return tidy(() => {\n    const tp = truePositives(yTrue, yPred);\n    const fn = falseNegatives(yTrue, yPred);\n\n    const denominator = tfc.add(tp, fn);\n\n    return tfc.cast(\n        tfc.where(tfc.greater(denominator, 0), tfc.div(tp, denominator), 0),\n        'float32');\n  });\n}\n\nexport function binaryCrossentropy(yTrue: Tensor, yPred: Tensor): Tensor {\n  return lossBinaryCrossentropy(yTrue, yPred);\n}\n\nexport function sparseCategoricalAccuracy(\n    yTrue: Tensor, yPred: Tensor): Tensor {\n  if (yTrue.rank === yPred.rank) {\n    yTrue = tfc.squeeze(yTrue, [yTrue.rank - 1]);\n  }\n  yPred = tfc.argMax(yPred, -1);\n  if (yPred.dtype !== yTrue.dtype) {\n    yPred = tfc.cast(yPred, yTrue.dtype);\n  }\n  return tfc.cast(tfc.equal(yTrue, yPred), 'float32');\n}\n\nexport function topKCategoricalAccuracy(yTrue: Tensor, yPred: Tensor): Tensor {\n  throw new NotImplementedError();\n}\n\nexport function sparseTopKCategoricalAccuracy(\n    yTrue: Tensor, yPred: Tensor): Tensor {\n  throw new NotImplementedError();\n}\n\n// Aliases.\nexport const mse = meanSquaredError;\nexport const MSE = meanSquaredError;\nexport const mae = meanAbsoluteError;\nexport const MAE = meanAbsoluteError;\nexport const mape = meanAbsolutePercentageError;\nexport const MAPE = meanAbsolutePercentageError;\nexport const categoricalCrossentropy = categoricalCrossentropyLoss;\nexport const cosine = cosineProximity;\nexport const sparseCategoricalCrossentropy = sparseCategoricalCrossentropyLoss;\n\n// TODO(cais, nielsene): Add serialize().\n\nexport const metricsMap: {[functionName: string]: LossOrMetricFn} = {\n  binaryAccuracy,\n  categoricalAccuracy,\n  precision,\n  categoricalCrossentropy,\n  sparseCategoricalCrossentropy,\n  mse,\n  MSE,\n  mae,\n  MAE,\n  mape,\n  MAPE,\n  cosine\n};\n\nexport function get(identifier: string|LossOrMetricFn): LossOrMetricFn {\n  if (typeof identifier === 'string' && identifier in metricsMap) {\n    return metricsMap[identifier];\n  } else if (typeof identifier !== 'string' && identifier != null) {\n    return identifier;\n  } else {\n    throw new ValueError(`Unknown metric ${identifier}`);\n  }\n}\n\n/**\n * Get the shortcut function name.\n *\n * If the fn name is a string,\n *   directly return the string name.\n * If the function is included in metricsMap or lossesMap,\n *   return key of the map.\n *   - If the function relative to multiple keys,\n *     return the first found key as the function name.\n *   - If the function exists in both lossesMap and metricsMap,\n *     search lossesMap first.\n * If the function is not included in metricsMap or lossesMap,\n *   return the function name.\n *\n * @param fn loss function, metric function, or short cut name.\n * @returns Loss or Metric name in string.\n */\nexport function getLossOrMetricName(fn: string|LossOrMetricFn): string {\n  util.assert(fn !== null, `Unknown LossOrMetricFn ${fn}`);\n  if (typeof fn === 'string') {\n    return fn;\n  } else {\n    let fnName;\n    for (const key of Object.keys(lossesMap)) {\n      if (lossesMap[key] === fn) {\n        fnName = key;\n        break;\n      }\n    }\n    if (fnName !== undefined) {\n      return fnName;\n    }\n    for (const key of Object.keys(metricsMap)) {\n      if (metricsMap[key] === fn) {\n        fnName = key;\n        break;\n      }\n    }\n    if (fnName !== undefined) {\n      return fnName;\n    }\n    return (fn as Function).name;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}