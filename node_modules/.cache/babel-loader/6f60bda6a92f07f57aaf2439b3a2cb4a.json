{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { KernelBackend } from './backends/backend';\nimport { Environment, setEnvironmentGlobal } from './environment';\nimport { getGlobalNamespace } from './global_util';\nimport { Add, Cast, Identity } from './kernel_names';\nimport { getGradient, getKernel, getKernelsForBackend } from './kernel_registry';\nimport * as log from './log';\nimport { Profiler } from './profiler';\nimport { backpropagateGradients, getFilteredNodesXToY } from './tape';\nimport { setTensorTracker, Tensor, Variable } from './tensor';\nimport { getTensorsInContainer } from './tensor_util';\nimport * as util from './util';\nimport { bytesFromStringArray, makeOnesTypedArray, now, sizeFromShape } from './util';\n\nfunction isRegisteredKernelInvocation(kernelInvocation) {\n  return kernelInvocation.kernelName != null;\n}\n\nclass EngineState {\n  constructor() {\n    // Public since optimizers will use it.\n    this.registeredVariables = {};\n    this.nextTapeNodeId = 0;\n    this.numBytes = 0;\n    this.numTensors = 0;\n    this.numStringTensors = 0;\n    this.numDataBuffers = 0; // Number of nested tf.grad() statements when computing higher-order\n    // gradients. E.g. `1` for first-order gradients and `2` for second-order\n    // gradients. Used to track if the tape should be removed after a backprop.\n\n    this.gradientDepth = 0; // Number of nested kernel calls. When kernel depth is greater than 1, we turn\n    // off the tape.\n\n    this.kernelDepth = 0;\n    this.scopeStack = [];\n    /**\n     * Keeps track of the number of data moves during a kernel execution. We\n     * maintain a stack since kernels can call other kernels, recursively.\n     */\n\n    this.numDataMovesStack = [];\n    this.nextScopeId = 0;\n    this.tensorInfo = new WeakMap();\n    this.profiling = false;\n    this.activeProfile = {\n      newBytes: 0,\n      newTensors: 0,\n      peakBytes: 0,\n      kernels: [],\n      result: null,\n\n      get kernelNames() {\n        return Array.from(new Set(this.kernels.map(k => k.name)));\n      }\n\n    };\n  }\n\n  dispose() {\n    for (const variableName in this.registeredVariables) {\n      this.registeredVariables[variableName].dispose();\n    }\n  }\n\n}\n\nexport class Engine {\n  constructor(ENV) {\n    this.ENV = ENV;\n    this.registry = {};\n    this.registryFactory = {};\n    this.pendingBackendInitId = 0;\n    this.state = new EngineState();\n  }\n\n  async ready() {\n    if (this.pendingBackendInit != null) {\n      return this.pendingBackendInit.then(() => {});\n    }\n\n    if (this.backendInstance != null) {\n      return;\n    }\n\n    const sortedBackends = this.getSortedBackends();\n\n    for (let i = 0; i < sortedBackends.length; i++) {\n      const backendName = sortedBackends[i];\n      const success = await this.initializeBackend(backendName).success;\n\n      if (success) {\n        await this.setBackend(backendName);\n        return;\n      }\n    }\n\n    throw new Error(`Could not initialize any backends, all backend initializations ` + `failed.`);\n  }\n\n  get backend() {\n    if (this.pendingBackendInit != null) {\n      throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make ` + `sure to await tf.ready() or await tf.setBackend() before calling ` + `other methods`);\n    }\n\n    if (this.backendInstance == null) {\n      const {\n        name,\n        asyncInit\n      } = this.initializeBackendsAndReturnBest();\n\n      if (asyncInit) {\n        throw new Error(`The highest priority backend '${name}' has not yet been ` + `initialized. Make sure to await tf.ready() or ` + `await tf.setBackend() before calling other methods`);\n      }\n\n      this.setBackend(name);\n    }\n\n    return this.backendInstance;\n  }\n\n  backendNames() {\n    return Object.keys(this.registryFactory);\n  }\n\n  findBackend(backendName) {\n    if (!(backendName in this.registry)) {\n      // If the backend hasn't been initialized but we have a registry entry for\n      // it, initialize it and return it.\n      if (backendName in this.registryFactory) {\n        const {\n          asyncInit\n        } = this.initializeBackend(backendName);\n\n        if (asyncInit) {\n          // Backend is not ready yet.\n          return null;\n        }\n      } else {\n        return null;\n      }\n    }\n\n    return this.registry[backendName];\n  }\n\n  findBackendFactory(backendName) {\n    if (!(backendName in this.registryFactory)) {\n      return null;\n    }\n\n    return this.registryFactory[backendName].factory;\n  }\n\n  registerBackend(backendName, factory) {\n    let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n    if (backendName in this.registryFactory) {\n      log.warn(`${backendName} backend was already registered. ` + `Reusing existing backend factory.`);\n      return false;\n    }\n\n    this.registryFactory[backendName] = {\n      factory,\n      priority\n    };\n    return true;\n  }\n\n  async setBackend(backendName) {\n    if (this.registryFactory[backendName] == null) {\n      throw new Error(`Backend name '${backendName}' not found in registry`);\n    }\n\n    this.backendName = backendName;\n\n    if (this.registry[backendName] == null) {\n      this.backendInstance = null;\n      const {\n        success,\n        asyncInit\n      } = this.initializeBackend(backendName);\n      const result = asyncInit ? await success : success;\n\n      if (!result) {\n        return false;\n      }\n    }\n\n    this.backendInstance = this.registry[backendName];\n    this.setupRegisteredKernels(); // Reset the profiler.\n\n    this.profiler = new Profiler(this.backendInstance);\n    return true;\n  }\n\n  setupRegisteredKernels() {\n    const kernels = getKernelsForBackend(this.backendName);\n    kernels.forEach(kernel => {\n      if (kernel.setupFunc != null) {\n        kernel.setupFunc(this.backendInstance);\n      }\n    });\n  }\n\n  disposeRegisteredKernels(backendName) {\n    const kernels = getKernelsForBackend(backendName);\n    kernels.forEach(kernel => {\n      if (kernel.disposeFunc != null) {\n        kernel.disposeFunc(this.registry[backendName]);\n      }\n    });\n  }\n  /**\n   * Initializes a backend by looking up the backend name in the factory\n   * registry and calling the factory method. Returns a boolean representing\n   * whether the initialization of the backend suceeded. Throws an error if\n   * there is no backend in the factory registry.\n   */\n\n\n  initializeBackend(backendName) {\n    const registryFactoryEntry = this.registryFactory[backendName];\n\n    if (registryFactoryEntry == null) {\n      throw new Error(`Cannot initialize backend ${backendName}, no registration found.`);\n    }\n\n    try {\n      const backend = registryFactoryEntry.factory();\n      /* Test if the factory returns a promise.\n      Done in a more liberal way than\n      previous 'Promise.resolve(backend)===backend'\n      as we needed to account for custom Promise\n      implementations (e.g. Angular) */\n\n      if (backend && !(backend instanceof KernelBackend) && typeof backend.then === 'function') {\n        const promiseId = ++this.pendingBackendInitId;\n        const success = backend.then(backendInstance => {\n          // Outdated promise. Another backend was set in the meantime.\n          if (promiseId < this.pendingBackendInitId) {\n            return false;\n          }\n\n          this.registry[backendName] = backendInstance;\n          this.pendingBackendInit = null;\n          return true;\n        }).catch(err => {\n          // Outdated promise. Another backend was set in the meantime.\n          if (promiseId < this.pendingBackendInitId) {\n            return false;\n          }\n\n          this.pendingBackendInit = null;\n          log.warn(`Initialization of backend ${backendName} failed`);\n          log.warn(err.stack || err.message);\n          return false;\n        });\n        this.pendingBackendInit = success;\n        return {\n          success,\n          asyncInit: true\n        };\n      } else {\n        this.registry[backendName] = backend;\n        return {\n          success: true,\n          asyncInit: false\n        };\n      }\n    } catch (err) {\n      log.warn(`Initialization of backend ${backendName} failed`);\n      log.warn(err.stack || err.message);\n      return {\n        success: false,\n        asyncInit: false\n      };\n    }\n  }\n\n  removeBackend(backendName) {\n    if (!(backendName in this.registryFactory)) {\n      throw new Error(`${backendName} backend not found in registry`);\n    }\n\n    if (this.backendName === backendName && this.pendingBackendInit != null) {\n      // There is a pending promise of the backend we want to remove. Make it\n      // obsolete.\n      this.pendingBackendInitId++;\n    }\n\n    if (backendName in this.registry) {\n      this.disposeRegisteredKernels(backendName);\n      this.registry[backendName].dispose();\n      delete this.registry[backendName];\n    }\n\n    delete this.registryFactory[backendName]; // Unset the backend if it is active.\n\n    if (this.backendName === backendName) {\n      this.pendingBackendInit = null;\n      this.backendName = null;\n      this.backendInstance = null;\n    }\n  }\n\n  getSortedBackends() {\n    if (Object.keys(this.registryFactory).length === 0) {\n      throw new Error('No backend found in registry.');\n    }\n\n    return Object.keys(this.registryFactory).sort((a, b) => {\n      // Highest priority comes first.\n      return this.registryFactory[b].priority - this.registryFactory[a].priority;\n    });\n  }\n\n  initializeBackendsAndReturnBest() {\n    const sortedBackends = this.getSortedBackends();\n\n    for (let i = 0; i < sortedBackends.length; i++) {\n      const backendName = sortedBackends[i];\n      const {\n        success,\n        asyncInit\n      } = this.initializeBackend(backendName);\n\n      if (asyncInit || success) {\n        return {\n          name: backendName,\n          asyncInit\n        };\n      }\n    }\n\n    throw new Error(`Could not initialize any backends, all backend initializations ` + `failed.`);\n  }\n\n  moveData(backend, dataId) {\n    const info = this.state.tensorInfo.get(dataId);\n    const srcBackend = info.backend;\n    const values = this.readSync(dataId);\n    const refCount = srcBackend.refCount(dataId); // Delete the tensor from the old backend and move it to the new\n    // backend.\n\n    srcBackend.disposeData(dataId, true);\n    info.backend = backend;\n    backend.move(dataId, values, info.shape, info.dtype, refCount);\n\n    if (this.shouldCheckForMemLeaks()) {\n      // Track the number of moves during a kernel execution to correctly\n      // detect memory leaks.\n      this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;\n    }\n  }\n\n  tidy(nameOrFn, fn) {\n    let name = null;\n\n    if (fn == null) {\n      // Called with only 1 argument.\n      if (typeof nameOrFn !== 'function') {\n        throw new Error('Please provide a function to tidy()');\n      }\n\n      fn = nameOrFn;\n    } else {\n      // Called with 2 arguments.\n      if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {\n        throw new Error('When calling with two arguments, the first argument ' + 'to tidy() must be a string');\n      }\n\n      if (typeof fn !== 'function') {\n        throw new Error('When calling with two arguments, the 2nd argument ' + 'to tidy() must be a function');\n      }\n\n      name = nameOrFn; // TODO(nsthorat,smilkov): Do operation logging and performance\n      // profiling.\n    }\n\n    let result;\n    return this.scopedRun(() => this.startScope(name), () => this.endScope(result), () => {\n      result = fn();\n\n      if (result instanceof Promise) {\n        console.error('Cannot return a Promise inside of tidy.');\n      }\n\n      return result;\n    });\n  }\n\n  scopedRun(start, end, f) {\n    start();\n\n    try {\n      const res = f();\n      end();\n      return res;\n    } catch (ex) {\n      end();\n      throw ex;\n    }\n  }\n\n  nextTensorId() {\n    return Engine.nextTensorId++;\n  }\n\n  nextVariableId() {\n    return Engine.nextVariableId++;\n  }\n  /**\n   * This method is called instead of the public-facing tensor.clone() when\n   * saving a tensor for backwards pass. It makes sure to add the clone\n   * operation to the tape regardless of being called inside a kernel\n   * execution.\n   */\n\n\n  clone(x) {\n    const y = ENGINE.runKernel(Identity, {\n      x\n    });\n    const inputs = {\n      x\n    };\n\n    const grad = dy => ({\n      x: () => {\n        const dtype = 'float32';\n        const gradInputs = {\n          x: dy\n        };\n        const attrs = {\n          dtype\n        };\n        return ENGINE.runKernel(Cast, gradInputs, // tslint:disable-next-line: no-unnecessary-type-assertion\n        attrs);\n      }\n    });\n\n    const saved = [];\n    this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved, {});\n    return y;\n  }\n  /**\n   * Execute a kernel with the given name and return the output tensor.\n   *\n   * @param kernelName The name of the kernel to execute.\n   * @param inputs A map of input names to tensors.\n   * @param attrs A map of attribute names to their values. An attribute is a\n   *     primitive (non-tensor) input to the kernel.\n   * @param inputsToSave A list of tensors, inputs to save for the backprop\n   *     computation.\n   * @param outputsToSave A list of booleans, specifying which output to save\n   *     for the backprop computation. These are booleans since the output\n   * tensors are not visible to the user.\n   */\n\n\n  runKernel(kernelName, inputs, attrs) {\n    if (this.backendName == null) {\n      // backend has not been initialized yet (backend initialization is lazy\n      // can be deferred until an op/ kernel is run).\n      // The below getter has side effects that will try to initialize the\n      // backend and set properties like this.backendName\n      // tslint:disable-next-line: no-unused-expression\n      this.backend;\n    }\n\n    const hasKernel = getKernel(kernelName, this.backendName) != null;\n\n    if (!hasKernel) {\n      throw new Error(`Kernel '${kernelName}' not registered for backend '${this.backendName}'`);\n    }\n\n    return this.runKernelFunc({\n      kernelName,\n      inputs,\n      attrs\n    });\n  }\n\n  shouldCheckForMemLeaks() {\n    return this.ENV.getBool('IS_TEST');\n  }\n\n  checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos) {\n    const numDataIdsAfter = this.backend.numDataIds(); // Count the number of data ids associated with the result of the kernel.\n\n    let numOutputDataIds = 0;\n    outInfos.forEach(info => {\n      // Complex numbers allocate 3 data ids, one for 'real', one for\n      // 'imaginary', and one for the container that holds the former two.\n      numOutputDataIds += info.dtype === 'complex64' ? 3 : 1;\n    }); // Account for the number of moves during kernel execution. A \"data move\"\n    // can happen in the middle of a kernel execution, placing a new (key,value)\n    // pair in the data storage. Since data moves have net zero effect (we\n    // always remove the data from the old backend), we have to cancel them out\n    // when detecting memory leaks.\n\n    const numMoves = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];\n    const dataIdsLeaked = numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;\n\n    if (dataIdsLeaked > 0) {\n      throw new Error(`Backend '${this.backendName}' has an internal memory leak ` + `(${dataIdsLeaked} data ids) after running '${kernelName}'`);\n    }\n  }\n  /**\n   * Internal helper method to execute a kernel Func\n   *\n   * Use `runKernel` to execute kernels from outside of engine.\n   */\n\n\n  runKernelFunc(kernelParams) {\n    let outputs;\n    let saved = [];\n    const isTapeOn = this.isTapeOn();\n    const startingBytecount = this.state.numBytes;\n    const startingNumTensors = this.state.numTensors;\n\n    if (this.shouldCheckForMemLeaks()) {\n      this.state.numDataMovesStack.push(0);\n    }\n\n    let kernelFunc;\n\n    if (this.backendName == null) {\n      // backend has not been initialized yet (backend initialization is lazy\n      // can be deferred until an op/ kernel is run).\n      // The below getter has side effects that will try to initialize the\n      // backend and set properties like this.backendName\n      // tslint:disable-next-line: no-unused-expression\n      this.backend;\n    }\n\n    let out;\n    const kernelOrScopeName = isRegisteredKernelInvocation(kernelParams) ? kernelParams.kernelName : this.state.activeScope != null ? this.state.activeScope.name : ''; // Create the kernelFunc from either a registered kernel OR passed in\n    // forward/backward functions (used by custom grad). In this context a\n    // kernelFunc wraps a kernel implementation with some bookkeeping.\n\n    if (isRegisteredKernelInvocation(kernelParams)) {\n      const {\n        kernelName,\n        inputs,\n        attrs\n      } = kernelParams;\n\n      if (this.backendName == null) {\n        // backend has not been initialized yet (backend initialization is lazy\n        // can be deferred until an op/ kernel is run).\n        // The below getter has side effects that will try to initialize the\n        // backend and set properties like this.backendName\n        // tslint:disable-next-line: no-unused-expression\n        this.backend;\n      }\n\n      const kernel = getKernel(kernelName, this.backendName);\n      util.assert(kernel != null, () => `Cannot find registered kernel '${kernelName}' for backend '${this.backendName}'`);\n\n      kernelFunc = () => {\n        const numDataIdsBefore = this.backend.numDataIds();\n        out = kernel.kernelFunc({\n          inputs,\n          attrs,\n          backend: this.backend\n        });\n        const outInfos = Array.isArray(out) ? out : [out];\n\n        if (this.shouldCheckForMemLeaks()) {\n          this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);\n        }\n\n        const outTensors = outInfos.map(outInfo => {\n          // todo (yassogba) remove this option (Tensor) when node backend\n          // methods have been modularized and they all return tensorInfo.\n          // TensorInfos do not have a rank attribute.\n          if (outInfo.rank != null) {\n            return outInfo;\n          }\n\n          return this.makeTensorFromTensorInfo(outInfo);\n        }); // Save any required inputs and outputs.\n        // Do not save unless we are recording to the tape. Otherwise it would\n        // cause a mem leak since there would be no backprop for these tensors\n        // (which would otherwise dispose them).\n\n        if (isTapeOn) {\n          const tensorsToSave = this.getTensorsForGradient(kernelName, inputs, outTensors);\n          saved = this.saveTensorsForBackwardMode(tensorsToSave);\n        }\n\n        return outTensors;\n      };\n    } else {\n      const {\n        forwardFunc\n      } = kernelParams; // Running a customGrad op.\n\n      const saveFunc = tensors => {\n        // Do not save unless we are recording to the tape. Otherwise it would\n        // cause a mem leak since we would never run backprop, which disposes\n        // the kept tensors.\n        if (!isTapeOn) {\n          return;\n        }\n\n        saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n      };\n\n      kernelFunc = () => {\n        const numDataIdsBefore = this.backend.numDataIds();\n        out = this.tidy(() => forwardFunc(this.backend, saveFunc));\n        const outs = Array.isArray(out) ? out : [out];\n\n        if (this.shouldCheckForMemLeaks()) {\n          // Scope name is used to print a more helpful error message if needed.\n          this.checkKernelForMemLeak(kernelOrScopeName, numDataIdsBefore, outs);\n        }\n\n        return outs;\n      };\n    } //\n    // Run the kernelFunc. Optionally profiling it.\n    //\n\n\n    const {\n      inputs,\n      attrs\n    } = kernelParams;\n    const backwardsFunc = isRegisteredKernelInvocation(kernelParams) ? null : kernelParams.backwardsFunc;\n    let kernelProfile;\n    this.scopedRun( // Stop recording to a tape when running a kernel.\n    () => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {\n      if (!this.ENV.getBool('DEBUG') && !this.state.profiling) {\n        outputs = kernelFunc();\n      } else {\n        kernelProfile = this.profiler.profileKernel(kernelOrScopeName, inputs, () => kernelFunc());\n\n        if (this.ENV.getBool('DEBUG')) {\n          this.profiler.logKernelProfile(kernelProfile);\n        }\n\n        outputs = kernelProfile.outputs;\n      }\n    });\n\n    if (isTapeOn) {\n      this.addTapeNode(kernelOrScopeName, inputs, outputs, backwardsFunc, saved, attrs);\n    }\n\n    if (this.state.profiling) {\n      this.state.activeProfile.kernels.push({\n        name: kernelOrScopeName,\n        bytesAdded: this.state.numBytes - startingBytecount,\n        totalBytesSnapshot: this.state.numBytes,\n        tensorsAdded: this.state.numTensors - startingNumTensors,\n        totalTensorsSnapshot: this.state.numTensors,\n        inputShapes: Object.keys(inputs).map(key => inputs[key] != null ? inputs[key].shape : null),\n        outputShapes: outputs.map(item => item.shape),\n        kernelTimeMs: kernelProfile.timeMs,\n        extraInfo: kernelProfile.extraInfo\n      });\n    }\n\n    return Array.isArray(out) ? outputs : outputs[0];\n  }\n  /**\n   * Saves tensors used in forward mode for use in backward mode.\n   *\n   * @param tensors the list of tensors to save.\n   */\n\n\n  saveTensorsForBackwardMode(tensors) {\n    const saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n    return saved;\n  }\n  /**\n   * Returns a list of tensors to save for a given gradient calculation.\n   *\n   * @param kernelName name of kernel to look up gradient for.\n   * @param inputs a map of input tensors.\n   * @param outputs an array of output tensors from forward mode of kernel.\n   */\n\n\n  getTensorsForGradient(kernelName, inputs, outputs) {\n    const gradConfig = getGradient(kernelName);\n\n    if (gradConfig != null) {\n      const inputsToSave = gradConfig.inputsToSave || [];\n      const outputsToSave = gradConfig.outputsToSave || []; // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs\n      // specified in inputsToSave will be saved.\n\n      let inputTensorsToSave;\n\n      if (gradConfig.saveAllInputs) {\n        util.assert(Array.isArray(inputs), () => 'saveAllInputs is true, expected inputs to be an array.');\n        inputTensorsToSave = Object.keys(inputs).map(key => inputs[key]);\n      } else {\n        inputTensorsToSave = inputsToSave.map(inputName => inputs[inputName]);\n      }\n\n      const outputTensorsToSave = outputs.filter((_, i) => outputsToSave[i]);\n      return inputTensorsToSave.concat(outputTensorsToSave);\n    } // We return an empty list rather than throw an error because the kernel we\n    // are looking up may not actually be relevant to backproping through the\n    // overall function\n    //\n    // See 'does not error if irrelevant (pruned) ops are missing grads' test\n    // in gradients_test.ts for an example.\n\n\n    return [];\n  }\n  /**\n   * Internal method used by public APIs for tensor creation. Makes a new\n   * tensor with the provided shape, dtype and values. It always\n   * creates a new data id and writes the values to the underlying backend.\n   */\n\n\n  makeTensor(values, shape, dtype, backend) {\n    if (values == null) {\n      throw new Error('Values passed to engine.makeTensor() are null');\n    }\n\n    dtype = dtype || 'float32';\n    backend = backend || this.backend;\n    let backendVals = values;\n\n    if (dtype === 'string' && util.isString(values[0])) {\n      backendVals = values.map(d => util.encodeString(d));\n    }\n\n    const dataId = backend.write(backendVals, shape, dtype);\n    const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n    this.trackTensor(t, backend); // Count bytes for string tensors.\n\n    if (dtype === 'string') {\n      const info = this.state.tensorInfo.get(dataId);\n      const newBytes = bytesFromStringArray(backendVals);\n      this.state.numBytes += newBytes - info.bytes;\n      info.bytes = newBytes;\n    }\n\n    return t;\n  }\n  /**\n   * Internal method used by backends. Makes a new tensor\n   * that is a wrapper around an existing data id. It doesn't create\n   * a new data id, only increments the ref count used in memory tracking.\n   * @deprecated\n   */\n\n\n  makeTensorFromDataId(dataId, shape, dtype, backend) {\n    dtype = dtype || 'float32';\n    const tensorInfo = {\n      dataId,\n      shape,\n      dtype\n    };\n    return this.makeTensorFromTensorInfo(tensorInfo, backend);\n  }\n  /**\n   * Internal method used by backends. Makes a new tensor that is a wrapper\n   * around an existing data id in TensorInfo. It doesn't create a new data id,\n   * only increments the ref count used in memory tracking.\n   */\n\n\n  makeTensorFromTensorInfo(tensorInfo, backend) {\n    const {\n      dataId,\n      shape,\n      dtype\n    } = tensorInfo;\n    const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n    this.trackTensor(t, backend);\n    return t;\n  }\n\n  makeVariable(initialValue) {\n    let trainable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let name = arguments.length > 2 ? arguments[2] : undefined;\n    let dtype = arguments.length > 3 ? arguments[3] : undefined;\n    name = name || this.nextVariableId().toString();\n\n    if (dtype != null && dtype !== initialValue.dtype) {\n      initialValue = initialValue.cast(dtype);\n    }\n\n    const v = new Variable(initialValue, trainable, name, this.nextTensorId());\n\n    if (this.state.registeredVariables[v.name] != null) {\n      throw new Error(`Variable with name ${v.name} was already registered`);\n    }\n\n    this.state.registeredVariables[v.name] = v;\n    this.incRef(v, this.backend);\n    return v;\n  }\n\n  trackTensor(a, backend) {\n    this.state.numTensors++;\n\n    if (a.dtype === 'string') {\n      this.state.numStringTensors++;\n    } // Bytes for complex numbers are counted by their components. Bytes for\n    // string tensors are counted when writing values.\n\n\n    let bytes = 0;\n\n    if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n      bytes = a.size * util.bytesPerElement(a.dtype);\n    }\n\n    this.state.numBytes += bytes;\n\n    if (!this.state.tensorInfo.has(a.dataId)) {\n      this.state.numDataBuffers++;\n      this.state.tensorInfo.set(a.dataId, {\n        backend: backend || this.backend,\n        dtype: a.dtype,\n        shape: a.shape,\n        bytes\n      });\n    }\n\n    if (!(a instanceof Variable)) {\n      this.track(a);\n    }\n  } // Track the tensor by dataId and increase the refCount for the dataId in the\n  // backend.\n  // TODO(pyu10055): This is currently used by makeVariable method, to increase\n  // refCount on the backend for the dataId. It can potentially be replaced with\n  // Identity op indead of calling backend directly.\n\n\n  incRef(a, backend) {\n    this.trackTensor(a, backend);\n    this.backend.incRef(a.dataId);\n  }\n\n  removeDataId(dataId, backend) {\n    if (this.state.tensorInfo.has(dataId) && this.state.tensorInfo.get(dataId).backend === backend) {\n      this.state.tensorInfo.delete(dataId);\n      this.state.numDataBuffers--;\n    }\n  }\n\n  disposeTensor(a) {\n    if (!this.state.tensorInfo.has(a.dataId)) {\n      return;\n    }\n\n    const info = this.state.tensorInfo.get(a.dataId);\n    this.state.numTensors--;\n\n    if (a.dtype === 'string') {\n      this.state.numStringTensors--;\n      this.state.numBytes -= info.bytes;\n    } // Don't count bytes for complex numbers as they are counted by their\n    // components.\n\n\n    if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n      const bytes = a.size * util.bytesPerElement(a.dtype);\n      this.state.numBytes -= bytes;\n    } // Remove the reference to dataId if backend dispose the data successfully\n\n\n    if (info.backend.disposeData(a.dataId)) {\n      this.removeDataId(a.dataId, info.backend);\n    } // TODO(nsthorat): Construct an error and save the stack trace for\n    // debugging when in debug mode. Creating a stack trace is too expensive\n    // to do unconditionally.\n\n  }\n\n  disposeVariables() {\n    for (const varName in this.state.registeredVariables) {\n      const v = this.state.registeredVariables[varName];\n      this.disposeVariable(v);\n    }\n  }\n\n  disposeVariable(v) {\n    this.disposeTensor(v);\n\n    if (this.state.registeredVariables[v.name] != null) {\n      delete this.state.registeredVariables[v.name];\n    }\n  }\n\n  memory() {\n    const info = this.backend.memory();\n    info.numTensors = this.state.numTensors;\n    info.numDataBuffers = this.state.numDataBuffers;\n    info.numBytes = this.state.numBytes;\n\n    if (this.state.numStringTensors > 0) {\n      info.unreliable = true;\n\n      if (info.reasons == null) {\n        info.reasons = [];\n      }\n\n      info.reasons.push('Memory usage by string tensors is approximate ' + '(2 bytes per character)');\n    }\n\n    return info;\n  }\n\n  async profile(query) {\n    this.state.profiling = true;\n    const startBytes = this.state.numBytes;\n    const startNumTensors = this.state.numTensors;\n    this.state.activeProfile.kernels = [];\n    this.state.activeProfile.result = await query();\n    this.state.profiling = false;\n    this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map(d => d.totalBytesSnapshot));\n    this.state.activeProfile.newBytes = this.state.numBytes - startBytes;\n    this.state.activeProfile.newTensors = this.state.numTensors - startNumTensors;\n\n    for (const kernel of this.state.activeProfile.kernels) {\n      kernel.kernelTimeMs = await kernel.kernelTimeMs;\n      kernel.extraInfo = await kernel.extraInfo;\n    }\n\n    return this.state.activeProfile;\n  }\n\n  isTapeOn() {\n    return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;\n  }\n\n  addTapeNode(kernelName, inputs, outputs, gradientsFunc, saved, attrs) {\n    const tapeNode = {\n      id: this.state.nextTapeNodeId++,\n      kernelName,\n      inputs,\n      outputs,\n      saved\n    };\n    const gradConfig = getGradient(kernelName);\n\n    if (gradConfig != null) {\n      gradientsFunc = gradConfig.gradFunc;\n    }\n\n    if (gradientsFunc != null) {\n      tapeNode.gradient = dys => {\n        // TODO(smilkov): To optimize back-prop, pass dys that are not used in\n        // the backprop graph to the user as null instead of zeros\n        dys = dys.map((dy, i) => {\n          if (dy == null) {\n            const output = outputs[i];\n            const vals = util.makeZerosTypedArray(output.size, output.dtype);\n            return this.makeTensor(vals, output.shape, output.dtype);\n          }\n\n          return dy;\n        }); // Grad functions of ops with single outputs expect a dy, while ops\n        // with multiple outputs expect dys (array of dy).\n\n        return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);\n      };\n    }\n\n    this.state.activeTape.push(tapeNode);\n  }\n\n  keep(result) {\n    result.kept = true;\n    return result;\n  }\n\n  startTape() {\n    if (this.state.gradientDepth === 0) {\n      this.state.activeTape = [];\n    }\n\n    this.state.gradientDepth++;\n  }\n\n  endTape() {\n    this.state.gradientDepth--;\n  }\n  /**\n   * Start a scope. Use this with endScope() to achieve the same functionality\n   * as scope() without the need for a function closure.\n   */\n\n\n  startScope(name) {\n    const scopeInfo = {\n      track: [],\n      name: 'unnamed scope',\n      id: this.state.nextScopeId++\n    };\n\n    if (name) {\n      scopeInfo.name = name;\n    }\n\n    this.state.scopeStack.push(scopeInfo);\n    this.state.activeScope = scopeInfo;\n  }\n  /**\n   * End a scope. Use this with startScope() to achieve the same functionality\n   * as scope() without the need for a function closure.\n   */\n\n\n  endScope(result) {\n    const tensorsToTrackInParent = getTensorsInContainer(result);\n    const tensorsToTrackInParentSet = new Set(tensorsToTrackInParent.map(t => t.id)); // Dispose the arrays tracked in this scope.\n\n    for (let i = 0; i < this.state.activeScope.track.length; i++) {\n      const tensor = this.state.activeScope.track[i];\n\n      if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {\n        tensor.dispose();\n      }\n    }\n\n    const oldScope = this.state.scopeStack.pop();\n    this.state.activeScope = this.state.scopeStack.length === 0 ? null : this.state.scopeStack[this.state.scopeStack.length - 1]; // Track the current result in the parent scope.\n\n    tensorsToTrackInParent.forEach(tensor => {\n      // Only track the tensor if was allocated in the inner scope and is not\n      // globally kept.\n      if (!tensor.kept && tensor.scopeId === oldScope.id) {\n        this.track(tensor);\n      }\n    });\n  }\n  /**\n   * Returns gradients of `f` with respect to each of the `xs`. The gradients\n   * returned are of the same length as `xs`, but some might be null if `f`\n   * was not a function of that `x`. It also takes optional dy to multiply the\n   * gradient, which defaults to `1`.\n   */\n\n\n  gradients(f, xs, dy) {\n    let allowNoGradients = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    util.assert(xs.length > 0, () => 'gradients() received an empty list of xs.');\n\n    if (dy != null && dy.dtype !== 'float32') {\n      throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);\n    }\n\n    const y = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy('forward', f));\n    util.assert(y instanceof Tensor, () => 'The result y returned by f() must be a tensor.'); // Filter out the nodes that don't connect x => y.\n\n    const filteredTape = getFilteredNodesXToY(this.state.activeTape, xs, y);\n\n    if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {\n      throw new Error('Cannot compute gradient of y=f(x) with respect to x. Make sure ' + 'that the f you passed encloses all operations that lead from x ' + 'to y.');\n    }\n\n    return this.tidy('backward', () => {\n      const accumulatedGradientMap = {};\n      accumulatedGradientMap[y.id] = dy == null ? ones(y.shape) : dy; // Backprop gradients through the filtered nodes.\n\n      backpropagateGradients(accumulatedGradientMap, filteredTape, // Pass the tidy function to avoid circular dep with `tape.ts`.\n      f => this.tidy(f), // Pass an add function to avoide a circular dep with `tape.ts`.\n      add);\n      const grads = xs.map(x => accumulatedGradientMap[x.id]);\n\n      if (this.state.gradientDepth === 0) {\n        // This means that we are not computing higher-order gradients\n        // and can clean up the tape.\n        this.state.activeTape.forEach(node => {\n          for (const tensor of node.saved) {\n            tensor.dispose();\n          }\n        });\n        this.state.activeTape = null;\n      }\n\n      return {\n        value: y,\n        grads\n      };\n    });\n  }\n\n  customGrad(f) {\n    var _this = this;\n\n    util.assert(util.isFunction(f), () => 'The f passed in customGrad(f) must be a function.');\n    return function () {\n      for (var _len = arguments.length, inputs = new Array(_len), _key = 0; _key < _len; _key++) {\n        inputs[_key] = arguments[_key];\n      }\n\n      util.assert(inputs.every(t => t instanceof Tensor), () => 'The args passed in customGrad(f)(x1, x2,...) must all be ' + 'tensors');\n      let res;\n      const inputMap = {};\n      inputs.forEach((input, i) => {\n        inputMap[i] = input;\n      });\n\n      const forwardFunc = (_, save) => {\n        res = f(...[...inputs, save]);\n        util.assert(res.value instanceof Tensor, () => 'The function f passed in customGrad(f) must return an ' + 'object where `obj.value` is a tensor');\n        util.assert(util.isFunction(res.gradFunc), () => 'The function f passed in customGrad(f) must return an ' + 'object where `obj.gradFunc` is a function.');\n        return res.value;\n      };\n\n      const backwardsFunc = (dy, saved) => {\n        const gradRes = res.gradFunc(dy, saved);\n        const grads = Array.isArray(gradRes) ? gradRes : [gradRes];\n        util.assert(grads.length === inputs.length, () => 'The function f passed in customGrad(f) must return an ' + 'object where `obj.gradFunc` is a function that returns ' + 'the same number of tensors as inputs passed to f(...).');\n        util.assert(grads.every(t => t instanceof Tensor), () => 'The function f passed in customGrad(f) must return an ' + 'object where `obj.gradFunc` is a function that returns ' + 'a list of only tensors.');\n        const gradMap = {};\n        grads.forEach((grad, i) => {\n          gradMap[i] = () => grad;\n        });\n        return gradMap;\n      };\n\n      return _this.runKernelFunc({\n        forwardFunc,\n        backwardsFunc,\n        inputs: inputMap\n      });\n    };\n  }\n\n  readSync(dataId) {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.readSync(dataId);\n  }\n\n  read(dataId) {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.read(dataId);\n  }\n\n  readToGPU(dataId, options) {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.readToGPU(dataId, options);\n  }\n\n  async time(query) {\n    const start = now();\n    const timingInfo = await this.backend.time(query);\n    timingInfo.wallMs = now() - start;\n    return timingInfo;\n  }\n  /**\n   * Tracks a Tensor in the current scope to be automatically cleaned up\n   * when the current scope ends, and returns the value.\n   *\n   * @param result The Tensor to track in the current scope.\n   */\n\n\n  track(result) {\n    if (this.state.activeScope != null) {\n      result.scopeId = this.state.activeScope.id;\n      this.state.activeScope.track.push(result);\n    }\n\n    return result;\n  }\n\n  get registeredVariables() {\n    return this.state.registeredVariables;\n  }\n  /**\n   * Resets the engine state. Removes all backends but does not remove\n   * registered backend factories.\n   */\n\n\n  reset() {\n    // Make any pending promise obsolete.\n    this.pendingBackendInitId++;\n    this.state.dispose();\n    this.ENV.reset();\n    this.state = new EngineState();\n\n    for (const backendName in this.registry) {\n      this.disposeRegisteredKernels(backendName);\n      this.registry[backendName].dispose();\n      delete this.registry[backendName];\n    }\n\n    this.backendName = null;\n    this.backendInstance = null;\n    this.pendingBackendInit = null;\n  }\n\n}\nEngine.nextTensorId = 0;\nEngine.nextVariableId = 0;\n\nfunction ones(shape) {\n  const values = makeOnesTypedArray(sizeFromShape(shape), 'float32');\n  return ENGINE.makeTensor(values, shape, 'float32');\n}\n\nexport function getOrMakeEngine() {\n  const ns = getGlobalNamespace();\n\n  if (ns._tfengine == null) {\n    const environment = new Environment(ns);\n    ns._tfengine = new Engine(environment);\n  }\n\n  setEnvironmentGlobal(ns._tfengine.ENV); // Tell the current tensor interface that the global engine is responsible\n  // for tracking.\n\n  setTensorTracker(() => ns._tfengine);\n  return ns._tfengine;\n}\nexport const ENGINE = getOrMakeEngine();\n/**\n * A implementation of the add op for use within engine and tape.\n *\n * This allows us to avoid a circular dependency between add.ts and engine.\n * It is exported to be available in tape tests.\n */\n\nexport function add(a, b) {\n  // We duplicate Add here to avoid a circular dependency with add.ts.\n  const inputs = {\n    a,\n    b\n  };\n  return ENGINE.runKernel(Add, inputs);\n}","map":{"version":3,"sources":["../../../../../tfjs-core/src/engine.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendTimingInfo, DataMover, KernelBackend} from './backends/backend';\nimport {Environment, setEnvironmentGlobal} from './environment';\nimport {getGlobalNamespace} from './global_util';\nimport {Add, Cast, Identity} from './kernel_names';\nimport {getGradient, getKernel, getKernelsForBackend, GradFunc, NamedAttrMap, TensorInfo} from './kernel_registry';\nimport * as log from './log';\nimport {KernelProfile, Profiler} from './profiler';\nimport {backpropagateGradients, getFilteredNodesXToY, TapeNode} from './tape';\nimport {DataId, DataToGPUOptions, GPUData, setTensorTracker, Tensor, TensorTracker, Variable} from './tensor';\nimport {GradSaveFunc, NamedTensorMap, NamedVariableMap, TensorContainer} from './tensor_types';\nimport {getTensorsInContainer} from './tensor_util';\nimport {BackendValues, DataType, DataValues} from './types';\nimport * as util from './util';\nimport {bytesFromStringArray, makeOnesTypedArray, now, sizeFromShape} from './util';\n\n/**\n * A function that computes an output. The save function is for saving tensors\n * computed in the forward pass, that we need in the backward pass.\n */\nexport type ForwardFunc<T> = (backend: KernelBackend, save?: GradSaveFunc) => T;\n\n/**\n * @docalias (a: Tensor, b: Tensor,..., save?: Function) => {\n *   value: Tensor,\n *   gradFunc: (dy: Tensor, saved?: NamedTensorMap) => Tensor | Tensor[]\n * }\n */\nexport type CustomGradientFunc<T extends Tensor> =\n    (...inputs: Array<Tensor|GradSaveFunc>) => {\n      value: T;\n      gradFunc: (dy: T, saved: Tensor[]) => Tensor | Tensor[];\n    };\n\nexport type MemoryInfo = {\n  numTensors: number; numDataBuffers: number; numBytes: number;\n  unreliable?: boolean; reasons: string[];\n};\n\ntype KernelInfo = {\n  name: string; bytesAdded: number; totalBytesSnapshot: number;\n  tensorsAdded: number;\n  totalTensorsSnapshot: number;\n  inputShapes: number[][];\n  outputShapes: number[][];\n  kernelTimeMs: number | {error: string} | Promise<number|{error: string}>;\n  extraInfo: string | Promise<string>;\n};\n\nexport type ProfileInfo = {\n  newBytes: number; newTensors: number; peakBytes: number;\n  kernels: KernelInfo[];\n  result: TensorContainer;\n  kernelNames: string[];\n};\n\nexport interface TimingInfo extends BackendTimingInfo {\n  wallMs: number;\n}\n\n/** @docalias Function */\nexport type ScopeFn<T extends TensorContainer> = () => T;\n\ninterface ScopeState {\n  track: Tensor[];\n  name: string;\n  id: number;\n}\n\ninterface RegisteredKernelInvocation<I extends NamedTensorMap> {\n  kernelName: string;\n  inputs: I;\n  attrs?: NamedAttrMap;\n}\n\ninterface CustomGradKernelInvocation<T extends Tensor|Tensor[],\n                                               I extends NamedTensorMap> {\n  forwardFunc: ForwardFunc<T>;\n  backwardsFunc: (dy: T, saved: Tensor[]) => {\n    [P in keyof I]: () => I[P]\n  };\n  inputs: I;\n  attrs?: NamedAttrMap;\n}\n\nfunction isRegisteredKernelInvocation<T extends Tensor|Tensor[],\n                                                I extends NamedTensorMap>(\n    kernelInvocation: RegisteredKernelInvocation<I>|\n    CustomGradKernelInvocation<T, I>):\n    kernelInvocation is RegisteredKernelInvocation<I> {\n  return (kernelInvocation as RegisteredKernelInvocation<I>).kernelName != null;\n}\n\nclass EngineState {\n  // Public since optimizers will use it.\n  registeredVariables: NamedVariableMap = {};\n\n  nextTapeNodeId = 0;\n  numBytes = 0;\n  numTensors = 0;\n  numStringTensors = 0;\n  numDataBuffers = 0;\n\n  activeTape: TapeNode[];\n  // Number of nested tf.grad() statements when computing higher-order\n  // gradients. E.g. `1` for first-order gradients and `2` for second-order\n  // gradients. Used to track if the tape should be removed after a backprop.\n  gradientDepth = 0;\n  // Number of nested kernel calls. When kernel depth is greater than 1, we turn\n  // off the tape.\n  kernelDepth = 0;\n\n  // Keep Tensors that parallel the tapes.\n  activeScope: ScopeState;\n  scopeStack: ScopeState[] = [];\n  /**\n   * Keeps track of the number of data moves during a kernel execution. We\n   * maintain a stack since kernels can call other kernels, recursively.\n   */\n  numDataMovesStack: number[] = [];\n  nextScopeId = 0;\n\n  tensorInfo = new WeakMap<DataId, {\n    backend: KernelBackend,\n    bytes: number,\n    dtype: DataType,\n    shape: number[]\n  }>();\n\n  profiling = false;\n  activeProfile: ProfileInfo = {\n    newBytes: 0,\n    newTensors: 0,\n    peakBytes: 0,\n    kernels: [],\n    result: null,\n    get kernelNames():\n        string[] {\n          return Array.from(new Set(this.kernels.map(k => k.name)));\n        }\n  };\n\n  dispose() {\n    for (const variableName in this.registeredVariables) {\n      this.registeredVariables[variableName].dispose();\n    }\n  }\n}\n\nexport class Engine implements TensorTracker, DataMover {\n  state: EngineState;\n  backendName: string;\n  registry: {[id: string]: KernelBackend} = {};\n  registryFactory: {\n    [id: string]: {\n      factory: () => KernelBackend | Promise<KernelBackend>,\n      priority: number\n    }\n  } = {};\n\n  private profiler: Profiler;\n  private backendInstance: KernelBackend;\n  private pendingBackendInit: Promise<boolean>;\n  private pendingBackendInitId = 0;\n\n  constructor(public ENV: Environment) {\n    this.state = new EngineState();\n  }\n\n  async ready(): Promise<void> {\n    if (this.pendingBackendInit != null) {\n      return this.pendingBackendInit.then(() => {});\n    }\n    if (this.backendInstance != null) {\n      return;\n    }\n    const sortedBackends = this.getSortedBackends();\n\n    for (let i = 0; i < sortedBackends.length; i++) {\n      const backendName = sortedBackends[i];\n      const success = await this.initializeBackend(backendName).success;\n      if (success) {\n        await this.setBackend(backendName);\n        return;\n      }\n    }\n\n    throw new Error(\n        `Could not initialize any backends, all backend initializations ` +\n        `failed.`);\n  }\n\n  get backend(): KernelBackend {\n    if (this.pendingBackendInit != null) {\n      throw new Error(\n          `Backend '${this.backendName}' has not yet been initialized. Make ` +\n          `sure to await tf.ready() or await tf.setBackend() before calling ` +\n          `other methods`);\n    }\n    if (this.backendInstance == null) {\n      const {name, asyncInit} = this.initializeBackendsAndReturnBest();\n      if (asyncInit) {\n        throw new Error(\n            `The highest priority backend '${name}' has not yet been ` +\n            `initialized. Make sure to await tf.ready() or ` +\n            `await tf.setBackend() before calling other methods`);\n      }\n      this.setBackend(name);\n    }\n    return this.backendInstance;\n  }\n\n  backendNames(): string[] {\n    return Object.keys(this.registryFactory);\n  }\n\n  findBackend(backendName: string): KernelBackend {\n    if (!(backendName in this.registry)) {\n      // If the backend hasn't been initialized but we have a registry entry for\n      // it, initialize it and return it.\n      if (backendName in this.registryFactory) {\n        const {asyncInit} = this.initializeBackend(backendName);\n        if (asyncInit) {\n          // Backend is not ready yet.\n          return null;\n        }\n      } else {\n        return null;\n      }\n    }\n    return this.registry[backendName];\n  }\n\n  findBackendFactory(backendName: string):\n      () => KernelBackend | Promise<KernelBackend> {\n    if (!(backendName in this.registryFactory)) {\n      return null;\n    }\n    return this.registryFactory[backendName].factory;\n  }\n\n  registerBackend(\n      backendName: string,\n      factory: () => KernelBackend | Promise<KernelBackend>,\n      priority = 1): boolean {\n    if (backendName in this.registryFactory) {\n      log.warn(\n          `${backendName} backend was already registered. ` +\n          `Reusing existing backend factory.`);\n      return false;\n    }\n    this.registryFactory[backendName] = {factory, priority};\n    return true;\n  }\n\n  async setBackend(backendName: string): Promise<boolean> {\n    if (this.registryFactory[backendName] == null) {\n      throw new Error(`Backend name '${backendName}' not found in registry`);\n    }\n    this.backendName = backendName;\n    if (this.registry[backendName] == null) {\n      this.backendInstance = null;\n      const {success, asyncInit} = this.initializeBackend(backendName);\n      const result = asyncInit ? await success : success;\n      if (!result) {\n        return false;\n      }\n    }\n    this.backendInstance = this.registry[backendName];\n    this.setupRegisteredKernels();\n    // Reset the profiler.\n    this.profiler = new Profiler(this.backendInstance);\n\n    return true;\n  }\n\n  private setupRegisteredKernels(): void {\n    const kernels = getKernelsForBackend(this.backendName);\n    kernels.forEach(kernel => {\n      if (kernel.setupFunc != null) {\n        kernel.setupFunc(this.backendInstance);\n      }\n    });\n  }\n\n  private disposeRegisteredKernels(backendName: string): void {\n    const kernels = getKernelsForBackend(backendName);\n    kernels.forEach(kernel => {\n      if (kernel.disposeFunc != null) {\n        kernel.disposeFunc(this.registry[backendName]);\n      }\n    });\n  }\n\n  /**\n   * Initializes a backend by looking up the backend name in the factory\n   * registry and calling the factory method. Returns a boolean representing\n   * whether the initialization of the backend suceeded. Throws an error if\n   * there is no backend in the factory registry.\n   */\n  private initializeBackend(backendName: string):\n      {success: boolean|Promise<boolean>, asyncInit: boolean} {\n    const registryFactoryEntry = this.registryFactory[backendName];\n    if (registryFactoryEntry == null) {\n      throw new Error(\n          `Cannot initialize backend ${backendName}, no registration found.`);\n    }\n\n    try {\n      const backend = registryFactoryEntry.factory();\n      /* Test if the factory returns a promise.\n      Done in a more liberal way than\n      previous 'Promise.resolve(backend)===backend'\n      as we needed to account for custom Promise\n      implementations (e.g. Angular) */\n      if (backend && !(backend instanceof KernelBackend) &&\n          typeof backend.then === 'function') {\n        const promiseId = ++this.pendingBackendInitId;\n        const success =\n            backend\n                .then(backendInstance => {\n                  // Outdated promise. Another backend was set in the meantime.\n                  if (promiseId < this.pendingBackendInitId) {\n                    return false;\n                  }\n                  this.registry[backendName] = backendInstance;\n                  this.pendingBackendInit = null;\n                  return true;\n                })\n                .catch(err => {\n                  // Outdated promise. Another backend was set in the meantime.\n                  if (promiseId < this.pendingBackendInitId) {\n                    return false;\n                  }\n                  this.pendingBackendInit = null;\n                  log.warn(`Initialization of backend ${backendName} failed`);\n                  log.warn(err.stack || err.message);\n                  return false;\n                });\n        this.pendingBackendInit = success;\n        return {success, asyncInit: true};\n      } else {\n        this.registry[backendName] = backend as KernelBackend;\n        return {success: true, asyncInit: false};\n      }\n    } catch (err) {\n      log.warn(`Initialization of backend ${backendName} failed`);\n      log.warn(err.stack || err.message);\n      return {success: false, asyncInit: false};\n    }\n  }\n\n  removeBackend(backendName: string): void {\n    if (!(backendName in this.registryFactory)) {\n      throw new Error(`${backendName} backend not found in registry`);\n    }\n    if (this.backendName === backendName && this.pendingBackendInit != null) {\n      // There is a pending promise of the backend we want to remove. Make it\n      // obsolete.\n      this.pendingBackendInitId++;\n    }\n\n    if (backendName in this.registry) {\n      this.disposeRegisteredKernels(backendName);\n      this.registry[backendName].dispose();\n      delete this.registry[backendName];\n    }\n\n    delete this.registryFactory[backendName];\n\n    // Unset the backend if it is active.\n    if (this.backendName === backendName) {\n      this.pendingBackendInit = null;\n      this.backendName = null;\n      this.backendInstance = null;\n    }\n  }\n\n  private getSortedBackends(): string[] {\n    if (Object.keys(this.registryFactory).length === 0) {\n      throw new Error('No backend found in registry.');\n    }\n    return Object.keys(this.registryFactory).sort((a: string, b: string) => {\n      // Highest priority comes first.\n      return this.registryFactory[b].priority -\n          this.registryFactory[a].priority;\n    });\n  }\n\n  private initializeBackendsAndReturnBest():\n      {name: string, asyncInit: boolean} {\n    const sortedBackends = this.getSortedBackends();\n\n    for (let i = 0; i < sortedBackends.length; i++) {\n      const backendName = sortedBackends[i];\n      const {success, asyncInit} = this.initializeBackend(backendName);\n      if (asyncInit || success) {\n        return {name: backendName, asyncInit};\n      }\n    }\n    throw new Error(\n        `Could not initialize any backends, all backend initializations ` +\n        `failed.`);\n  }\n\n  moveData(backend: KernelBackend, dataId: DataId) {\n    const info = this.state.tensorInfo.get(dataId);\n    const srcBackend = info.backend;\n    const values = this.readSync(dataId);\n    const refCount = srcBackend.refCount(dataId);\n    // Delete the tensor from the old backend and move it to the new\n    // backend.\n    srcBackend.disposeData(dataId, true);\n    info.backend = backend;\n    backend.move(dataId, values, info.shape, info.dtype, refCount);\n    if (this.shouldCheckForMemLeaks()) {\n      // Track the number of moves during a kernel execution to correctly\n      // detect memory leaks.\n      this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;\n    }\n  }\n\n  tidy<T extends TensorContainer>(nameOrFn: string|ScopeFn<T>, fn?: ScopeFn<T>):\n      T {\n    let name: string = null;\n    if (fn == null) {\n      // Called with only 1 argument.\n      if (typeof nameOrFn !== 'function') {\n        throw new Error('Please provide a function to tidy()');\n      }\n      fn = nameOrFn;\n    } else {\n      // Called with 2 arguments.\n      if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {\n        throw new Error(\n            'When calling with two arguments, the first argument ' +\n            'to tidy() must be a string');\n      }\n      if (typeof fn !== 'function') {\n        throw new Error(\n            'When calling with two arguments, the 2nd argument ' +\n            'to tidy() must be a function');\n      }\n      name = nameOrFn as string;\n      // TODO(nsthorat,smilkov): Do operation logging and performance\n      // profiling.\n    }\n    let result: T;\n    return this.scopedRun(\n        () => this.startScope(name), () => this.endScope(result), () => {\n          result = fn();\n          if (result instanceof Promise) {\n            console.error('Cannot return a Promise inside of tidy.');\n          }\n          return result;\n        });\n  }\n\n  private scopedRun<T>(start: () => void, end: () => void, f: () => T): T {\n    start();\n    try {\n      const res = f();\n      end();\n      return res;\n    } catch (ex) {\n      end();\n      throw ex;\n    }\n  }\n\n  private static nextTensorId = 0;\n  private nextTensorId(): number {\n    return Engine.nextTensorId++;\n  }\n\n  private static nextVariableId = 0;\n  private nextVariableId(): number {\n    return Engine.nextVariableId++;\n  }\n\n  /**\n   * This method is called instead of the public-facing tensor.clone() when\n   * saving a tensor for backwards pass. It makes sure to add the clone\n   * operation to the tape regardless of being called inside a kernel\n   * execution.\n   */\n  private clone(x: Tensor): Tensor {\n    const y: Tensor = ENGINE.runKernel(Identity, {x} as {} as NamedTensorMap);\n    const inputs = {x};\n    const grad = (dy: Tensor) => ({\n      x: () => {\n        const dtype = 'float32';\n        const gradInputs = {x: dy};\n        const attrs = {dtype};\n\n        return ENGINE.runKernel(\n                   Cast, gradInputs as {} as NamedTensorMap,\n                   // tslint:disable-next-line: no-unnecessary-type-assertion\n                   attrs as {} as NamedAttrMap) as Tensor;\n      }\n    });\n    const saved: Tensor[] = [];\n    this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved, {});\n    return y;\n  }\n\n  /**\n   * Execute a kernel with the given name and return the output tensor.\n   *\n   * @param kernelName The name of the kernel to execute.\n   * @param inputs A map of input names to tensors.\n   * @param attrs A map of attribute names to their values. An attribute is a\n   *     primitive (non-tensor) input to the kernel.\n   * @param inputsToSave A list of tensors, inputs to save for the backprop\n   *     computation.\n   * @param outputsToSave A list of booleans, specifying which output to save\n   *     for the backprop computation. These are booleans since the output\n   * tensors are not visible to the user.\n   */\n  runKernel<T extends Tensor|Tensor[]>(\n      kernelName: string, inputs: NamedTensorMap, attrs?: NamedAttrMap): T {\n    if (this.backendName == null) {\n      // backend has not been initialized yet (backend initialization is lazy\n      // can be deferred until an op/ kernel is run).\n      // The below getter has side effects that will try to initialize the\n      // backend and set properties like this.backendName\n      // tslint:disable-next-line: no-unused-expression\n      this.backend;\n    }\n    const hasKernel = getKernel(kernelName, this.backendName) != null;\n    if (!hasKernel) {\n      throw new Error(`Kernel '${kernelName}' not registered for backend '${\n          this.backendName}'`);\n    }\n    return this.runKernelFunc({kernelName, inputs, attrs});\n  }\n\n  private shouldCheckForMemLeaks(): boolean {\n    return this.ENV.getBool('IS_TEST');\n  }\n\n  private checkKernelForMemLeak(\n      kernelName: string, numDataIdsBefore: number,\n      outInfos: TensorInfo[]): void {\n    const numDataIdsAfter = this.backend.numDataIds();\n\n    // Count the number of data ids associated with the result of the kernel.\n    let numOutputDataIds = 0;\n    outInfos.forEach(info => {\n      // Complex numbers allocate 3 data ids, one for 'real', one for\n      // 'imaginary', and one for the container that holds the former two.\n      numOutputDataIds += (info.dtype === 'complex64' ? 3 : 1);\n    });\n\n    // Account for the number of moves during kernel execution. A \"data move\"\n    // can happen in the middle of a kernel execution, placing a new (key,value)\n    // pair in the data storage. Since data moves have net zero effect (we\n    // always remove the data from the old backend), we have to cancel them out\n    // when detecting memory leaks.\n    const numMoves =\n        this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];\n    const dataIdsLeaked =\n        numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;\n    if (dataIdsLeaked > 0) {\n      throw new Error(\n          `Backend '${this.backendName}' has an internal memory leak ` +\n          `(${dataIdsLeaked} data ids) after running '${kernelName}'`);\n    }\n  }\n\n  /**\n   * Internal helper method to execute a kernel Func\n   *\n   * Use `runKernel` to execute kernels from outside of engine.\n   */\n  private runKernelFunc<T extends Tensor|Tensor[], I extends NamedTensorMap>(\n      kernelParams: RegisteredKernelInvocation<I>|\n      CustomGradKernelInvocation<T, I>): T {\n    let outputs: Tensor[];\n    let saved: Tensor[] = [];\n    const isTapeOn = this.isTapeOn();\n\n    const startingBytecount = this.state.numBytes;\n    const startingNumTensors = this.state.numTensors;\n\n    if (this.shouldCheckForMemLeaks()) {\n      this.state.numDataMovesStack.push(0);\n    }\n\n    let kernelFunc: () => Tensor[];\n    if (this.backendName == null) {\n      // backend has not been initialized yet (backend initialization is lazy\n      // can be deferred until an op/ kernel is run).\n      // The below getter has side effects that will try to initialize the\n      // backend and set properties like this.backendName\n      // tslint:disable-next-line: no-unused-expression\n      this.backend;\n    }\n\n    let out: TensorInfo|TensorInfo[];\n\n    const kernelOrScopeName = isRegisteredKernelInvocation(kernelParams) ?\n        kernelParams.kernelName :\n        this.state.activeScope != null ? this.state.activeScope.name : '';\n\n    // Create the kernelFunc from either a registered kernel OR passed in\n    // forward/backward functions (used by custom grad). In this context a\n    // kernelFunc wraps a kernel implementation with some bookkeeping.\n\n    if (isRegisteredKernelInvocation(kernelParams)) {\n      const {kernelName, inputs, attrs} = kernelParams;\n      if (this.backendName == null) {\n        // backend has not been initialized yet (backend initialization is lazy\n        // can be deferred until an op/ kernel is run).\n        // The below getter has side effects that will try to initialize the\n        // backend and set properties like this.backendName\n        // tslint:disable-next-line: no-unused-expression\n        this.backend;\n      }\n      const kernel = getKernel(kernelName, this.backendName);\n      util.assert(\n          kernel != null,\n          () => `Cannot find registered kernel '${kernelName}' for backend '${\n              this.backendName}'`);\n\n      kernelFunc = () => {\n        const numDataIdsBefore = this.backend.numDataIds();\n        out = kernel.kernelFunc({inputs, attrs, backend: this.backend});\n        const outInfos = Array.isArray(out) ? out : [out];\n        if (this.shouldCheckForMemLeaks()) {\n          this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);\n        }\n\n        const outTensors = outInfos.map((outInfo: TensorInfo|Tensor) => {\n          // todo (yassogba) remove this option (Tensor) when node backend\n          // methods have been modularized and they all return tensorInfo.\n          // TensorInfos do not have a rank attribute.\n          if ((outInfo as Tensor).rank != null) {\n            return outInfo as Tensor;\n          }\n          return this.makeTensorFromTensorInfo(outInfo);\n        });\n\n        // Save any required inputs and outputs.\n\n        // Do not save unless we are recording to the tape. Otherwise it would\n        // cause a mem leak since there would be no backprop for these tensors\n        // (which would otherwise dispose them).\n        if (isTapeOn) {\n          const tensorsToSave =\n              this.getTensorsForGradient(kernelName, inputs, outTensors);\n          saved = this.saveTensorsForBackwardMode(tensorsToSave);\n        }\n        return outTensors;\n      };\n    } else {\n      const {forwardFunc} = kernelParams;\n      // Running a customGrad op.\n      const saveFunc: GradSaveFunc = (tensors) => {\n        // Do not save unless we are recording to the tape. Otherwise it would\n        // cause a mem leak since we would never run backprop, which disposes\n        // the kept tensors.\n        if (!isTapeOn) {\n          return;\n        }\n        saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n      };\n\n      kernelFunc = () => {\n        const numDataIdsBefore = this.backend.numDataIds();\n        out = this.tidy(() => forwardFunc(this.backend, saveFunc));\n        const outs = (Array.isArray(out) ? out : [out]) as Tensor[];\n        if (this.shouldCheckForMemLeaks()) {\n          // Scope name is used to print a more helpful error message if needed.\n          this.checkKernelForMemLeak(kernelOrScopeName, numDataIdsBefore, outs);\n        }\n        return outs;\n      };\n    }\n\n    //\n    // Run the kernelFunc. Optionally profiling it.\n    //\n    const {inputs, attrs} = kernelParams;\n    const backwardsFunc = isRegisteredKernelInvocation(kernelParams) ?\n        null :\n        kernelParams.backwardsFunc;\n\n    let kernelProfile: KernelProfile;\n    this.scopedRun(\n        // Stop recording to a tape when running a kernel.\n        () => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {\n          if (!this.ENV.getBool('DEBUG') && !this.state.profiling) {\n            outputs = kernelFunc();\n          } else {\n            kernelProfile = this.profiler.profileKernel(\n                kernelOrScopeName, inputs, () => kernelFunc());\n            if (this.ENV.getBool('DEBUG')) {\n              this.profiler.logKernelProfile(kernelProfile);\n            }\n            outputs = kernelProfile.outputs;\n          }\n        });\n\n    if (isTapeOn) {\n      this.addTapeNode(\n          kernelOrScopeName, inputs, outputs, backwardsFunc, saved, attrs);\n    }\n\n    if (this.state.profiling) {\n      this.state.activeProfile.kernels.push({\n        name: kernelOrScopeName,\n        bytesAdded: this.state.numBytes - startingBytecount,\n        totalBytesSnapshot: this.state.numBytes,\n        tensorsAdded: this.state.numTensors - startingNumTensors,\n        totalTensorsSnapshot: this.state.numTensors,\n        inputShapes: Object.keys(inputs).map(\n            key => inputs[key] != null ? inputs[key].shape : null),\n        outputShapes: outputs.map(item => item.shape),\n        kernelTimeMs: kernelProfile.timeMs,\n        extraInfo: kernelProfile.extraInfo\n      });\n    }\n    return (Array.isArray(out) ? outputs : outputs[0]) as T;\n  }\n\n  /**\n   * Saves tensors used in forward mode for use in backward mode.\n   *\n   * @param tensors the list of tensors to save.\n   */\n  private saveTensorsForBackwardMode(tensors: Tensor[]): Tensor[] {\n    const saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n    return saved;\n  }\n\n  /**\n   * Returns a list of tensors to save for a given gradient calculation.\n   *\n   * @param kernelName name of kernel to look up gradient for.\n   * @param inputs a map of input tensors.\n   * @param outputs an array of output tensors from forward mode of kernel.\n   */\n  private getTensorsForGradient(\n      kernelName: string, inputs: NamedTensorMap,\n      outputs: Tensor[]): Tensor[]|null {\n    const gradConfig = getGradient(kernelName);\n    if (gradConfig != null) {\n      const inputsToSave: string[] = gradConfig.inputsToSave || [];\n      const outputsToSave: boolean[] = gradConfig.outputsToSave || [];\n\n      // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs\n      // specified in inputsToSave will be saved.\n      let inputTensorsToSave: Tensor[];\n      if (gradConfig.saveAllInputs) {\n        util.assert(\n            Array.isArray(inputs),\n            () => 'saveAllInputs is true, expected inputs to be an array.');\n\n        inputTensorsToSave = Object.keys(inputs).map((key) => inputs[key]);\n      } else {\n        inputTensorsToSave = inputsToSave.map((inputName) => inputs[inputName]);\n      }\n\n      const outputTensorsToSave: Tensor[] =\n          outputs.filter((_, i) => outputsToSave[i]);\n\n      return inputTensorsToSave.concat(outputTensorsToSave);\n    }\n    // We return an empty list rather than throw an error because the kernel we\n    // are looking up may not actually be relevant to backproping through the\n    // overall function\n    //\n    // See 'does not error if irrelevant (pruned) ops are missing grads' test\n    // in gradients_test.ts for an example.\n    return [];\n  }\n\n  /**\n   * Internal method used by public APIs for tensor creation. Makes a new\n   * tensor with the provided shape, dtype and values. It always\n   * creates a new data id and writes the values to the underlying backend.\n   */\n  makeTensor(\n      values: DataValues, shape: number[], dtype: DataType,\n      backend?: KernelBackend): Tensor {\n    if (values == null) {\n      throw new Error('Values passed to engine.makeTensor() are null');\n    }\n    dtype = dtype || 'float32';\n    backend = backend || this.backend;\n    let backendVals = values as BackendValues;\n    if (dtype === 'string' && util.isString(values[0])) {\n      backendVals = (values as string[]).map(d => util.encodeString(d));\n    }\n    const dataId = backend.write(backendVals, shape, dtype);\n    const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n    this.trackTensor(t, backend);\n\n    // Count bytes for string tensors.\n    if (dtype === 'string') {\n      const info = this.state.tensorInfo.get(dataId);\n      const newBytes = bytesFromStringArray(backendVals as Uint8Array[]);\n      this.state.numBytes += newBytes - info.bytes;\n      info.bytes = newBytes;\n    }\n    return t;\n  }\n\n  /**\n   * Internal method used by backends. Makes a new tensor\n   * that is a wrapper around an existing data id. It doesn't create\n   * a new data id, only increments the ref count used in memory tracking.\n   * @deprecated\n   */\n  makeTensorFromDataId(\n    dataId: DataId, shape: number[], dtype: DataType,\n    backend?: KernelBackend): Tensor {\n    dtype = dtype || 'float32';\n    const tensorInfo: TensorInfo = {dataId, shape, dtype};\n    return this.makeTensorFromTensorInfo(tensorInfo, backend);\n  }\n\n  /**\n   * Internal method used by backends. Makes a new tensor that is a wrapper\n   * around an existing data id in TensorInfo. It doesn't create a new data id,\n   * only increments the ref count used in memory tracking.\n   */\n  makeTensorFromTensorInfo(tensorInfo: TensorInfo, backend?: KernelBackend):\n      Tensor {\n    const {dataId, shape, dtype} = tensorInfo;\n    const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n    this.trackTensor(t, backend);\n    return t;\n  }\n\n  makeVariable(\n      initialValue: Tensor, trainable = true, name?: string,\n      dtype?: DataType): Variable {\n    name = name || this.nextVariableId().toString();\n    if (dtype != null && dtype !== initialValue.dtype) {\n      initialValue = initialValue.cast(dtype);\n    }\n    const v = new Variable(initialValue, trainable, name, this.nextTensorId());\n    if (this.state.registeredVariables[v.name] != null) {\n      throw new Error(`Variable with name ${v.name} was already registered`);\n    }\n    this.state.registeredVariables[v.name] = v;\n    this.incRef(v, this.backend);\n    return v;\n  }\n\n  trackTensor(a: Tensor, backend: KernelBackend): void {\n    this.state.numTensors++;\n    if (a.dtype === 'string') {\n      this.state.numStringTensors++;\n    }\n    // Bytes for complex numbers are counted by their components. Bytes for\n    // string tensors are counted when writing values.\n    let bytes = 0;\n    if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n      bytes = a.size * util.bytesPerElement(a.dtype);\n    }\n    this.state.numBytes += bytes;\n\n    if (!this.state.tensorInfo.has(a.dataId)) {\n      this.state.numDataBuffers++;\n      this.state.tensorInfo.set(a.dataId, {\n        backend: backend || this.backend,\n        dtype: a.dtype,\n        shape: a.shape,\n        bytes\n      });\n    }\n\n    if (!(a instanceof Variable)) {\n      this.track(a);\n    }\n  }\n\n  // Track the tensor by dataId and increase the refCount for the dataId in the\n  // backend.\n  // TODO(pyu10055): This is currently used by makeVariable method, to increase\n  // refCount on the backend for the dataId. It can potentially be replaced with\n  // Identity op indead of calling backend directly.\n  incRef(a: Tensor, backend: KernelBackend): void {\n    this.trackTensor(a, backend);\n    this.backend.incRef(a.dataId);\n  }\n\n  removeDataId(dataId: DataId, backend: KernelBackend) {\n    if (this.state.tensorInfo.has(dataId) &&\n        this.state.tensorInfo.get(dataId).backend === backend) {\n      this.state.tensorInfo.delete(dataId);\n      this.state.numDataBuffers--;\n    }\n  }\n  disposeTensor(a: Tensor): void {\n    if (!this.state.tensorInfo.has(a.dataId)) {\n      return;\n    }\n    const info = this.state.tensorInfo.get(a.dataId);\n\n    this.state.numTensors--;\n    if (a.dtype === 'string') {\n      this.state.numStringTensors--;\n      this.state.numBytes -= info.bytes;\n    }\n    // Don't count bytes for complex numbers as they are counted by their\n    // components.\n    if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n      const bytes = a.size * util.bytesPerElement(a.dtype);\n      this.state.numBytes -= bytes;\n    }\n\n    // Remove the reference to dataId if backend dispose the data successfully\n    if (info.backend.disposeData(a.dataId)) {\n      this.removeDataId(a.dataId, info.backend);\n    }\n\n    // TODO(nsthorat): Construct an error and save the stack trace for\n    // debugging when in debug mode. Creating a stack trace is too expensive\n    // to do unconditionally.\n  }\n\n  disposeVariables(): void {\n    for (const varName in this.state.registeredVariables) {\n      const v = this.state.registeredVariables[varName];\n      this.disposeVariable(v);\n    }\n  }\n\n  disposeVariable(v: Variable): void {\n    this.disposeTensor(v);\n    if (this.state.registeredVariables[v.name] != null) {\n      delete this.state.registeredVariables[v.name];\n    }\n  }\n\n  memory(): MemoryInfo {\n    const info = this.backend.memory() as MemoryInfo;\n    info.numTensors = this.state.numTensors;\n    info.numDataBuffers = this.state.numDataBuffers;\n    info.numBytes = this.state.numBytes;\n    if (this.state.numStringTensors > 0) {\n      info.unreliable = true;\n      if (info.reasons == null) {\n        info.reasons = [];\n      }\n      info.reasons.push(\n          'Memory usage by string tensors is approximate ' +\n          '(2 bytes per character)');\n    }\n    return info;\n  }\n\n  async profile(query: () => (TensorContainer | Promise<TensorContainer>)):\n      Promise<ProfileInfo> {\n    this.state.profiling = true;\n\n    const startBytes = this.state.numBytes;\n    const startNumTensors = this.state.numTensors;\n\n    this.state.activeProfile.kernels = [];\n    this.state.activeProfile.result = await query();\n\n    this.state.profiling = false;\n\n    this.state.activeProfile.peakBytes = Math.max(\n        ...this.state.activeProfile.kernels.map(d => d.totalBytesSnapshot));\n    this.state.activeProfile.newBytes = this.state.numBytes - startBytes;\n    this.state.activeProfile.newTensors =\n        this.state.numTensors - startNumTensors;\n    for (const kernel of this.state.activeProfile.kernels) {\n      kernel.kernelTimeMs = await kernel.kernelTimeMs;\n      kernel.extraInfo = await kernel.extraInfo;\n    }\n    return this.state.activeProfile;\n  }\n\n  isTapeOn(): boolean {\n    return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;\n  }\n\n  private addTapeNode(\n      kernelName: string, inputs: NamedTensorMap, outputs: Tensor[],\n      gradientsFunc: GradFunc, saved: Tensor[], attrs: NamedAttrMap): void {\n    const tapeNode: TapeNode =\n        {id: this.state.nextTapeNodeId++, kernelName, inputs, outputs, saved};\n\n    const gradConfig = getGradient(kernelName);\n    if (gradConfig != null) {\n      gradientsFunc = gradConfig.gradFunc;\n    }\n    if (gradientsFunc != null) {\n      tapeNode.gradient = (dys: Tensor[]) => {\n        // TODO(smilkov): To optimize back-prop, pass dys that are not used in\n        // the backprop graph to the user as null instead of zeros\n        dys = dys.map((dy, i) => {\n          if (dy == null) {\n            const output = outputs[i];\n            const vals = util.makeZerosTypedArray(output.size, output.dtype);\n            return this.makeTensor(vals, output.shape, output.dtype);\n          }\n          return dy;\n        });\n        // Grad functions of ops with single outputs expect a dy, while ops\n        // with multiple outputs expect dys (array of dy).\n        return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);\n      };\n    }\n    this.state.activeTape.push(tapeNode);\n  }\n\n  keep<T extends Tensor>(result: T): T {\n    result.kept = true;\n    return result;\n  }\n\n  private startTape() {\n    if (this.state.gradientDepth === 0) {\n      this.state.activeTape = [];\n    }\n    this.state.gradientDepth++;\n  }\n\n  private endTape() {\n    this.state.gradientDepth--;\n  }\n\n  /**\n   * Start a scope. Use this with endScope() to achieve the same functionality\n   * as scope() without the need for a function closure.\n   */\n  startScope(name?: string) {\n    const scopeInfo: ScopeState = {\n      track: [],\n      name: 'unnamed scope',\n      id: this.state.nextScopeId++\n    };\n    if (name) {\n      scopeInfo.name = name;\n    }\n    this.state.scopeStack.push(scopeInfo);\n    this.state.activeScope = scopeInfo;\n  }\n\n  /**\n   * End a scope. Use this with startScope() to achieve the same functionality\n   * as scope() without the need for a function closure.\n   */\n  endScope(result?: TensorContainer) {\n    const tensorsToTrackInParent = getTensorsInContainer(result);\n    const tensorsToTrackInParentSet =\n        new Set(tensorsToTrackInParent.map(t => t.id));\n\n    // Dispose the arrays tracked in this scope.\n    for (let i = 0; i < this.state.activeScope.track.length; i++) {\n      const tensor = this.state.activeScope.track[i];\n      if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {\n        tensor.dispose();\n      }\n    }\n\n    const oldScope = this.state.scopeStack.pop();\n    this.state.activeScope = this.state.scopeStack.length === 0 ?\n        null :\n        this.state.scopeStack[this.state.scopeStack.length - 1];\n\n    // Track the current result in the parent scope.\n    tensorsToTrackInParent.forEach(tensor => {\n      // Only track the tensor if was allocated in the inner scope and is not\n      // globally kept.\n      if (!tensor.kept && tensor.scopeId === oldScope.id) {\n        this.track(tensor);\n      }\n    });\n  }\n\n  /**\n   * Returns gradients of `f` with respect to each of the `xs`. The gradients\n   * returned are of the same length as `xs`, but some might be null if `f`\n   * was not a function of that `x`. It also takes optional dy to multiply the\n   * gradient, which defaults to `1`.\n   */\n  gradients<T extends Tensor>(\n      f: () => T, xs: Tensor[], dy?: T,\n      allowNoGradients = false): {value: T, grads: Tensor[]} {\n    util.assert(\n        xs.length > 0, () => 'gradients() received an empty list of xs.');\n    if (dy != null && dy.dtype !== 'float32') {\n      throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);\n    }\n\n    const y = this.scopedRun(\n        () => this.startTape(), () => this.endTape(),\n        () => this.tidy('forward', f));\n\n    util.assert(\n        y instanceof Tensor,\n        () => 'The result y returned by f() must be a tensor.');\n    // Filter out the nodes that don't connect x => y.\n    const filteredTape = getFilteredNodesXToY(this.state.activeTape, xs, y);\n    if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {\n      throw new Error(\n          'Cannot compute gradient of y=f(x) with respect to x. Make sure ' +\n          'that the f you passed encloses all operations that lead from x ' +\n          'to y.');\n    }\n\n    return this.tidy('backward', () => {\n      const accumulatedGradientMap: {[tensorId: number]: Tensor} = {};\n      accumulatedGradientMap[y.id] = (dy == null) ? ones(y.shape) : dy;\n\n      // Backprop gradients through the filtered nodes.\n      backpropagateGradients(\n          accumulatedGradientMap, filteredTape,\n          // Pass the tidy function to avoid circular dep with `tape.ts`.\n          f => this.tidy(f as ScopeFn<Tensor>),\n          // Pass an add function to avoide a circular dep with `tape.ts`.\n          add);\n      const grads = xs.map(x => accumulatedGradientMap[x.id]);\n\n      if (this.state.gradientDepth === 0) {\n        // This means that we are not computing higher-order gradients\n        // and can clean up the tape.\n        this.state.activeTape.forEach(node => {\n          for (const tensor of node.saved) {\n            tensor.dispose();\n          }\n        });\n        this.state.activeTape = null;\n      }\n      return {value: y, grads};\n    });\n  }\n\n  customGrad<T extends Tensor>(f: CustomGradientFunc<T>):\n      (...args: Array<Tensor|GradSaveFunc>) => T {\n    util.assert(\n        util.isFunction(f),\n        () => 'The f passed in customGrad(f) must be a function.');\n    return (...inputs: Tensor[]): T => {\n      util.assert(\n          inputs.every(t => t instanceof Tensor),\n          () => 'The args passed in customGrad(f)(x1, x2,...) must all be ' +\n              'tensors');\n\n      let res: {\n        value: T,\n        gradFunc: (dy: T, saved: Tensor[]) => Tensor | Tensor[],\n      };\n      const inputMap: NamedTensorMap = {};\n      inputs.forEach((input, i) => {\n        inputMap[i] = input;\n      });\n\n      const forwardFunc: ForwardFunc<T> = (_, save) => {\n        res = f(...[...inputs, save]);\n        util.assert(\n            res.value instanceof Tensor,\n            () => 'The function f passed in customGrad(f) must return an ' +\n                'object where `obj.value` is a tensor');\n        util.assert(\n            util.isFunction(res.gradFunc),\n            () => 'The function f passed in customGrad(f) must return an ' +\n                'object where `obj.gradFunc` is a function.');\n        return res.value;\n      };\n\n      const backwardsFunc = (dy: T, saved: Tensor[]) => {\n        const gradRes = res.gradFunc(dy, saved);\n        const grads: Tensor[] = Array.isArray(gradRes) ? gradRes : [gradRes];\n        util.assert(\n            grads.length === inputs.length,\n            () => 'The function f passed in customGrad(f) must return an ' +\n                'object where `obj.gradFunc` is a function that returns ' +\n                'the same number of tensors as inputs passed to f(...).');\n        util.assert(\n            grads.every(t => t instanceof Tensor),\n            () => 'The function f passed in customGrad(f) must return an ' +\n                'object where `obj.gradFunc` is a function that returns ' +\n                'a list of only tensors.');\n        const gradMap: {[key: string]: () => Tensor} = {};\n        grads.forEach((grad, i) => {\n          gradMap[i] = () => grad;\n        });\n        return gradMap;\n      };\n\n      return this.runKernelFunc({\n        forwardFunc,\n        backwardsFunc,\n        inputs: inputMap,\n      });\n    };\n  }\n\n  readSync(dataId: DataId): BackendValues {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.readSync(dataId);\n  }\n  read(dataId: DataId): Promise<BackendValues> {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.read(dataId);\n  }\n\n  readToGPU(dataId: DataId, options?: DataToGPUOptions): GPUData {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.readToGPU(dataId, options);\n  }\n\n  async time(query: () => void): Promise<TimingInfo> {\n    const start = now();\n    const timingInfo = await this.backend.time(query) as TimingInfo;\n    timingInfo.wallMs = now() - start;\n    return timingInfo;\n  }\n\n  /**\n   * Tracks a Tensor in the current scope to be automatically cleaned up\n   * when the current scope ends, and returns the value.\n   *\n   * @param result The Tensor to track in the current scope.\n   */\n  private track<T extends Tensor>(result: T): T {\n    if (this.state.activeScope != null) {\n      result.scopeId = this.state.activeScope.id;\n      this.state.activeScope.track.push(result);\n    }\n\n    return result;\n  }\n\n  get registeredVariables(): NamedVariableMap {\n    return this.state.registeredVariables;\n  }\n\n  /**\n   * Resets the engine state. Removes all backends but does not remove\n   * registered backend factories.\n   */\n  reset(): void {\n    // Make any pending promise obsolete.\n    this.pendingBackendInitId++;\n\n    this.state.dispose();\n    this.ENV.reset();\n    this.state = new EngineState();\n\n    for (const backendName in this.registry) {\n      this.disposeRegisteredKernels(backendName);\n      this.registry[backendName].dispose();\n      delete this.registry[backendName];\n    }\n    this.backendName = null;\n    this.backendInstance = null;\n    this.pendingBackendInit = null;\n  }\n}\n\nfunction ones(shape: number[]): Tensor {\n  const values = makeOnesTypedArray(sizeFromShape(shape), 'float32');\n  return ENGINE.makeTensor(values, shape, 'float32');\n}\n\nexport function getOrMakeEngine(): Engine {\n  const ns = getGlobalNamespace() as {} as {_tfengine: Engine};\n  if (ns._tfengine == null) {\n    const environment = new Environment(ns);\n    ns._tfengine = new Engine(environment);\n  }\n  setEnvironmentGlobal(ns._tfengine.ENV);\n\n  // Tell the current tensor interface that the global engine is responsible\n  // for tracking.\n  setTensorTracker(() => ns._tfengine);\n  return ns._tfengine;\n}\n\nexport const ENGINE = getOrMakeEngine();\n\n/**\n * A implementation of the add op for use within engine and tape.\n *\n * This allows us to avoid a circular dependency between add.ts and engine.\n * It is exported to be available in tape tests.\n */\nexport function add(a: Tensor, b: Tensor): Tensor {\n  // We duplicate Add here to avoid a circular dependency with add.ts.\n  const inputs = {a, b};\n  return ENGINE.runKernel(Add, inputs as {} as NamedTensorMap);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}