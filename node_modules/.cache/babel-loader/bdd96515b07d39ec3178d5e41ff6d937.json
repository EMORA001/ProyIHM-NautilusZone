{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Softmax, util } from '@tensorflow/tfjs-core';\nimport { exp } from './Exp';\nimport { max } from './Max';\nimport { div } from './RealDiv';\nimport { reshape } from './Reshape';\nimport { sub } from './Sub';\nimport { sum } from './Sum';\nexport function softmax(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    logits\n  } = inputs;\n  const {\n    dim\n  } = attrs;\n  const logitsRank = logits.shape.length;\n  let $dim = dim;\n\n  if ($dim === -1) {\n    $dim = logitsRank - 1;\n  }\n\n  if ($dim !== logitsRank - 1) {\n    throw Error('Softmax along a non-last dimension is not yet supported. ' + `Logits was rank ${logitsRank} and dim was ${$dim}`);\n  }\n\n  const axes = util.parseAxisParam([$dim], logits.shape);\n  const maxLogit = max({\n    inputs: {\n      x: logits\n    },\n    backend,\n    attrs: {\n      reductionIndices: axes,\n      keepDims: false\n    }\n  });\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n  const maxLogitReshaped = reshape({\n    inputs: {\n      x: maxLogit\n    },\n    backend,\n    attrs: {\n      shape: expandedShape\n    }\n  });\n  const a = sub({\n    inputs: {\n      a: logits,\n      b: maxLogitReshaped\n    },\n    backend\n  });\n  const b = exp({\n    inputs: {\n      x: a\n    },\n    backend\n  });\n  const sumExp = sum({\n    inputs: {\n      x: b\n    },\n    backend,\n    attrs: {\n      axis: axes,\n      keepDims: false\n    }\n  });\n  const sumReshaped = reshape({\n    inputs: {\n      x: sumExp\n    },\n    backend,\n    attrs: {\n      shape: expandedShape\n    }\n  });\n  const result = div({\n    inputs: {\n      a: b,\n      b: sumReshaped\n    },\n    backend\n  });\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumReshaped);\n  return result;\n}\nexport const softmaxConfig = {\n  kernelName: Softmax,\n  backendName: 'cpu',\n  kernelFunc: softmax\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/Softmax.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {div} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(\n    args:\n        {inputs: SoftmaxInputs, backend: MathBackendCPU, attrs: SoftmaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const logitsRank = logits.shape.length;\n\n  let $dim = dim;\n  if ($dim === -1) {\n    $dim = logitsRank - 1;\n  }\n  if ($dim !== logitsRank - 1) {\n    throw Error(\n        'Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${logitsRank} and dim was ${$dim}`);\n  }\n\n  const axes = util.parseAxisParam([$dim], logits.shape);\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const result = div({inputs: {a: b, b: sumReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumReshaped);\n\n  return result;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'cpu',\n  kernelFunc: softmax as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}