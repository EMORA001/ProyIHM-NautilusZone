{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\n/**\n *\n * @param inputShape Input tensor shape is of the following dimensions:\n *     `[batch, height, width, inChannels]`.\n * @param filterShape The filter shape is of the following dimensions:\n *     `[filterHeight, filterWidth, depth]`.\n * @param strides The strides of the sliding window for each dimension of the\n *     input tensor: `[strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dataFormat The data format of the input and output data.\n *     Defaults to 'NHWC'.\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`.\n *     Defaults to `[1, 1]`. If `dilations` is a single number, then\n *     `dilationHeight == dilationWidth`.\n */\n\nexport function computeDilation2DInfo(inputShape, filterShape, strides, pad) {\n  let dataFormat = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'NHWC';\n  let dilations = arguments.length > 5 ? arguments[5] : undefined;\n  // `computerConv2DInfo` require filterShape to be in the dimension of:\n  // `[filterHeight, filterWidth, depth, outDepth]`, dilation2d doesn't have\n  // outDepth, it should have the same depth as the input.\n  // Input shape: [batch, height, width, inChannels]\n  const inputChannels = inputShape[3];\n  const $filterShape = [...filterShape, inputChannels];\n  const $dataFormat = convertConv2DDataFormat(dataFormat);\n  return computeConv2DInfo(inputShape, $filterShape, strides, dilations, pad, null\n  /* roundingMode */\n  , null\n  /* depthWise */\n  , $dataFormat);\n}\nexport function computePool2DInfo(inShape, filterSize, strides, dilations, pad, roundingMode) {\n  let dataFormat = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 'channelsLast';\n  const [filterHeight, filterWidth] = parseTupleParam(filterSize);\n  let filterShape;\n\n  if (dataFormat === 'channelsLast') {\n    filterShape = [filterHeight, filterWidth, inShape[3], inShape[3]];\n  } else if (dataFormat === 'channelsFirst') {\n    filterShape = [filterHeight, filterWidth, inShape[1], inShape[1]];\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  return computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, false, dataFormat);\n}\n/**\n * Computes the information for a forward pass of a pooling3D operation.\n */\n\nexport function computePool3DInfo(inShape, filterSize, strides, dilations, pad, roundingMode) {\n  let dataFormat = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 'NDHWC';\n  const [filterDepth, filterHeight, filterWidth] = parse3TupleParam(filterSize);\n  let filterShape;\n  let $dataFormat;\n\n  if (dataFormat === 'NDHWC') {\n    $dataFormat = 'channelsLast';\n    filterShape = [filterDepth, filterHeight, filterWidth, inShape[4], inShape[4]];\n  } else if (dataFormat === 'NCDHW') {\n    $dataFormat = 'channelsFirst';\n    filterShape = [filterDepth, filterHeight, filterWidth, inShape[1], inShape[1]];\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  return computeConv3DInfo(inShape, filterShape, strides, dilations, pad, false, $dataFormat, roundingMode);\n}\n/**\n * Computes the information for a forward pass of a convolution/pooling\n * operation.\n */\n\nexport function computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode) {\n  let depthwise = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n  let dataFormat = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 'channelsLast';\n  let [batchSize, inHeight, inWidth, inChannels] = [-1, -1, -1, -1];\n\n  if (dataFormat === 'channelsLast') {\n    [batchSize, inHeight, inWidth, inChannels] = inShape;\n  } else if (dataFormat === 'channelsFirst') {\n    [batchSize, inChannels, inHeight, inWidth] = inShape;\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  const [filterHeight, filterWidth,, filterChannels] = filterShape;\n  const [strideHeight, strideWidth] = parseTupleParam(strides);\n  const [dilationHeight, dilationWidth] = parseTupleParam(dilations);\n  const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);\n  const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);\n  const {\n    padInfo,\n    outHeight,\n    outWidth\n  } = getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, effectiveFilterHeight, effectiveFilterWidth, roundingMode, dataFormat);\n  const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n  let outShape;\n\n  if (dataFormat === 'channelsFirst') {\n    outShape = [batchSize, outChannels, outHeight, outWidth];\n  } else if (dataFormat === 'channelsLast') {\n    outShape = [batchSize, outHeight, outWidth, outChannels];\n  }\n\n  return {\n    batchSize,\n    dataFormat,\n    inHeight,\n    inWidth,\n    inChannels,\n    outHeight,\n    outWidth,\n    outChannels,\n    padInfo,\n    strideHeight,\n    strideWidth,\n    filterHeight,\n    filterWidth,\n    effectiveFilterHeight,\n    effectiveFilterWidth,\n    dilationHeight,\n    dilationWidth,\n    inShape,\n    outShape,\n    filterShape\n  };\n}\n/**\n * Computes the information for a forward pass of a 3D convolution/pooling\n * operation.\n */\n\nexport function computeConv3DInfo(inShape, filterShape, strides, dilations, pad) {\n  let depthwise = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  let dataFormat = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 'channelsLast';\n  let roundingMode = arguments.length > 7 ? arguments[7] : undefined;\n  let [batchSize, inDepth, inHeight, inWidth, inChannels] = [-1, -1, -1, -1, -1];\n\n  if (dataFormat === 'channelsLast') {\n    [batchSize, inDepth, inHeight, inWidth, inChannels] = inShape;\n  } else if (dataFormat === 'channelsFirst') {\n    [batchSize, inChannels, inDepth, inHeight, inWidth] = inShape;\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  const [filterDepth, filterHeight, filterWidth,, filterChannels] = filterShape;\n  const [strideDepth, strideHeight, strideWidth] = parse3TupleParam(strides);\n  const [dilationDepth, dilationHeight, dilationWidth] = parse3TupleParam(dilations);\n  const effectiveFilterDepth = getEffectiveFilterSize(filterDepth, dilationDepth);\n  const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);\n  const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);\n  const {\n    padInfo,\n    outDepth,\n    outHeight,\n    outWidth\n  } = get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, effectiveFilterDepth, effectiveFilterHeight, effectiveFilterWidth, roundingMode);\n  const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n  let outShape;\n\n  if (dataFormat === 'channelsFirst') {\n    outShape = [batchSize, outChannels, outDepth, outHeight, outWidth];\n  } else if (dataFormat === 'channelsLast') {\n    outShape = [batchSize, outDepth, outHeight, outWidth, outChannels];\n  }\n\n  return {\n    batchSize,\n    dataFormat,\n    inDepth,\n    inHeight,\n    inWidth,\n    inChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    outChannels,\n    padInfo,\n    strideDepth,\n    strideHeight,\n    strideWidth,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    effectiveFilterDepth,\n    effectiveFilterHeight,\n    effectiveFilterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    inShape,\n    outShape,\n    filterShape\n  };\n}\n\nfunction computeOutputShape2D(inShape, fieldSize, stride, zeroPad, roundingMode) {\n  if (zeroPad == null) {\n    zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n  }\n\n  const inputRows = inShape[0];\n  const inputCols = inShape[1];\n  const outputRows = round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  const outputCols = round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  return [outputRows, outputCols];\n}\n\nfunction computeOutputShape4D(inShape, fieldSize, outChannels, stride, zeroPad, roundingMode) {\n  if (zeroPad == null) {\n    zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n  }\n\n  const inputDepth = inShape[0];\n  const inputRows = inShape[1];\n  const inputCols = inShape[2];\n  const outputDepths = round((inputDepth - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  const outputRows = round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  const outputCols = round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  return [outputDepths, outputRows, outputCols, outChannels];\n}\n\nexport function computeDefaultPad(inputShape, fieldSize, stride) {\n  let dilation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  const effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);\n  return Math.floor((inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);\n}\n\nfunction parseTupleParam(param) {\n  if (typeof param === 'number') {\n    return [param, param, param];\n  }\n\n  if (param.length === 2) {\n    return [param[0], param[1], 1];\n  }\n\n  return param;\n}\n\nfunction parse3TupleParam(param) {\n  return typeof param === 'number' ? [param, param, param] : param;\n}\n/* See https://www.tensorflow.org/api_docs/python/tf/nn/atrous_conv2d\n * Atrous convolution is equivalent to standard convolution with upsampled\n * filters with effective_filter_height =\n * filter_height + (filter_height - 1) * (dilation - 1)\n * and effective_filter_width =\n * filter_width + (filter_width - 1) * (dilation - 1),\n * produced by inserting dilation - 1 zeros along consecutive elements across\n * the filters' spatial dimensions.\n * When there is a dilation, this converts a filter dimension to the\n * effective filter dimension, so it can be used in a standard convolution.\n */\n\n\nfunction getEffectiveFilterSize(filterSize, dilation) {\n  if (dilation <= 1) {\n    return filterSize;\n  }\n\n  return filterSize + (filterSize - 1) * (dilation - 1);\n}\n\nfunction getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, filterHeight, filterWidth, roundingMode, dataFormat) {\n  let padInfo;\n  let outHeight;\n  let outWidth;\n\n  if (typeof pad === 'number') {\n    const padType = pad === 0 ? 'VALID' : 'NUMBER';\n    padInfo = {\n      top: pad,\n      bottom: pad,\n      left: pad,\n      right: pad,\n      type: padType\n    };\n    const outShape = computeOutputShape2D([inHeight, inWidth], filterHeight, strideHeight, pad, roundingMode);\n    outHeight = outShape[0];\n    outWidth = outShape[1];\n  } else if (pad === 'same') {\n    outHeight = Math.ceil(inHeight / strideHeight);\n    outWidth = Math.ceil(inWidth / strideWidth);\n    const padAlongHeight = Math.max(0, (outHeight - 1) * strideHeight + filterHeight - inHeight);\n    const padAlongWidth = Math.max(0, (outWidth - 1) * strideWidth + filterWidth - inWidth);\n    const top = Math.floor(padAlongHeight / 2);\n    const bottom = padAlongHeight - top;\n    const left = Math.floor(padAlongWidth / 2);\n    const right = padAlongWidth - left;\n    padInfo = {\n      top,\n      bottom,\n      left,\n      right,\n      type: 'SAME'\n    };\n  } else if (pad === 'valid') {\n    padInfo = {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      type: 'VALID'\n    };\n    outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n    outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n  } else if (typeof pad === 'object') {\n    const top = dataFormat === 'channelsLast' ? pad[1][0] : pad[2][0];\n    const bottom = dataFormat === 'channelsLast' ? pad[1][1] : pad[2][1];\n    const left = dataFormat === 'channelsLast' ? pad[2][0] : pad[3][0];\n    const right = dataFormat === 'channelsLast' ? pad[2][1] : pad[3][1];\n    const padType = top === 0 && bottom === 0 && left === 0 && right === 0 ? 'VALID' : 'EXPLICIT';\n    padInfo = {\n      top,\n      bottom,\n      left,\n      right,\n      type: padType\n    };\n    outHeight = round((inHeight - filterHeight + top + bottom) / strideHeight + 1, roundingMode);\n    outWidth = round((inWidth - filterWidth + left + right) / strideWidth + 1, roundingMode);\n  } else {\n    throw Error(`Unknown padding parameter: ${pad}`);\n  }\n\n  return {\n    padInfo,\n    outHeight,\n    outWidth\n  };\n}\n\nfunction get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, filterDepth, filterHeight, filterWidth, roundingMode) {\n  let padInfo;\n  let outDepth;\n  let outHeight;\n  let outWidth;\n\n  if (typeof pad === 'number') {\n    const padType = pad === 0 ? 'VALID' : 'NUMBER';\n    padInfo = {\n      top: pad,\n      bottom: pad,\n      left: pad,\n      right: pad,\n      front: pad,\n      back: pad,\n      type: padType\n    };\n    const outShape = computeOutputShape4D([inDepth, inHeight, inWidth, 1], filterDepth, 1, strideDepth, pad, roundingMode);\n    outDepth = outShape[0];\n    outHeight = outShape[1];\n    outWidth = outShape[2];\n  } else if (pad === 'same') {\n    outDepth = Math.ceil(inDepth / strideDepth);\n    outHeight = Math.ceil(inHeight / strideHeight);\n    outWidth = Math.ceil(inWidth / strideWidth);\n    const padAlongDepth = (outDepth - 1) * strideDepth + filterDepth - inDepth;\n    const padAlongHeight = (outHeight - 1) * strideHeight + filterHeight - inHeight;\n    const padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;\n    const front = Math.floor(padAlongDepth / 2);\n    const back = padAlongDepth - front;\n    const top = Math.floor(padAlongHeight / 2);\n    const bottom = padAlongHeight - top;\n    const left = Math.floor(padAlongWidth / 2);\n    const right = padAlongWidth - left;\n    padInfo = {\n      top,\n      bottom,\n      left,\n      right,\n      front,\n      back,\n      type: 'SAME'\n    };\n  } else if (pad === 'valid') {\n    padInfo = {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      front: 0,\n      back: 0,\n      type: 'VALID'\n    };\n    outDepth = Math.ceil((inDepth - filterDepth + 1) / strideDepth);\n    outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n    outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n  } else {\n    throw Error(`Unknown padding parameter: ${pad}`);\n  }\n\n  return {\n    padInfo,\n    outDepth,\n    outHeight,\n    outWidth\n  };\n}\n/**\n * Rounds a value depending on the rounding mode\n * @param value\n * @param roundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\n\n\nfunction round(value, roundingMode) {\n  if (!roundingMode) {\n    return Math.trunc(value);\n  }\n\n  switch (roundingMode) {\n    case 'round':\n      // used for Caffe Conv\n      return Math.round(value);\n\n    case 'ceil':\n      // used for Caffe Pool\n      return Math.ceil(value);\n\n    case 'floor':\n      return Math.floor(value);\n\n    default:\n      throw new Error(`Unknown roundingMode ${roundingMode}`);\n  }\n}\n\nexport function tupleValuesAreOne(param) {\n  const [dimA, dimB, dimC] = parseTupleParam(param);\n  return dimA === 1 && dimB === 1 && dimC === 1;\n}\nexport function eitherStridesOrDilationsAreOne(strides, dilations) {\n  return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);\n}\n/**\n * Convert Conv2D dataFormat from 'NHWC'|'NCHW' to\n *    'channelsLast'|'channelsFirst'\n * @param dataFormat in 'NHWC'|'NCHW' mode\n * @return dataFormat in 'channelsLast'|'channelsFirst' mode\n * @throws unknown dataFormat\n */\n\nexport function convertConv2DDataFormat(dataFormat) {\n  if (dataFormat === 'NHWC') {\n    return 'channelsLast';\n  } else if (dataFormat === 'NCHW') {\n    return 'channelsFirst';\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n}\n/**\n * Check validity of pad when using dimRoundingMode.\n * @param opDesc A string of op description\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid` output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n * @throws unknown padding parameter\n */\n\nexport function checkPadOnDimRoundingMode(opDesc, pad, dimRoundingMode) {\n  if (dimRoundingMode != null) {\n    if (typeof pad === 'string') {\n      throw Error(`Error in ${opDesc}: pad must be an integer when using ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    } else if (typeof pad === 'number') {\n      util.assert(util.isInt(pad), () => `Error in ${opDesc}: pad must be an integer when using ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    } else if (typeof pad === 'object') {\n      pad.forEach(p => {\n        p.forEach(v => {\n          util.assert(util.isInt(v), () => `Error in ${opDesc}: pad must be an integer when using ` + `dimRoundingMode ${dimRoundingMode} but got pad ${v}.`);\n        });\n      });\n    } else {\n      throw Error(`Error in ${opDesc}: Unknown padding parameter: ${pad}`);\n    }\n  }\n}","map":{"version":3,"sources":["../../../../../../tfjs-core/src/ops/conv_util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as util from '../util';\n\ntype PadType = 'SAME'|'VALID'|'NUMBER'|'EXPLICIT';\n\n// For NHWC should be in the following form:\n//  [[0, 0], [pad_top,pad_bottom], [pad_left, pad_right], [0, 0]]\n// For NCHW should be in the following form:\n//  [[0, 0], [0, 0], [pad_top,pad_bottom], [pad_left, pad_right]]\n// Reference: https://www.tensorflow.org/api_docs/python/tf/nn/conv2d\nexport type ExplicitPadding =\n    [[number, number], [number, number], [number, number], [number, number]];\n\nexport type PadInfo = {\n  top: number,\n  left: number,\n  right: number,\n  bottom: number,\n  type: PadType\n};\n\nexport type PadInfo3D = {\n  top: number,\n  left: number,\n  right: number,\n  bottom: number,\n  front: number,\n  back: number,\n  type: PadType\n};\n\n/**\n * Information about the forward pass of a convolution/pooling operation.\n * It includes input and output shape, strides, filter size and padding\n * information.\n */\nexport type Conv2DInfo = {\n  batchSize: number,\n  inHeight: number,\n  inWidth: number,\n  inChannels: number,\n  outHeight: number,\n  outWidth: number,\n  outChannels: number,\n  dataFormat: 'channelsFirst'|'channelsLast',\n  strideHeight: number,\n  strideWidth: number,\n  dilationHeight: number,\n  dilationWidth: number,\n  filterHeight: number,\n  filterWidth: number,\n  effectiveFilterHeight: number,\n  effectiveFilterWidth: number,\n  padInfo: PadInfo,\n  inShape: [number, number, number, number],\n  outShape: [number, number, number, number],\n  filterShape: [number, number, number, number]\n};\n\n/**\n *\n * @param inputShape Input tensor shape is of the following dimensions:\n *     `[batch, height, width, inChannels]`.\n * @param filterShape The filter shape is of the following dimensions:\n *     `[filterHeight, filterWidth, depth]`.\n * @param strides The strides of the sliding window for each dimension of the\n *     input tensor: `[strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dataFormat The data format of the input and output data.\n *     Defaults to 'NHWC'.\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`.\n *     Defaults to `[1, 1]`. If `dilations` is a single number, then\n *     `dilationHeight == dilationWidth`.\n */\nexport function computeDilation2DInfo(\n    inputShape: [number, number, number, number],\n    filterShape: [number, number, number], strides: number|[number, number],\n    pad: 'same'|'valid'|number, dataFormat: 'NHWC' = 'NHWC',\n    dilations: number|[number, number]) {\n  // `computerConv2DInfo` require filterShape to be in the dimension of:\n  // `[filterHeight, filterWidth, depth, outDepth]`, dilation2d doesn't have\n  // outDepth, it should have the same depth as the input.\n  // Input shape: [batch, height, width, inChannels]\n  const inputChannels = inputShape[3];\n  const $filterShape =\n      [...filterShape, inputChannels] as [number, number, number, number];\n  const $dataFormat = convertConv2DDataFormat(dataFormat);\n\n  return computeConv2DInfo(\n      inputShape, $filterShape, strides, dilations, pad,\n      null /* roundingMode */, null /* depthWise */, $dataFormat);\n}\n\nexport function computePool2DInfo(\n    inShape: [number, number, number, number],\n    filterSize: [number, number]|number, strides: number|[number, number],\n    dilations: number|[number, number],\n    pad: 'same'|'valid'|number|ExplicitPadding,\n    roundingMode?: 'floor'|'round'|'ceil',\n    dataFormat: 'channelsFirst'|'channelsLast' = 'channelsLast'): Conv2DInfo {\n  const [filterHeight, filterWidth] = parseTupleParam(filterSize);\n\n  let filterShape: [number, number, number, number];\n  if (dataFormat === 'channelsLast') {\n    filterShape = [filterHeight, filterWidth, inShape[3], inShape[3]];\n  } else if (dataFormat === 'channelsFirst') {\n    filterShape = [filterHeight, filterWidth, inShape[1], inShape[1]];\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  return computeConv2DInfo(\n      inShape, filterShape, strides, dilations, pad, roundingMode, false,\n      dataFormat);\n}\n\n/**\n * Computes the information for a forward pass of a pooling3D operation.\n */\nexport function computePool3DInfo(\n    inShape: [number, number, number, number, number],\n    filterSize: number|[number, number, number],\n    strides: number|[number, number, number],\n    dilations: number|[number, number, number], pad: 'same'|'valid'|number,\n    roundingMode?: 'floor'|'round'|'ceil',\n    dataFormat: 'NDHWC'|'NCDHW' = 'NDHWC'): Conv3DInfo {\n  const [filterDepth, filterHeight, filterWidth] = parse3TupleParam(filterSize);\n\n  let filterShape: [number, number, number, number, number];\n  let $dataFormat: 'channelsFirst'|'channelsLast';\n  if (dataFormat === 'NDHWC') {\n    $dataFormat = 'channelsLast';\n    filterShape =\n        [filterDepth, filterHeight, filterWidth, inShape[4], inShape[4]];\n  } else if (dataFormat === 'NCDHW') {\n    $dataFormat = 'channelsFirst';\n    filterShape =\n        [filterDepth, filterHeight, filterWidth, inShape[1], inShape[1]];\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  return computeConv3DInfo(\n      inShape, filterShape, strides, dilations, pad, false, $dataFormat,\n      roundingMode);\n}\n\n/**\n * Computes the information for a forward pass of a convolution/pooling\n * operation.\n */\nexport function computeConv2DInfo(\n    inShape: [number, number, number, number],\n    filterShape: [number, number, number, number],\n    strides: number|[number, number], dilations: number|[number, number],\n    pad: 'same'|'valid'|number|ExplicitPadding,\n    roundingMode?: 'floor'|'round'|'ceil', depthwise = false,\n    dataFormat: 'channelsFirst'|'channelsLast' = 'channelsLast'): Conv2DInfo {\n  let [batchSize, inHeight, inWidth, inChannels] = [-1, -1, -1, -1];\n  if (dataFormat === 'channelsLast') {\n    [batchSize, inHeight, inWidth, inChannels] = inShape;\n  } else if (dataFormat === 'channelsFirst') {\n    [batchSize, inChannels, inHeight, inWidth] = inShape;\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  const [filterHeight, filterWidth, , filterChannels] = filterShape;\n  const [strideHeight, strideWidth] = parseTupleParam(strides);\n  const [dilationHeight, dilationWidth] = parseTupleParam(dilations);\n\n  const effectiveFilterHeight =\n      getEffectiveFilterSize(filterHeight, dilationHeight);\n  const effectiveFilterWidth =\n      getEffectiveFilterSize(filterWidth, dilationWidth);\n  const {padInfo, outHeight, outWidth} = getPadAndOutInfo(\n      pad, inHeight, inWidth, strideHeight, strideWidth, effectiveFilterHeight,\n      effectiveFilterWidth, roundingMode, dataFormat);\n\n  const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n\n  let outShape: [number, number, number, number];\n  if (dataFormat === 'channelsFirst') {\n    outShape = [batchSize, outChannels, outHeight, outWidth];\n  } else if (dataFormat === 'channelsLast') {\n    outShape = [batchSize, outHeight, outWidth, outChannels];\n  }\n\n  return {\n    batchSize,\n    dataFormat,\n    inHeight,\n    inWidth,\n    inChannels,\n    outHeight,\n    outWidth,\n    outChannels,\n    padInfo,\n    strideHeight,\n    strideWidth,\n    filterHeight,\n    filterWidth,\n    effectiveFilterHeight,\n    effectiveFilterWidth,\n    dilationHeight,\n    dilationWidth,\n    inShape,\n    outShape,\n    filterShape\n  };\n}\n\n/**\n * Information about the forward pass of a 3D convolution/pooling operation.\n * It includes input and output shape, strides, filter size and padding\n * information.\n */\nexport type Conv3DInfo = {\n  batchSize: number,\n  inDepth: number,\n  inHeight: number,\n  inWidth: number,\n  inChannels: number,\n  outDepth: number,\n  outHeight: number,\n  outWidth: number,\n  outChannels: number,\n  dataFormat: 'channelsFirst'|'channelsLast',\n  strideDepth: number,\n  strideHeight: number,\n  strideWidth: number,\n  dilationDepth: number,\n  dilationHeight: number,\n  dilationWidth: number,\n  filterDepth: number,\n  filterHeight: number,\n  filterWidth: number,\n  effectiveFilterDepth: number,\n  effectiveFilterHeight: number,\n  effectiveFilterWidth: number,\n  padInfo: PadInfo3D,\n  inShape: [number, number, number, number, number],\n  outShape: [number, number, number, number, number],\n  filterShape: [number, number, number, number, number]\n};\n\n/**\n * Computes the information for a forward pass of a 3D convolution/pooling\n * operation.\n */\nexport function computeConv3DInfo(\n    inShape: [number, number, number, number, number],\n    filterShape: [number, number, number, number, number],\n    strides: number|[number, number, number],\n    dilations: number|[number, number, number], pad: 'same'|'valid'|number,\n    depthwise = false,\n    dataFormat: 'channelsFirst'|'channelsLast' = 'channelsLast',\n    roundingMode?: 'floor'|'round'|'ceil'): Conv3DInfo {\n  let [batchSize, inDepth, inHeight, inWidth, inChannels] =\n      [-1, -1, -1, -1, -1];\n  if (dataFormat === 'channelsLast') {\n    [batchSize, inDepth, inHeight, inWidth, inChannels] = inShape;\n  } else if (dataFormat === 'channelsFirst') {\n    [batchSize, inChannels, inDepth, inHeight, inWidth] = inShape;\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  const [filterDepth, filterHeight, filterWidth, , filterChannels] =\n      filterShape;\n  const [strideDepth, strideHeight, strideWidth] = parse3TupleParam(strides);\n  const [dilationDepth, dilationHeight, dilationWidth] =\n      parse3TupleParam(dilations);\n\n  const effectiveFilterDepth =\n      getEffectiveFilterSize(filterDepth, dilationDepth);\n  const effectiveFilterHeight =\n      getEffectiveFilterSize(filterHeight, dilationHeight);\n  const effectiveFilterWidth =\n      getEffectiveFilterSize(filterWidth, dilationWidth);\n  const {padInfo, outDepth, outHeight, outWidth} = get3DPadAndOutInfo(\n      pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth,\n      effectiveFilterDepth, effectiveFilterHeight, effectiveFilterWidth,\n      roundingMode);\n\n  const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n\n  let outShape: [number, number, number, number, number];\n  if (dataFormat === 'channelsFirst') {\n    outShape = [batchSize, outChannels, outDepth, outHeight, outWidth];\n  } else if (dataFormat === 'channelsLast') {\n    outShape = [batchSize, outDepth, outHeight, outWidth, outChannels];\n  }\n\n  return {\n    batchSize,\n    dataFormat,\n    inDepth,\n    inHeight,\n    inWidth,\n    inChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    outChannels,\n    padInfo,\n    strideDepth,\n    strideHeight,\n    strideWidth,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    effectiveFilterDepth,\n    effectiveFilterHeight,\n    effectiveFilterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    inShape,\n    outShape,\n    filterShape\n  };\n}\n\nfunction computeOutputShape2D(\n    inShape: [number, number], fieldSize: number, stride: number,\n    zeroPad?: number, roundingMode?: 'floor'|'round'|'ceil'): [number, number] {\n  if (zeroPad == null) {\n    zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n  }\n  const inputRows = inShape[0];\n  const inputCols = inShape[1];\n\n  const outputRows =\n      round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  const outputCols =\n      round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n\n  return [outputRows, outputCols];\n}\n\nfunction computeOutputShape4D(\n    inShape: [number, number, number, number], fieldSize: number,\n    outChannels: number, stride: number, zeroPad?: number,\n    roundingMode?: 'floor'|'round'|'ceil'): [number, number, number, number] {\n  if (zeroPad == null) {\n    zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n  }\n  const inputDepth = inShape[0];\n  const inputRows = inShape[1];\n  const inputCols = inShape[2];\n\n  const outputDepths =\n      round((inputDepth - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  const outputRows =\n      round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  const outputCols =\n      round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n\n  return [outputDepths, outputRows, outputCols, outChannels];\n}\n\nexport function computeDefaultPad(\n    inputShape: [number, number]|[number, number, number, number],\n    fieldSize: number, stride: number, dilation = 1): number {\n  const effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);\n  return Math.floor(\n      (inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);\n}\n\nfunction parseTupleParam(param: number|number[]): [number, number, number] {\n  if (typeof param === 'number') {\n    return [param, param, param];\n  }\n  if (param.length === 2) {\n    return [param[0], param[1], 1];\n  }\n  return param as [number, number, number];\n}\n\nfunction parse3TupleParam(param: number|[number, number, number]):\n    [number, number, number] {\n  return typeof param === 'number' ? [param, param, param] : param;\n}\n\n/* See https://www.tensorflow.org/api_docs/python/tf/nn/atrous_conv2d\n * Atrous convolution is equivalent to standard convolution with upsampled\n * filters with effective_filter_height =\n * filter_height + (filter_height - 1) * (dilation - 1)\n * and effective_filter_width =\n * filter_width + (filter_width - 1) * (dilation - 1),\n * produced by inserting dilation - 1 zeros along consecutive elements across\n * the filters' spatial dimensions.\n * When there is a dilation, this converts a filter dimension to the\n * effective filter dimension, so it can be used in a standard convolution.\n */\nfunction getEffectiveFilterSize(filterSize: number, dilation: number) {\n  if (dilation <= 1) {\n    return filterSize;\n  }\n\n  return filterSize + (filterSize - 1) * (dilation - 1);\n}\n\nfunction getPadAndOutInfo(\n    pad: 'same'|'valid'|number|ExplicitPadding, inHeight: number,\n    inWidth: number, strideHeight: number, strideWidth: number,\n    filterHeight: number, filterWidth: number,\n    roundingMode: 'floor'|'round'|'ceil',\n    dataFormat: 'channelsFirst'|\n    'channelsLast'): {padInfo: PadInfo, outHeight: number, outWidth: number} {\n  let padInfo: PadInfo;\n  let outHeight: number;\n  let outWidth: number;\n\n  if (typeof pad === 'number') {\n    const padType = (pad === 0) ? 'VALID' : 'NUMBER';\n    padInfo = {top: pad, bottom: pad, left: pad, right: pad, type: padType};\n    const outShape = computeOutputShape2D(\n        [inHeight, inWidth], filterHeight, strideHeight, pad, roundingMode);\n    outHeight = outShape[0];\n    outWidth = outShape[1];\n  } else if (pad === 'same') {\n    outHeight = Math.ceil(inHeight / strideHeight);\n    outWidth = Math.ceil(inWidth / strideWidth);\n    const padAlongHeight =\n        Math.max(0, (outHeight - 1) * strideHeight + filterHeight - inHeight);\n    const padAlongWidth =\n        Math.max(0, (outWidth - 1) * strideWidth + filterWidth - inWidth);\n    const top = Math.floor(padAlongHeight / 2);\n    const bottom = padAlongHeight - top;\n    const left = Math.floor(padAlongWidth / 2);\n    const right = padAlongWidth - left;\n    padInfo = {top, bottom, left, right, type: 'SAME'};\n  } else if (pad === 'valid') {\n    padInfo = {top: 0, bottom: 0, left: 0, right: 0, type: 'VALID'};\n    outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n    outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n  } else if (typeof pad === 'object') {\n    const top = dataFormat === 'channelsLast' ? pad[1][0] : pad[2][0];\n    const bottom = dataFormat === 'channelsLast' ? pad[1][1] : pad[2][1];\n    const left = dataFormat === 'channelsLast' ? pad[2][0] : pad[3][0];\n    const right = dataFormat === 'channelsLast' ? pad[2][1] : pad[3][1];\n    const padType = (top === 0 && bottom === 0 && left === 0 && right === 0) ?\n        'VALID' :\n        'EXPLICIT';\n    padInfo = {top, bottom, left, right, type: padType};\n    outHeight = round(\n        (inHeight - filterHeight + top + bottom) / strideHeight + 1,\n        roundingMode);\n    outWidth = round(\n        (inWidth - filterWidth + left + right) / strideWidth + 1, roundingMode);\n  } else {\n    throw Error(`Unknown padding parameter: ${pad}`);\n  }\n  return {padInfo, outHeight, outWidth};\n}\n\nfunction get3DPadAndOutInfo(\n    pad: 'same'|'valid'|number, inDepth: number, inHeight: number,\n    inWidth: number, strideDepth: number, strideHeight: number,\n    strideWidth: number, filterDepth: number, filterHeight: number,\n    filterWidth: number, roundingMode?: 'floor'|'round'|'ceil'): {\n  padInfo: PadInfo3D,\n  outDepth: number,\n  outHeight: number,\n  outWidth: number\n} {\n  let padInfo: PadInfo3D;\n  let outDepth: number;\n  let outHeight: number;\n  let outWidth: number;\n\n  if (typeof pad === 'number') {\n    const padType = (pad === 0) ? 'VALID' : 'NUMBER';\n    padInfo = {\n      top: pad,\n      bottom: pad,\n      left: pad,\n      right: pad,\n      front: pad,\n      back: pad,\n      type: padType\n    };\n    const outShape = computeOutputShape4D(\n        [inDepth, inHeight, inWidth, 1], filterDepth, 1, strideDepth, pad,\n        roundingMode);\n    outDepth = outShape[0];\n    outHeight = outShape[1];\n    outWidth = outShape[2];\n  } else if (pad === 'same') {\n    outDepth = Math.ceil(inDepth / strideDepth);\n    outHeight = Math.ceil(inHeight / strideHeight);\n    outWidth = Math.ceil(inWidth / strideWidth);\n    const padAlongDepth = (outDepth - 1) * strideDepth + filterDepth - inDepth;\n    const padAlongHeight =\n        (outHeight - 1) * strideHeight + filterHeight - inHeight;\n    const padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;\n    const front = Math.floor(padAlongDepth / 2);\n    const back = padAlongDepth - front;\n    const top = Math.floor(padAlongHeight / 2);\n    const bottom = padAlongHeight - top;\n    const left = Math.floor(padAlongWidth / 2);\n    const right = padAlongWidth - left;\n\n    padInfo = {top, bottom, left, right, front, back, type: 'SAME'};\n  } else if (pad === 'valid') {\n    padInfo = {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      front: 0,\n      back: 0,\n      type: 'VALID'\n    };\n    outDepth = Math.ceil((inDepth - filterDepth + 1) / strideDepth);\n    outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n    outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n  } else {\n    throw Error(`Unknown padding parameter: ${pad}`);\n  }\n  return {padInfo, outDepth, outHeight, outWidth};\n}\n\n/**\n * Rounds a value depending on the rounding mode\n * @param value\n * @param roundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction round(value: number, roundingMode?: 'floor'|'round'|'ceil') {\n  if (!roundingMode) {\n    return Math.trunc(value);\n  }\n  switch (roundingMode) {\n    case 'round':\n      // used for Caffe Conv\n      return Math.round(value);\n    case 'ceil':\n      // used for Caffe Pool\n      return Math.ceil(value);\n    case 'floor':\n      return Math.floor(value);\n    default:\n      throw new Error(`Unknown roundingMode ${roundingMode}`);\n  }\n}\n\nexport function tupleValuesAreOne(param: number|number[]): boolean {\n  const [dimA, dimB, dimC] = parseTupleParam(param);\n  return dimA === 1 && dimB === 1 && dimC === 1;\n}\n\nexport function eitherStridesOrDilationsAreOne(\n    strides: number|number[], dilations: number|number[]): boolean {\n  return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);\n}\n\n/**\n * Convert Conv2D dataFormat from 'NHWC'|'NCHW' to\n *    'channelsLast'|'channelsFirst'\n * @param dataFormat in 'NHWC'|'NCHW' mode\n * @return dataFormat in 'channelsLast'|'channelsFirst' mode\n * @throws unknown dataFormat\n */\nexport function convertConv2DDataFormat(dataFormat: 'NHWC'|'NCHW'):\n    'channelsLast'|'channelsFirst' {\n  if (dataFormat === 'NHWC') {\n    return 'channelsLast';\n  } else if (dataFormat === 'NCHW') {\n    return 'channelsFirst';\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n}\n\n/**\n * Check validity of pad when using dimRoundingMode.\n * @param opDesc A string of op description\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid` output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n * @throws unknown padding parameter\n */\nexport function checkPadOnDimRoundingMode(\n    opDesc: string, pad: 'valid'|'same'|number|ExplicitPadding,\n    dimRoundingMode?: 'floor'|'round'|'ceil') {\n  if (dimRoundingMode != null) {\n    if (typeof pad === 'string') {\n      throw Error(\n          `Error in ${opDesc}: pad must be an integer when using `  +\n          `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    } else if (typeof pad === 'number') {\n      util.assert(\n        util.isInt(pad),\n          () => `Error in ${opDesc}: pad must be an integer when using ` +\n              `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    } else if (typeof pad === 'object') {\n      (pad as ExplicitPadding).forEach(p => {p.forEach(v =>{\n        util.assert(\n          util.isInt(v),\n            () => `Error in ${opDesc}: pad must be an integer when using ` +\n                `dimRoundingMode ${dimRoundingMode} but got pad ${v}.`);\n        });\n      });\n    } else {\n      throw Error(`Error in ${opDesc}: Unknown padding parameter: ${pad}`);\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}