{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [{\n  'tfOpName': 'ConcatV2',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'end': -1,\n    'name': 'tensors',\n    'type': 'tensors'\n  }, {\n    'start': -1,\n    'name': 'axis',\n    'type': 'number'\n  }],\n  'attrs': [{\n    'tfName': 'N',\n    'name': 'n',\n    'type': 'number',\n    'defaultValue': 2\n  }]\n}, {\n  'tfOpName': 'Concat',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 1,\n    'end': 0,\n    'name': 'tensors',\n    'type': 'tensors'\n  }, {\n    'start': 0,\n    'name': 'axis',\n    'type': 'number'\n  }],\n  'attrs': [{\n    'tfName': 'N',\n    'name': 'n',\n    'type': 'number',\n    'defaultValue': 2\n  }]\n}, {\n  'tfOpName': 'GatherV2',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'indices',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'axis',\n    'type': 'number',\n    'defaultValue': 0\n  }],\n  'attrs': [{\n    'tfName': 'batch_dims',\n    'name': 'batchDims',\n    'type': 'number',\n    'defaultValue': 0\n  }]\n}, {\n  'tfOpName': 'Gather',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'indices',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'validate_indices',\n    'name': 'validateIndices',\n    'type': 'bool',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Reverse',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'dims',\n    'type': 'bool[]'\n  }]\n}, {\n  'tfOpName': 'ReverseV2',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'axis',\n    'type': 'number[]'\n  }]\n}, {\n  'tfOpName': 'Slice',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'begin',\n    'type': 'number[]'\n  }, {\n    'start': 2,\n    'name': 'size',\n    'type': 'number[]'\n  }]\n}, {\n  'tfOpName': 'StridedSlice',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'begin',\n    'type': 'number[]'\n  }, {\n    'start': 2,\n    'name': 'end',\n    'type': 'number[]'\n  }, {\n    'start': 3,\n    'name': 'strides',\n    'type': 'number[]'\n  }],\n  'attrs': [{\n    'tfName': 'begin_mask',\n    'name': 'beginMask',\n    'type': 'number',\n    'defaultValue': 0\n  }, {\n    'tfName': 'end_mask',\n    'name': 'endMask',\n    'type': 'number',\n    'defaultValue': 0\n  }, {\n    'tfName': 'new_axis_mask',\n    'name': 'newAxisMask',\n    'type': 'number',\n    'defaultValue': 0\n  }, {\n    'tfName': 'ellipsis_mask',\n    'name': 'ellipsisMask',\n    'type': 'number',\n    'defaultValue': 0\n  }, {\n    'tfName': 'shrink_axis_mask',\n    'name': 'shrinkAxisMask',\n    'type': 'number',\n    'defaultValue': 0\n  }]\n}, {\n  'tfOpName': 'Pack',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'end': 0,\n    'name': 'tensors',\n    'type': 'tensors'\n  }],\n  'attrs': [{\n    'tfName': 'axis',\n    'name': 'axis',\n    'type': 'number',\n    'defaultValue': 0\n  }]\n}, {\n  'tfOpName': 'Unpack',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensor',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'axis',\n    'name': 'axis',\n    'type': 'number',\n    'defaultValue': 0\n  }, {\n    'tfName': 'num',\n    'name': 'num',\n    'type': 'number',\n    'defaultValue': 0,\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Tile',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'reps',\n    'type': 'number[]'\n  }]\n}, {\n  'tfOpName': 'Split',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'axis',\n    'type': 'number',\n    'defaultValue': 0\n  }, {\n    'start': 1,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'num_split',\n    'name': 'numOrSizeSplits',\n    'type': 'number',\n    'defaultValue': 1\n  }]\n}, {\n  'tfOpName': 'SplitV',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'numOrSizeSplits',\n    'type': 'number[]'\n  }, {\n    'start': 2,\n    'name': 'axis',\n    'type': 'number',\n    'defaultValue': 0\n  }]\n}, {\n  'tfOpName': 'ScatterNd',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'indices',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'values',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'shape',\n    'type': 'number[]'\n  }]\n}, {\n  'tfOpName': 'GatherNd',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'indices',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'SparseToDense',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'sparseIndices',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'outputShape',\n    'type': 'number[]'\n  }, {\n    'start': 2,\n    'name': 'sparseValues',\n    'type': 'tensor'\n  }, {\n    'start': 3,\n    'name': 'defaultValue',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'validate_indices',\n    'name': 'validateIndices',\n    'type': 'bool',\n    'defaultValue': false,\n    'notSupported': true\n  }]\n}];","map":{"version":3,"sources":["../../../../../../../tfjs-converter/src/operations/op_list/slice_join.ts"],"names":[],"mappings":"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","sourcesContent":["\n/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ConcatV2',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'end': -1,\n        'name': 'tensors',\n        'type': 'tensors'\n      },\n      {\n        'start': -1,\n        'name': 'axis',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'N',\n        'name': 'n',\n        'type': 'number',\n        'defaultValue': 2\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Concat',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 1,\n        'end': 0,\n        'name': 'tensors',\n        'type': 'tensors'\n      },\n      {\n        'start': 0,\n        'name': 'axis',\n        'type': 'number'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'N',\n        'name': 'n',\n        'type': 'number',\n        'defaultValue': 2\n      }\n    ]\n  },\n  {\n    'tfOpName': 'GatherV2',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'indices',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'axis',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'batch_dims',\n        'name': 'batchDims',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Gather',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'indices',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'validate_indices',\n        'name': 'validateIndices',\n        'type': 'bool',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reverse',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'dims',\n        'type': 'bool[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ReverseV2',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Slice',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'begin',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'size',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'StridedSlice',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'begin',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'end',\n        'type': 'number[]'\n      },\n      {\n        'start': 3,\n        'name': 'strides',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'begin_mask',\n        'name': 'beginMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'end_mask',\n        'name': 'endMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'new_axis_mask',\n        'name': 'newAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'ellipsis_mask',\n        'name': 'ellipsisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'shrink_axis_mask',\n        'name': 'shrinkAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Pack',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'end': 0,\n        'name': 'tensors',\n        'type': 'tensors'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'axis',\n        'name': 'axis',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Unpack',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'tensor',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'axis',\n        'name': 'axis',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'num',\n        'name': 'num',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Tile',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'reps',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Split',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'axis',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'start': 1,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'num_split',\n        'name': 'numOrSizeSplits',\n        'type': 'number',\n        'defaultValue': 1\n      }\n    ]\n  },\n  {\n    'tfOpName': 'SplitV',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'numOrSizeSplits',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'axis',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'ScatterNd',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'indices',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'values',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'shape',\n        'type': 'number[]'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'GatherNd',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'indices',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'slice_join',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'sparseIndices',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'outputShape',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'sparseValues',\n        'type': 'tensor'\n      },\n      {\n        'start': 3,\n        'name': 'defaultValue',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'validate_indices',\n        'name': 'validateIndices',\n        'type': 'bool',\n        'defaultValue': false,\n        'notSupported': true\n      }\n    ]\n  }\n];\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}