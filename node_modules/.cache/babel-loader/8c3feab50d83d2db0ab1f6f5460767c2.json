{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { broadcast_util, upcastType, util } from '@tensorflow/tfjs-core';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nimport { MatMulPackedProgram } from '../mulmat_packed_gpu';\nimport { multiply } from './Multiply';\nimport { reshape } from './Reshape';\nimport { sum } from './Sum';\nimport { transpose } from './Transpose'; // Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\n\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\nexport function batchMatMulImpl(_ref) {\n  let {\n    a,\n    b,\n    transposeA,\n    transposeB,\n    backend,\n    bias = null,\n    preluActivationWeights = null,\n    leakyreluAlpha = 0,\n    activation = null\n  } = _ref;\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n  const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n  util.assert(innerShapeA === innerShapeB, () => `Error in matMul: inner shapes (${innerShapeA}) and (` + `${innerShapeB}) of Tensors with shapes ${a.shape} and ` + `${b.shape} and transposeA=${transposeA}` + ` and transposeB=${transposeB} must match.`);\n  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] : [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] : [batchDimB, innerShapeB, outerShapeB]; // The rest of the implementation is designed to operate on rank-3 tensors\n\n  const a3d = reshape({\n    inputs: {\n      x: a\n    },\n    backend,\n    attrs: {\n      shape: a3dShape\n    }\n  });\n  const b3d = reshape({\n    inputs: {\n      x: b\n    },\n    backend,\n    attrs: {\n      shape: b3dShape\n    }\n  });\n  const intermediates = [a3d, b3d];\n  const batchDim = Math.max(batchDimA, batchDimB);\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation = activation != null ? mapActivationToShaderProgram(activation, true) : null;\n  const containsFusedOps = hasBias || hasPreluActivationWeights || hasLeakyreluAlpha || fusedActivation != null;\n  let out; // Since the matrices are vectors, it is faster to call mul().sum()\n  // because sum() is O(sqrt(N)) due to divide-and-conquer.\n\n  if ((outerShapeA === 1 || outerShapeB === 1) && sharedDim > MATMUL_SHARED_DIM_THRESHOLD && containsFusedOps === false) {\n    let aVec = a3d;\n    let bVec = b3d;\n\n    if (transposeA) {\n      aVec = transpose({\n        inputs: {\n          x: a3d\n        },\n        backend,\n        attrs: {\n          perm: [0, 2, 1]\n        }\n      });\n      intermediates.push(aVec);\n    }\n\n    if (transposeB) {\n      bVec = transpose({\n        inputs: {\n          x: b3d\n        },\n        backend,\n        attrs: {\n          perm: [0, 2, 1]\n        }\n      });\n      intermediates.push(bVec);\n    }\n\n    const shouldReshapeA = outerShapeB !== 1;\n    const shouldReshapeB = outerShapeB === 1;\n    let aVec3d = aVec;\n\n    if (shouldReshapeA) {\n      aVec3d = reshape({\n        inputs: {\n          x: aVec\n        },\n        backend,\n        attrs: {\n          shape: [batchDim, sharedDim, 1]\n        }\n      });\n      intermediates.push(aVec3d);\n    }\n\n    const axis = outerShapeB === 1 ? 2 : 1;\n    let bVec3d = bVec;\n\n    if (shouldReshapeB) {\n      bVec3d = reshape({\n        inputs: {\n          x: bVec\n        },\n        backend,\n        attrs: {\n          shape: [batchDim, 1, sharedDim]\n        }\n      });\n      intermediates.push(bVec3d);\n    }\n\n    const product = multiply({\n      inputs: {\n        a: aVec3d,\n        b: bVec3d\n      },\n      backend\n    });\n    out = sum({\n      inputs: {\n        x: product\n      },\n      backend,\n      attrs: {\n        axis,\n        keepDims: true\n      }\n    });\n    intermediates.push(product);\n  } else {\n    const dtype = upcastType(a.dtype, b.dtype);\n    const program = new MatMulPackedProgram(a3dShape, b3dShape, [batchDim, outerShapeA, outerShapeB], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    const inputs = [a3d, b3d];\n\n    if (bias != null) {\n      inputs.push(bias);\n    }\n\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n\n    out = backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const outReshaped = reshape({\n    inputs: {\n      x: out\n    },\n    backend,\n    attrs: {\n      shape: outShape\n    }\n  });\n  intermediates.push(out);\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return outReshaped;\n}","map":{"version":3,"sources":["../../../../../../tfjs-backend-webgl/src/kernels/BatchMatMul_impl.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcast_util, TensorInfo, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\n\ntype BatchMatMulConfig = {\n  a: TensorInfo,\n  b: TensorInfo,\n  transposeA: boolean,\n  transposeB: boolean,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\nexport function batchMatMulImpl({\n  a,\n  b,\n  transposeA,\n  transposeB,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: BatchMatMulConfig): TensorInfo {\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(\n      a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape: [number, number, number] = transposeA ?\n      [batchDimA, innerShapeA, outerShapeA] :\n      [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape: [number, number, number] = transposeB ?\n      [batchDimB, outerShapeB, innerShapeB] :\n      [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const intermediates: TensorInfo[] = [a3d, b3d];\n\n  const batchDim = Math.max(batchDimA, batchDimB);\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation = activation != null ?\n      mapActivationToShaderProgram(activation, true) :\n      null;\n  const containsFusedOps = hasBias || hasPreluActivationWeights ||\n      hasLeakyreluAlpha || fusedActivation != null;\n  let out: TensorInfo;\n\n  // Since the matrices are vectors, it is faster to call mul().sum()\n  // because sum() is O(sqrt(N)) due to divide-and-conquer.\n  if ((outerShapeA === 1 || outerShapeB === 1) &&\n      sharedDim > MATMUL_SHARED_DIM_THRESHOLD && containsFusedOps === false) {\n    let aVec = a3d;\n    let bVec = b3d;\n    if (transposeA) {\n      aVec = transpose({inputs: {x: a3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(aVec);\n    }\n    if (transposeB) {\n      bVec = transpose({inputs: {x: b3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(bVec);\n    }\n\n    const shouldReshapeA = outerShapeB !== 1;\n    const shouldReshapeB = outerShapeB === 1;\n\n    let aVec3d = aVec;\n    if (shouldReshapeA) {\n      aVec3d = reshape({\n        inputs: {x: aVec},\n        backend,\n        attrs: {shape: [batchDim, sharedDim, 1]}\n      });\n\n      intermediates.push(aVec3d);\n    }\n\n    const axis = outerShapeB === 1 ? 2 : 1;\n\n    let bVec3d = bVec;\n    if (shouldReshapeB) {\n      bVec3d = reshape({\n        inputs: {x: bVec},\n        backend,\n        attrs: {shape: [batchDim, 1, sharedDim]}\n      });\n\n      intermediates.push(bVec3d);\n    }\n\n    const product = multiply({inputs: {a: aVec3d, b: bVec3d}, backend});\n    out = sum({inputs: {x: product}, backend, attrs: {axis, keepDims: true}});\n    intermediates.push(product);\n  } else {\n    const dtype = upcastType(a.dtype, b.dtype);\n\n    const program = new MatMulPackedProgram(\n        a3dShape, b3dShape, [batchDim, outerShapeA, outerShapeB], transposeA,\n        transposeB, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n\n    const inputs: TensorInfo[] = [a3d, b3d];\n    if (bias != null) {\n      inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n\n    out = backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: outShape}});\n  intermediates.push(out);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n  return outReshaped;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}