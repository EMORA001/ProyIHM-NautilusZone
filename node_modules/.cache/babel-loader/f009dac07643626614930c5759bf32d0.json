{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MaxPoolWithArgmax } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPoolWithArgmaxImpl } from './MaxPoolWithArgmax_impl';\nexport const maxPoolWithArgmaxConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: _ref => {\n    let {\n      inputs,\n      attrs,\n      backend\n    } = _ref;\n    const {\n      x\n    } = inputs;\n    const {\n      filterSize,\n      strides,\n      pad,\n      includeBatchInIndex\n    } = attrs;\n    const cpuBackend = backend;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n    const values = cpuBackend.data.get(x.dataId).values;\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n    const pooledDataId = cpuBackend.write(pooled, convInfo.outShape, x.dtype);\n    const indexesDataId = cpuBackend.write(indexes, convInfo.outShape, x.dtype);\n    return [{\n      dataId: pooledDataId,\n      shape: convInfo.outShape,\n      dtype: x.dtype\n    }, {\n      dataId: indexesDataId,\n      shape: convInfo.outShape,\n      dtype: 'int32'\n    }];\n  }\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/MaxPoolWithArgmax.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,iBAAR,QAAiF,uBAAjF;AACA,SAAQ,YAAR,QAAqD,uBAArD;AAEA,SAAQ,gBAAR,QAA+B,aAA/B;AAEA,SAAQ,qBAAR,QAAoC,0BAApC;AAEA,OAAO,MAAM,uBAAuB,GAAiB;EACnD,UAAU,EAAE,iBADuC;EAEnD,WAAW,EAAE,KAFsC;EAGnD,UAAU,EAAE,QAA6B;IAAA,IAA5B;MAAC,MAAD;MAAS,KAAT;MAAgB;IAAhB,CAA4B;IACvC,MAAM;MAAC;IAAD,IAAM,MAAZ;IACA,MAAM;MAAC,UAAD;MAAa,OAAb;MAAsB,GAAtB;MAA2B;IAA3B,IACF,KADJ;IAEA,MAAM,UAAU,GAAG,OAAnB;IACA,gBAAgB,CAAC,CAAD,EAAI,mBAAJ,CAAhB;IAEA,MAAM,MAAM,GAAG,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAAoB,CAAC,CAAC,MAAtB,EAA8B,MAA7C;IACA,MAAM,QAAQ,GAAG,YAAY,CAAC,iBAAb,CACb,CAAC,CAAC,KADW,EACgC,UADhC,EAC4C,OAD5C,EAEb,CAAC,CAAD,EAAI,CAAJ,CAFa,EAEL,GAFK,CAAjB;IAGA,MAAM,CAAC,MAAD,EAAS,OAAT,IAAoB,qBAAqB,CAC3C,MAD2C,EACnC,CAAC,CAAC,KADiC,EAC1B,CAAC,CAAC,KADwB,EACjB,mBADiB,EACI,QADJ,CAA/C;IAGA,MAAM,YAAY,GACd,UAAU,CAAC,KAAX,CAAiB,MAAjB,EAAyC,QAAQ,CAAC,QAAlD,EAA4D,CAAC,CAAC,KAA9D,CADJ;IAEA,MAAM,aAAa,GACf,UAAU,CAAC,KAAX,CAAiB,OAAjB,EAAwC,QAAQ,CAAC,QAAjD,EAA2D,CAAC,CAAC,KAA7D,CADJ;IAEA,OAAO,CACL;MAAC,MAAM,EAAE,YAAT;MAAuB,KAAK,EAAE,QAAQ,CAAC,QAAvC;MAAiD,KAAK,EAAE,CAAC,CAAC;IAA1D,CADK,EAEL;MAAC,MAAM,EAAE,aAAT;MAAwB,KAAK,EAAE,QAAQ,CAAC,QAAxC;MAAkD,KAAK,EAAE;IAAzD,CAFK,CAAP;EAID;AAzBkD,CAA9C","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(\n        values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n\n    const pooledDataId =\n        cpuBackend.write(pooled as Float32Array, convInfo.outShape, x.dtype);\n    const indexesDataId =\n        cpuBackend.write(indexes as Int32Array, convInfo.outShape, x.dtype);\n    return [\n      {dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype},\n      {dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32'}\n    ];\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}