{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat, keep, reshape, scalar, slice, stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize } from './tensor_utils';\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\n\nexport class TensorArray {\n  constructor(name, dtype, maxSize, elementShape, identicalElementShapes, dynamicSize, clearAfterRead) {\n    this.name = name;\n    this.dtype = dtype;\n    this.maxSize = maxSize;\n    this.elementShape = elementShape;\n    this.identicalElementShapes = identicalElementShapes;\n    this.dynamicSize = dynamicSize;\n    this.clearAfterRead = clearAfterRead;\n    this.tensors = [];\n    this.closed_ = false;\n    this.idTensor = scalar(0);\n    keep(this.idTensor);\n  }\n\n  get id() {\n    return this.idTensor.id;\n  }\n\n  get closed() {\n    return this.closed_;\n  }\n  /**\n   * Dispose the tensors and idTensor and mark the TensoryArray as closed.\n   */\n\n\n  clearAndClose(keepIds) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.tensor.id)) {\n        tensor.tensor.dispose();\n      }\n    });\n    this.tensors = [];\n    this.closed_ = true;\n    this.idTensor.dispose();\n  }\n\n  size() {\n    return this.tensors.length;\n  }\n  /**\n   * Read the value at location index in the TensorArray.\n   * @param index Number the index to read from.\n   */\n\n\n  read(index) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || index >= this.size()) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${this.size()}`);\n    }\n\n    const tensorWithState = this.tensors[index];\n\n    if (tensorWithState.cleared) {\n      throw new Error(`TensorArray ${this.name}: Could not read index ${index} twice because it was cleared after a previous read ` + `(perhaps try setting clear_after_read = false?).`);\n    }\n\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n  /**\n   * Helper method to read multiple tensors from the specified indices.\n   */\n\n\n  readMany(indices) {\n    return indices.map(index => this.read(index));\n  }\n  /**\n   * Write value into the index of the TensorArray.\n   * @param index number the index to write to.\n   * @param tensor\n   */\n\n\n  write(index, tensor) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n\n    const t = this.tensors[index] || {};\n\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    } // Set the shape for the first time write to unknow shape tensor array\n\n\n    if (this.size() === 0 && (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor.shape;\n    }\n\n    assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${index}.`);\n\n    if (t.read) {\n      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been read.`);\n    }\n\n    if (t.written) {\n      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been written.`);\n    }\n\n    t.tensor = tensor;\n    keep(tensor);\n    t.written = true;\n    this.tensors[index] = t;\n  }\n  /**\n   * Helper method to write multiple tensors to the specified indices.\n   */\n\n\n  writeMany(indices, tensors) {\n    if (indices.length !== tensors.length) {\n      throw new Error(`TensorArray ${this.name}: could not write multiple tensors,` + `because the index size: ${indices.length} is not the same as tensors size: ${tensors.length}.`);\n    }\n\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n  /**\n   * Return selected values in the TensorArray as a packed Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size(). If not specified returns\n   *    all tensors in the original order.\n   * @param [dtype]\n   */\n\n\n  gather(indices, dtype) {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${dtype}`);\n    }\n\n    if (!indices) {\n      indices = [];\n\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    } else {\n      indices = indices.slice(0, this.size());\n    }\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    } // Read all the PersistentTensors into a vector to keep track of\n    // their memory.\n\n\n    const tensors = this.readMany(indices);\n    assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n    return stack(tensors, 0);\n  }\n  /**\n   * Return the values in the TensorArray as a concatenated Tensor.\n   */\n\n\n  concat(dtype) {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${dtype}`);\n    }\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    const indices = [];\n\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    } // Collect all the tensors from the tensors array.\n\n\n    const tensors = this.readMany(indices);\n    assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n    return concat(tensors, 0);\n  }\n  /**\n   * Scatter the values of a Tensor in specific indices of a TensorArray.\n   * @param indices nummber[] values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size().\n   * @param tensor Tensor input tensor.\n   */\n\n\n  scatter(indices, tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    if (indices.length !== tensor.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);\n    }\n\n    const maxIndex = Math.max(...indices);\n\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(`Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n\n    this.writeMany(indices, unstack(tensor, 0));\n  }\n  /**\n   * Split the values of a Tensor into the TensorArray.\n   * @param length number[] with the lengths to use when splitting value along\n   *    its first dimension.\n   * @param tensor Tensor, the tensor to split.\n   */\n\n\n  split(length, tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n      totalLength += len;\n      return totalLength;\n    });\n\n    if (totalLength !== tensor.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${length.length}), ` + 'and the TensorArray is not marked as dynamically resizeable');\n    }\n\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors = [];\n    tidy(() => {\n      tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = i === 0 ? 0 : cumulativeLengths[i - 1];\n        const indices = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = reshape(slice(tensor, indices, sizes), this.elementShape);\n      }\n\n      return tensors;\n    });\n    const indices = [];\n\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n\n    this.writeMany(indices, tensors);\n  }\n\n}","map":{"version":3,"sources":["../../../../../../tfjs-converter/src/executor/tensor_array.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, keep, reshape, scalar, slice, stack, Tensor, tensor, tidy, unstack} from '@tensorflow/tfjs-core';\n\nimport {assertShapesMatchAllowUndefinedSize} from './tensor_utils';\n\nexport interface TensorWithState {\n  tensor?: Tensor;\n  written?: boolean;\n  read?: boolean;\n  cleared?: boolean;\n}\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n  private tensors: TensorWithState[] = [];\n  private closed_ = false;\n  readonly idTensor: Tensor;\n  constructor(\n      readonly name: string, readonly dtype: DataType, private maxSize: number,\n      private elementShape: number[], readonly identicalElementShapes: boolean,\n      readonly dynamicSize: boolean, readonly clearAfterRead: boolean) {\n    this.idTensor = scalar(0);\n    keep(this.idTensor);\n  }\n\n  get id() {\n    return this.idTensor.id;\n  }\n\n  get closed() {\n    return this.closed_;\n  }\n\n  /**\n   * Dispose the tensors and idTensor and mark the TensoryArray as closed.\n   */\n  clearAndClose(keepIds?: Set<number>) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.tensor.id)) {\n        tensor.tensor.dispose();\n      }\n    });\n    this.tensors = [];\n    this.closed_ = true;\n    this.idTensor.dispose();\n  }\n\n  size(): number {\n    return this.tensors.length;\n  }\n\n  /**\n   * Read the value at location index in the TensorArray.\n   * @param index Number the index to read from.\n   */\n  read(index: number): Tensor {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || index >= this.size()) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${\n          this.size()}`);\n    }\n\n    const tensorWithState = this.tensors[index];\n    if (tensorWithState.cleared) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not read index ${\n              index} twice because it was cleared after a previous read ` +\n          `(perhaps try setting clear_after_read = false?).`);\n    }\n\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n\n  /**\n   * Helper method to read multiple tensors from the specified indices.\n   */\n  readMany(indices: number[]): Tensor[] {\n    return indices.map(index => this.read(index));\n  }\n\n  /**\n   * Write value into the index of the TensorArray.\n   * @param index number the index to write to.\n   * @param tensor\n   */\n  write(index: number, tensor: Tensor) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${\n          index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n\n    const t = this.tensors[index] || {};\n\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${\n          this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${\n          tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    }\n\n    // Set the shape for the first time write to unknow shape tensor array\n    if (this.size() === 0 &&\n        (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor.shape;\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape,\n        `TensorArray ${this.name}: Could not write to TensorArray index ${\n            index}.`);\n\n    if (t.read) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been read.`);\n    }\n\n    if (t.written) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been written.`);\n    }\n\n    t.tensor = tensor;\n    keep(tensor);\n    t.written = true;\n\n    this.tensors[index] = t;\n  }\n\n  /**\n   * Helper method to write multiple tensors to the specified indices.\n   */\n  writeMany(indices: number[], tensors: Tensor[]) {\n    if (indices.length !== tensors.length) {\n      throw new Error(\n          `TensorArray ${this.name}: could not write multiple tensors,` +\n          `because the index size: ${\n              indices.length} is not the same as tensors size: ${\n              tensors.length}.`);\n    }\n\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n\n  /**\n   * Return selected values in the TensorArray as a packed Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size(). If not specified returns\n   *    all tensors in the original order.\n   * @param [dtype]\n   */\n  gather(indices?: number[], dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but gather requested dtype ${dtype}`);\n    }\n\n    if (!indices) {\n      indices = [];\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    } else {\n      indices = indices.slice(0, this.size());\n    }\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    // Read all the PersistentTensors into a vector to keep track of\n    // their memory.\n    const tensors = this.readMany(indices);\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n\n    return stack(tensors, 0);\n  }\n\n  /**\n   * Return the values in the TensorArray as a concatenated Tensor.\n   */\n  concat(dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but concat requested dtype ${dtype}`);\n    }\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    const indices = [];\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    }\n    // Collect all the tensors from the tensors array.\n    const tensors = this.readMany(indices);\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape,\n        `TensorArray shape mismatch: tensor array shape (${\n            this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n\n    return concat(tensors, 0);\n  }\n\n  /**\n   * Scatter the values of a Tensor in specific indices of a TensorArray.\n   * @param indices nummber[] values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size().\n   * @param tensor Tensor input tensor.\n   */\n  scatter(indices: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    if (indices.length !== tensor.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n          indices.length} vs. ${tensor.shape[0]}`);\n    }\n\n    const maxIndex = Math.max(...indices);\n\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(\n          `Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n\n    this.writeMany(indices, unstack(tensor, 0));\n  }\n\n  /**\n   * Split the values of a Tensor into the TensorArray.\n   * @param length number[] with the lengths to use when splitting value along\n   *    its first dimension.\n   * @param tensor Tensor, the tensor to split.\n   */\n  split(length: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n      totalLength += len;\n      return totalLength;\n    });\n\n    if (totalLength !== tensor.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(\n          `TensorArray's size is not equal to the size of lengths (${\n              this.maxSize} vs. ${length.length}), ` +\n          'and the TensorArray is not marked as dynamically resizeable');\n    }\n\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors: Tensor[] = [];\n    tidy(() => {\n      tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n        const indices = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = reshape(slice(tensor, indices, sizes), this.elementShape);\n      }\n      return tensors;\n    });\n    const indices = [];\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n    this.writeMany(indices, tensors);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}