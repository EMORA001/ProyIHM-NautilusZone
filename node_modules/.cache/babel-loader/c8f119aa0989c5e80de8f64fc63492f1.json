{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { arrayBufferToBase64String, base64StringToArrayBuffer, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst PATH_SEPARATOR = '/';\nconst PATH_PREFIX = 'tensorflowjs_models';\nconst INFO_SUFFIX = 'info';\nconst MODEL_TOPOLOGY_SUFFIX = 'model_topology';\nconst WEIGHT_SPECS_SUFFIX = 'weight_specs';\nconst WEIGHT_DATA_SUFFIX = 'weight_data';\nconst MODEL_METADATA_SUFFIX = 'model_metadata';\n/**\n * Purge all tensorflow.js-saved model artifacts from local storage.\n *\n * @returns Paths of the models purged.\n */\n\nexport function purgeLocalStorageArtifacts() {\n  if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' || typeof window.localStorage === 'undefined') {\n    throw new Error('purgeLocalStorageModels() cannot proceed because local storage is ' + 'unavailable in the current environment.');\n  }\n\n  const LS = window.localStorage;\n  const purgedModelPaths = [];\n\n  for (let i = 0; i < LS.length; ++i) {\n    const key = LS.key(i);\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n\n    if (key.startsWith(prefix) && key.length > prefix.length) {\n      LS.removeItem(key);\n      const modelName = getModelPathFromKey(key);\n\n      if (purgedModelPaths.indexOf(modelName) === -1) {\n        purgedModelPaths.push(modelName);\n      }\n    }\n  }\n\n  return purgedModelPaths;\n}\n\nfunction getModelKeys(path) {\n  return {\n    info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\n    topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),\n    weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),\n    weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\n    modelMetadata: [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)\n  };\n}\n\nfunction removeItems(keys) {\n  for (const key of Object.values(keys)) {\n    window.localStorage.removeItem(key);\n  }\n}\n/**\n * Get model path from a local-storage key.\n *\n * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'\n *\n * @param key\n */\n\n\nfunction getModelPathFromKey(key) {\n  const items = key.split(PATH_SEPARATOR);\n\n  if (items.length < 3) {\n    throw new Error(`Invalid key format: ${key}`);\n  }\n\n  return items.slice(1, items.length - 1).join(PATH_SEPARATOR);\n}\n\nfunction maybeStripScheme(key) {\n  return key.startsWith(BrowserLocalStorage.URL_SCHEME) ? key.slice(BrowserLocalStorage.URL_SCHEME.length) : key;\n}\n/**\n * IOHandler subclass: Browser Local Storage.\n *\n * See the doc string to `browserLocalStorage` for more details.\n */\n\n\nexport class BrowserLocalStorage {\n  constructor(modelPath) {\n    if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' || typeof window.localStorage === 'undefined') {\n      // TODO(cais): Add more info about what IOHandler subtypes are\n      // available.\n      //   Maybe point to a doc page on the web and/or automatically determine\n      //   the available IOHandlers and print them in the error message.\n      throw new Error('The current environment does not support local storage.');\n    }\n\n    this.LS = window.localStorage;\n\n    if (modelPath == null || !modelPath) {\n      throw new Error('For local storage, modelPath must not be null, undefined or empty.');\n    }\n\n    this.modelPath = modelPath;\n    this.keys = getModelKeys(this.modelPath);\n  }\n  /**\n   * Save model artifacts to browser local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @param modelArtifacts The model artifacts to be stored.\n   * @returns An instance of SaveResult.\n   */\n\n\n  async save(modelArtifacts) {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error('BrowserLocalStorage.save() does not support saving model topology ' + 'in binary formats yet.');\n    } else {\n      const topology = JSON.stringify(modelArtifacts.modelTopology);\n      const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);\n      const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n\n      try {\n        this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));\n        this.LS.setItem(this.keys.topology, topology);\n        this.LS.setItem(this.keys.weightSpecs, weightSpecs);\n        this.LS.setItem(this.keys.weightData, arrayBufferToBase64String(modelArtifacts.weightData)); // Note that JSON.stringify doesn't write out keys that have undefined\n        // values, so for some keys, we set undefined instead of a null-ish\n        // value.\n\n        const metadata = {\n          format: modelArtifacts.format,\n          generatedBy: modelArtifacts.generatedBy,\n          convertedBy: modelArtifacts.convertedBy,\n          signature: modelArtifacts.signature != null ? modelArtifacts.signature : undefined,\n          userDefinedMetadata: modelArtifacts.userDefinedMetadata != null ? modelArtifacts.userDefinedMetadata : undefined,\n          modelInitializer: modelArtifacts.modelInitializer != null ? modelArtifacts.modelInitializer : undefined,\n          trainingConfig: modelArtifacts.trainingConfig != null ? modelArtifacts.trainingConfig : undefined\n        };\n        this.LS.setItem(this.keys.modelMetadata, JSON.stringify(metadata));\n        return {\n          modelArtifactsInfo\n        };\n      } catch (err) {\n        // If saving failed, clean up all items saved so far.\n        removeItems(this.keys);\n        throw new Error(`Failed to save model '${this.modelPath}' to local storage: ` + `size quota being exceeded is a possible cause of this failure: ` + `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` + `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` + `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);\n      }\n    }\n  }\n  /**\n   * Load a model from local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model (if loading succeeds).\n   */\n\n\n  async load() {\n    const info = JSON.parse(this.LS.getItem(this.keys.info));\n\n    if (info == null) {\n      throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);\n    }\n\n    if (info.modelTopologyType !== 'JSON') {\n      throw new Error('BrowserLocalStorage does not support loading non-JSON model ' + 'topology yet.');\n    }\n\n    const out = {}; // Load topology.\n\n    const topology = JSON.parse(this.LS.getItem(this.keys.topology));\n\n    if (topology == null) {\n      throw new Error(`In local storage, the topology of model '${this.modelPath}' ` + `is missing.`);\n    }\n\n    out.modelTopology = topology; // Load weight specs.\n\n    const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));\n\n    if (weightSpecs == null) {\n      throw new Error(`In local storage, the weight specs of model '${this.modelPath}' ` + `are missing.`);\n    }\n\n    out.weightSpecs = weightSpecs; // Load meta-data fields.\n\n    const metadataString = this.LS.getItem(this.keys.modelMetadata);\n\n    if (metadataString != null) {\n      const metadata = JSON.parse(metadataString);\n      out.format = metadata.format;\n      out.generatedBy = metadata.generatedBy;\n      out.convertedBy = metadata.convertedBy;\n\n      if (metadata.signature != null) {\n        out.signature = metadata.signature;\n      }\n\n      if (metadata.userDefinedMetadata != null) {\n        out.userDefinedMetadata = metadata.userDefinedMetadata;\n      }\n\n      if (metadata.modelInitializer != null) {\n        out.modelInitializer = metadata.modelInitializer;\n      }\n\n      if (metadata.trainingConfig != null) {\n        out.trainingConfig = metadata.trainingConfig;\n      }\n    } // Load weight data.\n\n\n    const weightDataBase64 = this.LS.getItem(this.keys.weightData);\n\n    if (weightDataBase64 == null) {\n      throw new Error(`In local storage, the binary weight values of model ` + `'${this.modelPath}' are missing.`);\n    }\n\n    out.weightData = base64StringToArrayBuffer(weightDataBase64);\n    return out;\n  }\n\n}\nBrowserLocalStorage.URL_SCHEME = 'localstorage://';\nexport const localStorageRouter = url => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {\n      return browserLocalStorage(url.slice(BrowserLocalStorage.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(localStorageRouter);\nIORouterRegistry.registerLoadRouter(localStorageRouter);\n/**\n * Factory function for local storage IOHandler.\n *\n * This `IOHandler` supports both `save` and `load`.\n *\n * For each model's saved artifacts, four items are saved to local storage.\n *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the\n *     model, such as date saved, type of the topology, size in bytes, etc.\n *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-\n *     style models, this is a stringized JSON.\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the\n *     model, can be used to decode the saved binary weight values (see\n *     item below).\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary\n *     weight values, stored as a base64-encoded string.\n *\n * Saving may throw an `Error` if the total size of the artifacts exceed the\n * browser-specific quota.\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `IOHandler`, which can be used with, e.g.,\n *   `tf.Model.save`.\n */\n\nexport function browserLocalStorage(modelPath) {\n  return new BrowserLocalStorage(modelPath);\n}\nexport class BrowserLocalStorageManager {\n  constructor() {\n    assert(env().getBool('IS_BROWSER'), () => 'Current environment is not a web browser');\n    assert(typeof window === 'undefined' || typeof window.localStorage !== 'undefined', () => 'Current browser does not appear to support localStorage');\n    this.LS = window.localStorage;\n  }\n\n  async listModels() {\n    const out = {};\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n    const suffix = PATH_SEPARATOR + INFO_SUFFIX;\n\n    for (let i = 0; i < this.LS.length; ++i) {\n      const key = this.LS.key(i);\n\n      if (key.startsWith(prefix) && key.endsWith(suffix)) {\n        const modelPath = getModelPathFromKey(key);\n        out[modelPath] = JSON.parse(this.LS.getItem(key));\n      }\n    }\n\n    return out;\n  }\n\n  async removeModel(path) {\n    path = maybeStripScheme(path);\n    const keys = getModelKeys(path);\n\n    if (this.LS.getItem(keys.info) == null) {\n      throw new Error(`Cannot find model at path '${path}'`);\n    }\n\n    const info = JSON.parse(this.LS.getItem(keys.info));\n    removeItems(keys);\n    return info;\n  }\n\n}","map":{"version":3,"sources":["../../../../../../tfjs-core/src/io/local_storage.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport '../flags';\nimport {env} from '../environment';\n\nimport {assert} from '../util';\nimport {arrayBufferToBase64String, base64StringToArrayBuffer, getModelArtifactsInfoForJSON} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelArtifactsInfo, ModelJSON, ModelStoreManager, SaveResult} from './types';\n\nconst PATH_SEPARATOR = '/';\nconst PATH_PREFIX = 'tensorflowjs_models';\nconst INFO_SUFFIX = 'info';\nconst MODEL_TOPOLOGY_SUFFIX = 'model_topology';\nconst WEIGHT_SPECS_SUFFIX = 'weight_specs';\nconst WEIGHT_DATA_SUFFIX = 'weight_data';\nconst MODEL_METADATA_SUFFIX = 'model_metadata';\n\n/**\n * Purge all tensorflow.js-saved model artifacts from local storage.\n *\n * @returns Paths of the models purged.\n */\nexport function purgeLocalStorageArtifacts(): string[] {\n  if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\n      typeof window.localStorage === 'undefined') {\n    throw new Error(\n        'purgeLocalStorageModels() cannot proceed because local storage is ' +\n        'unavailable in the current environment.');\n  }\n  const LS = window.localStorage;\n  const purgedModelPaths: string[] = [];\n  for (let i = 0; i < LS.length; ++i) {\n    const key = LS.key(i);\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n    if (key.startsWith(prefix) && key.length > prefix.length) {\n      LS.removeItem(key);\n      const modelName = getModelPathFromKey(key);\n      if (purgedModelPaths.indexOf(modelName) === -1) {\n        purgedModelPaths.push(modelName);\n      }\n    }\n  }\n  return purgedModelPaths;\n}\n\ntype LocalStorageKeys = {\n  /** Key of the localStorage entry storing `ModelArtifactsInfo`. */\n  info: string,\n  /**\n   * Key of the localStorage entry storing the 'modelTopology' key of\n   * `model.json`\n   */\n  topology: string,\n  /**\n   * Key of the localStorage entry storing the `weightsManifest.weights` entries\n   * of `model.json`\n   */\n  weightSpecs: string,\n  /** Key of the localStorage entry storing the weight data in Base64 */\n  weightData: string,\n  /**\n   * Key of the localStorage entry storing the remaining fields of `model.json`\n   * @see {@link ModelMetadata}\n   */\n  modelMetadata: string,\n};\n\ntype ModelMetadata = Omit<ModelJSON, 'modelTopology'|'weightsManifest'>;\n\nfunction getModelKeys(path: string): LocalStorageKeys {\n  return {\n    info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\n    topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),\n    weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),\n    weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\n    modelMetadata:\n        [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)\n  };\n}\n\nfunction removeItems(keys: LocalStorageKeys): void {\n  for (const key of Object.values(keys)) {\n    window.localStorage.removeItem(key);\n  }\n}\n\n/**\n * Get model path from a local-storage key.\n *\n * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'\n *\n * @param key\n */\nfunction getModelPathFromKey(key: string) {\n  const items = key.split(PATH_SEPARATOR);\n  if (items.length < 3) {\n    throw new Error(`Invalid key format: ${key}`);\n  }\n  return items.slice(1, items.length - 1).join(PATH_SEPARATOR);\n}\n\nfunction maybeStripScheme(key: string) {\n  return key.startsWith(BrowserLocalStorage.URL_SCHEME) ?\n      key.slice(BrowserLocalStorage.URL_SCHEME.length) :\n      key;\n}\n\n/**\n * IOHandler subclass: Browser Local Storage.\n *\n * See the doc string to `browserLocalStorage` for more details.\n */\nexport class BrowserLocalStorage implements IOHandler {\n  protected readonly LS: Storage;\n  protected readonly modelPath: string;\n  protected readonly keys: LocalStorageKeys;\n\n  static readonly URL_SCHEME = 'localstorage://';\n\n  constructor(modelPath: string) {\n    if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\n        typeof window.localStorage === 'undefined') {\n      // TODO(cais): Add more info about what IOHandler subtypes are\n      // available.\n      //   Maybe point to a doc page on the web and/or automatically determine\n      //   the available IOHandlers and print them in the error message.\n      throw new Error(\n          'The current environment does not support local storage.');\n    }\n    this.LS = window.localStorage;\n\n    if (modelPath == null || !modelPath) {\n      throw new Error(\n          'For local storage, modelPath must not be null, undefined or empty.');\n    }\n    this.modelPath = modelPath;\n    this.keys = getModelKeys(this.modelPath);\n  }\n\n  /**\n   * Save model artifacts to browser local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @param modelArtifacts The model artifacts to be stored.\n   * @returns An instance of SaveResult.\n   */\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserLocalStorage.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    } else {\n      const topology = JSON.stringify(modelArtifacts.modelTopology);\n      const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);\n\n      const modelArtifactsInfo: ModelArtifactsInfo =\n          getModelArtifactsInfoForJSON(modelArtifacts);\n\n      try {\n        this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));\n        this.LS.setItem(this.keys.topology, topology);\n        this.LS.setItem(this.keys.weightSpecs, weightSpecs);\n        this.LS.setItem(\n            this.keys.weightData,\n            arrayBufferToBase64String(modelArtifacts.weightData));\n\n        // Note that JSON.stringify doesn't write out keys that have undefined\n        // values, so for some keys, we set undefined instead of a null-ish\n        // value.\n        const metadata: Required<ModelMetadata> = {\n          format: modelArtifacts.format,\n          generatedBy: modelArtifacts.generatedBy,\n          convertedBy: modelArtifacts.convertedBy,\n          signature: modelArtifacts.signature != null ?\n              modelArtifacts.signature :\n              undefined,\n          userDefinedMetadata: modelArtifacts.userDefinedMetadata != null ?\n              modelArtifacts.userDefinedMetadata :\n              undefined,\n          modelInitializer: modelArtifacts.modelInitializer != null ?\n              modelArtifacts.modelInitializer :\n              undefined,\n          trainingConfig: modelArtifacts.trainingConfig != null ?\n              modelArtifacts.trainingConfig :\n              undefined\n        };\n        this.LS.setItem(this.keys.modelMetadata, JSON.stringify(metadata));\n\n        return {modelArtifactsInfo};\n      } catch (err) {\n        // If saving failed, clean up all items saved so far.\n        removeItems(this.keys);\n\n        throw new Error(\n            `Failed to save model '${this.modelPath}' to local storage: ` +\n            `size quota being exceeded is a possible cause of this failure: ` +\n            `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` +\n            `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` +\n            `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);\n      }\n    }\n  }\n\n  /**\n   * Load a model from local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model (if loading succeeds).\n   */\n  async load(): Promise<ModelArtifacts> {\n    const info =\n        JSON.parse(this.LS.getItem(this.keys.info)) as ModelArtifactsInfo;\n    if (info == null) {\n      throw new Error(\n          `In local storage, there is no model with name '${this.modelPath}'`);\n    }\n\n    if (info.modelTopologyType !== 'JSON') {\n      throw new Error(\n          'BrowserLocalStorage does not support loading non-JSON model ' +\n          'topology yet.');\n    }\n\n    const out: ModelArtifacts = {};\n\n    // Load topology.\n    const topology = JSON.parse(this.LS.getItem(this.keys.topology));\n    if (topology == null) {\n      throw new Error(\n          `In local storage, the topology of model '${this.modelPath}' ` +\n          `is missing.`);\n    }\n    out.modelTopology = topology;\n\n    // Load weight specs.\n    const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));\n    if (weightSpecs == null) {\n      throw new Error(\n          `In local storage, the weight specs of model '${this.modelPath}' ` +\n          `are missing.`);\n    }\n    out.weightSpecs = weightSpecs;\n\n    // Load meta-data fields.\n    const metadataString = this.LS.getItem(this.keys.modelMetadata);\n    if (metadataString != null) {\n      const metadata = JSON.parse(metadataString) as ModelMetadata;\n      out.format = metadata.format;\n      out.generatedBy = metadata.generatedBy;\n      out.convertedBy = metadata.convertedBy;\n      if (metadata.signature != null) {\n        out.signature = metadata.signature;\n      }\n      if (metadata.userDefinedMetadata != null) {\n        out.userDefinedMetadata = metadata.userDefinedMetadata;\n      }\n      if (metadata.modelInitializer != null) {\n        out.modelInitializer = metadata.modelInitializer;\n      }\n      if (metadata.trainingConfig != null) {\n        out.trainingConfig = metadata.trainingConfig;\n      }\n    }\n\n    // Load weight data.\n    const weightDataBase64 = this.LS.getItem(this.keys.weightData);\n    if (weightDataBase64 == null) {\n      throw new Error(\n          `In local storage, the binary weight values of model ` +\n          `'${this.modelPath}' are missing.`);\n    }\n    out.weightData = base64StringToArrayBuffer(weightDataBase64);\n\n    return out;\n  }\n}\n\nexport const localStorageRouter: IORouter = (url: string|string[]) => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {\n      return browserLocalStorage(\n          url.slice(BrowserLocalStorage.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(localStorageRouter);\nIORouterRegistry.registerLoadRouter(localStorageRouter);\n\n/**\n * Factory function for local storage IOHandler.\n *\n * This `IOHandler` supports both `save` and `load`.\n *\n * For each model's saved artifacts, four items are saved to local storage.\n *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the\n *     model, such as date saved, type of the topology, size in bytes, etc.\n *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-\n *     style models, this is a stringized JSON.\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the\n *     model, can be used to decode the saved binary weight values (see\n *     item below).\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary\n *     weight values, stored as a base64-encoded string.\n *\n * Saving may throw an `Error` if the total size of the artifacts exceed the\n * browser-specific quota.\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `IOHandler`, which can be used with, e.g.,\n *   `tf.Model.save`.\n */\nexport function browserLocalStorage(modelPath: string): IOHandler {\n  return new BrowserLocalStorage(modelPath);\n}\n\nexport class BrowserLocalStorageManager implements ModelStoreManager {\n  private readonly LS: Storage;\n\n  constructor() {\n    assert(\n        env().getBool('IS_BROWSER'),\n        () => 'Current environment is not a web browser');\n    assert(\n        typeof window === 'undefined' ||\n            typeof window.localStorage !== 'undefined',\n        () => 'Current browser does not appear to support localStorage');\n    this.LS = window.localStorage;\n  }\n\n  async listModels(): Promise<{[path: string]: ModelArtifactsInfo}> {\n    const out: {[path: string]: ModelArtifactsInfo} = {};\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n    const suffix = PATH_SEPARATOR + INFO_SUFFIX;\n    for (let i = 0; i < this.LS.length; ++i) {\n      const key = this.LS.key(i);\n      if (key.startsWith(prefix) && key.endsWith(suffix)) {\n        const modelPath = getModelPathFromKey(key);\n        out[modelPath] = JSON.parse(this.LS.getItem(key)) as ModelArtifactsInfo;\n      }\n    }\n    return out;\n  }\n\n  async removeModel(path: string): Promise<ModelArtifactsInfo> {\n    path = maybeStripScheme(path);\n    const keys = getModelKeys(path);\n    if (this.LS.getItem(keys.info) == null) {\n      throw new Error(`Cannot find model at path '${path}'`);\n    }\n    const info = JSON.parse(this.LS.getItem(keys.info)) as ModelArtifactsInfo;\n    removeItems(keys);\n    return info;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}