{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringNGrams } from '@tensorflow/tfjs-core';\nimport { stringNGramsImpl } from './StringNGrams_impl';\nexport function stringNGrams(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {\n    data,\n    dataSplits\n  } = inputs;\n  const $data = backend.data.get(data.dataId).values;\n  const $dataSplits = backend.data.get(dataSplits.dataId).values;\n  const [nGrams, nGramsSplits] = stringNGramsImpl($data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences);\n  return [backend.makeTensorInfo([nGrams.length], 'string', nGrams), backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits)];\n}\nexport const stringNGramsConfig = {\n  kernelName: StringNGrams,\n  backendName: 'cpu',\n  kernelFunc: stringNGrams\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/StringNGrams.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,YAAlC,QAAwG,uBAAxG;AAIA,SAAQ,gBAAR,QAA+B,qBAA/B;AAEA,OAAM,SAAU,YAAV,CAAuB,IAAvB,EAIL;EACC,MAAM;IAAC,MAAD;IAAS,OAAT;IAAkB;EAAlB,IAA2B,IAAjC;EACA,MAAM;IACJ,SADI;IAEJ,WAFI;IAGJ,OAHI;IAIJ,QAJI;IAKJ,QALI;IAMJ;EANI,IAOF,KAPJ;EAQA,MAAM;IAAC,IAAD;IAAO;EAAP,IAAqB,MAA3B;EACA,MAAM,KAAK,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,IAAI,CAAC,MAAtB,EAA8B,MAA5C;EACA,MAAM,WAAW,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,UAAU,CAAC,MAA5B,EAAoC,MAAxD;EAEA,MAAM,CAAC,MAAD,EAAS,YAAT,IAAyB,gBAAgB,CAC3C,KAD2C,EACpC,WADoC,EACvB,SADuB,EACZ,WADY,EACC,OADD,EACU,QADV,EACoB,QADpB,EAE3C,sBAF2C,CAA/C;EAGA,OAAO,CACL,OAAO,CAAC,cAAR,CAAuB,CAAC,MAAM,CAAC,MAAR,CAAvB,EAAwC,QAAxC,EAAkD,MAAlD,CADK,EAEL,OAAO,CAAC,cAAR,CAAuB,UAAU,CAAC,KAAlC,EAAyC,OAAzC,EAAkD,YAAlD,CAFK,CAAP;AAID;AAED,OAAO,MAAM,kBAAkB,GAAiB;EAC9C,UAAU,EAAE,YADkC;EAE9C,WAAW,EAAE,KAFiC;EAG9C,UAAU,EAAE;AAHkC,CAAzC","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringNGramsImpl} from './StringNGrams_impl';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendCPU,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.data.get(data.dataId).values as Uint8Array[];\n  const $dataSplits = backend.data.get(dataSplits.dataId).values as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImpl(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'cpu',\n  kernelFunc: stringNGrams as {} as KernelFunc,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}