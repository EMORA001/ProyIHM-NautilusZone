{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Select, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function select(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    condition,\n    t,\n    e\n  } = inputs;\n  assertNotComplex([condition, t, e], 'select');\n  const conditionRank = condition.shape.length;\n  const values = backend.data.get(condition.dataId).values;\n  const tValues = backend.data.get(t.dataId).values;\n  const eValues = backend.data.get(e.dataId).values;\n  const resultDtype = upcastType(t.dtype, e.dtype);\n  const newValues = util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n  let index = 0;\n  const offset = conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ? 1 : util.sizeFromShape(t.shape.slice(1));\n\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < offset; j++) {\n      if (values[i] === 1) {\n        newValues[index++] = tValues[i];\n      } else {\n        newValues[index++] = eValues[i];\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\nexport const selectConfig = {\n  kernelName: Select,\n  backendName: 'cpu',\n  kernelFunc: select\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/Select.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,MAAlC,EAAgF,UAAhF,EAA4F,IAA5F,QAAuG,uBAAvG;AAGA,SAAQ,gBAAR,QAA+B,aAA/B;AAEA,OAAM,SAAU,MAAV,CAAiB,IAAjB,EAAsE;EAE1E,MAAM;IAAC,MAAD;IAAS;EAAT,IAAoB,IAA1B;EACA,MAAM;IAAC,SAAD;IAAY,CAAZ;IAAe;EAAf,IAAoB,MAA1B;EAEA,gBAAgB,CAAC,CAAC,SAAD,EAAY,CAAZ,EAAe,CAAf,CAAD,EAAoB,QAApB,CAAhB;EACA,MAAM,aAAa,GAAG,SAAS,CAAC,KAAV,CAAgB,MAAtC;EAEA,MAAM,MAAM,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,SAAS,CAAC,MAA3B,EAAmC,MAAlD;EACA,MAAM,OAAO,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,CAAC,CAAC,MAAnB,EAA2B,MAA3C;EACA,MAAM,OAAO,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,CAAC,CAAC,MAAnB,EAA2B,MAA3C;EACA,MAAM,WAAW,GAAG,UAAU,CAAC,CAAC,CAAC,KAAH,EAAU,CAAC,CAAC,KAAZ,CAA9B;EACA,MAAM,SAAS,GACX,IAAI,CAAC,mBAAL,CAAyB,IAAI,CAAC,aAAL,CAAmB,CAAC,CAAC,KAArB,CAAzB,EAAsD,WAAtD,CADJ;EAGA,IAAI,KAAK,GAAG,CAAZ;EACA,MAAM,MAAM,GACR,aAAa,KAAK,CAAlB,IAAuB,aAAa,GAAG,CAAvC,IAA4C,CAAC,CAAC,KAAF,CAAQ,MAAR,KAAmB,CAA/D,GACA,CADA,GAEA,IAAI,CAAC,aAAL,CAAmB,CAAC,CAAC,KAAF,CAAQ,KAAR,CAAc,CAAd,CAAnB,CAHJ;;EAKA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;IACtC,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC;MAC/B,IAAI,MAAM,CAAC,CAAD,CAAN,KAAc,CAAlB,EAAqB;QACnB,SAAS,CAAC,KAAK,EAAN,CAAT,GAAqB,OAAO,CAAC,CAAD,CAA5B;MACD,CAFD,MAEO;QACL,SAAS,CAAC,KAAK,EAAN,CAAT,GAAqB,OAAO,CAAC,CAAD,CAA5B;MACD;IACF;EACF;;EAED,OAAO,OAAO,CAAC,cAAR,CAAuB,CAAC,CAAC,KAAzB,EAAgC,WAAhC,EAA6C,SAA7C,CAAP;AACD;AAED,OAAO,MAAM,YAAY,GAAiB;EACxC,UAAU,EAAE,MAD4B;EAExC,WAAW,EAAE,KAF2B;EAGxC,UAAU,EAAE;AAH4B,CAAnC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  assertNotComplex([condition, t, e], 'select');\n  const conditionRank = condition.shape.length;\n\n  const values = backend.data.get(condition.dataId).values as TypedArray;\n  const tValues = backend.data.get(t.dataId).values as TypedArray;\n  const eValues = backend.data.get(e.dataId).values as TypedArray;\n  const resultDtype = upcastType(t.dtype, e.dtype);\n  const newValues =\n      util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n\n  let index = 0;\n  const offset =\n      conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ?\n      1 :\n      util.sizeFromShape(t.shape.slice(1));\n\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < offset; j++) {\n      if (values[i] === 1) {\n        newValues[index++] = tValues[i];\n      } else {\n        newValues[index++] = eValues[i];\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'cpu',\n  kernelFunc: select as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}