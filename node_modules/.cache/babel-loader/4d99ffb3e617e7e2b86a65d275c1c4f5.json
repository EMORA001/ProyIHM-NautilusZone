{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = function (node, tensorMap, context) {\n  let ops = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : tfOps;\n\n  switch (node.op) {\n    case 'LowerBound':\n      {\n        const sortedSequence = getParamValue('sortedSequence', node, tensorMap, context);\n        const values = getParamValue('values', node, tensorMap, context);\n        return [ops.lowerBound(sortedSequence, values)];\n      }\n\n    case 'TopKV2':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const k = getParamValue('k', node, tensorMap, context);\n        const sorted = getParamValue('sorted', node, tensorMap, context);\n        const result = ops.topk(x, k, sorted);\n        return [result.values, result.indices];\n      }\n\n    case 'UpperBound':\n      {\n        const sortedSequence = getParamValue('sortedSequence', node, tensorMap, context);\n        const values = getParamValue('values', node, tensorMap, context);\n        return [ops.upperBound(sortedSequence, values)];\n      }\n\n    case 'Unique':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const result = ops.unique(x);\n        return [result.values, result.indices];\n      }\n\n    case 'UniqueV2':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const result = ops.unique(x, axis);\n        return [result.values, result.indices];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'evaluation';","map":{"version":3,"sources":["../../../../../../../tfjs-converter/src/operations/executors/evaluation_executor.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH;AACA,OAAO,KAAK,KAAZ,MAAuB,kDAAvB;AAMA,SAAQ,aAAR,QAA4B,SAA5B;AAEA,OAAO,MAAM,SAAS,GAClB,UAAC,IAAD,EAAa,SAAb,EAAyC,OAAzC,EAEe;EAAA,IADd,GACc,uEADR,KACQ;;EACT,QAAQ,IAAI,CAAC,EAAb;IACE,KAAK,YAAL;MAAmB;QACjB,MAAM,cAAc,GAChB,aAAa,CAAC,gBAAD,EAAmB,IAAnB,EAAyB,SAAzB,EAAoC,OAApC,CADjB;QAGA,MAAM,MAAM,GACR,aAAa,CAAC,QAAD,EAAW,IAAX,EAAiB,SAAjB,EAA4B,OAA5B,CADjB;QAEA,OAAO,CAAC,GAAG,CAAC,UAAJ,CAAe,cAAf,EAA+B,MAA/B,CAAD,CAAP;MACD;;IACD,KAAK,QAAL;MAAe;QACb,MAAM,CAAC,GAAG,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CAAvB;QACA,MAAM,CAAC,GAAG,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CAAvB;QACA,MAAM,MAAM,GACR,aAAa,CAAC,QAAD,EAAW,IAAX,EAAiB,SAAjB,EAA4B,OAA5B,CADjB;QAEA,MAAM,MAAM,GAAG,GAAG,CAAC,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe,MAAf,CAAf;QACA,OAAO,CAAC,MAAM,CAAC,MAAR,EAAgB,MAAM,CAAC,OAAvB,CAAP;MACD;;IACD,KAAK,YAAL;MAAmB;QACjB,MAAM,cAAc,GAChB,aAAa,CAAC,gBAAD,EAAmB,IAAnB,EAAyB,SAAzB,EAAoC,OAApC,CADjB;QAGA,MAAM,MAAM,GACR,aAAa,CAAC,QAAD,EAAW,IAAX,EAAiB,SAAjB,EAA4B,OAA5B,CADjB;QAEA,OAAO,CAAC,GAAG,CAAC,UAAJ,CAAe,cAAf,EAA+B,MAA/B,CAAD,CAAP;MACD;;IACD,KAAK,QAAL;MAAe;QACb,MAAM,CAAC,GAAG,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CAAvB;QACA,MAAM,MAAM,GAAG,GAAG,CAAC,MAAJ,CAAW,CAAX,CAAf;QACA,OAAO,CAAC,MAAM,CAAC,MAAR,EAAgB,MAAM,CAAC,OAAvB,CAAP;MACD;;IACD,KAAK,UAAL;MAAiB;QACf,MAAM,CAAC,GAAG,aAAa,CAAC,GAAD,EAAM,IAAN,EAAY,SAAZ,EAAuB,OAAvB,CAAvB;QACA,MAAM,IAAI,GACN,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CADjB;QAEA,MAAM,MAAM,GAAG,GAAG,CAAC,MAAJ,CAAW,CAAX,EAAc,IAAd,CAAf;QACA,OAAO,CAAC,MAAM,CAAC,MAAR,EAAgB,MAAM,CAAC,OAAvB,CAAP;MACD;;IACD;MACE,MAAM,SAAS,CAAC,aAAa,IAAI,CAAC,EAAE,qBAArB,CAAf;EAtCJ;AAwCD,CA5CF;AA8CP,OAAO,MAAM,QAAQ,GAAG,YAAjB","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n     ops = tfOps):\n        Tensor[] => {\n          switch (node.op) {\n            case 'LowerBound': {\n              const sortedSequence =\n                  getParamValue('sortedSequence', node, tensorMap, context) as\n                  Tensor;\n              const values =\n                  getParamValue('values', node, tensorMap, context) as Tensor;\n              return [ops.lowerBound(sortedSequence, values)];\n            }\n            case 'TopKV2': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const k = getParamValue('k', node, tensorMap, context) as number;\n              const sorted =\n                  getParamValue('sorted', node, tensorMap, context) as boolean;\n              const result = ops.topk(x, k, sorted);\n              return [result.values, result.indices];\n            }\n            case 'UpperBound': {\n              const sortedSequence =\n                  getParamValue('sortedSequence', node, tensorMap, context) as\n                  Tensor;\n              const values =\n                  getParamValue('values', node, tensorMap, context) as Tensor;\n              return [ops.upperBound(sortedSequence, values)];\n            }\n            case 'Unique': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const result = ops.unique(x);\n              return [result.values, result.indices];\n            }\n            case 'UniqueV2': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const axis =\n                  getParamValue('axis', node, tensorMap, context) as number;\n              const result = ops.unique(x, axis);\n              return [result.values, result.indices];\n            }\n            default:\n              throw TypeError(`Node type ${node.op} is not implemented`);\n          }\n        };\n\nexport const CATEGORY = 'evaluation';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}