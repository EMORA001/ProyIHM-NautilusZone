{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, FusedConv2D, util } from '@tensorflow/tfjs-core';\nimport { Conv2DProgram } from '../conv_gpu';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nimport { conv2dByMatMul, conv2dWithIm2Row } from './Conv2D_impl';\nimport { reshape } from './Reshape';\nexport function fusedConv2d(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false\n  /* depthwise */\n  , $dataFormat);\n  let out;\n  const intermediates = [];\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else if (env().getBool('WEBGL_CONV_IM2COL')) {\n    out = conv2dWithIm2Row({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else {\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    const fusedActivation = activation ? mapActivationToShaderProgram(activation, false) : null;\n    const program = new Conv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    const inputs = [x, filter]; // If the input is a 1-D tensor, align it with the channels.\n    //\n    // For fusedConv2d, the inputs (x, W, bias, preluActivationWeights) are\n    // supposed to be aligned with the dataFormat. The 4-D tensor inputs or\n    // scalar inputs are originally aligned, but the 1-D tensor inputs are\n    // supposed to be aligned with the channels (only bias and PReLU activation\n    // weights could be a 1-D tensor).\n\n    const alignInputWithDataFormat = (input, dataFormat) => {\n      if (dataFormat === 'NCHW' && input.shape.length === 1 && input.shape[0] !== 1) {\n        const alignedInput = reshape({\n          inputs: {\n            x: input\n          },\n          backend,\n          attrs: {\n            shape: [input.shape[0], 1, 1]\n          }\n        });\n        intermediates.push(alignedInput);\n        return alignedInput;\n      }\n\n      return input;\n    };\n\n    if (hasBias) {\n      inputs.push(alignInputWithDataFormat(bias, dataFormat));\n    }\n\n    if (hasPreluActivationWeights) {\n      inputs.push(alignInputWithDataFormat(preluActivationWeights, dataFormat));\n    }\n\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n\n    out = backend.runWebGLProgram(program, inputs, 'float32');\n  }\n\n  const outReshaped = reshape({\n    inputs: {\n      x: out\n    },\n    backend,\n    attrs: {\n      shape: convInfo.outShape\n    }\n  });\n  intermediates.push(out);\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return outReshaped;\n}\nexport const fusedConv2DConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedConv2d\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-webgl/src/kernels/FusedConv2D.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function fusedConv2d(args: {\n  inputs: FusedConv2DInputs,\n  attrs: FusedConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else if (env().getBool('WEBGL_CONV_IM2COL')) {\n    out = conv2dWithIm2Row({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else {\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, false) : null;\n    const program = new Conv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n    const inputs: TensorInfo[] = [x, filter];\n\n    // If the input is a 1-D tensor, align it with the channels.\n    //\n    // For fusedConv2d, the inputs (x, W, bias, preluActivationWeights) are\n    // supposed to be aligned with the dataFormat. The 4-D tensor inputs or\n    // scalar inputs are originally aligned, but the 1-D tensor inputs are\n    // supposed to be aligned with the channels (only bias and PReLU activation\n    // weights could be a 1-D tensor).\n    const alignInputWithDataFormat =\n        (input: TensorInfo, dataFormat: 'NHWC'|'NCHW'): TensorInfo => {\n          if (dataFormat === 'NCHW' && input.shape.length === 1 &&\n              input.shape[0] !== 1) {\n            const alignedInput = reshape({\n              inputs: {x: input},\n              backend,\n              attrs: {shape: [input.shape[0], 1, 1]}\n            });\n            intermediates.push(alignedInput);\n            return alignedInput;\n          }\n          return input;\n        };\n\n    if (hasBias) {\n      inputs.push(alignInputWithDataFormat(bias, dataFormat));\n    }\n\n    if (hasPreluActivationWeights) {\n      inputs.push(alignInputWithDataFormat(preluActivationWeights, dataFormat));\n    }\n\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n    out = backend.runWebGLProgram(program, inputs, 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n\n  intermediates.push(out);\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outReshaped;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedConv2d as {} as KernelFunc,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}