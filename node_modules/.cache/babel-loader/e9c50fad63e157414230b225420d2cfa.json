{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nexport function bincountImpl(xVals, weightsVals, weightsDtype, weightsShape, size) {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype);\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\nexport function bincountReduceImpl(xBuf, weightsBuf, size) {\n  let binaryOutput = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf;\n}","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/Bincount_impl.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,EAA0D,IAA1D,QAAqE,uBAArE;AAEA,OAAM,SAAU,YAAV,CACF,KADE,EACiB,WADjB,EAC0C,YAD1C,EAEF,YAFE,EAEsB,IAFtB,EAEkC;EACtC,MAAM,WAAW,GAAG,IAAI,CAAC,aAAL,CAAmB,YAAnB,CAApB;EACA,MAAM,OAAO,GAAG,IAAI,CAAC,mBAAL,CAAyB,IAAzB,EAA+B,YAA/B,CAAhB;;EAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;IACrC,MAAM,KAAK,GAAG,KAAK,CAAC,CAAD,CAAnB;;IACA,IAAI,KAAK,GAAG,CAAZ,EAAe;MACb,MAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;IACD;;IAED,IAAI,KAAK,IAAI,IAAb,EAAmB;MACjB;IACD;;IAED,IAAI,WAAW,GAAG,CAAlB,EAAqB;MACnB,OAAO,CAAC,KAAD,CAAP,IAAkB,WAAW,CAAC,CAAD,CAA7B;IACD,CAFD,MAEO;MACL,OAAO,CAAC,KAAD,CAAP,IAAkB,CAAlB;IACD;EACF;;EAED,OAAO,OAAP;AACD;AAED,OAAM,SAAU,kBAAV,CACF,IADE,EACqB,UADrB,EACkD,IADlD,EAEkB;EAAA,IAApB,YAAoB,uEAAL,KAAK;EACtB,MAAM,OAAO,GAAG,IAAI,CAAC,KAAL,CAAW,CAAX,CAAhB;EACA,MAAM,OAAO,GAAG,IAAI,CAAC,KAAL,CAAW,CAAX,CAAhB;EAEA,MAAM,MAAM,GAAG,MAAM,CAAC,CAAC,OAAD,EAAU,IAAV,CAAD,EAAkB,UAAU,CAAC,KAA7B,CAArB;;EAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAApB,EAA6B,CAAC,EAA9B,EAAkC;IAChC,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAApB,EAA6B,CAAC,EAA9B,EAAkC;MAChC,MAAM,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,CAAZ,CAAd;;MACA,IAAI,KAAK,GAAG,CAAZ,EAAe;QACb,MAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;MACD;;MAED,IAAI,KAAK,IAAI,IAAb,EAAmB;QACjB;MACD;;MAED,IAAI,YAAJ,EAAkB;QAChB,MAAM,CAAC,GAAP,CAAW,CAAX,EAAc,CAAd,EAAiB,KAAjB;MACD,CAFD,MAEO;QACL,IAAI,UAAU,CAAC,IAAX,GAAkB,CAAtB,EAAyB;UACvB,MAAM,CAAC,GAAP,CAAW,MAAM,CAAC,GAAP,CAAW,CAAX,EAAc,KAAd,IAAuB,UAAU,CAAC,GAAX,CAAe,CAAf,EAAkB,CAAlB,CAAlC,EAAwD,CAAxD,EAA2D,KAA3D;QACD,CAFD,MAEO;UACL,MAAM,CAAC,GAAP,CAAW,MAAM,CAAC,GAAP,CAAW,CAAX,EAAc,KAAd,IAAuB,CAAlC,EAAqC,CAArC,EAAwC,KAAxC;QACD;MACF;IACF;EACF;;EAED,OAAO,MAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}