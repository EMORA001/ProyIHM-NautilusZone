{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function prodImpl(xShape, xDtype, xVals, reductionAxes) {\n  const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(util.sizeFromShape(outShape), outDtype);\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n\n    outVals[i] = prod;\n  }\n\n  return {\n    outVals,\n    outShape,\n    outDtype\n  };\n}\nexport function prod(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  assertNotComplex(x, 'prod');\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n\n  if (permutation != null) {\n    permutedX = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutation\n      }\n    });\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values;\n  const {\n    outVals,\n    outShape,\n    outDtype\n  } = prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n  let resultShape = outShape;\n\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\nexport const prodConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/Prod.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAA0D,IAA1D,EAA+G,UAA/G,EAA2H,IAA3H,QAAsI,uBAAtI;AAGA,SAAQ,gBAAR,QAA+B,aAA/B;AACA,SAAQ,SAAR,QAAwB,aAAxB;AAEA,OAAM,SAAU,QAAV,CACF,MADE,EACgB,MADhB,EACkC,KADlC,EAEF,aAFE,EAEqB;EAEzB,MAAM,CAAC,QAAD,EAAW,WAAX,IACF,YAAY,CAAC,yBAAb,CAAuC,MAAvC,EAA+C,aAA/C,CADJ;EAEA,MAAM,QAAQ,GAAG,UAAU,CAAC,MAAD,EAAS,OAAT,CAA3B;EACA,MAAM,OAAO,GAAG,IAAI,CAAC,mBAAL,CACI,IAAI,CAAC,aAAL,CAAmB,QAAnB,CADJ,EACkC,QADlC,CAAhB;EAEA,MAAM,UAAU,GAAG,IAAI,CAAC,aAAL,CAAmB,WAAnB,CAAnB;;EAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAAO,CAAC,MAA5B,EAAoC,EAAE,CAAtC,EAAyC;IACvC,MAAM,MAAM,GAAG,CAAC,GAAG,UAAnB;IACA,IAAI,IAAI,GAAG,CAAX;;IACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,UAApB,EAAgC,EAAE,CAAlC,EAAqC;MACnC,IAAI,IAAI,KAAK,CAAC,MAAM,GAAG,CAAV,CAAb;IACD;;IACD,OAAO,CAAC,CAAD,CAAP,GAAa,IAAb;EACD;;EAED,OAAO;IAAC,OAAD;IAAU,QAAV;IAAoB;EAApB,CAAP;AACD;AAED,OAAM,SAAU,IAAV,CACF,IADE,EACmE;EAEvE,MAAM;IAAC,MAAD;IAAS,OAAT;IAAkB;EAAlB,IAA2B,IAAjC;EACA,MAAM;IAAC;EAAD,IAAM,MAAZ;EACA,MAAM;IAAC,IAAD;IAAO;EAAP,IAAmB,KAAzB;EAEA,gBAAgB,CAAC,CAAD,EAAI,MAAJ,CAAhB;EAEA,MAAM,KAAK,GAAG,CAAC,CAAC,KAAF,CAAQ,MAAtB;EACA,MAAM,IAAI,GAAG,IAAI,CAAC,cAAL,CAAoB,IAApB,EAA0B,CAAC,CAAC,KAA5B,CAAb;EAEA,MAAM,WAAW,GAAG,YAAY,CAAC,kBAAb,CAAgC,IAAhC,EAAsC,KAAtC,CAApB;EACA,IAAI,aAAa,GAAG,IAApB;EACA,IAAI,SAAS,GAAG,CAAhB;EACA,MAAM,uBAAuB,GAAG,EAAhC;;EACA,IAAI,WAAW,IAAI,IAAnB,EAAyB;IACvB,SAAS,GAAG,SAAS,CAAC;MAAC,MAAM,EAAE;QAAC;MAAD,CAAT;MAAc,OAAd;MAAuB,KAAK,EAAE;QAAC,IAAI,EAAE;MAAP;IAA9B,CAAD,CAArB;IACA,uBAAuB,CAAC,IAAxB,CAA6B,SAA7B;IACA,aAAa,GAAG,YAAY,CAAC,gBAAb,CAA8B,aAAa,CAAC,MAA5C,EAAoD,KAApD,CAAhB;EACD;;EAED,MAAM,KAAK,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,SAAS,CAAC,MAA3B,EAAmC,MAAjD;EACA,MAAM;IAAC,OAAD;IAAU,QAAV;IAAoB;EAApB,IACF,QAAQ,CAAC,SAAS,CAAC,KAAX,EAAkB,SAAS,CAAC,KAA5B,EAAmC,KAAnC,EAA0C,aAA1C,CADZ;EAGA,IAAI,WAAW,GAAG,QAAlB;;EACA,IAAI,QAAJ,EAAc;IACZ,WAAW,GAAG,YAAY,CAAC,oBAAb,CAAkC,QAAlC,EAA4C,IAA5C,CAAd;EACD;;EAED,uBAAuB,CAAC,OAAxB,CACI,CAAC,IAAI,OAAO,CAAC,6BAAR,CAAsC,CAAtC,CADT;EAGA,OAAO,OAAO,CAAC,cAAR,CAAuB,WAAvB,EAAoC,QAApC,EAA8C,OAA9C,CAAP;AACD;AAED,OAAO,MAAM,UAAU,GAAiB;EACtC,UAAU,EAAE,IAD0B;EAEtC,WAAW,EAAE,KAFyB;EAGtC,UAAU,EAAE;AAH0B,CAAjC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}