{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function transposeImpl(xVals, xShape, dtype, perm, newShape) {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n  const result = util.getTypedArrayFromDType(dtype, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides); // Permute location.\n\n    const newLoc = new Array(loc.length);\n\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/Transpose_impl.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,IAAR,QAAmB,uBAAnB;AAEA,OAAM,SAAU,aAAV,CACF,KADE,EACiB,MADjB,EACmC,KADnC,EACoD,IADpD,EAEF,QAFE,EAEgB;EACpB,MAAM,KAAK,GAAG,MAAM,CAAC,MAArB;EACA,MAAM,KAAK,GAAG,IAAI,CAAC,aAAL,CAAmB,MAAnB,CAAd;EACA,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAL,CAAoB,MAApB,CAAjB;EACA,MAAM,UAAU,GAAG,IAAI,CAAC,cAAL,CAAoB,QAApB,CAAnB;EAEA,MAAM,MAAM,GAAG,IAAI,CAAC,sBAAL,CACX,KADW,EACe,IAAI,CAAC,aAAL,CAAmB,QAAnB,CADf,CAAf;;EAGA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAApB,EAA2B,EAAE,CAA7B,EAAgC;IAC9B,MAAM,GAAG,GAAG,IAAI,CAAC,UAAL,CAAgB,CAAhB,EAAmB,KAAnB,EAA0B,QAA1B,CAAZ,CAD8B,CAG9B;;IACA,MAAM,MAAM,GAAa,IAAI,KAAJ,CAAU,GAAG,CAAC,MAAd,CAAzB;;IACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;MACtC,MAAM,CAAC,CAAD,CAAN,GAAY,GAAG,CAAC,IAAI,CAAC,CAAD,CAAL,CAAf;IACD;;IAED,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAL,CAAgB,MAAhB,EAAwB,KAAxB,EAA+B,UAA/B,CAAjB;IACA,MAAM,CAAC,QAAD,CAAN,GAAmB,KAAK,CAAC,CAAD,CAAxB;EACD;;EACD,OAAO,MAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}