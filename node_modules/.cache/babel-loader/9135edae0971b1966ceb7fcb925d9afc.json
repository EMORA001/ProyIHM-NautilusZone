{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherV2, util, env } from '@tensorflow/tfjs-core';\nimport { GatherProgram } from '../gather_gpu';\nimport { gatherV2ImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nexport function gatherV2(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    indices\n  } = inputs;\n  const {\n    axis,\n    batchDims\n  } = attrs;\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n\n  if (env().get('DEBUG')) {\n    // In debug mode, throw error when any index is out of bound.\n    // Otherwise, just fill out of bounds with zeroes.\n    const indicesVals = backend.readSync(indices.dataId);\n    const axisDim = x.shape[parsedAxis];\n\n    for (let i = 0; i < indicesVals.length; ++i) {\n      const index = indicesVals[i];\n      util.assert(index <= axisDim - 1 && index >= 0, () => `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n    }\n  }\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, batchDims);\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const toDispose = [];\n  const flattenX = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: [shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize, shapeInfo.sliceSize]\n    }\n  });\n  const flattenIndex = reshape({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]\n    }\n  });\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n  const flattenOutputShape = [shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize, shapeInfo.sliceSize];\n\n  if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {\n    const indicesBuf = backend.bufferSync(flattenIndex);\n    const xBuf = backend.bufferSync(flattenX);\n    const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return backend.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n  }\n\n  const program = new GatherProgram(flattenX.shape, flattenOutputShape);\n  const res = backend.runWebGLProgram(program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n  const reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape: shapeInfo.outputShape\n    }\n  });\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return reshaped;\n}\nexport const gatherV2Config = {\n  kernelName: GatherV2,\n  backendName: 'webgl',\n  kernelFunc: gatherV2\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-webgl/src/kernels/GatherV2.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util, env} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherProgram, GatherShape} from '../gather_gpu';\nimport {gatherV2ImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendWebGL,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  if (env().get('DEBUG')) {\n    // In debug mode, throw error when any index is out of bound.\n    // Otherwise, just fill out of bounds with zeroes.\n    const indicesVals = backend.readSync(indices.dataId) as TypedArray;\n    const axisDim = x.shape[parsedAxis];\n    for (let i = 0; i < indicesVals.length; ++i) {\n      const index = indicesVals[i];\n      util.assert(\n        index <= axisDim - 1 && index >= 0,\n        () =>\n          `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n    }\n  }\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, batchDims);\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const toDispose = [];\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {\n    const indicesBuf = backend.bufferSync(flattenIndex);\n    const xBuf = backend.bufferSync(flattenX);\n    const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return backend.makeTensorInfo(\n        shapeInfo.outputShape, outBuf.dtype, outBuf.values as TypedArray);\n  }\n\n  const program = new GatherProgram(flattenX.shape as GatherShape,\n                                    flattenOutputShape as GatherShape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n\n  const reshaped = reshape(\n      {inputs: {x: res}, backend, attrs: {shape: shapeInfo.outputShape}});\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return reshaped;\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'webgl',\n  kernelFunc: gatherV2 as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}