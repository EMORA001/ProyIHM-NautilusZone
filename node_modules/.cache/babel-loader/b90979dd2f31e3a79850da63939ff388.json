{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as broadcast_util from './broadcast_util';\nimport { elu } from './elu';\nimport { leakyRelu } from './leaky_relu';\nimport { mul } from './mul';\nimport { prelu } from './prelu';\nimport { relu } from './relu';\nimport { relu6 } from './relu6';\nimport { reshape } from './reshape';\nimport { sigmoid } from './sigmoid';\nimport { step } from './step';\nimport { sum } from './sum'; // Returns gradient for fused activation.\n\nexport function getFusedDyActivation(dy, y, activation) {\n  if (activation == null || activation === 'linear') {\n    return dy;\n  }\n\n  if (activation === 'relu') {\n    return mul(dy, step(y));\n  }\n\n  throw new Error(`Cannot compute gradient for fused activation ${activation}.`);\n} // Returns gradient for fused bias.\n\nexport function getFusedBiasGradient(bias, dyActivation) {\n  let res = dyActivation;\n  const reduceAxes = broadcast_util.getReductionAxes(bias.shape, dyActivation.shape);\n\n  if (reduceAxes.length > 0) {\n    res = sum(res, reduceAxes);\n  }\n\n  return reshape(res, bias.shape);\n}\nexport function applyActivation(x, activation, preluActivationWeights, leakyreluAlpha) {\n  if (activation === 'linear') {\n    return x;\n  } else if (activation === 'relu') {\n    return relu(x);\n  } else if (activation === 'elu') {\n    return elu(x);\n  } else if (activation === 'relu6') {\n    return relu6(x);\n  } else if (activation === 'prelu') {\n    return prelu(x, preluActivationWeights);\n  } else if (activation === 'leakyrelu') {\n    return leakyRelu(x, leakyreluAlpha);\n  } else if (activation === 'sigmoid') {\n    return sigmoid(x);\n  }\n\n  throw new Error(`Unknown fused activation ${activation}.`);\n} // Whether we should call fused ops.\n\nexport const shouldFuse = (gradientDepth, activation) => {\n  const gradientMode = gradientDepth > 0;\n  return !gradientMode || activation === 'linear';\n};","map":{"version":3,"sources":["../../../../../../tfjs-core/src/ops/fused_util.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAIH,OAAO,KAAK,cAAZ,MAAgC,kBAAhC;AACA,SAAQ,GAAR,QAAkB,OAAlB;AAEA,SAAQ,SAAR,QAAwB,cAAxB;AACA,SAAQ,GAAR,QAAkB,OAAlB;AACA,SAAQ,KAAR,QAAoB,SAApB;AACA,SAAQ,IAAR,QAAmB,QAAnB;AACA,SAAQ,KAAR,QAAoB,SAApB;AACA,SAAQ,OAAR,QAAsB,WAAtB;AACA,SAAQ,OAAR,QAAsB,WAAtB;AACA,SAAQ,IAAR,QAAmB,QAAnB;AACA,SAAQ,GAAR,QAAkB,OAAlB,C,CAEA;;AACA,OAAM,SAAU,oBAAV,CACF,EADE,EACU,CADV,EACqB,UADrB,EAC2C;EAC/C,IAAI,UAAU,IAAI,IAAd,IAAsB,UAAU,KAAK,QAAzC,EAAmD;IACjD,OAAO,EAAP;EACD;;EACD,IAAI,UAAU,KAAK,MAAnB,EAA2B;IACzB,OAAO,GAAG,CAAC,EAAD,EAAK,IAAI,CAAC,CAAD,CAAT,CAAV;EACD;;EACD,MAAM,IAAI,KAAJ,CACF,gDAAgD,UAAU,GADxD,CAAN;AAED,C,CAED;;AACA,OAAM,SAAU,oBAAV,CACF,IADE,EACY,YADZ,EACgC;EACpC,IAAI,GAAG,GAAG,YAAV;EACA,MAAM,UAAU,GACZ,cAAc,CAAC,gBAAf,CAAgC,IAAI,CAAC,KAArC,EAA4C,YAAY,CAAC,KAAzD,CADJ;;EAEA,IAAI,UAAU,CAAC,MAAX,GAAoB,CAAxB,EAA2B;IACzB,GAAG,GAAG,GAAG,CAAC,GAAD,EAAM,UAAN,CAAT;EACD;;EACD,OAAO,OAAO,CAAC,GAAD,EAAM,IAAI,CAAC,KAAX,CAAd;AACD;AAED,OAAM,SAAU,eAAV,CACF,CADE,EACS,UADT,EACiC,sBADjC,EAEF,cAFE,EAEqB;EACzB,IAAI,UAAU,KAAK,QAAnB,EAA6B;IAC3B,OAAO,CAAP;EACD,CAFD,MAEO,IAAI,UAAU,KAAK,MAAnB,EAA2B;IAChC,OAAO,IAAI,CAAC,CAAD,CAAX;EACD,CAFM,MAEA,IAAI,UAAU,KAAK,KAAnB,EAA0B;IAC/B,OAAO,GAAG,CAAC,CAAD,CAAV;EACD,CAFM,MAEA,IAAI,UAAU,KAAK,OAAnB,EAA4B;IACjC,OAAO,KAAK,CAAC,CAAD,CAAZ;EACD,CAFM,MAEA,IAAI,UAAU,KAAK,OAAnB,EAA4B;IACjC,OAAO,KAAK,CAAC,CAAD,EAAI,sBAAJ,CAAZ;EACD,CAFM,MAEA,IAAI,UAAU,KAAK,WAAnB,EAAgC;IACrC,OAAO,SAAS,CAAC,CAAD,EAAI,cAAJ,CAAhB;EACD,CAFM,MAEA,IAAI,UAAU,KAAK,SAAnB,EAA8B;IACnC,OAAO,OAAO,CAAC,CAAD,CAAd;EACD;;EACD,MAAM,IAAI,KAAJ,CAAU,4BAA4B,UAAU,GAAhD,CAAN;AACD,C,CAED;;AACA,OAAO,MAAM,UAAU,GAAG,CAAC,aAAD,EAAwB,UAAxB,KAAkD;EAC1E,MAAM,YAAY,GAAG,aAAa,GAAG,CAArC;EACA,OAAO,CAAC,YAAD,IAAiB,UAAU,KAAK,QAAvC;AACD,CAHM","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\n\nimport * as broadcast_util from './broadcast_util';\nimport {elu} from './elu';\nimport {Activation} from './fused_types';\nimport {leakyRelu} from './leaky_relu';\nimport {mul} from './mul';\nimport {prelu} from './prelu';\nimport {relu} from './relu';\nimport {relu6} from './relu6';\nimport {reshape} from './reshape';\nimport {sigmoid} from './sigmoid';\nimport {step} from './step';\nimport {sum} from './sum';\n\n// Returns gradient for fused activation.\nexport function getFusedDyActivation(\n    dy: Tensor, y: Tensor, activation: Activation): Tensor {\n  if (activation == null || activation === 'linear') {\n    return dy;\n  }\n  if (activation === 'relu') {\n    return mul(dy, step(y));\n  }\n  throw new Error(\n      `Cannot compute gradient for fused activation ${activation}.`);\n}\n\n// Returns gradient for fused bias.\nexport function getFusedBiasGradient(\n    bias: Tensor, dyActivation: Tensor): Tensor {\n  let res = dyActivation;\n  const reduceAxes =\n      broadcast_util.getReductionAxes(bias.shape, dyActivation.shape);\n  if (reduceAxes.length > 0) {\n    res = sum(res, reduceAxes);\n  }\n  return reshape(res, bias.shape);\n}\n\nexport function applyActivation(\n    x: Tensor, activation: Activation, preluActivationWeights?: Tensor,\n    leakyreluAlpha?: number): Tensor {\n  if (activation === 'linear') {\n    return x;\n  } else if (activation === 'relu') {\n    return relu(x);\n  } else if (activation === 'elu') {\n    return elu(x);\n  } else if (activation === 'relu6') {\n    return relu6(x);\n  } else if (activation === 'prelu') {\n    return prelu(x, preluActivationWeights);\n  } else if (activation === 'leakyrelu') {\n    return leakyRelu(x, leakyreluAlpha);\n  } else if (activation === 'sigmoid') {\n    return sigmoid(x);\n  }\n  throw new Error(`Unknown fused activation ${activation}.`);\n}\n\n// Whether we should call fused ops.\nexport const shouldFuse = (gradientDepth: number, activation: Activation) => {\n  const gradientMode = gradientDepth > 0;\n  return !gradientMode || activation === 'linear';\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}