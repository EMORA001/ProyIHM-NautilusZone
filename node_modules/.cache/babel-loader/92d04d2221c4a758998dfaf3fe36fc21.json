{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { add } from '../kernels/Add';\nimport { complex } from '../kernels/Complex';\nimport { concat } from '../kernels/Concat';\nimport { identity } from '../kernels/Identity';\nimport { imag } from '../kernels/Imag';\nimport { multiply } from '../kernels/Multiply';\nimport { real } from '../kernels/Real';\nimport { realDivConfig } from '../kernels/RealDiv';\nimport { slice } from '../kernels/Slice';\nimport { sub } from '../kernels/Sub';\n/**\n * Calculate FFT of inner most elements of batch tensor.\n */\n\nexport function fftBatch(input, inverse, cpuBackend) {\n  const inputShape = input.shape;\n  const batch = inputShape[0];\n  const innerDim = inputShape[1];\n  const inputVals = cpuBackend.data.get(input.dataId);\n  const real2D = inputVals.complexTensorInfos.real;\n  const imag2D = inputVals.complexTensorInfos.imag; // Collects real and imaginary values separately.\n\n  const resultShape = [batch, innerDim];\n  const resultSize = util.sizeFromShape(resultShape);\n  const resultReal = util.getTypedArrayFromDType('float32', resultSize);\n  const resultImag = util.getTypedArrayFromDType('float32', resultSize);\n\n  for (let b = 0; b < batch; b++) {\n    // TODO: Support slice ops for complex type.\n    const r = slice({\n      inputs: {\n        x: real2D\n      },\n      backend: cpuBackend,\n      attrs: {\n        begin: [b, 0],\n        size: [1, innerDim]\n      }\n    });\n    const i = slice({\n      inputs: {\n        x: imag2D\n      },\n      backend: cpuBackend,\n      attrs: {\n        begin: [b, 0],\n        size: [1, innerDim]\n      }\n    });\n    const input = complex({\n      inputs: {\n        real: r,\n        imag: i\n      },\n      backend: cpuBackend\n    }); // Run FFT by batch element.\n\n    const {\n      real,\n      imag\n    } = fftImpl(input, inverse, cpuBackend);\n    const res = backend_util.mergeRealAndImagArrays(real, imag);\n\n    for (let d = 0; d < innerDim; d++) {\n      const c = backend_util.getComplexWithIndex(res, d);\n      resultReal[b * innerDim + d] = c.real;\n      resultImag[b * innerDim + d] = c.imag;\n    }\n\n    cpuBackend.disposeIntermediateTensorInfo(r);\n    cpuBackend.disposeIntermediateTensorInfo(i);\n    cpuBackend.disposeIntermediateTensorInfo(input);\n  }\n\n  const $realInfo = cpuBackend.makeTensorInfo(resultShape, 'float32', resultReal);\n  const $imagInfo = cpuBackend.makeTensorInfo(resultShape, 'float32', resultImag);\n  const result = complex({\n    inputs: {\n      real: $realInfo,\n      imag: $imagInfo\n    },\n    backend: cpuBackend\n  });\n  cpuBackend.disposeIntermediateTensorInfo($realInfo);\n  cpuBackend.disposeIntermediateTensorInfo($imagInfo);\n  return result;\n}\nexport function fftImpl(input, inverse, cpuBackend) {\n  const inputSize = util.sizeFromShape(input.shape);\n  const inputVals = cpuBackend.data.get(input.dataId);\n  const realVals = cpuBackend.data.get(inputVals.complexTensorInfos.real.dataId).values;\n  const imagVals = cpuBackend.data.get(inputVals.complexTensorInfos.imag.dataId).values;\n\n  if (isExponentOf2(inputSize)) {\n    const result = fftRadix2(realVals, imagVals, inputSize, inverse, cpuBackend);\n    const resultShape = [input.shape[0], input.shape[1]];\n\n    if (inverse) {\n      const realInfo = cpuBackend.makeTensorInfo(resultShape, 'float32', result.real);\n      const imagInfo = cpuBackend.makeTensorInfo(resultShape, 'float32', result.imag);\n      const sizeInfo = cpuBackend.makeTensorInfo([], 'float32', util.createScalarValue(inputSize, 'float32'));\n      const sizeInfoCopy = identity({\n        inputs: {\n          x: sizeInfo\n        },\n        backend: cpuBackend\n      });\n      const divRealInfo = realDivConfig.kernelFunc({\n        inputs: {\n          a: realInfo,\n          b: sizeInfo\n        },\n        backend: cpuBackend\n      });\n      const divImagInfo = realDivConfig.kernelFunc({\n        inputs: {\n          a: imagInfo,\n          b: sizeInfoCopy\n        },\n        backend: cpuBackend\n      });\n      const divRealVals = cpuBackend.data.get(divRealInfo.dataId).values;\n      const divImagVals = cpuBackend.data.get(divImagInfo.dataId).values;\n      cpuBackend.disposeIntermediateTensorInfo(realInfo);\n      cpuBackend.disposeIntermediateTensorInfo(imagInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfoCopy);\n      cpuBackend.disposeIntermediateTensorInfo(divRealInfo);\n      cpuBackend.disposeIntermediateTensorInfo(divImagInfo);\n      return {\n        real: divRealVals,\n        imag: divImagVals\n      };\n    }\n\n    return result;\n  } else {\n    const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n    const rawOutput = fourierTransformByMatmul(data, inputSize, inverse);\n    return backend_util.splitRealAndImagArrays(rawOutput);\n  }\n}\n\nfunction isExponentOf2(size) {\n  return (size & size - 1) === 0;\n} // FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\n\n\nfunction fftRadix2(realVals, imagVals, size, inverse, cpuBackend) {\n  if (size === 1) {\n    return {\n      real: realVals,\n      imag: imagVals\n    };\n  }\n\n  const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n  const half = size / 2;\n  const evenComplex = backend_util.complexWithEvenIndex(data);\n  const evenRealVals = evenComplex.real;\n  const evenImagVals = evenComplex.imag;\n  const evenShape = [evenRealVals.length];\n  const evenRealInfo = cpuBackend.makeTensorInfo(evenShape, 'float32', evenRealVals);\n  const evenImagInfo = cpuBackend.makeTensorInfo(evenShape, 'float32', evenImagVals);\n  const evenTensorInfo = complex({\n    inputs: {\n      real: evenRealInfo,\n      imag: evenImagInfo\n    },\n    backend: cpuBackend\n  });\n  const oddComplex = backend_util.complexWithOddIndex(data);\n  const oddRealVals = oddComplex.real;\n  const oddImagVals = oddComplex.imag;\n  const oddShape = [oddRealVals.length];\n  const oddRealInfo = cpuBackend.makeTensorInfo(oddShape, 'float32', oddRealVals);\n  const oddImagInfo = cpuBackend.makeTensorInfo(oddShape, 'float32', oddImagVals);\n  const oddTensorInfo = complex({\n    inputs: {\n      real: oddRealInfo,\n      imag: oddImagInfo\n    },\n    backend: cpuBackend\n  }); // Recursive call for half part of original input.\n\n  const $evenComplex = fftRadix2(evenRealVals, evenImagVals, half, inverse, cpuBackend);\n  const $evenRealVals = $evenComplex.real;\n  const $evenImagVals = $evenComplex.imag;\n  const $evenShape = [$evenRealVals.length];\n  const $evenRealInfo = cpuBackend.makeTensorInfo($evenShape, 'float32', $evenRealVals);\n  const $evenImagInfo = cpuBackend.makeTensorInfo($evenShape, 'float32', $evenImagVals);\n  const $evenTensorInfo = complex({\n    inputs: {\n      real: $evenRealInfo,\n      imag: $evenImagInfo\n    },\n    backend: cpuBackend\n  });\n  const $oddComplex = fftRadix2(oddRealVals, oddImagVals, half, inverse, cpuBackend);\n  const $oddRealVals = $oddComplex.real;\n  const $oddImagVals = $oddComplex.imag;\n  const $oddShape = [$oddRealVals.length];\n  const $oddRealInfo = cpuBackend.makeTensorInfo($oddShape, 'float32', $oddRealVals);\n  const $oddImagInfo = cpuBackend.makeTensorInfo($oddShape, 'float32', $oddImagVals);\n  const $oddTensorInfo = complex({\n    inputs: {\n      real: $oddRealInfo,\n      imag: $oddImagInfo\n    },\n    backend: cpuBackend\n  });\n  const e = backend_util.exponents(size, inverse);\n  const eShape = [e.real.length];\n  const eRealInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.real);\n  const eImagInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.imag);\n  const complexInfo = complex({\n    inputs: {\n      real: eRealInfo,\n      imag: eImagInfo\n    },\n    backend: cpuBackend\n  });\n  const exponentInfo = multiply({\n    inputs: {\n      a: complexInfo,\n      b: $oddTensorInfo\n    },\n    backend: cpuBackend\n  });\n  const addPart = add({\n    inputs: {\n      a: $evenTensorInfo,\n      b: exponentInfo\n    },\n    backend: cpuBackend\n  });\n  const subPart = sub({\n    inputs: {\n      a: $evenTensorInfo,\n      b: exponentInfo\n    },\n    backend: cpuBackend\n  });\n  const addPartReal = real({\n    inputs: {\n      input: addPart\n    },\n    backend: cpuBackend\n  });\n  const subPartReal = real({\n    inputs: {\n      input: subPart\n    },\n    backend: cpuBackend\n  });\n  const addPartImag = imag({\n    inputs: {\n      input: addPart\n    },\n    backend: cpuBackend\n  });\n  const subPartImag = imag({\n    inputs: {\n      input: subPart\n    },\n    backend: cpuBackend\n  });\n  const $real = concat({\n    inputs: [addPartReal, subPartReal],\n    backend: cpuBackend,\n    attrs: {\n      axis: 0\n    }\n  });\n  const $imag = concat({\n    inputs: [addPartImag, subPartImag],\n    backend: cpuBackend,\n    attrs: {\n      axis: 0\n    }\n  });\n  const $realVals = cpuBackend.data.get($real.dataId).values;\n  const $imagVals = cpuBackend.data.get($imag.dataId).values;\n  cpuBackend.disposeIntermediateTensorInfo(evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(complexInfo);\n  cpuBackend.disposeIntermediateTensorInfo(exponentInfo);\n  cpuBackend.disposeIntermediateTensorInfo(addPart);\n  cpuBackend.disposeIntermediateTensorInfo(subPart);\n  cpuBackend.disposeIntermediateTensorInfo(addPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(addPartImag);\n  cpuBackend.disposeIntermediateTensorInfo(subPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(subPartImag);\n  cpuBackend.disposeIntermediateTensorInfo($real);\n  cpuBackend.disposeIntermediateTensorInfo($imag);\n  return {\n    real: $realVals,\n    imag: $imagVals\n  };\n} // Calculate fourier transform by multplying sinusoid matrix.\n\n\nfunction fourierTransformByMatmul(data, size, inverse) {\n  const ret = new Float32Array(size * 2); // TODO: Use matmul instead once it supports complex64 type.\n\n  for (let r = 0; r < size; r++) {\n    let real = 0.0;\n    let imag = 0.0;\n\n    for (let c = 0; c < size; c++) {\n      const e = backend_util.exponent(r * c, size, inverse);\n      const term = backend_util.getComplexWithIndex(data, c);\n      real += term.real * e.real - term.imag * e.imag;\n      imag += term.real * e.imag + term.imag * e.real;\n    }\n\n    if (inverse) {\n      real /= size;\n      imag /= size;\n    }\n\n    backend_util.assignToTypedArray(ret, real, imag, r);\n  }\n\n  return ret;\n}","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/utils/fft_utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Tensor, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {add} from '../kernels/Add';\nimport {complex} from '../kernels/Complex';\nimport {concat} from '../kernels/Concat';\nimport {identity} from '../kernels/Identity';\nimport {imag} from '../kernels/Imag';\nimport {multiply} from '../kernels/Multiply';\nimport {real} from '../kernels/Real';\nimport {realDivConfig} from '../kernels/RealDiv';\nimport {slice} from '../kernels/Slice';\nimport {sub} from '../kernels/Sub';\n\n/**\n * Calculate FFT of inner most elements of batch tensor.\n */\nexport function fftBatch(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): TensorInfo {\n  const inputShape = input.shape;\n  const batch = inputShape[0];\n  const innerDim = inputShape[1];\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const real2D = inputVals.complexTensorInfos.real;\n  const imag2D = inputVals.complexTensorInfos.imag;\n\n  // Collects real and imaginary values separately.\n  const resultShape = [batch, innerDim];\n  const resultSize = util.sizeFromShape(resultShape);\n  const resultReal = util.getTypedArrayFromDType('float32', resultSize);\n  const resultImag = util.getTypedArrayFromDType('float32', resultSize);\n\n  for (let b = 0; b < batch; b++) {\n    // TODO: Support slice ops for complex type.\n    const r = slice({\n      inputs: {x: real2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n    const i = slice({\n      inputs: {x: imag2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n\n    const input = complex({inputs: {real: r, imag: i}, backend: cpuBackend});\n\n    // Run FFT by batch element.\n    const {real, imag} = fftImpl(input, inverse, cpuBackend);\n    const res = backend_util.mergeRealAndImagArrays(real, imag);\n\n    for (let d = 0; d < innerDim; d++) {\n      const c = backend_util.getComplexWithIndex(res, d);\n      resultReal[b * innerDim + d] = c.real;\n      resultImag[b * innerDim + d] = c.imag;\n    }\n\n    cpuBackend.disposeIntermediateTensorInfo(r);\n    cpuBackend.disposeIntermediateTensorInfo(i);\n    cpuBackend.disposeIntermediateTensorInfo(input);\n  }\n\n  const $realInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultReal);\n  const $imagInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultImag);\n\n  const result = complex(\n      {inputs: {real: $realInfo, imag: $imagInfo}, backend: cpuBackend});\n\n  cpuBackend.disposeIntermediateTensorInfo($realInfo);\n  cpuBackend.disposeIntermediateTensorInfo($imagInfo);\n\n  return result;\n}\n\nexport function fftImpl(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  const inputSize = util.sizeFromShape(input.shape);\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const realVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.real.dataId).values as\n      Float32Array;\n\n  const imagVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.imag.dataId).values as\n      Float32Array;\n\n  if (isExponentOf2(inputSize)) {\n    const result =\n        fftRadix2(realVals, imagVals, inputSize, inverse, cpuBackend);\n\n    const resultShape = [input.shape[0], input.shape[1]];\n\n    if (inverse) {\n      const realInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.real);\n      const imagInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.imag);\n\n      const sizeInfo: TensorInfo = cpuBackend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(inputSize as {} as 'float32', 'float32'));\n      const sizeInfoCopy =\n          identity({inputs: {x: sizeInfo}, backend: cpuBackend});\n\n      const divRealInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: realInfo, b: sizeInfo}, backend: cpuBackend}) as\n          TensorInfo;\n      const divImagInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: imagInfo, b: sizeInfoCopy}, backend: cpuBackend}) as\n          TensorInfo;\n\n      const divRealVals =\n          cpuBackend.data.get(divRealInfo.dataId).values as Float32Array;\n      const divImagVals =\n          cpuBackend.data.get(divImagInfo.dataId).values as Float32Array;\n\n      cpuBackend.disposeIntermediateTensorInfo(realInfo);\n      cpuBackend.disposeIntermediateTensorInfo(imagInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfoCopy);\n      cpuBackend.disposeIntermediateTensorInfo(divRealInfo);\n      cpuBackend.disposeIntermediateTensorInfo(divImagInfo);\n\n      return {real: divRealVals, imag: divImagVals};\n    }\n\n    return result;\n  } else {\n    const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n    const rawOutput =\n        fourierTransformByMatmul(data, inputSize, inverse) as Float32Array;\n\n    return backend_util.splitRealAndImagArrays(rawOutput);\n  }\n}\n\nfunction isExponentOf2(size: number): boolean {\n  return (size & size - 1) === 0;\n}\n\n// FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\nfunction fftRadix2(\n    realVals: Float32Array, imagVals: Float32Array, size: number,\n    inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  if (size === 1) {\n    return {real: realVals, imag: imagVals};\n  }\n\n  const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n  const half = size / 2;\n\n  const evenComplex = backend_util.complexWithEvenIndex(data);\n\n  const evenRealVals = evenComplex.real;\n  const evenImagVals = evenComplex.imag;\n\n  const evenShape = [evenRealVals.length];\n\n  const evenRealInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenRealVals);\n  const evenImagInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenImagVals);\n\n  const evenTensorInfo = complex(\n      {inputs: {real: evenRealInfo, imag: evenImagInfo}, backend: cpuBackend});\n\n  const oddComplex = backend_util.complexWithOddIndex(data);\n\n  const oddRealVals = oddComplex.real;\n  const oddImagVals = oddComplex.imag;\n\n  const oddShape = [oddRealVals.length];\n\n  const oddRealInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddRealVals);\n  const oddImagInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddImagVals);\n\n  const oddTensorInfo = complex(\n      {inputs: {real: oddRealInfo, imag: oddImagInfo}, backend: cpuBackend});\n\n  // Recursive call for half part of original input.\n  const $evenComplex =\n      fftRadix2(evenRealVals, evenImagVals, half, inverse, cpuBackend);\n\n  const $evenRealVals = $evenComplex.real;\n  const $evenImagVals = $evenComplex.imag;\n\n  const $evenShape = [$evenRealVals.length];\n\n  const $evenRealInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenRealVals);\n  const $evenImagInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenImagVals);\n\n  const $evenTensorInfo = complex({\n    inputs: {real: $evenRealInfo, imag: $evenImagInfo},\n    backend: cpuBackend\n  });\n\n  const $oddComplex =\n      fftRadix2(oddRealVals, oddImagVals, half, inverse, cpuBackend);\n\n  const $oddRealVals = $oddComplex.real;\n  const $oddImagVals = $oddComplex.imag;\n\n  const $oddShape = [$oddRealVals.length];\n\n  const $oddRealInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddRealVals);\n  const $oddImagInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddImagVals);\n\n  const $oddTensorInfo = complex(\n      {inputs: {real: $oddRealInfo, imag: $oddImagInfo}, backend: cpuBackend});\n\n  const e = backend_util.exponents(size, inverse);\n  const eShape = [e.real.length];\n\n  const eRealInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.real);\n  const eImagInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.imag);\n\n  const complexInfo = complex(\n      {inputs: {real: eRealInfo, imag: eImagInfo}, backend: cpuBackend});\n\n  const exponentInfo =\n      multiply(\n          {inputs: {a: complexInfo, b: $oddTensorInfo}, backend: cpuBackend}) as\n      TensorInfo;\n\n  const addPart = add({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n  const subPart = sub({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n\n  const addPartReal = real({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartReal = real({inputs: {input: subPart}, backend: cpuBackend});\n\n  const addPartImag = imag({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartImag = imag({inputs: {input: subPart}, backend: cpuBackend});\n\n  const $real = concat({\n    inputs: [addPartReal as Tensor, subPartReal as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n  const $imag = concat({\n    inputs: [addPartImag as Tensor, subPartImag as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n\n  const $realVals = cpuBackend.data.get($real.dataId).values as Float32Array;\n  const $imagVals = cpuBackend.data.get($imag.dataId).values as Float32Array;\n\n  cpuBackend.disposeIntermediateTensorInfo(evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(complexInfo);\n  cpuBackend.disposeIntermediateTensorInfo(exponentInfo);\n  cpuBackend.disposeIntermediateTensorInfo(addPart);\n  cpuBackend.disposeIntermediateTensorInfo(subPart);\n  cpuBackend.disposeIntermediateTensorInfo(addPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(addPartImag);\n  cpuBackend.disposeIntermediateTensorInfo(subPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(subPartImag);\n  cpuBackend.disposeIntermediateTensorInfo($real);\n  cpuBackend.disposeIntermediateTensorInfo($imag);\n\n  return {real: $realVals, imag: $imagVals};\n}\n\n// Calculate fourier transform by multplying sinusoid matrix.\nfunction fourierTransformByMatmul(\n    data: TypedArray, size: number, inverse: boolean): TypedArray {\n  const ret = new Float32Array(size * 2);\n  // TODO: Use matmul instead once it supports complex64 type.\n  for (let r = 0; r < size; r++) {\n    let real = 0.0;\n    let imag = 0.0;\n    for (let c = 0; c < size; c++) {\n      const e = backend_util.exponent(r * c, size, inverse);\n      const term = backend_util.getComplexWithIndex(data as Float32Array, c);\n      real += term.real * e.real - term.imag * e.imag;\n      imag += term.real * e.imag + term.imag * e.real;\n    }\n    if (inverse) {\n      real /= size;\n      imag /= size;\n    }\n    backend_util.assignToTypedArray(ret, real, imag, r);\n  }\n  return ret;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}