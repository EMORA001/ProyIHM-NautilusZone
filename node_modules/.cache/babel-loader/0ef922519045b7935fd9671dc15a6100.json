{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class DepthToSpaceProgram {\n  constructor(outputShape, blockSize, dataFormat) {\n    this.variableNames = ['x'];\n    this.outputShape = [];\n    this.outputShape = outputShape;\n    this.blockSize = blockSize;\n    this.dataFormat = dataFormat;\n    this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n  }\n\n  getHeightCoordString() {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n\n  getWidthCoordString() {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n\n  getDepthCoordString() {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n\n  getOutputDepthSize() {\n    if (this.dataFormat === 'NHWC') {\n      return this.outputShape[3];\n    } else {\n      return this.outputShape[1];\n    }\n  }\n\n  getInputSamplingString() {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../../../tfjs-backend-webgl/src/depth_to_space_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAIH,OAAM,MAAO,mBAAP,CAA0B;EAO9B,WAAA,CACI,WADJ,EAC2B,SAD3B,EAC8C,UAD9C,EACuE;IAPvE,KAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;IACA,KAAA,WAAA,GAAwB,EAAxB;IAOE,KAAK,WAAL,GAAmB,WAAnB;IACA,KAAK,SAAL,GAAiB,SAAjB;IACA,KAAK,UAAL,GAAkB,UAAlB;IACA,KAAK,QAAL,GAAgB;;;;gBAIJ,KAAK,oBAAL,EAA2B;gBAC3B,KAAK,mBAAL,EAA0B;gBAC1B,KAAK,mBAAL,EAA0B;;uBAEnB,SAAS;+BACD,SAAS;uBACjB,SAAS;+BACD,SAAS;mCACL,SAAS;UAClC,KAAK,kBAAL,EAAyB;;;uBAGZ,KAAK,sBAAL,EAA6B;;;AAGjD,GAnBC;EAoBD;;EAEO,oBAAoB,GAAA;IAC1B,IAAI,KAAK,UAAL,KAAoB,MAAxB,EAAgC;MAC9B,OAAO,WAAP;IACD,CAFD,MAEO;MACL,OAAO,WAAP;IACD;EACF;;EAEO,mBAAmB,GAAA;IACzB,IAAI,KAAK,UAAL,KAAoB,MAAxB,EAAgC;MAC9B,OAAO,WAAP;IACD,CAFD,MAEO;MACL,OAAO,WAAP;IACD;EACF;;EAEO,mBAAmB,GAAA;IACzB,IAAI,KAAK,UAAL,KAAoB,MAAxB,EAAgC;MAC9B,OAAO,WAAP;IACD,CAFD,MAEO;MACL,OAAO,WAAP;IACD;EACF;;EAEO,kBAAkB,GAAA;IACxB,IAAI,KAAK,UAAL,KAAoB,MAAxB,EAAgC;MAC9B,OAAO,KAAK,WAAL,CAAiB,CAAjB,CAAP;IACD,CAFD,MAEO;MACL,OAAO,KAAK,WAAL,CAAiB,CAAjB,CAAP;IACD;EACF;;EAEO,sBAAsB,GAAA;IAC5B,IAAI,KAAK,UAAL,KAAoB,MAAxB,EAAgC;MAC9B,OAAO,2BAAP;IACD,CAFD,MAEO;MACL,OAAO,2BAAP;IACD;EACF;;AAxE6B","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthToSpaceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  blockSize: number;\n  dataFormat: string;\n\n  constructor(\n      outputShape: number[], blockSize: number, dataFormat: 'NHWC'|'NCHW') {\n    this.outputShape = outputShape;\n    this.blockSize = blockSize;\n    this.dataFormat = dataFormat;\n    this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n  }\n\n  private getHeightCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n\n  private getWidthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n\n  private getDepthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n\n  private getOutputDepthSize(): number {\n    if (this.dataFormat === 'NHWC') {\n      return this.outputShape[3];\n    } else {\n      return this.outputShape[1];\n    }\n  }\n\n  private getInputSamplingString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}