{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Convolutional Layers\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { getActivation, serializeActivation } from '../activations';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat, checkInterpolationFormat, checkPaddingMode } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { convOutputLength, deconvLength, normalizeArray } from '../utils/conv_utils';\nimport * as generic_utils from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\n/**\n * Transpose and cast the input before the conv2d.\n * @param x Input image tensor.\n * @param dataFormat\n */\n\nexport function preprocessConv2DInput(x, dataFormat) {\n  // TODO(cais): Cast type to float32 if not.\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 1]); // NCHW -> NHWC.\n    } else {\n      return x;\n    }\n  });\n}\n/**\n * Transpose and cast the input before the conv3d.\n * @param x Input image tensor.\n * @param dataFormat\n */\n\nexport function preprocessConv3DInput(x, dataFormat) {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 4, 1]); // NCDHW -> NDHWC.\n    } else {\n      return x;\n    }\n  });\n}\n/**\n * 1D-convolution with bias added.\n *\n * Porting Note: This function does not exist in the Python Keras backend.\n *   It is exactly the same as `conv2d`, except the added `bias`.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.\n * @param bias Bias, rank-3, of shape `[outDepth]`.\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\n\nexport function conv1dWithBias(x, kernel, bias) {\n  let strides = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  let padding = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'valid';\n  let dataFormat = arguments.length > 5 ? arguments[5] : undefined;\n  let dilationRate = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 1;\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    checkDataFormat(dataFormat); // Check the ranks of x, kernel and bias.\n\n    if (x.shape.length !== 3) {\n      throw new ValueError(`The input of a conv1dWithBias operation should be 3, but is ` + `${x.shape.length} instead.`);\n    }\n\n    if (kernel.shape.length !== 3) {\n      throw new ValueError(`The kernel for a conv1dWithBias operation should be 3, but is ` + `${kernel.shape.length} instead`);\n    }\n\n    if (bias != null && bias.shape.length !== 1) {\n      throw new ValueError(`The bias for a conv1dWithBias operation should be 1, but is ` + `${kernel.shape.length} instead`);\n    } // TODO(cais): Support CAUSAL padding mode.\n\n\n    if (dataFormat === 'channelsFirst') {\n      x = tfc.transpose(x, [0, 2, 1]); // NCW -> NWC.\n    }\n\n    if (padding === 'causal') {\n      throw new NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' + 'implemented yet.');\n    }\n\n    let y = tfc.conv1d(x, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NWC', dilationRate);\n\n    if (bias != null) {\n      y = K.biasAdd(y, bias);\n    }\n\n    return y;\n  });\n}\n/**\n * 1D-convolution.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.s\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\n\nexport function conv1d(x, kernel) {\n  let strides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let padding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'valid';\n  let dataFormat = arguments.length > 4 ? arguments[4] : undefined;\n  let dilationRate = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv1dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n/**\n * 2D Convolution\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 2D pooling.\n */\n\nexport function conv2d(x, kernel) {\n  let strides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [1, 1];\n  let padding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'valid';\n  let dataFormat = arguments.length > 4 ? arguments[4] : undefined;\n  let dilationRate = arguments.length > 5 ? arguments[5] : undefined;\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv2dWithBiasActivation(x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n/**\n * 2D Convolution with an added bias and optional activation.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv2d`, except the added `bias`.\n */\n\nexport function conv2dWithBiasActivation(x, kernel, bias) {\n  let strides = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [1, 1];\n  let padding = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'valid';\n  let dataFormat = arguments.length > 5 ? arguments[5] : undefined;\n  let dilationRate = arguments.length > 6 ? arguments[6] : undefined;\n  let activation = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    checkDataFormat(dataFormat);\n\n    if (x.rank !== 3 && x.rank !== 4) {\n      throw new ValueError(`conv2dWithBiasActivation expects input to be of rank 3 or 4, ` + `but received ${x.rank}.`);\n    }\n\n    if (kernel.rank !== 3 && kernel.rank !== 4) {\n      throw new ValueError(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, ` + `but received ${x.rank}.`);\n    }\n\n    let y = preprocessConv2DInput(x, dataFormat);\n\n    if (padding === 'causal') {\n      throw new NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' + 'implemented yet.');\n    }\n\n    y = tfc.fused.conv2d({\n      x: y,\n      filter: kernel,\n      strides: strides,\n      pad: padding === 'same' ? 'same' : 'valid',\n      dilations: dilationRate,\n      dataFormat: 'NHWC',\n      bias,\n      activation\n    });\n\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n\n    return y;\n  });\n}\n/**\n * 3D Convolution.\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 3D convolution.\n */\n\nexport function conv3d(x, kernel) {\n  let strides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [1, 1, 1];\n  let padding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'valid';\n  let dataFormat = arguments.length > 4 ? arguments[4] : undefined;\n  let dilationRate = arguments.length > 5 ? arguments[5] : undefined;\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv3dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n/**\n * 3D Convolution with an added bias.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv3d`, except the added `bias`.\n */\n\nexport function conv3dWithBias(x, kernel, bias) {\n  let strides = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [1, 1, 1];\n  let padding = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'valid';\n  let dataFormat = arguments.length > 5 ? arguments[5] : undefined;\n  let dilationRate = arguments.length > 6 ? arguments[6] : undefined;\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    checkDataFormat(dataFormat);\n\n    if (x.rank !== 4 && x.rank !== 5) {\n      throw new ValueError(`conv3dWithBias expects input to be of rank 4 or 5, but received ` + `${x.rank}.`);\n    }\n\n    if (kernel.rank !== 4 && kernel.rank !== 5) {\n      throw new ValueError(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ` + `${x.rank}.`);\n    }\n\n    let y = preprocessConv3DInput(x, dataFormat);\n\n    if (padding === 'causal') {\n      throw new NotImplementedError('The support for CAUSAL padding mode in conv3dWithBias is not ' + 'implemented yet.');\n    }\n\n    y = tfc.conv3d(y, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NDHWC', dilationRate);\n\n    if (bias != null) {\n      y = K.biasAdd(y, bias);\n    }\n\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 4, 1, 2, 3]);\n    }\n\n    return y;\n  });\n}\n/**\n * Abstract convolution layer.\n */\n\nexport class BaseConv extends Layer {\n  constructor(rank, args) {\n    super(args);\n    this.bias = null;\n    this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n    this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n    BaseConv.verifyArgs(args);\n    this.rank = rank;\n    generic_utils.assertPositiveInteger(this.rank, 'rank');\n\n    if (this.rank !== 1 && this.rank !== 2 && this.rank !== 3) {\n      throw new NotImplementedError(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is ` + `not implemented yet.`);\n    }\n\n    this.kernelSize = normalizeArray(args.kernelSize, rank, 'kernelSize');\n    this.strides = normalizeArray(args.strides == null ? 1 : args.strides, rank, 'strides');\n    this.padding = args.padding == null ? 'valid' : args.padding;\n    checkPaddingMode(this.padding);\n    this.dataFormat = args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.activation = getActivation(args.activation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n    this.biasInitializer = getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.dilationRate = normalizeArray(args.dilationRate == null ? 1 : args.dilationRate, rank, 'dilationRate');\n\n    if (this.rank === 1 && Array.isArray(this.dilationRate) && this.dilationRate.length !== 1) {\n      throw new ValueError(`dilationRate must be a number or an array of a single number ` + `for 1D convolution, but received ` + `${JSON.stringify(this.dilationRate)}`);\n    } else if (this.rank === 2) {\n      if (typeof this.dilationRate === 'number') {\n        this.dilationRate = [this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 2) {\n        throw new ValueError(`dilationRate must be a number or array of two numbers for 2D ` + `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    } else if (this.rank === 3) {\n      if (typeof this.dilationRate === 'number') {\n        this.dilationRate = [this.dilationRate, this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 3) {\n        throw new ValueError(`dilationRate must be a number or array of three numbers for 3D ` + `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    }\n  }\n\n  static verifyArgs(args) {\n    // Check config.kernelSize type and shape.\n    generic_utils.assert('kernelSize' in args, `required key 'kernelSize' not in config`);\n\n    if (typeof args.kernelSize !== 'number' && !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 3)) {\n      throw new ValueError(`BaseConv expects config.kernelSize to be number or number[] with ` + `length 1, 2, or 3, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n\n  getConfig() {\n    const config = {\n      kernelSize: this.kernelSize,\n      strides: this.strides,\n      padding: this.padding,\n      dataFormat: this.dataFormat,\n      dilationRate: this.dilationRate,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      biasConstraint: serializeConstraint(this.biasConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/**\n * Abstract nD convolution layer.  Ancestor of convolution layers which reduce\n * across channels, i.e., Conv1D and Conv2D, but not DepthwiseConv2D.\n */\n\nexport class Conv extends BaseConv {\n  constructor(rank, args) {\n    super(rank, args);\n    this.kernel = null;\n    Conv.verifyArgs(args);\n    this.filters = args.filters;\n    generic_utils.assertPositiveInteger(this.filters, 'filters');\n    this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n  }\n\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(`The channel dimension of the input should be defined. ` + `Found ${inputShape[channelAxis]}`);\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n    this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    this.inputSpec = [{\n      ndim: this.rank + 2,\n      axes: {\n        [channelAxis]: inputDim\n      }\n    }];\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let outputs;\n      const biasValue = this.bias == null ? null : this.bias.read();\n      const fusedActivationName = generic_utils.mapActivationToFusedKernel(this.activation.getClassName());\n\n      if (fusedActivationName != null && this.rank === 2) {\n        outputs = conv2dWithBiasActivation(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate, fusedActivationName);\n      } else {\n        if (this.rank === 1) {\n          outputs = conv1dWithBias(inputs, this.kernel.read(), biasValue, this.strides[0], this.padding, this.dataFormat, this.dilationRate[0]);\n        } else if (this.rank === 2) {\n          // TODO(cais): Move up to constructor.\n          outputs = conv2dWithBiasActivation(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);\n        } else if (this.rank === 3) {\n          outputs = conv3dWithBias(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);\n        } else {\n          throw new NotImplementedError('convolutions greater than 3D are not implemented yet.');\n        }\n\n        if (this.activation != null) {\n          outputs = this.activation.apply(outputs);\n        }\n      }\n\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const newSpace = [];\n    const space = this.dataFormat === 'channelsLast' ? inputShape.slice(1, inputShape.length - 1) : inputShape.slice(2);\n\n    for (let i = 0; i < space.length; ++i) {\n      const newDim = convOutputLength(space[i], this.kernelSize[i], this.padding, this.strides[i], typeof this.dilationRate === 'number' ? this.dilationRate : this.dilationRate[i]);\n      newSpace.push(newDim);\n    }\n\n    let outputShape = [inputShape[0]];\n\n    if (this.dataFormat === 'channelsLast') {\n      outputShape = outputShape.concat(newSpace);\n      outputShape.push(this.filters);\n    } else {\n      outputShape.push(this.filters);\n      outputShape = outputShape.concat(newSpace);\n    }\n\n    return outputShape;\n  }\n\n  getConfig() {\n    const config = {\n      filters: this.filters,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  static verifyArgs(args) {\n    // Check config.filters type, shape, and value.\n    if (!('filters' in args) || typeof args.filters !== 'number' || args.filters < 1) {\n      throw new ValueError(`Convolution layer expected config.filters to be a 'number' > 0 ` + `but got ${JSON.stringify(args.filters)}`);\n    }\n  }\n\n}\nexport class Conv2D extends Conv {\n  constructor(args) {\n    super(2, args);\n    Conv2D.verifyArgs(args);\n  }\n\n  getConfig() {\n    const config = super.getConfig();\n    delete config['rank'];\n    return config;\n  }\n\n  static verifyArgs(args) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number' && !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 2)) {\n      throw new ValueError(`Conv2D expects config.kernelSize to be number or number[] with ` + `length 1 or 2, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n\n}\n/** @nocollapse */\n\nConv2D.className = 'Conv2D';\nserialization.registerClass(Conv2D);\nexport class Conv3D extends Conv {\n  constructor(args) {\n    super(3, args);\n    Conv3D.verifyArgs(args);\n  }\n\n  getConfig() {\n    const config = super.getConfig();\n    delete config['rank'];\n    return config;\n  }\n\n  static verifyArgs(args) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number') {\n      if (!(Array.isArray(args.kernelSize) && (args.kernelSize.length === 1 || args.kernelSize.length === 3))) {\n        throw new ValueError(`Conv3D expects config.kernelSize to be number or` + ` [number, number, number], but received ${JSON.stringify(args.kernelSize)}.`);\n      }\n    }\n  }\n\n}\n/** @nocollapse */\n\nConv3D.className = 'Conv3D';\nserialization.registerClass(Conv3D);\nexport class Conv2DTranspose extends Conv2D {\n  constructor(args) {\n    super(args);\n    this.inputSpec = [new InputSpec({\n      ndim: 4\n    })];\n\n    if (this.padding !== 'same' && this.padding !== 'valid') {\n      throw new ValueError(`Conv2DTranspose currently supports only padding modes 'same' ` + `and 'valid', but received padding mode ${this.padding}`);\n    }\n  }\n\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length !== 4) {\n      throw new ValueError('Input should have rank 4; Received input shape: ' + JSON.stringify(inputShape));\n    }\n\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError('The channel dimension of the inputs should be defined. ' + 'Found `None`.');\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n    this.kernel = this.addWeight('kernel', kernelShape, 'float32', this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    } // Set input spec.\n\n\n    this.inputSpec = [new InputSpec({\n      ndim: 4,\n      axes: {\n        [channelAxis]: inputDim\n      }\n    })];\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs);\n\n      if (input.shape.length !== 4) {\n        throw new ValueError(`Conv2DTranspose.call() expects input tensor to be rank-4, but ` + `received a tensor of rank-${input.shape.length}`);\n      }\n\n      const inputShape = input.shape;\n      const batchSize = inputShape[0];\n      let hAxis;\n      let wAxis;\n\n      if (this.dataFormat === 'channelsFirst') {\n        hAxis = 2;\n        wAxis = 3;\n      } else {\n        hAxis = 1;\n        wAxis = 2;\n      }\n\n      const height = inputShape[hAxis];\n      const width = inputShape[wAxis];\n      const kernelH = this.kernelSize[0];\n      const kernelW = this.kernelSize[1];\n      const strideH = this.strides[0];\n      const strideW = this.strides[1]; // Infer the dynamic output shape.\n\n      const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n      const outWidth = deconvLength(width, strideW, kernelW, this.padding); // Porting Note: We don't branch based on `this.dataFormat` here,\n      // because\n      //   the tjfs-core function `conv2dTranspose` called below always\n      //   assumes channelsLast.\n\n      const outputShape = [batchSize, outHeight, outWidth, this.filters];\n\n      if (this.dataFormat !== 'channelsLast') {\n        input = tfc.transpose(input, [0, 2, 3, 1]);\n      }\n\n      let outputs = tfc.conv2dTranspose(input, this.kernel.read(), outputShape, this.strides, this.padding);\n\n      if (this.dataFormat !== 'channelsLast') {\n        outputs = tfc.transpose(outputs, [0, 3, 1, 2]);\n      }\n\n      if (this.bias != null) {\n        outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n      }\n\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs);\n      }\n\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n    let channelAxis;\n    let heightAxis;\n    let widthAxis;\n\n    if (this.dataFormat === 'channelsFirst') {\n      channelAxis = 1;\n      heightAxis = 2;\n      widthAxis = 3;\n    } else {\n      channelAxis = 3;\n      heightAxis = 1;\n      widthAxis = 2;\n    }\n\n    const kernelH = this.kernelSize[0];\n    const kernelW = this.kernelSize[1];\n    const strideH = this.strides[0];\n    const strideW = this.strides[1];\n    outputShape[channelAxis] = this.filters;\n    outputShape[heightAxis] = deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n    outputShape[widthAxis] = deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n    return outputShape;\n  }\n\n  getConfig() {\n    const config = super.getConfig();\n    delete config['dilationRate'];\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nConv2DTranspose.className = 'Conv2DTranspose';\nserialization.registerClass(Conv2DTranspose);\nexport class Conv3DTranspose extends Conv3D {\n  constructor(args) {\n    super(args);\n    this.inputSpec = [new InputSpec({\n      ndim: 5\n    })];\n\n    if (this.padding !== 'same' && this.padding !== 'valid') {\n      throw new ValueError(`Conv3DTranspose currently supports only padding modes 'same' ` + `and 'valid', but received padding mode ${this.padding}`);\n    }\n  }\n\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length !== 5) {\n      throw new ValueError('Input should have rank 5; Received input shape: ' + JSON.stringify(inputShape));\n    }\n\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError('The channel dimension of the inputs should be defined. ' + 'Found `None`.');\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n    this.kernel = this.addWeight('kernel', kernelShape, 'float32', this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    } // Set input spec.\n\n\n    this.inputSpec = [new InputSpec({\n      ndim: 5,\n      axes: {\n        [channelAxis]: inputDim\n      }\n    })];\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs);\n\n      if (input.shape.length !== 5) {\n        throw new ValueError(`Conv3DTranspose.call() expects input tensor to be rank-4, but ` + `received a tensor of rank-${input.shape.length}`);\n      }\n\n      const inputShape = input.shape;\n      const batchSize = inputShape[0];\n      let hAxis;\n      let wAxis;\n      let dAxis;\n\n      if (this.dataFormat === 'channelsFirst') {\n        dAxis = 2;\n        hAxis = 3;\n        wAxis = 4;\n      } else {\n        dAxis = 1;\n        hAxis = 2;\n        wAxis = 3;\n      }\n\n      const depth = inputShape[dAxis];\n      const height = inputShape[hAxis];\n      const width = inputShape[wAxis];\n      const kernelD = this.kernelSize[0];\n      const kernelH = this.kernelSize[1];\n      const kernelW = this.kernelSize[2];\n      const strideD = this.strides[0];\n      const strideH = this.strides[1];\n      const strideW = this.strides[2]; // Infer the dynamic output shape.\n\n      const outDepth = deconvLength(depth, strideD, kernelD, this.padding);\n      const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n      const outWidth = deconvLength(width, strideW, kernelW, this.padding); // Same as `conv2dTranspose`. We always assumes channelsLast.\n\n      const outputShape = [batchSize, outDepth, outHeight, outWidth, this.filters];\n\n      if (this.dataFormat !== 'channelsLast') {\n        input = tfc.transpose(input, [0, 2, 3, 4, 1]);\n      }\n\n      let outputs = tfc.conv3dTranspose(input, this.kernel.read(), outputShape, this.strides, this.padding);\n\n      if (this.dataFormat !== 'channelsLast') {\n        outputs = tfc.transpose(outputs, [0, 4, 1, 2, 3]);\n      }\n\n      if (this.bias !== null) {\n        outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n      }\n\n      if (this.activation !== null) {\n        outputs = this.activation.apply(outputs);\n      }\n\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n    let channelAxis;\n    let depthAxis;\n    let heightAxis;\n    let widthAxis;\n\n    if (this.dataFormat === 'channelsFirst') {\n      channelAxis = 1;\n      depthAxis = 2;\n      heightAxis = 3;\n      widthAxis = 4;\n    } else {\n      channelAxis = 4;\n      depthAxis = 1;\n      heightAxis = 2;\n      widthAxis = 3;\n    }\n\n    const kernelD = this.kernelSize[0];\n    const kernelH = this.kernelSize[1];\n    const kernelW = this.kernelSize[2];\n    const strideD = this.strides[0];\n    const strideH = this.strides[1];\n    const strideW = this.strides[2];\n    outputShape[channelAxis] = this.filters;\n    outputShape[depthAxis] = deconvLength(outputShape[depthAxis], strideD, kernelD, this.padding);\n    outputShape[heightAxis] = deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n    outputShape[widthAxis] = deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n    return outputShape;\n  }\n\n  getConfig() {\n    const config = super.getConfig();\n    delete config['dilationRate'];\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nConv3DTranspose.className = 'Conv3DTranspose';\nserialization.registerClass(Conv3DTranspose);\nexport class SeparableConv extends Conv {\n  constructor(rank, config) {\n    super(rank, config);\n    this.DEFAULT_DEPTHWISE_INITIALIZER = 'glorotUniform';\n    this.DEFAULT_POINTWISE_INITIALIZER = 'glorotUniform';\n    this.depthwiseKernel = null;\n    this.pointwiseKernel = null;\n\n    if (config.filters == null) {\n      throw new ValueError('The `filters` configuration field is required by SeparableConv, ' + 'but is unspecified.');\n    }\n\n    if (config.kernelInitializer != null || config.kernelRegularizer != null || config.kernelConstraint != null) {\n      throw new ValueError('Fields kernelInitializer, kernelRegularizer and kernelConstraint ' + 'are invalid for SeparableConv2D. Use depthwiseInitializer, ' + 'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, ' + 'pointwiseRegularizer and pointwiseConstraint instead.');\n    }\n\n    if (config.padding != null && config.padding !== 'same' && config.padding !== 'valid') {\n      throw new ValueError(`SeparableConv${this.rank}D supports only padding modes: ` + `'same' and 'valid', but received ${JSON.stringify(config.padding)}`);\n    }\n\n    this.depthMultiplier = config.depthMultiplier == null ? 1 : config.depthMultiplier;\n    this.depthwiseInitializer = getInitializer(config.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER);\n    this.depthwiseRegularizer = getRegularizer(config.depthwiseRegularizer);\n    this.depthwiseConstraint = getConstraint(config.depthwiseConstraint);\n    this.pointwiseInitializer = getInitializer(config.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER);\n    this.pointwiseRegularizer = getRegularizer(config.pointwiseRegularizer);\n    this.pointwiseConstraint = getConstraint(config.pointwiseConstraint);\n  }\n\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length < this.rank + 2) {\n      throw new ValueError(`Inputs to SeparableConv${this.rank}D should have rank ` + `${this.rank + 2}, but received input shape: ` + `${JSON.stringify(inputShape)}`);\n    }\n\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new ValueError(`The channel dimension of the inputs should be defined, ` + `but found ${JSON.stringify(inputShape[channelAxis])}`);\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const depthwiseKernelShape = this.kernelSize.concat([inputDim, this.depthMultiplier]);\n    const pointwiseKernelShape = [];\n\n    for (let i = 0; i < this.rank; ++i) {\n      pointwiseKernelShape.push(1);\n    }\n\n    pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);\n    const trainable = true;\n    this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, 'float32', this.depthwiseInitializer, this.depthwiseRegularizer, trainable, this.depthwiseConstraint);\n    this.pointwiseKernel = this.addWeight('pointwise_kernel', pointwiseKernelShape, 'float32', this.pointwiseInitializer, this.pointwiseRegularizer, trainable, this.pointwiseConstraint);\n\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, trainable, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n\n    this.inputSpec = [new InputSpec({\n      ndim: this.rank + 2,\n      axes: {\n        [channelAxis]: inputDim\n      }\n    })];\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let output;\n\n      if (this.rank === 1) {\n        throw new NotImplementedError('1D separable convolution is not implemented yet.');\n      } else if (this.rank === 2) {\n        if (this.dataFormat === 'channelsFirst') {\n          inputs = tfc.transpose(inputs, [0, 2, 3, 1]); // NCHW -> NHWC.\n        }\n\n        output = tfc.separableConv2d(inputs, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, 'NHWC');\n      }\n\n      if (this.useBias) {\n        output = K.biasAdd(output, this.bias.read(), this.dataFormat);\n      }\n\n      if (this.activation != null) {\n        output = this.activation.apply(output);\n      }\n\n      if (this.dataFormat === 'channelsFirst') {\n        output = tfc.transpose(output, [0, 3, 1, 2]); // NHWC -> NCHW.\n      }\n\n      return output;\n    });\n  }\n\n  getConfig() {\n    const config = super.getConfig();\n    delete config['rank'];\n    delete config['kernelInitializer'];\n    delete config['kernelRegularizer'];\n    delete config['kernelConstraint'];\n    config['depthwiseInitializer'] = serializeInitializer(this.depthwiseInitializer);\n    config['pointwiseInitializer'] = serializeInitializer(this.pointwiseInitializer);\n    config['depthwiseRegularizer'] = serializeRegularizer(this.depthwiseRegularizer);\n    config['pointwiseRegularizer'] = serializeRegularizer(this.pointwiseRegularizer);\n    config['depthwiseConstraint'] = serializeConstraint(this.depthwiseConstraint);\n    config['pointwiseConstraint'] = serializeConstraint(this.pointwiseConstraint);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nSeparableConv.className = 'SeparableConv';\nexport class SeparableConv2D extends SeparableConv {\n  constructor(args) {\n    super(2, args);\n  }\n\n}\n/** @nocollapse */\n\nSeparableConv2D.className = 'SeparableConv2D';\nserialization.registerClass(SeparableConv2D);\nexport class Conv1D extends Conv {\n  constructor(args) {\n    super(1, args);\n    Conv1D.verifyArgs(args);\n    this.inputSpec = [{\n      ndim: 3\n    }];\n  }\n\n  getConfig() {\n    const config = super.getConfig();\n    delete config['rank'];\n    delete config['dataFormat'];\n    return config;\n  }\n\n  static verifyArgs(args) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number' && !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 1)) {\n      throw new ValueError(`Conv1D expects config.kernelSize to be number or number[] with ` + `length 1, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n\n}\n/** @nocollapse */\n\nConv1D.className = 'Conv1D';\nserialization.registerClass(Conv1D);\nexport class Cropping2D extends Layer {\n  constructor(args) {\n    super(args);\n\n    if (typeof args.cropping === 'number') {\n      this.cropping = [[args.cropping, args.cropping], [args.cropping, args.cropping]];\n    } else if (typeof args.cropping[0] === 'number') {\n      this.cropping = [[args.cropping[0], args.cropping[0]], [args.cropping[1], args.cropping[1]]];\n    } else {\n      this.cropping = args.cropping;\n    }\n\n    this.dataFormat = args.dataFormat === undefined ? 'channelsLast' : args.dataFormat;\n    this.inputSpec = [{\n      ndim: 4\n    }];\n  }\n\n  computeOutputShape(inputShape) {\n    if (this.dataFormat === 'channelsFirst') {\n      return [inputShape[0], inputShape[1], inputShape[2] - this.cropping[0][0] - this.cropping[0][1], inputShape[3] - this.cropping[1][0] - this.cropping[1][1]];\n    } else {\n      return [inputShape[0], inputShape[1] - this.cropping[0][0] - this.cropping[0][1], inputShape[2] - this.cropping[1][0] - this.cropping[1][1], inputShape[3]];\n    }\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n\n      if (this.dataFormat === 'channelsLast') {\n        const hSliced = K.sliceAlongAxis(inputs, this.cropping[0][0], inputs.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);\n        return K.sliceAlongAxis(hSliced, this.cropping[1][0], inputs.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);\n      } else {\n        const hSliced = K.sliceAlongAxis(inputs, this.cropping[0][0], inputs.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);\n        return K.sliceAlongAxis(hSliced, this.cropping[1][0], inputs.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);\n      }\n    });\n  }\n\n  getConfig() {\n    const config = {\n      cropping: this.cropping,\n      dataFormat: this.dataFormat\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nCropping2D.className = 'Cropping2D';\nserialization.registerClass(Cropping2D);\nexport class UpSampling2D extends Layer {\n  constructor(args) {\n    super(args);\n    this.DEFAULT_SIZE = [2, 2];\n    this.inputSpec = [{\n      ndim: 4\n    }];\n    this.size = args.size == null ? this.DEFAULT_SIZE : args.size;\n    this.dataFormat = args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.interpolation = args.interpolation == null ? 'nearest' : args.interpolation;\n    checkInterpolationFormat(this.interpolation);\n  }\n\n  computeOutputShape(inputShape) {\n    if (this.dataFormat === 'channelsFirst') {\n      const height = inputShape[2] == null ? null : this.size[0] * inputShape[2];\n      const width = inputShape[3] == null ? null : this.size[1] * inputShape[3];\n      return [inputShape[0], inputShape[1], height, width];\n    } else {\n      const height = inputShape[1] == null ? null : this.size[0] * inputShape[1];\n      const width = inputShape[2] == null ? null : this.size[1] * inputShape[2];\n      return [inputShape[0], height, width, inputShape[3]];\n    }\n  }\n\n  call(inputs, kwargs) {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs);\n      const inputShape = input.shape;\n\n      if (this.dataFormat === 'channelsFirst') {\n        input = tfc.transpose(input, [0, 2, 3, 1]);\n        const height = this.size[0] * inputShape[2];\n        const width = this.size[1] * inputShape[3];\n        const resized = this.interpolation === 'nearest' ? tfc.image.resizeNearestNeighbor(input, [height, width]) : tfc.image.resizeBilinear(input, [height, width]);\n        return tfc.transpose(resized, [0, 3, 1, 2]);\n      } else {\n        const height = this.size[0] * inputShape[1];\n        const width = this.size[1] * inputShape[2];\n        return this.interpolation === 'nearest' ? tfc.image.resizeNearestNeighbor(input, [height, width]) : tfc.image.resizeBilinear(input, [height, width]);\n      }\n    });\n  }\n\n  getConfig() {\n    const config = {\n      size: this.size,\n      dataFormat: this.dataFormat,\n      interpolation: this.interpolation\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nUpSampling2D.className = 'UpSampling2D';\nserialization.registerClass(UpSampling2D);","map":{"version":3,"sources":["../../../../../../tfjs-layers/src/layers/convolutional.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Convolutional Layers\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {fused, serialization, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, Tensor5D, tidy} from '@tensorflow/tfjs-core';\n\nimport {Activation, getActivation, serializeActivation} from '../activations';\nimport {imageDataFormat} from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport {checkDataFormat, checkInterpolationFormat, checkPaddingMode} from '../common';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {ActivationIdentifier} from '../keras_format/activation_config';\nimport {DataFormat, InterpolationFormat, PaddingMode, Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport {convOutputLength, deconvLength, normalizeArray} from '../utils/conv_utils';\nimport * as generic_utils from '../utils/generic_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\n/**\n * Transpose and cast the input before the conv2d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv2DInput(\n    x: Tensor, dataFormat: DataFormat): Tensor {\n  // TODO(cais): Cast type to float32 if not.\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 1]);  // NCHW -> NHWC.\n    } else {\n      return x;\n    }\n  });\n}\n\n/**\n * Transpose and cast the input before the conv3d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv3DInput(\n    x: Tensor, dataFormat: DataFormat): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 4, 1]);  // NCDHW -> NDHWC.\n    } else {\n      return x;\n    }\n  });\n}\n\n/**\n * 1D-convolution with bias added.\n *\n * Porting Note: This function does not exist in the Python Keras backend.\n *   It is exactly the same as `conv2d`, except the added `bias`.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.\n * @param bias Bias, rank-3, of shape `[outDepth]`.\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1dWithBias(\n    x: Tensor, kernel: Tensor, bias: Tensor, strides = 1, padding = 'valid',\n    dataFormat?: DataFormat, dilationRate = 1): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    // Check the ranks of x, kernel and bias.\n    if (x.shape.length !== 3) {\n      throw new ValueError(\n          `The input of a conv1dWithBias operation should be 3, but is ` +\n          `${x.shape.length} instead.`);\n    }\n    if (kernel.shape.length !== 3) {\n      throw new ValueError(\n          `The kernel for a conv1dWithBias operation should be 3, but is ` +\n          `${kernel.shape.length} instead`);\n    }\n    if (bias != null && bias.shape.length !== 1) {\n      throw new ValueError(\n          `The bias for a conv1dWithBias operation should be 1, but is ` +\n          `${kernel.shape.length} instead`);\n    }\n    // TODO(cais): Support CAUSAL padding mode.\n    if (dataFormat === 'channelsFirst') {\n      x = tfc.transpose(x, [0, 2, 1]);  // NCW -> NWC.\n    }\n    if (padding === 'causal') {\n      throw new NotImplementedError(\n          'The support for CAUSAL padding mode in conv1dWithBias is not ' +\n          'implemented yet.');\n    }\n    let y: Tensor = tfc.conv1d(\n        x as Tensor2D | Tensor3D, kernel as Tensor3D, strides,\n        padding === 'same' ? 'same' : 'valid', 'NWC', dilationRate);\n    if (bias != null) {\n      y = K.biasAdd(y, bias);\n    }\n    return y;\n  });\n}\n\n/**\n * 1D-convolution.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.s\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1d(\n    x: Tensor, kernel: Tensor, strides = 1, padding = 'valid',\n    dataFormat?: DataFormat, dilationRate = 1): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv1dWithBias(\n        x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n\n/**\n * 2D Convolution\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 2D pooling.\n */\nexport function conv2d(\n    x: Tensor, kernel: Tensor, strides = [1, 1], padding = 'valid',\n    dataFormat?: DataFormat, dilationRate?: [number, number]): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv2dWithBiasActivation(\n        x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n\n/**\n * 2D Convolution with an added bias and optional activation.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv2d`, except the added `bias`.\n */\nexport function conv2dWithBiasActivation(\n    x: Tensor, kernel: Tensor, bias: Tensor, strides = [1, 1],\n    padding = 'valid', dataFormat?: DataFormat, dilationRate?: [number, number],\n    activation: fused.Activation = null): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    if (x.rank !== 3 && x.rank !== 4) {\n      throw new ValueError(\n          `conv2dWithBiasActivation expects input to be of rank 3 or 4, ` +\n          `but received ${x.rank}.`);\n    }\n    if (kernel.rank !== 3 && kernel.rank !== 4) {\n      throw new ValueError(\n          `conv2dWithBiasActivation expects kernel to be of rank 3 or 4, ` +\n          `but received ${x.rank}.`);\n    }\n    let y = preprocessConv2DInput(x, dataFormat);\n    if (padding === 'causal') {\n      throw new NotImplementedError(\n          'The support for CAUSAL padding mode in conv1dWithBias is not ' +\n          'implemented yet.');\n    }\n    y = tfc.fused.conv2d({\n      x: y as Tensor3D | Tensor4D,\n      filter: kernel as Tensor4D,\n      strides: strides as [number, number],\n      pad: padding === 'same' ? 'same' : 'valid',\n      dilations: dilationRate,\n      dataFormat: 'NHWC',\n      bias,\n      activation\n    });\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n    return y;\n  });\n}\n\n/**\n * 3D Convolution.\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 3D convolution.\n */\nexport function conv3d(\n    x: Tensor, kernel: Tensor, strides = [1, 1, 1], padding = 'valid',\n    dataFormat?: DataFormat, dilationRate?: [number, number, number]): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv3dWithBias(\n        x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n\n/**\n * 3D Convolution with an added bias.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv3d`, except the added `bias`.\n */\nexport function conv3dWithBias(\n    x: Tensor, kernel: Tensor, bias: Tensor, strides = [1, 1, 1],\n    padding = 'valid', dataFormat?: DataFormat,\n    dilationRate?: [number, number, number]): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    if (x.rank !== 4 && x.rank !== 5) {\n      throw new ValueError(\n          `conv3dWithBias expects input to be of rank 4 or 5, but received ` +\n          `${x.rank}.`);\n    }\n    if (kernel.rank !== 4 && kernel.rank !== 5) {\n      throw new ValueError(\n          `conv3dWithBias expects kernel to be of rank 4 or 5, but received ` +\n          `${x.rank}.`);\n    }\n    let y = preprocessConv3DInput(x, dataFormat);\n    if (padding === 'causal') {\n      throw new NotImplementedError(\n          'The support for CAUSAL padding mode in conv3dWithBias is not ' +\n          'implemented yet.');\n    }\n    y = tfc.conv3d(\n        y as Tensor4D | tfc.Tensor<tfc.Rank.R5>,\n        kernel as tfc.Tensor<tfc.Rank.R5>, strides as [number, number, number],\n        padding === 'same' ? 'same' : 'valid', 'NDHWC', dilationRate);\n    if (bias != null) {\n      y = K.biasAdd(y, bias as Tensor1D);\n    }\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 4, 1, 2, 3]);\n    }\n    return y;\n  });\n}\n\n/**\n * Base LayerConfig for depthwise and non-depthwise convolutional layers.\n */\nexport declare interface BaseConvLayerArgs extends LayerArgs {\n  /**\n   * The dimensions of the convolution window. If kernelSize is a number, the\n   * convolutional window will be square.\n   */\n  kernelSize: number|number[];\n\n  /**\n   * The strides of the convolution in each dimension. If strides is a number,\n   * strides in both dimensions are equal.\n   *\n   * Specifying any stride value != 1 is incompatible with specifying any\n   * `dilationRate` value != 1.\n   */\n  strides?: number|number[];\n\n  /**\n   * Padding mode.\n   */\n  padding?: PaddingMode;\n\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `channels_last` corresponds to inputs with shape\n   *   `(batch, ..., channels)`\n   *\n   *  `channels_first` corresponds to inputs with shape `(batch, channels,\n   * ...)`.\n   *\n   * Defaults to `channels_last`.\n   */\n  dataFormat?: DataFormat;\n\n  /**\n   * The dilation rate to use for the dilated convolution in each dimension.\n   * Should be an integer or array of two or three integers.\n   *\n   * Currently, specifying any `dilationRate` value != 1 is incompatible with\n   * specifying any `strides` value != 1.\n   */\n  dilationRate?: number|[number]|[number, number]|[number, number, number];\n\n  /**\n   * Activation function of the layer.\n   *\n   * If you don't specify the activation, none is applied.\n   */\n  activation?: ActivationIdentifier;\n\n  /**\n   * Whether the layer uses a bias vector. Defaults to `true`.\n   */\n  useBias?: boolean;\n\n  /**\n   * Initializer for the convolutional kernel weights matrix.\n   */\n  kernelInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the bias vector.\n   */\n  biasInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Constraint for the convolutional kernel weights.\n   */\n  kernelConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint for the bias vector.\n   */\n  biasConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Regularizer function applied to the kernel weights matrix.\n   */\n  kernelRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the bias vector.\n   */\n  biasRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the activation.\n   */\n  activityRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\n/**\n * LayerConfig for non-depthwise convolutional layers.\n * Applies to non-depthwise convolution of all ranks (e.g, Conv1D, Conv2D,\n * Conv3D).\n */\nexport declare interface ConvLayerArgs extends BaseConvLayerArgs {\n  /**\n   * The dimensionality of the output space (i.e. the number of filters in the\n   * convolution).\n   */\n  filters: number;\n}\n\n/**\n * Abstract convolution layer.\n */\nexport abstract class BaseConv extends Layer {\n  protected readonly rank: number;\n  protected readonly kernelSize: number[];\n  protected readonly strides: number[];\n  protected readonly padding: PaddingMode;\n  protected readonly dataFormat: DataFormat;\n  protected readonly activation: Activation;\n  protected readonly useBias: boolean;\n  protected readonly dilationRate: number[];\n\n  // Bias-related members are here because all convolution subclasses use the\n  // same configuration parmeters to control bias.  Kernel-related members\n  // are in subclass `Conv` because some subclasses use different parameters to\n  // control kernel properties, for instance, `DepthwiseConv2D` uses\n  // `depthwiseInitializer` instead of `kernelInitializer`.\n  protected readonly biasInitializer?: Initializer;\n  protected readonly biasConstraint?: Constraint;\n  protected readonly biasRegularizer?: Regularizer;\n\n  protected bias: LayerVariable = null;\n\n  readonly DEFAULT_KERNEL_INITIALIZER: InitializerIdentifier = 'glorotNormal';\n  readonly DEFAULT_BIAS_INITIALIZER: InitializerIdentifier = 'zeros';\n\n  constructor(rank: number, args: BaseConvLayerArgs) {\n    super(args as LayerArgs);\n    BaseConv.verifyArgs(args);\n    this.rank = rank;\n    generic_utils.assertPositiveInteger(this.rank, 'rank');\n    if (this.rank !== 1 && this.rank !== 2 && this.rank !== 3) {\n      throw new NotImplementedError(\n          `Convolution layer for rank other than 1, 2, or 3 (${\n              this.rank}) is ` +\n          `not implemented yet.`);\n    }\n    this.kernelSize = normalizeArray(args.kernelSize, rank, 'kernelSize');\n    this.strides = normalizeArray(\n        args.strides == null ? 1 : args.strides, rank, 'strides');\n    this.padding = args.padding == null ? 'valid' : args.padding;\n    checkPaddingMode(this.padding);\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.activation = getActivation(args.activation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.dilationRate = normalizeArray(\n        args.dilationRate == null ? 1 : args.dilationRate, rank,\n        'dilationRate');\n    if (this.rank === 1 &&\n        (Array.isArray(this.dilationRate) && this.dilationRate.length !== 1)) {\n      throw new ValueError(\n          `dilationRate must be a number or an array of a single number ` +\n          `for 1D convolution, but received ` +\n          `${JSON.stringify(this.dilationRate)}`);\n    } else if (this.rank === 2) {\n      if (typeof this.dilationRate === 'number') {\n        this.dilationRate = [this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 2) {\n        throw new ValueError(\n            `dilationRate must be a number or array of two numbers for 2D ` +\n            `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    } else if (this.rank === 3) {\n      if (typeof this.dilationRate === 'number') {\n        this.dilationRate =\n            [this.dilationRate, this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 3) {\n        throw new ValueError(\n            `dilationRate must be a number or array of three numbers for 3D ` +\n            `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    }\n  }\n\n  protected static verifyArgs(args: BaseConvLayerArgs) {\n    // Check config.kernelSize type and shape.\n    generic_utils.assert(\n        'kernelSize' in args, `required key 'kernelSize' not in config`);\n    if (typeof args.kernelSize !== 'number' &&\n        !generic_utils.checkArrayTypeAndLength(\n            args.kernelSize, 'number', 1, 3)) {\n      throw new ValueError(\n          `BaseConv expects config.kernelSize to be number or number[] with ` +\n          `length 1, 2, or 3, but received ${\n              JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      kernelSize: this.kernelSize,\n      strides: this.strides,\n      padding: this.padding,\n      dataFormat: this.dataFormat,\n      dilationRate: this.dilationRate,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      biasConstraint: serializeConstraint(this.biasConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n\n/**\n * Abstract nD convolution layer.  Ancestor of convolution layers which reduce\n * across channels, i.e., Conv1D and Conv2D, but not DepthwiseConv2D.\n */\nexport abstract class Conv extends BaseConv {\n  protected readonly filters: number;\n\n  protected kernel: LayerVariable = null;\n\n  // Bias-related properties are stored in the superclass `BaseConv` because all\n  // convolution subclasses use the same configuration parameters to control\n  // bias. Kernel-related properties are defined here rather than in the\n  // superclass because some convolution subclasses use different names and\n  // configuration parameters for their internal kernel state.\n  protected readonly kernelInitializer?: Initializer;\n  protected readonly kernelConstraint?: Constraint;\n  protected readonly kernelRegularizer?: Regularizer;\n\n  constructor(rank: number, args: ConvLayerArgs) {\n    super(rank, args as BaseConvLayerArgs);\n    Conv.verifyArgs(args);\n    this.filters = args.filters;\n    generic_utils.assertPositiveInteger(this.filters, 'filters');\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(\n          `The channel dimension of the input should be defined. ` +\n          `Found ${inputShape[channelAxis]}`);\n    }\n    const inputDim = inputShape[channelAxis];\n\n    const kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n\n    this.kernel = this.addWeight(\n        'kernel', kernelShape, null, this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], null, this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    this.inputSpec = [{ndim: this.rank + 2, axes: {[channelAxis]: inputDim}}];\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let outputs: Tensor;\n      const biasValue = this.bias == null ? null : this.bias.read();\n      const fusedActivationName = generic_utils.mapActivationToFusedKernel(\n          this.activation.getClassName());\n\n      if (fusedActivationName != null && this.rank === 2) {\n        outputs = conv2dWithBiasActivation(\n            inputs, this.kernel.read(), biasValue, this.strides, this.padding,\n            this.dataFormat, this.dilationRate as [number, number],\n            fusedActivationName);\n      } else {\n        if (this.rank === 1) {\n          outputs = conv1dWithBias(\n              inputs, this.kernel.read(), biasValue, this.strides[0],\n              this.padding, this.dataFormat, this.dilationRate[0]);\n        } else if (this.rank === 2) {\n          // TODO(cais): Move up to constructor.\n          outputs = conv2dWithBiasActivation(\n              inputs, this.kernel.read(), biasValue, this.strides, this.padding,\n              this.dataFormat, this.dilationRate as [number, number]);\n        } else if (this.rank === 3) {\n          outputs = conv3dWithBias(\n              inputs, this.kernel.read(), biasValue, this.strides, this.padding,\n              this.dataFormat, this.dilationRate as [number, number, number]);\n        } else {\n          throw new NotImplementedError(\n              'convolutions greater than 3D are not implemented yet.');\n        }\n\n        if (this.activation != null) {\n          outputs = this.activation.apply(outputs);\n        }\n      }\n\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const newSpace: number[] = [];\n    const space = (this.dataFormat === 'channelsLast') ?\n        inputShape.slice(1, inputShape.length - 1) :\n        inputShape.slice(2);\n    for (let i = 0; i < space.length; ++i) {\n      const newDim = convOutputLength(\n          space[i], this.kernelSize[i], this.padding, this.strides[i],\n          typeof this.dilationRate === 'number' ? this.dilationRate :\n                                                  this.dilationRate[i]);\n      newSpace.push(newDim);\n    }\n\n    let outputShape = [inputShape[0]];\n    if (this.dataFormat === 'channelsLast') {\n      outputShape = outputShape.concat(newSpace);\n      outputShape.push(this.filters);\n    } else {\n      outputShape.push(this.filters);\n      outputShape = outputShape.concat(newSpace);\n    }\n    return outputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      filters: this.filters,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  protected static verifyArgs(args: ConvLayerArgs) {\n    // Check config.filters type, shape, and value.\n    if (!('filters' in args) || typeof args.filters !== 'number' ||\n        args.filters < 1) {\n      throw new ValueError(\n          `Convolution layer expected config.filters to be a 'number' > 0 ` +\n          `but got ${JSON.stringify(args.filters)}`);\n    }\n  }\n}\n\nexport class Conv2D extends Conv {\n  /** @nocollapse */\n  static className = 'Conv2D';\n  constructor(args: ConvLayerArgs) {\n    super(2, args);\n    Conv2D.verifyArgs(args);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    return config;\n  }\n\n  protected static verifyArgs(args: ConvLayerArgs) {\n    // config.kernelSize must be a number or array of numbers.\n    if ((typeof args.kernelSize !== 'number') &&\n        !generic_utils.checkArrayTypeAndLength(\n            args.kernelSize, 'number', 1, 2)) {\n      throw new ValueError(\n          `Conv2D expects config.kernelSize to be number or number[] with ` +\n          `length 1 or 2, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n}\nserialization.registerClass(Conv2D);\n\nexport class Conv3D extends Conv {\n  /** @nocollapse */\n  static className = 'Conv3D';\n  constructor(args: ConvLayerArgs) {\n    super(3, args);\n    Conv3D.verifyArgs(args);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    return config;\n  }\n\n  protected static verifyArgs(args: ConvLayerArgs) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number') {\n      if (!(Array.isArray(args.kernelSize) &&\n            (args.kernelSize.length === 1 || args.kernelSize.length === 3))) {\n        throw new ValueError(\n            `Conv3D expects config.kernelSize to be number or` +\n            ` [number, number, number], but received ${\n                JSON.stringify(args.kernelSize)}.`);\n      }\n    }\n  }\n}\nserialization.registerClass(Conv3D);\n\nexport class Conv2DTranspose extends Conv2D {\n  /** @nocollapse */\n  static className = 'Conv2DTranspose';\n  inputSpec: InputSpec[];\n\n  constructor(args: ConvLayerArgs) {\n    super(args);\n    this.inputSpec = [new InputSpec({ndim: 4})];\n\n    if (this.padding !== 'same' && this.padding !== 'valid') {\n      throw new ValueError(\n          `Conv2DTranspose currently supports only padding modes 'same' ` +\n          `and 'valid', but received padding mode ${this.padding}`);\n    }\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length !== 4) {\n      throw new ValueError(\n          'Input should have rank 4; Received input shape: ' +\n          JSON.stringify(inputShape));\n    }\n\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(\n          'The channel dimension of the inputs should be defined. ' +\n          'Found `None`.');\n    }\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n\n    this.kernel = this.addWeight(\n        'kernel', kernelShape, 'float32', this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], 'float32', this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    // Set input spec.\n    this.inputSpec =\n        [new InputSpec({ndim: 4, axes: {[channelAxis]: inputDim}})];\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs);\n      if (input.shape.length !== 4) {\n        throw new ValueError(\n            `Conv2DTranspose.call() expects input tensor to be rank-4, but ` +\n            `received a tensor of rank-${input.shape.length}`);\n      }\n\n      const inputShape = input.shape;\n      const batchSize = inputShape[0];\n\n      let hAxis: number;\n      let wAxis: number;\n      if (this.dataFormat === 'channelsFirst') {\n        hAxis = 2;\n        wAxis = 3;\n      } else {\n        hAxis = 1;\n        wAxis = 2;\n      }\n\n      const height = inputShape[hAxis];\n      const width = inputShape[wAxis];\n      const kernelH = this.kernelSize[0];\n      const kernelW = this.kernelSize[1];\n      const strideH = this.strides[0];\n      const strideW = this.strides[1];\n\n      // Infer the dynamic output shape.\n      const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n      const outWidth = deconvLength(width, strideW, kernelW, this.padding);\n\n      // Porting Note: We don't branch based on `this.dataFormat` here,\n      // because\n      //   the tjfs-core function `conv2dTranspose` called below always\n      //   assumes channelsLast.\n      const outputShape: [number, number, number, number] =\n          [batchSize, outHeight, outWidth, this.filters];\n\n      if (this.dataFormat !== 'channelsLast') {\n        input = tfc.transpose(input, [0, 2, 3, 1]);\n      }\n      let outputs = tfc.conv2dTranspose(\n          input as Tensor4D, this.kernel.read() as Tensor4D, outputShape,\n          this.strides as [number, number], this.padding as 'same' | 'valid');\n      if (this.dataFormat !== 'channelsLast') {\n        outputs = tfc.transpose(outputs, [0, 3, 1, 2]);\n      }\n\n      if (this.bias != null) {\n        outputs =\n            K.biasAdd(outputs, this.bias.read(), this.dataFormat) as Tensor4D;\n      }\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs) as Tensor4D;\n      }\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n\n    let channelAxis: number;\n    let heightAxis: number;\n    let widthAxis: number;\n    if (this.dataFormat === 'channelsFirst') {\n      channelAxis = 1;\n      heightAxis = 2;\n      widthAxis = 3;\n    } else {\n      channelAxis = 3;\n      heightAxis = 1;\n      widthAxis = 2;\n    }\n\n    const kernelH = this.kernelSize[0];\n    const kernelW = this.kernelSize[1];\n    const strideH = this.strides[0];\n    const strideW = this.strides[1];\n\n    outputShape[channelAxis] = this.filters;\n    outputShape[heightAxis] =\n        deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n    outputShape[widthAxis] =\n        deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n    return outputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['dilationRate'];\n    return config;\n  }\n}\nserialization.registerClass(Conv2DTranspose);\n\nexport class Conv3DTranspose extends Conv3D {\n  /** @nocollapse */\n  static className = 'Conv3DTranspose';\n  inputSpec: InputSpec[];\n\n  constructor(args: ConvLayerArgs) {\n    super(args);\n    this.inputSpec = [new InputSpec({ndim: 5})];\n\n    if (this.padding !== 'same' && this.padding !== 'valid') {\n      throw new ValueError(\n          `Conv3DTranspose currently supports only padding modes 'same' ` +\n          `and 'valid', but received padding mode ${this.padding}`);\n    }\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length !== 5) {\n      throw new ValueError(\n          'Input should have rank 5; Received input shape: ' +\n          JSON.stringify(inputShape));\n    }\n\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(\n          'The channel dimension of the inputs should be defined. ' +\n          'Found `None`.');\n    }\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n\n    this.kernel = this.addWeight(\n        'kernel', kernelShape, 'float32', this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], 'float32', this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    // Set input spec.\n    this.inputSpec =\n        [new InputSpec({ndim: 5, axes: {[channelAxis]: inputDim}})];\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tfc.tidy<tfc.Tensor5D>(() => {\n      let input = getExactlyOneTensor(inputs);\n      if (input.shape.length !== 5) {\n        throw new ValueError(\n            `Conv3DTranspose.call() expects input tensor to be rank-4, but ` +\n            `received a tensor of rank-${input.shape.length}`);\n      }\n\n      const inputShape = input.shape;\n      const batchSize = inputShape[0];\n\n      let hAxis: number;\n      let wAxis: number;\n      let dAxis: number;\n\n      if (this.dataFormat === 'channelsFirst') {\n        dAxis = 2;\n        hAxis = 3;\n        wAxis = 4;\n      } else {\n        dAxis = 1;\n        hAxis = 2;\n        wAxis = 3;\n      }\n\n      const depth = inputShape[dAxis];\n      const height = inputShape[hAxis];\n      const width = inputShape[wAxis];\n      const kernelD = this.kernelSize[0];\n      const kernelH = this.kernelSize[1];\n      const kernelW = this.kernelSize[2];\n      const strideD = this.strides[0];\n      const strideH = this.strides[1];\n      const strideW = this.strides[2];\n\n      // Infer the dynamic output shape.\n      const outDepth = deconvLength(depth, strideD, kernelD, this.padding);\n      const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n      const outWidth = deconvLength(width, strideW, kernelW, this.padding);\n\n      // Same as `conv2dTranspose`. We always assumes channelsLast.\n      const outputShape: [number, number, number, number, number] =\n          [batchSize, outDepth, outHeight, outWidth, this.filters];\n      if (this.dataFormat !== 'channelsLast') {\n        input = tfc.transpose(input, [0, 2, 3, 4, 1]);\n      }\n      let outputs = tfc.conv3dTranspose(\n          input as Tensor5D, this.kernel.read() as Tensor5D, outputShape,\n          this.strides as [number, number, number],\n          this.padding as 'same' | 'valid');\n      if (this.dataFormat !== 'channelsLast') {\n        outputs = tfc.transpose(outputs, [0, 4, 1, 2, 3]);\n      }\n\n      if (this.bias !== null) {\n        outputs =\n            K.biasAdd(outputs, this.bias.read(), this.dataFormat) as Tensor5D;\n      }\n      if (this.activation !== null) {\n        outputs = this.activation.apply(outputs) as Tensor5D;\n      }\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n\n    let channelAxis: number;\n    let depthAxis: number;\n    let heightAxis: number;\n    let widthAxis: number;\n    if (this.dataFormat === 'channelsFirst') {\n      channelAxis = 1;\n      depthAxis = 2;\n      heightAxis = 3;\n      widthAxis = 4;\n    } else {\n      channelAxis = 4;\n      depthAxis = 1;\n      heightAxis = 2;\n      widthAxis = 3;\n    }\n\n    const kernelD = this.kernelSize[0];\n    const kernelH = this.kernelSize[1];\n    const kernelW = this.kernelSize[2];\n    const strideD = this.strides[0];\n    const strideH = this.strides[1];\n    const strideW = this.strides[2];\n\n    outputShape[channelAxis] = this.filters;\n    outputShape[depthAxis] =\n        deconvLength(outputShape[depthAxis], strideD, kernelD, this.padding);\n    outputShape[heightAxis] =\n        deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n    outputShape[widthAxis] =\n        deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n    return outputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['dilationRate'];\n    return config;\n  }\n}\nserialization.registerClass(Conv3DTranspose);\n\nexport declare interface SeparableConvLayerArgs extends ConvLayerArgs {\n  /**\n   * The number of depthwise convolution output channels for each input\n   * channel.\n   * The total number of depthwise convolution output channels will be equal\n   * to `filtersIn * depthMultiplier`. Default: 1.\n   */\n  depthMultiplier?: number;\n\n  /**\n   * Initializer for the depthwise kernel matrix.\n   */\n  depthwiseInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the pointwise kernel matrix.\n   */\n  pointwiseInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Regularizer function applied to the depthwise kernel matrix.\n   */\n  depthwiseRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the pointwise kernel matrix.\n   */\n  pointwiseRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Constraint function applied to the depthwise kernel matrix.\n   */\n  depthwiseConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the pointwise kernel matrix.\n   */\n  pointwiseConstraint?: ConstraintIdentifier|Constraint;\n}\n\nexport class SeparableConv extends Conv {\n  /** @nocollapse */\n  static className = 'SeparableConv';\n\n  readonly depthMultiplier: number;\n\n  protected readonly depthwiseInitializer?: Initializer;\n  protected readonly depthwiseRegularizer?: Regularizer;\n  protected readonly depthwiseConstraint?: Constraint;\n  protected readonly pointwiseInitializer?: Initializer;\n  protected readonly pointwiseRegularizer?: Regularizer;\n  protected readonly pointwiseConstraint?: Constraint;\n\n  readonly DEFAULT_DEPTHWISE_INITIALIZER: InitializerIdentifier =\n      'glorotUniform';\n  readonly DEFAULT_POINTWISE_INITIALIZER: InitializerIdentifier =\n      'glorotUniform';\n\n  protected depthwiseKernel: LayerVariable = null;\n  protected pointwiseKernel: LayerVariable = null;\n\n  constructor(rank: number, config?: SeparableConvLayerArgs) {\n    super(rank, config);\n\n    if (config.filters == null) {\n      throw new ValueError(\n          'The `filters` configuration field is required by SeparableConv, ' +\n          'but is unspecified.');\n    }\n    if (config.kernelInitializer != null || config.kernelRegularizer != null ||\n        config.kernelConstraint != null) {\n      throw new ValueError(\n          'Fields kernelInitializer, kernelRegularizer and kernelConstraint ' +\n          'are invalid for SeparableConv2D. Use depthwiseInitializer, ' +\n          'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, ' +\n          'pointwiseRegularizer and pointwiseConstraint instead.');\n    }\n    if (config.padding != null && config.padding !== 'same' &&\n        config.padding !== 'valid') {\n      throw new ValueError(\n          `SeparableConv${this.rank}D supports only padding modes: ` +\n          `'same' and 'valid', but received ${JSON.stringify(config.padding)}`);\n    }\n\n    this.depthMultiplier =\n        config.depthMultiplier == null ? 1 : config.depthMultiplier;\n    this.depthwiseInitializer = getInitializer(\n        config.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER);\n    this.depthwiseRegularizer = getRegularizer(config.depthwiseRegularizer);\n    this.depthwiseConstraint = getConstraint(config.depthwiseConstraint);\n    this.pointwiseInitializer = getInitializer(\n        config.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER);\n    this.pointwiseRegularizer = getRegularizer(config.pointwiseRegularizer);\n    this.pointwiseConstraint = getConstraint(config.pointwiseConstraint);\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length < this.rank + 2) {\n      throw new ValueError(\n          `Inputs to SeparableConv${this.rank}D should have rank ` +\n          `${this.rank + 2}, but received input shape: ` +\n          `${JSON.stringify(inputShape)}`);\n    }\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new ValueError(\n          `The channel dimension of the inputs should be defined, ` +\n          `but found ${JSON.stringify(inputShape[channelAxis])}`);\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const depthwiseKernelShape =\n        this.kernelSize.concat([inputDim, this.depthMultiplier]);\n    const pointwiseKernelShape = [];\n    for (let i = 0; i < this.rank; ++i) {\n      pointwiseKernelShape.push(1);\n    }\n    pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);\n\n    const trainable = true;\n    this.depthwiseKernel = this.addWeight(\n        'depthwise_kernel', depthwiseKernelShape, 'float32',\n        this.depthwiseInitializer, this.depthwiseRegularizer, trainable,\n        this.depthwiseConstraint);\n    this.pointwiseKernel = this.addWeight(\n        'pointwise_kernel', pointwiseKernelShape, 'float32',\n        this.pointwiseInitializer, this.pointwiseRegularizer, trainable,\n        this.pointwiseConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], 'float32', this.biasInitializer,\n          this.biasRegularizer, trainable, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n\n    this.inputSpec =\n        [new InputSpec({ndim: this.rank + 2, axes: {[channelAxis]: inputDim}})];\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n\n      let output: Tensor;\n      if (this.rank === 1) {\n        throw new NotImplementedError(\n            '1D separable convolution is not implemented yet.');\n      } else if (this.rank === 2) {\n        if (this.dataFormat === 'channelsFirst') {\n          inputs = tfc.transpose(inputs, [0, 2, 3, 1]);  // NCHW -> NHWC.\n        }\n\n        output = tfc.separableConv2d(\n            inputs as Tensor4D, this.depthwiseKernel.read() as Tensor4D,\n            this.pointwiseKernel.read() as Tensor4D,\n            this.strides as [number, number], this.padding as 'same' | 'valid',\n            this.dilationRate as [number, number], 'NHWC');\n      }\n\n      if (this.useBias) {\n        output = K.biasAdd(output, this.bias.read(), this.dataFormat);\n      }\n      if (this.activation != null) {\n        output = this.activation.apply(output);\n      }\n\n      if (this.dataFormat === 'channelsFirst') {\n        output = tfc.transpose(output, [0, 3, 1, 2]);  // NHWC -> NCHW.\n      }\n      return output;\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    delete config['kernelInitializer'];\n    delete config['kernelRegularizer'];\n    delete config['kernelConstraint'];\n    config['depthwiseInitializer'] =\n        serializeInitializer(this.depthwiseInitializer);\n    config['pointwiseInitializer'] =\n        serializeInitializer(this.pointwiseInitializer);\n    config['depthwiseRegularizer'] =\n        serializeRegularizer(this.depthwiseRegularizer);\n    config['pointwiseRegularizer'] =\n        serializeRegularizer(this.pointwiseRegularizer);\n    config['depthwiseConstraint'] =\n        serializeConstraint(this.depthwiseConstraint);\n    config['pointwiseConstraint'] =\n        serializeConstraint(this.pointwiseConstraint);\n    return config;\n  }\n}\n\nexport class SeparableConv2D extends SeparableConv {\n  /** @nocollapse */\n  static className = 'SeparableConv2D';\n  constructor(args?: SeparableConvLayerArgs) {\n    super(2, args);\n  }\n}\nserialization.registerClass(SeparableConv2D);\n\nexport class Conv1D extends Conv {\n  /** @nocollapse */\n  static className = 'Conv1D';\n  constructor(args: ConvLayerArgs) {\n    super(1, args);\n    Conv1D.verifyArgs(args);\n    this.inputSpec = [{ndim: 3}];\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    delete config['dataFormat'];\n    return config;\n  }\n\n  protected static verifyArgs(args: ConvLayerArgs) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number' &&\n        !generic_utils.checkArrayTypeAndLength(\n            args.kernelSize, 'number', 1, 1)) {\n      throw new ValueError(\n          `Conv1D expects config.kernelSize to be number or number[] with ` +\n          `length 1, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n}\nserialization.registerClass(Conv1D);\n\nexport declare interface Cropping2DLayerArgs extends LayerArgs {\n  /**\n   * Dimension of the cropping along the width and the height.\n   * - If integer: the same symmetric cropping\n   *  is applied to width and height.\n   * - If list of 2 integers:\n   *   interpreted as two different\n   *   symmetric cropping values for height and width:\n   *   `[symmetric_height_crop, symmetric_width_crop]`.\n   * - If a list of 2 list of 2 integers:\n   *   interpreted as\n   *   `[[top_crop, bottom_crop], [left_crop, right_crop]]`\n   */\n  cropping: number|[number, number]|[[number, number], [number, number]];\n\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `channels_last` corresponds to inputs with shape\n   *   `(batch, ..., channels)`\n   *\n   * `channels_first` corresponds to inputs with shape\n   *   `(batch, channels, ...)`\n   *\n   * Defaults to `channels_last`.\n   */\n  dataFormat?: DataFormat;\n}\n\nexport class Cropping2D extends Layer {\n  /** @nocollapse */\n  static className = 'Cropping2D';\n  protected readonly cropping: [[number, number], [number, number]];\n  protected readonly dataFormat: DataFormat;\n\n  constructor(args: Cropping2DLayerArgs) {\n    super(args);\n    if (typeof args.cropping === 'number') {\n      this.cropping =\n          [[args.cropping, args.cropping], [args.cropping, args.cropping]];\n    } else if (typeof args.cropping[0] === 'number') {\n      this.cropping = [\n        [args.cropping[0], args.cropping[0]],\n        [args.cropping[1] as number, args.cropping[1] as number]\n      ];\n    } else {\n      this.cropping = args.cropping as [[number, number], [number, number]];\n    }\n    this.dataFormat =\n        args.dataFormat === undefined ? 'channelsLast' : args.dataFormat;\n    this.inputSpec = [{ndim: 4}];\n  }\n\n  computeOutputShape(inputShape: Shape): Shape {\n    if (this.dataFormat === 'channelsFirst') {\n      return [\n        inputShape[0], inputShape[1],\n        inputShape[2] - this.cropping[0][0] - this.cropping[0][1],\n        inputShape[3] - this.cropping[1][0] - this.cropping[1][1]\n      ];\n    } else {\n      return [\n        inputShape[0],\n        inputShape[1] - this.cropping[0][0] - this.cropping[0][1],\n        inputShape[2] - this.cropping[1][0] - this.cropping[1][1], inputShape[3]\n      ];\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n\n      if (this.dataFormat === 'channelsLast') {\n        const hSliced = K.sliceAlongAxis(\n            inputs, this.cropping[0][0],\n            inputs.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);\n        return K.sliceAlongAxis(\n            hSliced, this.cropping[1][0],\n            inputs.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);\n      } else {\n        const hSliced = K.sliceAlongAxis(\n            inputs, this.cropping[0][0],\n            inputs.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);\n        return K.sliceAlongAxis(\n            hSliced, this.cropping[1][0],\n            inputs.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);\n      }\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {cropping: this.cropping, dataFormat: this.dataFormat};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Cropping2D);\n\nexport declare interface UpSampling2DLayerArgs extends LayerArgs {\n  /**\n   * The upsampling factors for rows and columns.\n   *\n   * Defaults to `[2, 2]`.\n   */\n  size?: number[];\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `\"channelsLast\"` corresponds to inputs with shape\n   *   `[batch, ..., channels]`\n   *\n   *  `\"channelsFirst\"` corresponds to inputs with shape `[batch, channels,\n   * ...]`.\n   *\n   * Defaults to `\"channelsLast\"`.\n   */\n  dataFormat?: DataFormat;\n  /**\n   * The interpolation mechanism, one of `\"nearest\"` or `\"bilinear\"`, default\n   * to `\"nearest\"`.\n   */\n  interpolation?: InterpolationFormat;\n}\n\nexport class UpSampling2D extends Layer {\n  /** @nocollapse */\n  static className = 'UpSampling2D';\n  protected readonly DEFAULT_SIZE = [2, 2];\n  protected readonly size: number[];\n  protected readonly dataFormat: DataFormat;\n  protected readonly interpolation: InterpolationFormat;\n\n  constructor(args: UpSampling2DLayerArgs) {\n    super(args);\n    this.inputSpec = [{ndim: 4}];\n    this.size = args.size == null ? this.DEFAULT_SIZE : args.size;\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.interpolation =\n        args.interpolation == null ? 'nearest' : args.interpolation;\n    checkInterpolationFormat(this.interpolation);\n  }\n\n  computeOutputShape(inputShape: Shape): Shape {\n    if (this.dataFormat === 'channelsFirst') {\n      const height =\n          inputShape[2] == null ? null : this.size[0] * inputShape[2];\n      const width = inputShape[3] == null ? null : this.size[1] * inputShape[3];\n      return [inputShape[0], inputShape[1], height, width];\n    } else {\n      const height =\n          inputShape[1] == null ? null : this.size[0] * inputShape[1];\n      const width = inputShape[2] == null ? null : this.size[1] * inputShape[2];\n      return [inputShape[0], height, width, inputShape[3]];\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs) as Tensor4D;\n      const inputShape = input.shape;\n\n      if (this.dataFormat === 'channelsFirst') {\n        input = tfc.transpose(input, [0, 2, 3, 1]);\n        const height = this.size[0] * inputShape[2];\n        const width = this.size[1] * inputShape[3];\n\n        const resized = this.interpolation === 'nearest' ?\n            tfc.image.resizeNearestNeighbor(input, [height, width]) :\n            tfc.image.resizeBilinear(input, [height, width]);\n        return tfc.transpose(resized, [0, 3, 1, 2]);\n      } else {\n        const height = this.size[0] * inputShape[1];\n        const width = this.size[1] * inputShape[2];\n        return this.interpolation === 'nearest' ?\n            tfc.image.resizeNearestNeighbor(input, [height, width]) :\n            tfc.image.resizeBilinear(input, [height, width]);\n      }\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n        size: this.size, \n        dataFormat: this.dataFormat, \n        interpolation: this.interpolation\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(UpSampling2D);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}