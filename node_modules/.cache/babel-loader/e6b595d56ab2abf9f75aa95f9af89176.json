{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SparseToDense, util } from '@tensorflow/tfjs-core';\nimport { scatterImplCPU } from '../kernel_utils/shared';\nimport { ScatterProgram } from '../scatter_gpu';\nimport { reshape } from './Reshape';\nexport function sparseToDense(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    sparseIndices,\n    sparseValues,\n    defaultValue\n  } = inputs;\n  const {\n    outputShape\n  } = attrs;\n  const {\n    sliceRank,\n    numUpdates,\n    sliceSize,\n    strides,\n    outputSize\n  } = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  if (sparseValues.dtype === 'string') {\n    const indicesBuf = backend.bufferSync(sparseIndices);\n    const updatesBuf = backend.bufferSync(sparseValues);\n    const $defaultValue = util.decodeString(backend.readSync(defaultValue.dataId)[0]);\n    const outBuf = scatterImplCPU(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n  }\n\n  const program = new ScatterProgram(numUpdates, sliceRank, sparseIndices.shape.length, sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n  const res = backend.runWebGLProgram(program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n  const reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape: outputShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\nexport const sparseToDenseConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgl',\n  kernelFunc: sparseToDense\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-webgl/src/kernels/SparseToDense.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAsD,aAAtD,EAA0H,IAA1H,QAAqI,uBAArI;AAGA,SAAQ,cAAR,QAA6B,wBAA7B;AACA,SAAQ,cAAR,QAA6B,gBAA7B;AAEA,SAAQ,OAAR,QAAsB,WAAtB;AAEA,OAAM,SAAU,aAAV,CAAwB,IAAxB,EAIL;EACC,MAAM;IAAC,MAAD;IAAS,OAAT;IAAkB;EAAlB,IAA2B,IAAjC;EACA,MAAM;IAAC,aAAD;IAAgB,YAAhB;IAA8B;EAA9B,IAA8C,MAApD;EACA,MAAM;IAAC;EAAD,IAAgB,KAAtB;EAEA,MAAM;IAAC,SAAD;IAAY,UAAZ;IAAwB,SAAxB;IAAmC,OAAnC;IAA4C;EAA5C,IACF,YAAY,CAAC,eAAb,CAA6B,YAA7B,EAA2C,aAA3C,EAA0D,WAA1D,CADJ;EAEA,MAAM,cAAc,GAAG,KAAvB;;EAEA,IAAI,YAAY,CAAC,KAAb,KAAuB,QAA3B,EAAqC;IACnC,MAAM,UAAU,GAAG,OAAO,CAAC,UAAR,CAAkC,aAAlC,CAAnB;IACA,MAAM,UAAU,GAAG,OAAO,CAAC,UAAR,CAAmC,YAAnC,CAAnB;IACA,MAAM,aAAa,GAAG,IAAI,CAAC,YAAL,CAClB,OAAO,CAAC,QAAR,CAAiB,YAAY,CAAC,MAA9B,EAAsC,CAAtC,CADkB,CAAtB;IAEA,MAAM,MAAM,GAAG,cAAc,CACzB,UADyB,EACb,UADa,EACD,WADC,EACY,UADZ,EACwB,SADxB,EACmC,UADnC,EAEzB,SAFyB,EAEd,OAFc,EAEL,aAFK,EAEU,cAFV,CAA7B;IAGA,OAAO,OAAO,CAAC,cAAR,CAAuB,WAAvB,EAAoC,MAAM,CAAC,KAA3C,EAAkD,MAAM,CAAC,MAAzD,CAAP;EACD;;EACD,MAAM,OAAO,GAAG,IAAI,cAAJ,CACZ,UADY,EACA,SADA,EACW,aAAa,CAAC,KAAd,CAAoB,MAD/B,EAEZ,YAAY,CAAC,KAAb,CAAmB,MAFP,EAEe,OAFf,EAEwB,CAAC,UAAD,EAAa,CAAb,CAFxB,EAEyC,cAFzC,CAAhB;EAIA,MAAM,GAAG,GAAG,OAAO,CAAC,eAAR,CACR,OADQ,EACC,CAAC,YAAD,EAAe,aAAf,EAA8B,YAA9B,CADD,EAC8C,YAAY,CAAC,KAD3D,CAAZ;EAGA,MAAM,QAAQ,GACV,OAAO,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAJ,CAAT;IAAmB,OAAnB;IAA4B,KAAK,EAAE;MAAC,KAAK,EAAE;IAAR;EAAnC,CAAD,CADX;EAGA,OAAO,CAAC,6BAAR,CAAsC,GAAtC;EACA,OAAO,QAAP;AACD;AAED,OAAO,MAAM,mBAAmB,GAAiB;EAC/C,UAAU,EAAE,aADmC;EAE/C,WAAW,EAAE,OAFkC;EAG/C,UAAU,EAAE;AAHmC,CAA1C","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {scatterImplCPU} from '../kernel_utils/shared';\nimport {ScatterProgram} from '../scatter_gpu';\n\nimport {reshape} from './Reshape';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendWebGL,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  if (sparseValues.dtype === 'string') {\n    const indicesBuf = backend.bufferSync<Rank, 'int32'>(sparseIndices);\n    const updatesBuf = backend.bufferSync<Rank, 'string'>(sparseValues);\n    const $defaultValue = util.decodeString(\n        backend.readSync(defaultValue.dataId)[0] as Uint8Array);\n    const outBuf = scatterImplCPU(\n        indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates,\n        sliceRank, strides, $defaultValue, sumDupeIndices);\n    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n  }\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, sparseIndices.shape.length,\n      sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n\n  const res = backend.runWebGLProgram(\n      program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: outputShape}});\n\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgl',\n  kernelFunc: sparseToDense as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}