{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { _FusedMatMul } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { batchMatMul } from './BatchMatMul';\nexport function _fusedMatMul(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    a,\n    b,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    transposeA,\n    transposeB,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  let current;\n  let addRes;\n  let activationRes;\n  const intermediates = [];\n  const matMulRes = batchMatMul({\n    inputs: {\n      a,\n      b\n    },\n    attrs: {\n      transposeA,\n      transposeB\n    },\n    backend\n  });\n  current = matMulRes;\n\n  if (bias) {\n    addRes = add({\n      inputs: {\n        a: current,\n        b: bias\n      },\n      backend\n    });\n    intermediates.push(current);\n    current = addRes;\n  }\n\n  if (activation) {\n    activationRes = applyActivation(backend, current, activation, preluActivationWeights, leakyreluAlpha);\n    intermediates.push(current);\n    current = activationRes;\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return current;\n}\nexport const _fusedMatMulConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'cpu',\n  kernelFunc: _fusedMatMul\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/_FusedMatMul.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,QAAwG,uBAAxG;AAGA,SAAQ,eAAR,QAA8B,sBAA9B;AAEA,SAAQ,GAAR,QAAkB,OAAlB;AACA,SAAQ,WAAR,QAA0B,eAA1B;AAEA,OAAM,SAAU,YAAV,CAAuB,IAAvB,EAIL;EACC,MAAM;IAAC,MAAD;IAAS,OAAT;IAAkB;EAAlB,IAA2B,IAAjC;EACA,MAAM;IAAC,CAAD;IAAI,CAAJ;IAAO,IAAP;IAAa;EAAb,IAAuC,MAA7C;EACA,MAAM;IAAC,UAAD;IAAa,UAAb;IAAyB,UAAzB;IAAqC;EAArC,IAAuD,KAA7D;EAEA,IAAI,OAAJ;EACA,IAAI,MAAJ;EACA,IAAI,aAAJ;EAEA,MAAM,aAAa,GAAiB,EAApC;EAEA,MAAM,SAAS,GACX,WAAW,CAAC;IAAC,MAAM,EAAE;MAAC,CAAD;MAAI;IAAJ,CAAT;IAAiB,KAAK,EAAE;MAAC,UAAD;MAAa;IAAb,CAAxB;IAAkD;EAAlD,CAAD,CADf;EAEA,OAAO,GAAG,SAAV;;EAEA,IAAI,IAAJ,EAAU;IACR,MAAM,GAAG,GAAG,CAAC;MAAC,MAAM,EAAE;QAAC,CAAC,EAAE,OAAJ;QAAa,CAAC,EAAE;MAAhB,CAAT;MAAgC;IAAhC,CAAD,CAAZ;IACA,aAAa,CAAC,IAAd,CAAmB,OAAnB;IACA,OAAO,GAAG,MAAV;EACD;;EACD,IAAI,UAAJ,EAAgB;IACd,aAAa,GAAG,eAAe,CAC3B,OAD2B,EAClB,OADkB,EACT,UADS,EACG,sBADH,EAC2B,cAD3B,CAA/B;IAEA,aAAa,CAAC,IAAd,CAAmB,OAAnB;IACA,OAAO,GAAG,aAAV;EACD;;EAED,KAAK,MAAM,CAAX,IAAgB,aAAhB,EAA+B;IAC7B,OAAO,CAAC,6BAAR,CAAsC,CAAtC;EACD;;EAED,OAAO,OAAP;AACD;AAED,OAAO,MAAM,kBAAkB,GAAiB;EAC9C,UAAU,EAAE,YADkC;EAE9C,WAAW,EAAE,KAFiC;EAG9C,UAAU,EAAE;AAHkC,CAAzC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\n\nimport {add} from './Add';\nimport {batchMatMul} from './BatchMatMul';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  let current;\n  let addRes;\n  let activationRes;\n\n  const intermediates: TensorInfo[] = [];\n\n  const matMulRes =\n      batchMatMul({inputs: {a, b}, attrs: {transposeA, transposeB}, backend});\n  current = matMulRes;\n\n  if (bias) {\n    addRes = add({inputs: {a: current, b: bias}, backend}) as TensorInfo;\n    intermediates.push(current);\n    current = addRes;\n  }\n  if (activation) {\n    activationRes = applyActivation(\n        backend, current, activation, preluActivationWeights, leakyreluAlpha);\n    intermediates.push(current);\n    current = activationRes;\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return current;\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'cpu',\n  kernelFunc: _fusedMatMul as {} as KernelFunc,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}