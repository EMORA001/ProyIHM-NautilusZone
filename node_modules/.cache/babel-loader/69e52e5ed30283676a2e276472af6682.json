{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { ValueError } from '../errors'; // tslint:enable\n\n/**\n * Determine whether the input is an Array of Shapes.\n */\n\nexport function isArrayOfShapes(x) {\n  return Array.isArray(x) && Array.isArray(x[0]);\n}\n/**\n * Special case of normalizing shapes to lists.\n *\n * @param x A shape or list of shapes to normalize into a list of Shapes.\n * @return A list of Shapes.\n */\n\nexport function normalizeShapeList(x) {\n  if (x.length === 0) {\n    return [];\n  }\n\n  if (!Array.isArray(x[0])) {\n    return [x];\n  }\n\n  return x;\n}\n/**\n * Helper function to obtain exactly one Tensor.\n * @param xs: A single `tf.Tensor` or an `Array` of `tf.Tensor`s.\n * @return A single `tf.Tensor`. If `xs` is an `Array`, return the first one.\n * @throws ValueError: If `xs` is an `Array` and its length is not 1.\n */\n\nexport function getExactlyOneTensor(xs) {\n  let x;\n\n  if (Array.isArray(xs)) {\n    if (xs.length !== 1) {\n      throw new ValueError(`Expected Tensor length to be 1; got ${xs.length}`);\n    }\n\n    x = xs[0];\n  } else {\n    x = xs;\n  }\n\n  return x;\n}\n/**\n * Helper function to obtain exactly on instance of Shape.\n *\n * @param shapes Input single `Shape` or Array of `Shape`s.\n * @returns If input is a single `Shape`, return it unchanged. If the input is\n *   an `Array` containing exactly one instance of `Shape`, return the instance.\n *   Otherwise, throw a `ValueError`.\n * @throws ValueError: If input is an `Array` of `Shape`s, and its length is not\n *   1.\n */\n\nexport function getExactlyOneShape(shapes) {\n  if (Array.isArray(shapes) && Array.isArray(shapes[0])) {\n    if (shapes.length === 1) {\n      shapes = shapes;\n      return shapes[0];\n    } else {\n      throw new ValueError(`Expected exactly 1 Shape; got ${shapes.length}`);\n    }\n  } else {\n    return shapes;\n  }\n}","map":{"version":3,"sources":["../../../../../../tfjs-layers/src/utils/types_utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;AAQG;AAKH,SAAQ,UAAR,QAAyB,WAAzB,C,CAEA;;AAEA;;AAEG;;AACH,OAAM,SAAU,eAAV,CAA0B,CAA1B,EAA0C;EAC9C,OAAO,KAAK,CAAC,OAAN,CAAc,CAAd,KAAoB,KAAK,CAAC,OAAN,CAAc,CAAC,CAAC,CAAD,CAAf,CAA3B;AACD;AAED;;;;;AAKG;;AACH,OAAM,SAAU,kBAAV,CAA6B,CAA7B,EAA6C;EACjD,IAAI,CAAC,CAAC,MAAF,KAAa,CAAjB,EAAoB;IAClB,OAAO,EAAP;EACD;;EACD,IAAI,CAAC,KAAK,CAAC,OAAN,CAAc,CAAC,CAAC,CAAD,CAAf,CAAL,EAA0B;IACxB,OAAO,CAAC,CAAD,CAAP;EACD;;EACD,OAAO,CAAP;AACD;AAED;;;;;AAKG;;AACH,OAAM,SAAU,mBAAV,CAA8B,EAA9B,EAAiD;EACrD,IAAI,CAAJ;;EACA,IAAI,KAAK,CAAC,OAAN,CAAc,EAAd,CAAJ,EAAuB;IACrB,IAAI,EAAE,CAAC,MAAH,KAAc,CAAlB,EAAqB;MACnB,MAAM,IAAI,UAAJ,CAAe,uCAAuC,EAAE,CAAC,MAAM,EAA/D,CAAN;IACD;;IACD,CAAC,GAAG,EAAE,CAAC,CAAD,CAAN;EACD,CALD,MAKO;IACL,CAAC,GAAG,EAAJ;EACD;;EACD,OAAO,CAAP;AACD;AAED;;;;;;;;;AASG;;AACH,OAAM,SAAU,kBAAV,CAA6B,MAA7B,EAAkD;EACtD,IAAI,KAAK,CAAC,OAAN,CAAc,MAAd,KAAyB,KAAK,CAAC,OAAN,CAAc,MAAM,CAAC,CAAD,CAApB,CAA7B,EAAuD;IACrD,IAAI,MAAM,CAAC,MAAP,KAAkB,CAAtB,EAAyB;MACvB,MAAM,GAAG,MAAT;MACA,OAAO,MAAM,CAAC,CAAD,CAAb;IACD,CAHD,MAGO;MACL,MAAM,IAAI,UAAJ,CAAe,iCAAiC,MAAM,CAAC,MAAM,EAA7D,CAAN;IACD;EACF,CAPD,MAOO;IACL,OAAO,MAAP;EACD;AACF","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: utils/generic_utils.py */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\nimport {ValueError} from '../errors';\nimport {Shape} from '../keras_format/common';\n// tslint:enable\n\n/**\n * Determine whether the input is an Array of Shapes.\n */\nexport function isArrayOfShapes(x: Shape|Shape[]): boolean {\n  return Array.isArray(x) && Array.isArray(x[0]);\n}\n\n/**\n * Special case of normalizing shapes to lists.\n *\n * @param x A shape or list of shapes to normalize into a list of Shapes.\n * @return A list of Shapes.\n */\nexport function normalizeShapeList(x: Shape|Shape[]): Shape[] {\n  if (x.length === 0) {\n    return [];\n  }\n  if (!Array.isArray(x[0])) {\n    return [x] as Shape[];\n  }\n  return x as Shape[];\n}\n\n/**\n * Helper function to obtain exactly one Tensor.\n * @param xs: A single `tf.Tensor` or an `Array` of `tf.Tensor`s.\n * @return A single `tf.Tensor`. If `xs` is an `Array`, return the first one.\n * @throws ValueError: If `xs` is an `Array` and its length is not 1.\n */\nexport function getExactlyOneTensor(xs: Tensor|Tensor[]): Tensor {\n  let x: Tensor;\n  if (Array.isArray(xs)) {\n    if (xs.length !== 1) {\n      throw new ValueError(`Expected Tensor length to be 1; got ${xs.length}`);\n    }\n    x = xs[0];\n  } else {\n    x = xs;\n  }\n  return x;\n}\n\n/**\n * Helper function to obtain exactly on instance of Shape.\n *\n * @param shapes Input single `Shape` or Array of `Shape`s.\n * @returns If input is a single `Shape`, return it unchanged. If the input is\n *   an `Array` containing exactly one instance of `Shape`, return the instance.\n *   Otherwise, throw a `ValueError`.\n * @throws ValueError: If input is an `Array` of `Shape`s, and its length is not\n *   1.\n */\nexport function getExactlyOneShape(shapes: Shape|Shape[]): Shape {\n  if (Array.isArray(shapes) && Array.isArray(shapes[0])) {\n    if (shapes.length === 1) {\n      shapes = shapes as Shape[];\n      return shapes[0];\n    } else {\n      throw new ValueError(`Expected exactly 1 Shape; got ${shapes.length}`);\n    }\n  } else {\n    return shapes as Shape;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}