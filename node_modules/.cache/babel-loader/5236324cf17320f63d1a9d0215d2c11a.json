{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cast, util } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { zeros } from '../utils/zeros_impl';\nimport { complex } from './Complex';\nimport { identity } from './Identity';\nimport { real } from './Real';\nexport function cast(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    dtype\n  } = attrs; // Casting to complex64.\n\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({\n        inputs: {\n          x\n        },\n        backend\n      });\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    const result = complex({\n      inputs: {\n        real: floatX,\n        imag: zerosTensorInfo\n      },\n      backend\n    });\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n    return result;\n  } // Casting from complex64\n\n\n  if (x.dtype === 'complex64') {\n    const realPart = real({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const result = cast({\n      inputs: {\n        x: realPart\n      },\n      backend,\n      attrs: {\n        dtype\n      }\n    });\n    backend.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n    return {\n      dataId: result.dataId,\n      shape: result.shape,\n      dtype\n    };\n  }\n\n  if (dtype === 'int32') {\n    const values = backend.data.get(x.dataId).values;\n    const resultValues = Int32Array.from(values);\n    return backend.makeTensorInfo(x.shape, 'int32', resultValues);\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const xVals = backend.data.get(x.dataId).values;\n    const zero = util.toTypedArray([0], x.dtype);\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl((a, b) => a !== b ? 1 : 0)(x.shape, [], xVals, zero, 'bool');\n    return backend.makeTensorInfo(resultShape, 'bool', resultData);\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\nexport const castConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/Cast.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (dtype === 'int32') {\n    const values = backend.data.get(x.dataId).values as TypedArray;\n    const resultValues = Int32Array.from(values);\n    return backend.makeTensorInfo(x.shape, 'int32', resultValues);\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const zero = util.toTypedArray([0], x.dtype);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(x.shape, [], xVals, zero, 'bool');\n\n    return backend.makeTensorInfo(resultShape, 'bool', resultData);\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}