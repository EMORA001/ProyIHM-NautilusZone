{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport * as tensorflow from '../data/compiled_api';\nimport { getRegisteredOp } from './custom_op/register';\nimport { getNodeNameAndIndex } from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as hashTable from './op_list/hash_table';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as sparse from './op_list/sparse';\nimport * as spectral from './op_list/spectral';\nimport * as string from './op_list/string';\nimport * as transformation from './op_list/transformation';\nexport class OperationMapper {\n  // Singleton instance for the mapper\n  static get Instance() {\n    return this._instance || (this._instance = new this());\n  } // Loads the op mapping from the JSON file.\n\n\n  constructor() {\n    const ops = [arithmetic, basicMath, control, convolution, creation, dynamic, evaluation, graph, hashTable, image, logical, matrices, normalization, reduction, sliceJoin, sparse, spectral, string, transformation];\n    const mappersJson = [].concat(...ops.map(op => op.json));\n    this.opMappers = mappersJson.reduce((map, mapper) => {\n      map[mapper.tfOpName] = mapper;\n      return map;\n    }, {});\n  } // Converts the model inference graph from Tensorflow GraphDef to local\n  // representation for TensorFlow.js API\n\n\n  transformGraph(graph) {\n    let signature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const tfNodes = graph.node;\n    const placeholders = [];\n    const weights = [];\n    const initNodes = [];\n    const nodes = tfNodes.reduce((map, node) => {\n      map[node.name] = this.mapNode(node);\n\n      if (node.op.startsWith('Placeholder')) {\n        placeholders.push(map[node.name]);\n      } else if (node.op === 'Const') {\n        weights.push(map[node.name]);\n      } else if (node.input == null || node.input.length === 0) {\n        initNodes.push(map[node.name]);\n      }\n\n      return map;\n    }, {});\n    let inputs = [];\n    const outputs = [];\n    let inputNodeNameToKey = {};\n    let outputNodeNameToKey = {};\n\n    if (signature != null) {\n      inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);\n      outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);\n    }\n\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach((name, index) => {\n        const [nodeName,, outputName] = getNodeNameAndIndex(name);\n        const inputNode = nodes[nodeName];\n\n        if (inputNode.outputs != null) {\n          const outputIndex = inputNode.outputs.indexOf(outputName);\n\n          if (outputIndex !== -1) {\n            const inputName = `${nodeName}:${outputIndex}`; // update the input name to use the mapped output index directly.\n\n            node.inputNames[index] = inputName;\n          }\n        }\n\n        node.inputs.push(inputNode);\n        inputNode.children.push(node);\n      });\n    }); // if signature has not outputs set, add any node that does not have\n    // outputs.\n\n    if (Object.keys(outputNodeNameToKey).length === 0) {\n      allNodes.forEach(key => {\n        const node = nodes[key];\n\n        if (node.children.length === 0) {\n          outputs.push(node);\n        }\n      });\n    } else {\n      Object.keys(outputNodeNameToKey).forEach(name => {\n        const [nodeName] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n\n        if (node != null) {\n          node.signatureKey = outputNodeNameToKey[name];\n          outputs.push(node);\n        }\n      });\n    }\n\n    if (Object.keys(inputNodeNameToKey).length > 0) {\n      Object.keys(inputNodeNameToKey).forEach(name => {\n        const [nodeName] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n\n        if (node) {\n          node.signatureKey = inputNodeNameToKey[name];\n          inputs.push(node);\n        }\n      });\n    } else {\n      inputs = placeholders;\n    }\n\n    let functions = {};\n\n    if (graph.library != null && graph.library.function != null) {\n      functions = graph.library.function.reduce((functions, func) => {\n        functions[func.signature.name] = this.mapFunction(func);\n        return functions;\n      }, {});\n    }\n\n    const result = {\n      nodes,\n      inputs,\n      outputs,\n      weights,\n      placeholders,\n      signature,\n      functions\n    };\n\n    if (initNodes.length > 0) {\n      result.initNodes = initNodes;\n    }\n\n    return result;\n  }\n\n  mapSignatureEntries(entries) {\n    return Object.keys(entries || {}).reduce((prev, curr) => {\n      prev[entries[curr].name] = curr;\n      return prev;\n    }, {});\n  }\n\n  mapNode(node) {\n    // Unsupported ops will cause an error at run-time (not parse time), since\n    // they may not be used by the actual execution subgraph.\n    const mapper = getRegisteredOp(node.op) || this.opMappers[node.op] || {};\n\n    if (node.attr == null) {\n      node.attr = {};\n    }\n\n    const newNode = {\n      name: node.name,\n      op: node.op,\n      category: mapper.category,\n      inputNames: (node.input || []).map(input => input.startsWith('^') ? input.slice(1) : input),\n      inputs: [],\n      children: [],\n      inputParams: {},\n      attrParams: {},\n      rawAttrs: node.attr,\n      outputs: mapper.outputs\n    };\n\n    if (mapper.inputs != null) {\n      newNode.inputParams = mapper.inputs.reduce((map, param) => {\n        map[param.name] = {\n          type: param.type,\n          inputIndexStart: param.start,\n          inputIndexEnd: param.end\n        };\n        return map;\n      }, {});\n    }\n\n    if (mapper.attrs != null) {\n      newNode.attrParams = mapper.attrs.reduce((map, param) => {\n        const type = param.type;\n        let value = undefined;\n\n        switch (param.type) {\n          case 'string':\n            value = getStringParam(node.attr, param.tfName, param.defaultValue);\n\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getStringParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n\n            break;\n\n          case 'string[]':\n            value = getStringArrayParam(node.attr, param.tfName, param.defaultValue);\n\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getStringArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n\n            break;\n\n          case 'number':\n            value = getNumberParam(node.attr, param.tfName, param.defaultValue || 0);\n\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getNumberParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n\n            break;\n\n          case 'number[]':\n            value = getNumericArrayParam(node.attr, param.tfName, param.defaultValue);\n\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getNumericArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n\n            break;\n\n          case 'bool':\n            value = getBoolParam(node.attr, param.tfName, param.defaultValue);\n\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getBoolParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n\n            break;\n\n          case 'bool[]':\n            value = getBoolArrayParam(node.attr, param.tfName, param.defaultValue);\n\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getBoolArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n\n            break;\n\n          case 'shape':\n            value = getTensorShapeParam(node.attr, param.tfName, param.defaultValue);\n\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getTensorShapeParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n\n            break;\n\n          case 'shape[]':\n            value = getTensorShapeArrayParam(node.attr, param.tfName, param.defaultValue);\n\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getTensorShapeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n\n            break;\n\n          case 'dtype':\n            value = getDtypeParam(node.attr, param.tfName, param.defaultValue);\n\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getDtypeParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n\n            break;\n\n          case 'dtype[]':\n            value = getDtypeArrayParam(node.attr, param.tfName, param.defaultValue);\n\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getDtypeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n\n            break;\n\n          case 'func':\n            value = getFuncParam(node.attr, param.tfName, param.defaultValue);\n\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getFuncParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n\n            break;\n\n          case 'tensor':\n          case 'tensors':\n            break;\n\n          default:\n            throw new Error(`Unsupported param type: ${param.type} for op: ${node.op}`);\n        }\n\n        map[param.name] = {\n          value,\n          type\n        };\n        return map;\n      }, {});\n    }\n\n    return newNode;\n  } // map the TFunctionDef to TFJS graph object\n\n\n  mapFunction(functionDef) {\n    const tfNodes = functionDef.nodeDef;\n    const placeholders = [];\n    const weights = [];\n    let nodes = {};\n\n    if (tfNodes != null) {\n      nodes = tfNodes.reduce((map, node) => {\n        map[node.name] = this.mapNode(node);\n\n        if (node.op === 'Const') {\n          weights.push(map[node.name]);\n        }\n\n        return map;\n      }, {});\n    }\n\n    const inputs = [];\n    const outputs = [];\n    functionDef.signature.inputArg.forEach(arg => {\n      const [nodeName] = getNodeNameAndIndex(arg.name);\n      const node = {\n        name: nodeName,\n        op: 'Placeholder',\n        inputs: [],\n        inputNames: [],\n        category: 'graph',\n        inputParams: {},\n        attrParams: {\n          dtype: {\n            value: parseDtypeParam(arg.type),\n            type: 'dtype'\n          }\n        },\n        children: []\n      };\n      node.signatureKey = arg.name;\n      inputs.push(node);\n      nodes[nodeName] = node;\n    });\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach((name, index) => {\n        const [nodeName,, outputName] = getNodeNameAndIndex(name);\n        const inputNode = nodes[nodeName];\n\n        if (inputNode.outputs != null) {\n          const outputIndex = inputNode.outputs.indexOf(outputName);\n\n          if (outputIndex !== -1) {\n            const inputName = `${nodeName}:${outputIndex}`; // update the input name to use the mapped output index directly.\n\n            node.inputNames[index] = inputName;\n          }\n        }\n\n        node.inputs.push(inputNode);\n        inputNode.children.push(node);\n      });\n    });\n    const returnNodeMap = functionDef.ret;\n    functionDef.signature.outputArg.forEach(output => {\n      const [nodeName, index] = getNodeNameAndIndex(returnNodeMap[output.name]);\n      const node = nodes[nodeName];\n\n      if (node != null) {\n        node.defaultOutput = index;\n        outputs.push(node);\n      }\n    });\n    const signature = this.mapArgsToSignature(functionDef);\n    return {\n      nodes,\n      inputs,\n      outputs,\n      weights,\n      placeholders,\n      signature\n    };\n  }\n\n  mapArgsToSignature(functionDef) {\n    return {\n      methodName: functionDef.signature.name,\n      inputs: functionDef.signature.inputArg.reduce((map, arg) => {\n        map[arg.name] = this.mapArgToTensorInfo(arg);\n        return map;\n      }, {}),\n      outputs: functionDef.signature.outputArg.reduce((map, arg) => {\n        map[arg.name] = this.mapArgToTensorInfo(arg, functionDef.ret);\n        return map;\n      }, {})\n    };\n  }\n\n  mapArgToTensorInfo(arg, nameMap) {\n    let name = arg.name;\n\n    if (nameMap != null) {\n      name = nameMap[name];\n    }\n\n    return {\n      name,\n      dtype: arg.type\n    };\n  }\n\n}\nexport function decodeBase64(text) {\n  const global = env().global;\n\n  if (typeof global.atob !== 'undefined') {\n    return global.atob(text);\n  } else if (typeof Buffer !== 'undefined') {\n    return new Buffer(text, 'base64').toString();\n  } else {\n    throw new Error('Unable to decode base64 in this environment. ' + 'Missing built-in atob() or Buffer()');\n  }\n}\nexport function parseStringParam(s, keepCase) {\n  const value = Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);\n  return keepCase ? value : value.toLowerCase();\n}\nexport function getStringParam(attrs, name, def) {\n  let keepCase = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const param = attrs[name];\n\n  if (param != null) {\n    return parseStringParam(param.s, keepCase);\n  }\n\n  return def;\n}\nexport function getBoolParam(attrs, name, def) {\n  const param = attrs[name];\n  return param ? param.b : def;\n}\nexport function getNumberParam(attrs, name, def) {\n  const param = attrs[name] || {};\n  const value = param['i'] != null ? param['i'] : param['f'] != null ? param['f'] : def;\n  return typeof value === 'number' ? value : parseInt(value, 10);\n}\nexport function parseDtypeParam(value) {\n  if (typeof value === 'string') {\n    // tslint:disable-next-line:no-any\n    value = tensorflow.DataType[value];\n  }\n\n  switch (value) {\n    case tensorflow.DataType.DT_FLOAT:\n    case tensorflow.DataType.DT_HALF:\n      return 'float32';\n\n    case tensorflow.DataType.DT_INT32:\n    case tensorflow.DataType.DT_INT64:\n    case tensorflow.DataType.DT_INT8:\n    case tensorflow.DataType.DT_UINT8:\n      return 'int32';\n\n    case tensorflow.DataType.DT_BOOL:\n      return 'bool';\n\n    case tensorflow.DataType.DT_DOUBLE:\n      return 'float32';\n\n    case tensorflow.DataType.DT_STRING:\n      return 'string';\n\n    default:\n      // Unknown dtype error will happen at runtime (instead of parse time),\n      // since these nodes might not be used by the actual subgraph execution.\n      return null;\n  }\n}\nexport function getFuncParam(attrs, name, def) {\n  const param = attrs[name];\n\n  if (param && param.func) {\n    return param.func.name;\n  }\n\n  return def;\n}\nexport function getDtypeParam(attrs, name, def) {\n  const param = attrs[name];\n\n  if (param && param.type) {\n    return parseDtypeParam(param.type);\n  }\n\n  return def;\n}\nexport function getDtypeArrayParam(attrs, name, def) {\n  const param = attrs[name];\n\n  if (param && param.list && param.list.type) {\n    return param.list.type.map(v => parseDtypeParam(v));\n  }\n\n  return def;\n}\nexport function parseTensorShapeParam(shape) {\n  if (shape.unknownRank) {\n    return undefined;\n  }\n\n  if (shape.dim != null) {\n    return shape.dim.map(dim => typeof dim.size === 'number' ? dim.size : parseInt(dim.size, 10));\n  }\n\n  return [];\n}\nexport function getTensorShapeParam(attrs, name, def) {\n  const param = attrs[name];\n\n  if (param && param.shape) {\n    return parseTensorShapeParam(param.shape);\n  }\n\n  return def;\n}\nexport function getNumericArrayParam(attrs, name, def) {\n  const param = attrs[name];\n\n  if (param) {\n    return ((param.list.f && param.list.f.length ? param.list.f : param.list.i) || []).map(v => typeof v === 'number' ? v : parseInt(v, 10));\n  }\n\n  return def;\n}\nexport function getStringArrayParam(attrs, name, def) {\n  let keepCase = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const param = attrs[name];\n\n  if (param && param.list && param.list.s) {\n    return param.list.s.map(v => {\n      return parseStringParam(v, keepCase);\n    });\n  }\n\n  return def;\n}\nexport function getTensorShapeArrayParam(attrs, name, def) {\n  const param = attrs[name];\n\n  if (param && param.list && param.list.shape) {\n    return param.list.shape.map(v => {\n      return parseTensorShapeParam(v);\n    });\n  }\n\n  return def;\n}\nexport function getBoolArrayParam(attrs, name, def) {\n  const param = attrs[name];\n\n  if (param && param.list && param.list.b) {\n    return param.list.b;\n  }\n\n  return def;\n}","map":{"version":3,"sources":["../../../../../../tfjs-converter/src/operations/operation_mapper.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, env} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\n\nimport {getRegisteredOp} from './custom_op/register';\nimport {getNodeNameAndIndex} from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as hashTable from './op_list/hash_table';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as sparse from './op_list/sparse';\nimport * as spectral from './op_list/spectral';\nimport * as string from './op_list/string';\nimport * as transformation from './op_list/transformation';\nimport {Graph, InputParamValue, Node, OpMapper, ParamValue} from './types';\n\nexport class OperationMapper {\n  private static _instance: OperationMapper;\n\n  private opMappers: {[key: string]: OpMapper};\n\n  // Singleton instance for the mapper\n  public static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n\n  // Loads the op mapping from the JSON file.\n  private constructor() {\n    const ops = [\n      arithmetic, basicMath, control, convolution, creation, dynamic,\n      evaluation, graph, hashTable, image, logical, matrices, normalization,\n      reduction, sliceJoin, sparse, spectral, string, transformation\n    ];\n    const mappersJson: OpMapper[] = [].concat(...ops.map(op => op.json));\n\n    this.opMappers = mappersJson.reduce<{[key: string]: OpMapper}>(\n        (map, mapper: OpMapper) => {\n          map[mapper.tfOpName] = mapper;\n          return map;\n        },\n        {});\n  }\n\n  // Converts the model inference graph from Tensorflow GraphDef to local\n  // representation for TensorFlow.js API\n  transformGraph(\n      graph: tensorflow.IGraphDef,\n      signature: tensorflow.ISignatureDef = {}): Graph {\n    const tfNodes = graph.node;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    const initNodes: Node[] = [];\n    const nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n      map[node.name] = this.mapNode(node);\n      if (node.op.startsWith('Placeholder')) {\n        placeholders.push(map[node.name]);\n      } else if (node.op === 'Const') {\n        weights.push(map[node.name]);\n      } else if (node.input == null || node.input.length === 0) {\n        initNodes.push(map[node.name]);\n      }\n      return map;\n    }, {});\n\n    let inputs: Node[] = [];\n    const outputs: Node[] = [];\n    let inputNodeNameToKey: {[key: string]: string} = {};\n    let outputNodeNameToKey: {[key: string]: string} = {};\n    if (signature != null) {\n      inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);\n      outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);\n    }\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach((name, index) => {\n        const [nodeName, , outputName] = getNodeNameAndIndex(name);\n        const inputNode = nodes[nodeName];\n        if (inputNode.outputs != null) {\n          const outputIndex = inputNode.outputs.indexOf(outputName);\n          if (outputIndex !== -1) {\n            const inputName = `${nodeName}:${outputIndex}`;\n            // update the input name to use the mapped output index directly.\n            node.inputNames[index] = inputName;\n          }\n        }\n        node.inputs.push(inputNode);\n        inputNode.children.push(node);\n      });\n    });\n\n    // if signature has not outputs set, add any node that does not have\n    // outputs.\n    if (Object.keys(outputNodeNameToKey).length === 0) {\n      allNodes.forEach(key => {\n        const node = nodes[key];\n        if (node.children.length === 0) {\n          outputs.push(node);\n        }\n      });\n    } else {\n      Object.keys(outputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node != null) {\n          node.signatureKey = outputNodeNameToKey[name];\n          outputs.push(node);\n        }\n      });\n    }\n\n    if (Object.keys(inputNodeNameToKey).length > 0) {\n      Object.keys(inputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node) {\n          node.signatureKey = inputNodeNameToKey[name];\n          inputs.push(node);\n        }\n      });\n    } else {\n      inputs = placeholders;\n    }\n\n    let functions = {};\n    if (graph.library != null && graph.library.function != null) {\n      functions = graph.library.function.reduce((functions, func) => {\n        functions[func.signature.name] = this.mapFunction(func);\n        return functions;\n      }, {} as {[key: string]: Graph});\n    }\n\n    const result: Graph =\n        {nodes, inputs, outputs, weights, placeholders, signature, functions};\n\n    if (initNodes.length > 0) {\n      result.initNodes = initNodes;\n    }\n\n    return result;\n  }\n\n  private mapSignatureEntries(entries: {[k: string]: tensorflow.ITensorInfo}) {\n    return Object.keys(entries || {})\n        .reduce<{[key: string]: string}>((prev, curr) => {\n          prev[entries[curr].name] = curr;\n          return prev;\n        }, {});\n  }\n\n  private mapNode(node: tensorflow.INodeDef): Node {\n    // Unsupported ops will cause an error at run-time (not parse time), since\n    // they may not be used by the actual execution subgraph.\n    const mapper =\n        getRegisteredOp(node.op) || this.opMappers[node.op] || {} as OpMapper;\n    if (node.attr == null) {\n      node.attr = {};\n    }\n\n    const newNode: Node = {\n      name: node.name,\n      op: node.op,\n      category: mapper.category,\n      inputNames:\n          (node.input ||\n           []).map(input => input.startsWith('^') ? input.slice(1) : input),\n      inputs: [],\n      children: [],\n      inputParams: {},\n      attrParams: {},\n      rawAttrs: node.attr,\n      outputs: mapper.outputs\n    };\n\n    if (mapper.inputs != null) {\n      newNode.inputParams =\n          mapper.inputs.reduce<{[key: string]: InputParamValue}>(\n              (map, param) => {\n                map[param.name] = {\n                  type: param.type,\n                  inputIndexStart: param.start,\n                  inputIndexEnd: param.end\n                };\n                return map;\n              },\n              {});\n    }\n    if (mapper.attrs != null) {\n      newNode.attrParams =\n          mapper.attrs.reduce<{[key: string]: ParamValue}>((map, param) => {\n            const type = param.type;\n            let value = undefined;\n            switch (param.type) {\n              case 'string':\n                value = getStringParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'string[]':\n                value = getStringArrayParam(\n                    node.attr, param.tfName, param.defaultValue as string[]);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string[]);\n                }\n                break;\n              case 'number':\n                value = getNumberParam(\n                    node.attr, param.tfName,\n                    (param.defaultValue || 0) as number);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumberParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number);\n                }\n                break;\n              case 'number[]':\n                value = getNumericArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumericArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'bool':\n                value = getBoolParam(\n                    node.attr, param.tfName, param.defaultValue as boolean);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean);\n                }\n                break;\n              case 'bool[]':\n                value = getBoolArrayParam(\n                    node.attr, param.tfName, param.defaultValue as boolean[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean[]);\n                }\n                break;\n              case 'shape':\n                value = getTensorShapeParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'shape[]':\n                value = getTensorShapeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[][]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[][]);\n                }\n                break;\n              case 'dtype':\n                value = getDtypeParam(\n                    node.attr, param.tfName, param.defaultValue as DataType);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType);\n                }\n                break;\n              case 'dtype[]':\n                value = getDtypeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as DataType[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType[]);\n                }\n                break;\n              case 'func':\n                value = getFuncParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getFuncParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'tensor':\n              case 'tensors':\n                break;\n              default:\n                throw new Error(\n                    `Unsupported param type: ${param.type} for op: ${node.op}`);\n            }\n            map[param.name] = {value, type};\n            return map;\n          }, {});\n    }\n    return newNode;\n  }\n\n  // map the TFunctionDef to TFJS graph object\n  private mapFunction(functionDef: tensorflow.IFunctionDef): Graph {\n    const tfNodes = functionDef.nodeDef;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    let nodes: {[key: string]: Node} = {};\n    if (tfNodes != null) {\n      nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n        map[node.name] = this.mapNode(node);\n        if (node.op === 'Const') {\n          weights.push(map[node.name]);\n        }\n        return map;\n      }, {});\n    }\n    const inputs: Node[] = [];\n    const outputs: Node[] = [];\n\n    functionDef.signature.inputArg.forEach(arg => {\n      const [nodeName, ] = getNodeNameAndIndex(arg.name);\n      const node: Node = {\n        name: nodeName,\n        op: 'Placeholder',\n        inputs: [],\n        inputNames: [],\n        category: 'graph',\n        inputParams: {},\n        attrParams: {dtype: {value: parseDtypeParam(arg.type), type: 'dtype'}},\n        children: []\n      };\n      node.signatureKey = arg.name;\n      inputs.push(node);\n      nodes[nodeName] = node;\n    });\n\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach((name, index) => {\n        const [nodeName, , outputName] = getNodeNameAndIndex(name);\n        const inputNode = nodes[nodeName];\n        if (inputNode.outputs != null) {\n          const outputIndex = inputNode.outputs.indexOf(outputName);\n          if (outputIndex !== -1) {\n            const inputName = `${nodeName}:${outputIndex}`;\n            // update the input name to use the mapped output index directly.\n            node.inputNames[index] = inputName;\n          }\n        }\n        node.inputs.push(inputNode);\n        inputNode.children.push(node);\n      });\n    });\n\n    const returnNodeMap = functionDef.ret;\n\n    functionDef.signature.outputArg.forEach(output => {\n      const [nodeName, index] = getNodeNameAndIndex(returnNodeMap[output.name]);\n      const node = nodes[nodeName];\n      if (node != null) {\n        node.defaultOutput = index;\n        outputs.push(node);\n      }\n    });\n\n    const signature = this.mapArgsToSignature(functionDef);\n    return {nodes, inputs, outputs, weights, placeholders, signature};\n  }\n\n  private mapArgsToSignature(functionDef: tensorflow.IFunctionDef):\n      tensorflow.ISignatureDef {\n    return {\n      methodName: functionDef.signature.name,\n      inputs: functionDef.signature.inputArg.reduce(\n          (map, arg) => {\n            map[arg.name] = this.mapArgToTensorInfo(arg);\n            return map;\n          },\n          {} as {[key: string]: tensorflow.ITensorInfo}),\n      outputs: functionDef.signature.outputArg.reduce(\n          (map, arg) => {\n            map[arg.name] = this.mapArgToTensorInfo(arg, functionDef.ret);\n            return map;\n          },\n          {} as {[key: string]: tensorflow.ITensorInfo}),\n    };\n  }\n\n  private mapArgToTensorInfo(\n      arg: tensorflow.OpDef.IArgDef,\n      nameMap?: {[key: string]: string}): tensorflow.ITensorInfo {\n    let name = arg.name;\n    if (nameMap != null) {\n      name = nameMap[name];\n    }\n    return {name, dtype: arg.type};\n  }\n}\n\nexport function decodeBase64(text: string): string {\n  const global = env().global;\n  if (typeof global.atob !== 'undefined') {\n    return global.atob(text);\n  } else if (typeof Buffer !== 'undefined') {\n    return new Buffer(text, 'base64').toString();\n  } else {\n    throw new Error(\n        'Unable to decode base64 in this environment. ' +\n        'Missing built-in atob() or Buffer()');\n  }\n}\n\nexport function parseStringParam(s: []|string, keepCase: boolean): string {\n  const value =\n      Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);\n  return keepCase ? value : value.toLowerCase();\n}\n\nexport function getStringParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string,\n    keepCase = false): string {\n  const param = attrs[name];\n  if (param != null) {\n    return parseStringParam(param.s, keepCase);\n  }\n  return def;\n}\n\nexport function getBoolParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean): boolean {\n  const param = attrs[name];\n  return param ? param.b : def;\n}\n\nexport function getNumberParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number): number {\n  const param = attrs[name] || {};\n  const value =\n      param['i'] != null ? param['i'] : (param['f'] != null ? param['f'] : def);\n  return (typeof value === 'number') ? value : parseInt(value, 10);\n}\n\nexport function parseDtypeParam(value: string|tensorflow.DataType): DataType {\n  if (typeof (value) === 'string') {\n    // tslint:disable-next-line:no-any\n    value = tensorflow.DataType[value as any];\n  }\n  switch (value) {\n    case tensorflow.DataType.DT_FLOAT:\n    case tensorflow.DataType.DT_HALF:\n      return 'float32';\n    case tensorflow.DataType.DT_INT32:\n    case tensorflow.DataType.DT_INT64:\n    case tensorflow.DataType.DT_INT8:\n    case tensorflow.DataType.DT_UINT8:\n      return 'int32';\n    case tensorflow.DataType.DT_BOOL:\n      return 'bool';\n    case tensorflow.DataType.DT_DOUBLE:\n      return 'float32';\n    case tensorflow.DataType.DT_STRING:\n      return 'string';\n    default:\n      // Unknown dtype error will happen at runtime (instead of parse time),\n      // since these nodes might not be used by the actual subgraph execution.\n      return null;\n  }\n}\n\nexport function getFuncParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: string): string {\n  const param = attrs[name];\n  if (param && param.func) {\n    return param.func.name;\n  }\n  return def;\n}\n\nexport function getDtypeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType): DataType {\n  const param = attrs[name];\n  if (param && param.type) {\n    return parseDtypeParam(param.type);\n  }\n  return def;\n}\n\nexport function getDtypeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType[]): DataType[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.type) {\n    return param.list.type.map(v => parseDtypeParam(v));\n  }\n  return def;\n}\n\nexport function parseTensorShapeParam(shape: tensorflow.ITensorShape): number[]|\n    undefined {\n  if (shape.unknownRank) {\n    return undefined;\n  }\n  if (shape.dim != null) {\n    return shape.dim.map(\n        dim =>\n            (typeof dim.size === 'number') ? dim.size : parseInt(dim.size, 10));\n  }\n  return [];\n}\n\nexport function getTensorShapeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def?: number[]): number[]|undefined {\n  const param = attrs[name];\n  if (param && param.shape) {\n    return parseTensorShapeParam(param.shape);\n  }\n  return def;\n}\n\nexport function getNumericArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[]): number[] {\n  const param = attrs[name];\n  if (param) {\n    return ((param.list.f && param.list.f.length ? param.list.f :\n                                                   param.list.i) ||\n            [])\n        .map(v => (typeof v === 'number') ? v : parseInt(v, 10));\n  }\n  return def;\n}\n\nexport function getStringArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string[],\n    keepCase = false): string[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.s) {\n    return param.list.s.map((v) => {\n      return parseStringParam(v, keepCase);\n    });\n  }\n  return def;\n}\n\nexport function getTensorShapeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[][]): number[][] {\n  const param = attrs[name];\n  if (param && param.list && param.list.shape) {\n    return param.list.shape.map((v) => {\n      return parseTensorShapeParam(v);\n    });\n  }\n  return def;\n}\n\nexport function getBoolArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean[]): boolean[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.b) {\n    return param.list.b;\n  }\n  return def;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}