{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nexport function concatImpl(inputs, outShape, dtype, simplyConcat) {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n      outVals.set(input.vals, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ? backend_util.fromUint8ToStringArray(input.vals) : input.vals;\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/Concat_impl.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAA2D,IAA3D,QAAsE,uBAAtE;AAEA,OAAM,SAAU,UAAV,CACF,MADE,EACqD,QADrD,EAEF,KAFE,EAEe,YAFf,EAEoC;EACxC,MAAM,OAAO,GAAG,IAAI,CAAC,iBAAL,CAAuB,KAAvB,EAA8B,IAAI,CAAC,aAAL,CAAmB,QAAnB,CAA9B,CAAhB;;EAEA,IAAI,YAAY,IAAI,KAAK,KAAK,QAA9B,EAAwC;IACtC;IACA,IAAI,MAAM,GAAG,CAAb;IACA,MAAM,CAAC,OAAP,CAAe,KAAK,IAAG;MACrB,MAAM,IAAI,GAAG,IAAI,CAAC,aAAL,CAAmB,KAAK,CAAC,KAAzB,CAAb;MAEC,OAAsB,CAAC,GAAvB,CAA2B,KAAK,CAAC,IAAjC,EAAqD,MAArD;MACD,MAAM,IAAI,IAAV;IACD,CALD;EAMD,CATD,MASO;IACL,IAAI,SAAS,GAAG,CAAhB;IAEA,MAAM,CAAC,OAAP,CAAe,KAAK,IAAG;MACrB,MAAM,WAAW,GAAG,KAAK,KAAK,QAAV,GAChB,YAAY,CAAC,sBAAb,CAAoC,KAAK,CAAC,IAA1C,CADgB,GAEhB,KAAK,CAAC,IAFV;MAIA,IAAI,IAAI,GAAG,CAAX;;MAEA,KAAK,IAAI,GAAG,GAAG,CAAf,EAAkB,GAAG,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAxB,EAAwC,EAAE,GAA1C,EAA+C;QAC7C,MAAM,MAAM,GAAG,GAAG,GAAG,QAAQ,CAAC,CAAD,CAAd,GAAoB,SAAnC;;QACA,KAAK,IAAI,GAAG,GAAG,CAAf,EAAkB,GAAG,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAxB,EAAwC,EAAE,GAA1C,EAA+C;UAC7C,OAAO,CAAC,MAAM,GAAG,GAAV,CAAP,GAAwB,WAAW,CAAC,IAAI,EAAL,CAAnC;QACD;MACF;;MAED,SAAS,IAAI,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAb;IACD,CAfD;EAgBD;;EAED,OAAO,OAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}