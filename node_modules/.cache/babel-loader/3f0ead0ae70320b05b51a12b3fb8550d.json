{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Pack, util } from '@tensorflow/tfjs-core';\nimport { concat } from './Concat';\nimport { expandDims } from './ExpandDims';\nexport function pack(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    axis\n  } = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims({\n      inputs: {\n        input: inputs[0]\n      },\n      backend,\n      attrs: {\n        dim: axis\n      }\n    });\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n  inputs.forEach(t => {\n    util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');\n    util.assert(dtype === t.dtype, () => 'All tensors passed to stack must have matching dtypes');\n  });\n  const intermediateTensorInfos = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT = expandDims({\n      inputs: {\n        input: t\n      },\n      backend,\n      attrs: {\n        dim: axis\n      }\n    });\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n  const result = concat({\n    inputs: expandedTensors,\n    backend,\n    attrs: {\n      axis\n    }\n  });\n  intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\nexport const packConfig = {\n  kernelName: Pack,\n  backendName: 'cpu',\n  kernelFunc: pack\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/Pack.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,IAAlC,EAA2E,IAA3E,QAAsF,uBAAtF;AAGA,SAAQ,MAAR,QAAqB,UAArB;AACA,SAAQ,UAAR,QAAyB,cAAzB;AAEA,OAAM,SAAU,IAAV,CACF,IADE,EACmE;EAEvE,MAAM;IAAC,MAAD;IAAS,OAAT;IAAkB;EAAlB,IAA2B,IAAjC;EACA,MAAM;IAAC;EAAD,IAAS,KAAf;;EAEA,IAAI,MAAM,CAAC,MAAP,KAAkB,CAAtB,EAAyB;IACvB,OAAO,UAAU,CACb;MAAC,MAAM,EAAE;QAAC,KAAK,EAAE,MAAM,CAAC,CAAD;MAAd,CAAT;MAA6B,OAA7B;MAAsC,KAAK,EAAE;QAAC,GAAG,EAAE;MAAN;IAA7C,CADa,CAAjB;EAED;;EAED,MAAM,KAAK,GAAG,MAAM,CAAC,CAAD,CAAN,CAAU,KAAxB;EACA,MAAM,KAAK,GAAG,MAAM,CAAC,CAAD,CAAN,CAAU,KAAxB;EAEA,MAAM,CAAC,OAAP,CAAe,CAAC,IAAG;IACjB,IAAI,CAAC,iBAAL,CACI,KADJ,EACW,CAAC,CAAC,KADb,EAEI,uDAFJ;IAGA,IAAI,CAAC,MAAL,CACI,KAAK,KAAK,CAAC,CAAC,KADhB,EAEI,MAAM,uDAFV;EAGD,CAPD;EASA,MAAM,uBAAuB,GAAiB,EAA9C;EACA,MAAM,eAAe,GAAG,MAAM,CAAC,GAAP,CAAW,CAAC,IAAG;IACrC,MAAM,SAAS,GACX,UAAU,CAAC;MAAC,MAAM,EAAE;QAAC,KAAK,EAAE;MAAR,CAAT;MAAqB,OAArB;MAA8B,KAAK,EAAE;QAAC,GAAG,EAAE;MAAN;IAArC,CAAD,CADd;IAEA,uBAAuB,CAAC,IAAxB,CAA6B,SAA7B;IACA,OAAO,SAAP;EACD,CALuB,CAAxB;EAOA,MAAM,MAAM,GAAG,MAAM,CAAC;IAAC,MAAM,EAAE,eAAT;IAA0B,OAA1B;IAAmC,KAAK,EAAE;MAAC;IAAD;EAA1C,CAAD,CAArB;EAEA,uBAAuB,CAAC,OAAxB,CACI,CAAC,IAAI,OAAO,CAAC,6BAAR,CAAsC,CAAtC,CADT;EAGA,OAAO,MAAP;AACD;AAED,OAAO,MAAM,UAAU,GAAiB;EACtC,UAAU,EAAE,IAD0B;EAEtC,WAAW,EAAE,KAFyB;EAGtC,UAAU,EAAE;AAH0B,CAAjC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendCPU, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'cpu',\n  kernelFunc: pack as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}