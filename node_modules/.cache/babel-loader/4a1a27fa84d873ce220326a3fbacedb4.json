{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport { ConcatProgram } from '../concat_gpu';\nimport { ConcatPackedProgram } from '../concat_packed_gpu';\nimport { concatImplCPU } from '../kernel_utils/shared';\nimport { complex } from './Complex';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { reshape } from './Reshape';\nexport function concatImpl(inputs, axis, backend) {\n  const dtype = inputs[0].dtype;\n\n  if (dtype === 'complex64') {\n    const reals = inputs.map(t => real({\n      inputs: {\n        input: t\n      },\n      backend\n    }));\n    const imags = inputs.map(t => imag({\n      inputs: {\n        input: t\n      },\n      backend\n    }));\n    const realConcated = concatImpl(reals, axis, backend);\n    const imagConcated = concatImpl(imags, axis, backend);\n    const result = complex({\n      inputs: {\n        real: realConcated,\n        imag: imagConcated\n      },\n      backend\n    });\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n    return result;\n  }\n\n  let runOnCpu = backend.shouldExecuteOnCPU(inputs); // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n\n  if (dtype === 'string') {\n    runOnCpu = true;\n  }\n\n  if (runOnCpu) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const tensors2D = inputs.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      const shape = [-1, innerSize];\n      return reshape({\n        inputs: {\n          x: t\n        },\n        backend,\n        attrs: {\n          shape\n        }\n      });\n    });\n    const inputsValShapes = tensors2D.map(t => {\n      return {\n        vals: backend.readSync(t.dataId),\n        shape: t.shape\n      };\n    }); // Concats 2d tensors along axis=1.\n\n    const outShape = backend_util.computeOutShape(tensors2D.map(t => t.shape), 1\n    /* axis */\n    );\n    const simplyConcat = tensors2D[0].shape[0] === 1;\n    const outVals = concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n    const finalOutShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n    const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n    tensors2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return outInfo;\n  }\n\n  const maxTexturesInShader = env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER');\n\n  if (inputs.length > maxTexturesInShader) {\n    const reducedInputs = [];\n\n    for (let i = 0; i < inputs.length; i += maxTexturesInShader) {\n      const subArray = inputs.slice(i, i + maxTexturesInShader);\n      reducedInputs.push(concatImpl(subArray, axis, backend));\n    }\n\n    const result = concatImpl(reducedInputs, axis, backend);\n\n    for (const i of reducedInputs) {\n      backend.disposeIntermediateTensorInfo(i);\n    }\n\n    return result;\n  }\n\n  if (env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') && inputs[0].shape.length > 1) {\n    const program = new ConcatPackedProgram(inputs.map(t => t.shape), axis);\n    return backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const {\n    tensors2D,\n    outShape\n  } = computeTensors2D(inputs, axis, backend);\n  const program = new ConcatProgram(tensors2D.map(t => t.shape));\n  const result = backend.runWebGLProgram(program, tensors2D, dtype);\n  tensors2D.forEach(r => backend.disposeIntermediateTensorInfo(r));\n  const reshapedResult = reshape({\n    inputs: {\n      x: result\n    },\n    attrs: {\n      shape: outShape\n    },\n    backend\n  });\n  backend.disposeIntermediateTensorInfo(result);\n  return reshapedResult;\n}\n\nfunction computeTensors2D(inputs, axis, backend) {\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n  const tensors2D = inputs.map(x => reshape({\n    inputs: {\n      x\n    },\n    attrs: {\n      shape: [-1, util.sizeFromShape(x.shape.slice(axis))]\n    },\n    backend\n  }));\n  return {\n    tensors2D,\n    outShape\n  };\n}","map":{"version":3,"sources":["../../../../../../tfjs-backend-webgl/src/kernels/Concat_impl.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, ConcatInputs, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ConcatProgram} from '../concat_gpu';\nimport {ConcatPackedProgram} from '../concat_packed_gpu';\nimport {concatImplCPU} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concatImpl(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL): TensorInfo {\n  const dtype = inputs[0].dtype;\n  if (dtype === 'complex64') {\n    const reals = inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concatImpl(reals, axis, backend);\n    const imagConcated = concatImpl(imags, axis, backend);\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  let runOnCpu = backend.shouldExecuteOnCPU(inputs);\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (dtype === 'string') {\n    runOnCpu = true;\n  }\n\n  if (runOnCpu) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const tensors2D = inputs.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      const shape = [-1, innerSize];\n      return reshape({inputs: {x: t}, backend, attrs: {shape}});\n    });\n\n    const inputsValShapes = tensors2D.map(t => {\n      return {vals: backend.readSync(t.dataId), shape: t.shape};\n    });\n\n    // Concats 2d tensors along axis=1.\n    const outShape =\n        backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis */);\n    const simplyConcat = tensors2D[0].shape[0] === 1;\n    const outVals =\n        concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n\n    const finalOutShape =\n        backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n\n    const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n\n    tensors2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return outInfo;\n  }\n\n  const maxTexturesInShader = env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER');\n  if (inputs.length > maxTexturesInShader) {\n    const reducedInputs = [];\n    for (let i = 0; i < inputs.length; i += maxTexturesInShader) {\n      const subArray = inputs.slice(i, i + maxTexturesInShader);\n      reducedInputs.push(concatImpl(subArray, axis, backend));\n    }\n    const result = concatImpl(reducedInputs, axis, backend);\n\n    for (const i of reducedInputs) {\n      backend.disposeIntermediateTensorInfo(i);\n    }\n\n    return result;\n  }\n\n  if (env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') &&\n      inputs[0].shape.length > 1) {\n    const program = new ConcatPackedProgram(inputs.map(t => t.shape), axis);\n    return backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const {tensors2D, outShape} = computeTensors2D(inputs, axis, backend);\n  const program =\n      new ConcatProgram(tensors2D.map(t => t.shape as [number, number]));\n  const result = backend.runWebGLProgram(program, tensors2D, dtype);\n\n  tensors2D.forEach(r => backend.disposeIntermediateTensorInfo(r));\n  const reshapedResult =\n      reshape({inputs: {x: result}, attrs: {shape: outShape}, backend});\n  backend.disposeIntermediateTensorInfo(result);\n\n  return reshapedResult;\n}\n\nfunction computeTensors2D(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL) {\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n  const tensors2D = inputs.map(\n      x => reshape({\n        inputs: {x},\n        attrs: {shape: [-1, util.sizeFromShape(x.shape.slice(axis))]},\n        backend\n      }));\n\n  return {tensors2D, outShape};\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}