{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from '../util_base';\nconst ARROW = '->';\nconst ARROW_REGEX = /->/g;\nconst COMMA = ',';\nconst ELLIPSIS = '...';\n/**\n * Parse an equation for einsum.\n *\n * @param equation The einsum equation (e.g., \"ij,jk->ik\").\n * @param numTensors Number of tensors provided along with `equation`. Used to\n *   check matching number of input tensors.\n * @returns An object consisting of the following fields:\n *   - allDims: all dimension names as strings.\n *   - summedDims: a list of all dimensions being summed over, as indices to\n *     the elements of `allDims`.\n *   - idDims: indices of the dimensions in each input tensor, as indices to\n *     the elements of `allDims.\n */\n\nexport function decodeEinsumEquation(equation, numTensors) {\n  equation = equation.replace(/\\s/g, ''); // Remove witespace in equation.\n\n  const numArrows = (equation.length - equation.replace(ARROW_REGEX, '').length) / ARROW.length;\n\n  if (numArrows < 1) {\n    throw new Error('Equations without an arrow are not supported.');\n  } else if (numArrows > 1) {\n    throw new Error(`Equation must contain exactly one arrow (\"${ARROW}\").`);\n  }\n\n  const [inputString, outputString] = equation.split(ARROW);\n  assert(inputString.indexOf(ELLIPSIS) === -1, () => `The ellipsis notation (\"${ELLIPSIS}\") is not supported yet.`);\n  const inputTerms = inputString.split(COMMA);\n  const numInputs = inputTerms.length;\n\n  if (numTensors !== numInputs) {\n    throw new Error(`Expected ${numInputs} input tensors, received ${numTensors}`);\n  }\n\n  if (numInputs > 2) {\n    throw new Error('Support for more than 2 input tensors is not implemented yet.');\n  }\n\n  const allDims = [];\n\n  for (let i = 0; i < outputString.length; ++i) {\n    const dimName = outputString[i];\n\n    if (!inputTerms.some(inputTerm => inputTerm.indexOf(dimName) !== -1)) {\n      throw new Error(`Output subscripts contain the label ${dimName} ` + `not present in the input subscripts.`);\n    }\n\n    if (allDims.indexOf(dimName) === -1) {\n      allDims.push(dimName);\n    }\n  }\n\n  for (let i = 0; i < inputString.length; ++i) {\n    const dimName = inputString[i];\n\n    if (allDims.indexOf(dimName) === -1 && dimName !== COMMA) {\n      allDims.push(dimName);\n    }\n  }\n\n  const idDims = new Array(inputTerms.length);\n\n  for (let i = 0; i < numInputs; ++i) {\n    if (new Set(inputTerms[i].split('')).size !== inputTerms[i].length) {\n      throw new Error(`Found duplicate axes in input component ${inputTerms[i]}. ` + `Support for duplicate axes in input is not implemented yet.`);\n    }\n\n    idDims[i] = [];\n\n    for (let j = 0; j < inputTerms[i].length; ++j) {\n      idDims[i].push(allDims.indexOf(inputTerms[i][j]));\n    }\n  }\n\n  const numDims = allDims.length; // Number of unique dimensions.\n\n  const numOutDims = outputString.length; // Number of output dimensions.\n\n  const summedDims = []; // Dimensions being summed over.\n\n  for (let i = numOutDims; i < numDims; ++i) {\n    summedDims.push(i);\n  }\n\n  return {\n    allDims,\n    summedDims,\n    idDims\n  };\n}\n/**\n * Get the permutation for a given input tensor.\n *\n * @param nDims Total number of dimension of all tensors involved in the einsum\n *   operation.\n * @param idDims Dimension indices involve in the tensor in question.\n * @returns An object consisting of the following fields:\n *   - permutationIndices: Indices to permute the axes of the tensor with.\n *   - expandDims: Indices to the dimension that need to be expanded from the\n *     tensor after permutation.\n */\n\nexport function getEinsumPermutation(nDims, idDims) {\n  let permutationIndices = new Array(nDims);\n  permutationIndices.fill(-1);\n\n  for (let i = 0; i < idDims.length; ++i) {\n    permutationIndices[idDims[i]] = i;\n  }\n\n  const expandDims = [];\n\n  for (let i = 0; i < nDims; ++i) {\n    if (permutationIndices[i] === -1) {\n      expandDims.push(i);\n    }\n  }\n\n  permutationIndices = permutationIndices.filter(d => d !== -1);\n  return {\n    permutationIndices,\n    expandDims\n  };\n}\n/**\n * Checks that the dimension sizes from different input tensors match the\n * equation.\n */\n\nexport function checkEinsumDimSizes(nDims, idDims, tensors) {\n  const dimSizes = new Array(nDims);\n\n  for (let i = 0; i < tensors.length; ++i) {\n    const shape = tensors[i].shape;\n\n    for (let j = 0; j < idDims[i].length; ++j) {\n      if (dimSizes[idDims[i][j]] === undefined) {\n        dimSizes[idDims[i][j]] = shape[j];\n      } else {\n        assert(dimSizes[idDims[i][j]] === shape[j], () => `Expected dimension ${dimSizes[idDims[i][j]]} at axis ${j} ` + `of input shaped ${JSON.stringify(shape)}, ` + `but got dimension ${shape[j]}`);\n      }\n    }\n  }\n}\n/**\n * Gets path of computation for einsum.\n *\n * @param summedDims indices to the dimensions being summed over.\n * @param idDims A look up table for the dimensions present in each input\n *     tensor. Each consituent array contains indices for the dimensions in the\n *     corresponding input tensor.\n *\n * @return A map with two fields:\n *   - path: The path of computation, with each element indicating the dimension\n *     being summed over after the element-wise multiplication in that step.\n *   - steps: With the same length as `path`. Each element contains the indices\n *     to the input tensors being used for element-wise multiplication in the\n *     corresponding step.\n */\n\nexport function getEinsumComputePath(summedDims, idDims) {\n  const path = summedDims;\n  const steps = [];\n  let nSteps = 0;\n\n  if (summedDims.length === 0) {\n    // Einsum that involes no summing: e.g., transpose and outer product.\n    path.push(-1);\n  }\n\n  nSteps = summedDims.length + 1;\n\n  for (let i = 0; i < nSteps; ++i) {\n    steps.push([]);\n  }\n\n  const computedTermIndices = [];\n\n  for (let i = 0; i < path.length; ++i) {\n    const summedDim = path[i];\n    const termIndices = findTermsWithDim(idDims, summedDim);\n\n    for (const termIndex of termIndices) {\n      if (computedTermIndices.indexOf(termIndex) === -1) {\n        steps[i].push(termIndex);\n        computedTermIndices.push(termIndex);\n      }\n    }\n  }\n\n  return {\n    path,\n    steps\n  };\n}\n/** Determines if an axes permutation is the identity permutation. */\n\nexport function isIdentityPermutation(perm) {\n  return perm.every((dim, index) => dim === index);\n}\n\nfunction findTermsWithDim(idDims, dim) {\n  const termIndices = [];\n\n  for (let i = 0; i < idDims.length; ++i) {\n    if (idDims[i].length === 0 || idDims[i].indexOf(dim) !== -1 || dim === -1) {\n      termIndices.push(i);\n    }\n  }\n\n  return termIndices;\n}","map":{"version":3,"sources":["../../../../../../tfjs-core/src/backends/einsum_util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Utility functions for computing einsum (tensor contraction and summation\n * based on Einstein summation.)\n */\n\nimport {Tensor} from '../tensor';\nimport {assert} from '../util_base';\n\nconst ARROW = '->';\nconst ARROW_REGEX = /->/g;\nconst COMMA = ',';\nconst ELLIPSIS = '...';\n\n/**\n * Parse an equation for einsum.\n *\n * @param equation The einsum equation (e.g., \"ij,jk->ik\").\n * @param numTensors Number of tensors provided along with `equation`. Used to\n *   check matching number of input tensors.\n * @returns An object consisting of the following fields:\n *   - allDims: all dimension names as strings.\n *   - summedDims: a list of all dimensions being summed over, as indices to\n *     the elements of `allDims`.\n *   - idDims: indices of the dimensions in each input tensor, as indices to\n *     the elements of `allDims.\n */\nexport function decodeEinsumEquation(equation: string, numTensors: number): {\n  allDims: string[],\n  summedDims: number[],\n  idDims: number[][],\n} {\n  equation = equation.replace(/\\s/g, '');  // Remove witespace in equation.\n  const numArrows =\n      (equation.length - equation.replace(ARROW_REGEX, '').length) /\n      ARROW.length;\n  if (numArrows < 1) {\n    throw new Error('Equations without an arrow are not supported.');\n  } else if (numArrows > 1) {\n    throw new Error(`Equation must contain exactly one arrow (\"${ARROW}\").`);\n  }\n  const [inputString, outputString] = equation.split(ARROW);\n  assert(\n      inputString.indexOf(ELLIPSIS) === -1,\n      () => `The ellipsis notation (\"${ELLIPSIS}\") is not supported yet.`);\n  const inputTerms = inputString.split(COMMA);\n  const numInputs = inputTerms.length;\n  if (numTensors !== numInputs) {\n    throw new Error(\n        `Expected ${numInputs} input tensors, received ${numTensors}`);\n  }\n  if (numInputs > 2) {\n    throw new Error(\n        'Support for more than 2 input tensors is not implemented yet.');\n  }\n\n  const allDims: string[] = [];\n  for (let i = 0; i < outputString.length; ++i) {\n    const dimName = outputString[i];\n    if (!inputTerms.some(inputTerm => inputTerm.indexOf(dimName) !== -1)) {\n      throw new Error(\n          `Output subscripts contain the label ${dimName} ` +\n          `not present in the input subscripts.`);\n    }\n    if (allDims.indexOf(dimName) === -1) {\n      allDims.push(dimName);\n    }\n  }\n  for (let i = 0; i < inputString.length; ++i) {\n    const dimName = inputString[i];\n    if (allDims.indexOf(dimName) === -1 && dimName !== COMMA) {\n      allDims.push(dimName);\n    }\n  }\n\n  const idDims: number[][] = new Array<number[]>(inputTerms.length);\n  for (let i = 0; i < numInputs; ++i) {\n    if (new Set(inputTerms[i].split('')).size !== inputTerms[i].length) {\n      throw new Error(\n          `Found duplicate axes in input component ${inputTerms[i]}. ` +\n          `Support for duplicate axes in input is not implemented yet.`);\n    }\n    idDims[i] = [];\n    for (let j = 0; j < inputTerms[i].length; ++j) {\n      idDims[i].push(allDims.indexOf(inputTerms[i][j]));\n    }\n  }\n\n  const numDims = allDims.length;          // Number of unique dimensions.\n  const numOutDims = outputString.length;  // Number of output dimensions.\n  const summedDims: number[] = [];         // Dimensions being summed over.\n  for (let i = numOutDims; i < numDims; ++i) {\n    summedDims.push(i);\n  }\n  return {allDims, summedDims, idDims};\n}\n\n/**\n * Get the permutation for a given input tensor.\n *\n * @param nDims Total number of dimension of all tensors involved in the einsum\n *   operation.\n * @param idDims Dimension indices involve in the tensor in question.\n * @returns An object consisting of the following fields:\n *   - permutationIndices: Indices to permute the axes of the tensor with.\n *   - expandDims: Indices to the dimension that need to be expanded from the\n *     tensor after permutation.\n */\nexport function getEinsumPermutation(nDims: number, idDims: number[]):\n    {permutationIndices: number[], expandDims: number[]} {\n  let permutationIndices: number[] = new Array<number>(nDims);\n  permutationIndices.fill(-1);\n  for (let i = 0; i < idDims.length; ++i) {\n    permutationIndices[idDims[i]] = i;\n  }\n  const expandDims: number[] = [];\n  for (let i = 0; i < nDims; ++i) {\n    if (permutationIndices[i] === -1) {\n      expandDims.push(i);\n    }\n  }\n  permutationIndices = permutationIndices.filter(d => d !== -1);\n  return {permutationIndices, expandDims};\n}\n\n/**\n * Checks that the dimension sizes from different input tensors match the\n * equation.\n */\nexport function checkEinsumDimSizes(\n    nDims: number, idDims: number[][], tensors: Tensor[]) {\n  const dimSizes: number[] = new Array<number>(nDims);\n  for (let i = 0; i < tensors.length; ++i) {\n    const shape: number[] = tensors[i].shape;\n    for (let j = 0; j < idDims[i].length; ++j) {\n      if (dimSizes[idDims[i][j]] === undefined) {\n        dimSizes[idDims[i][j]] = shape[j];\n      } else {\n        assert(\n            dimSizes[idDims[i][j]] === shape[j],\n            () => `Expected dimension ${dimSizes[idDims[i][j]]} at axis ${j} ` +\n                `of input shaped ${JSON.stringify(shape)}, ` +\n                `but got dimension ${shape[j]}`);\n      }\n    }\n  }\n}\n\n/**\n * Gets path of computation for einsum.\n *\n * @param summedDims indices to the dimensions being summed over.\n * @param idDims A look up table for the dimensions present in each input\n *     tensor. Each consituent array contains indices for the dimensions in the\n *     corresponding input tensor.\n *\n * @return A map with two fields:\n *   - path: The path of computation, with each element indicating the dimension\n *     being summed over after the element-wise multiplication in that step.\n *   - steps: With the same length as `path`. Each element contains the indices\n *     to the input tensors being used for element-wise multiplication in the\n *     corresponding step.\n */\nexport function getEinsumComputePath(summedDims: number[], idDims: number[][]):\n    {path: number[], steps: number[][]} {\n  const path: number[] = summedDims;\n  const steps: number[][] = [];\n  let nSteps = 0;\n  if (summedDims.length === 0) {\n    // Einsum that involes no summing: e.g., transpose and outer product.\n    path.push(-1);\n  }\n  nSteps = summedDims.length + 1;\n  for (let i = 0; i < nSteps; ++i) {\n    steps.push([]);\n  }\n  const computedTermIndices: number[] = [];\n  for (let i = 0; i < path.length; ++i) {\n    const summedDim = path[i];\n    const termIndices = findTermsWithDim(idDims, summedDim);\n    for (const termIndex of termIndices) {\n      if (computedTermIndices.indexOf(termIndex) === -1) {\n        steps[i].push(termIndex);\n        computedTermIndices.push(termIndex);\n      }\n    }\n  }\n  return {path, steps};\n}\n\n/** Determines if an axes permutation is the identity permutation. */\nexport function isIdentityPermutation(perm: number[]): boolean {\n  return perm.every((dim: number, index: number) => dim === index);\n}\n\nfunction findTermsWithDim(idDims: number[][], dim: number): number[] {\n  const termIndices: number[] = [];\n  for (let i = 0; i < idDims.length; ++i) {\n    if (idDims[i].length === 0 || idDims[i].indexOf(dim) !== -1 || dim === -1) {\n      termIndices.push(i);\n    }\n  }\n  return termIndices;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}