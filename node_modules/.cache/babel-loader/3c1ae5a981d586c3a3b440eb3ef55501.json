{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Recurrent Neural Network Layers.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy, util } from '@tensorflow/tfjs-core';\nimport { getActivation, serializeActivation } from '../activations';\nimport * as K from '../backend/tfjs_backend';\nimport { nameScope } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, SymbolicTensor } from '../engine/topology';\nimport { Layer } from '../engine/topology';\nimport { AttributeError, NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, Initializer, Ones, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { assertPositiveInteger } from '../utils/generic_utils';\nimport * as math_utils from '../utils/math_utils';\nimport { getExactlyOneShape, getExactlyOneTensor, isArrayOfShapes } from '../utils/types_utils';\nimport { batchGetValue, batchSetValue } from '../variables';\nimport { deserialize } from './serialization';\n/**\n * Standardize `apply()` args to a single list of tensor inputs.\n *\n * When running a model loaded from file, the input tensors `initialState` and\n * `constants` are passed to `RNN.apply()` as part of `inputs` instead of the\n * dedicated kwargs fields. `inputs` consists of\n * `[inputs, initialState0, initialState1, ..., constant0, constant1]` in this\n * case.\n * This method makes sure that arguments are\n * separated and that `initialState` and `constants` are `Array`s of tensors\n * (or None).\n *\n * @param inputs Tensor or `Array` of  tensors.\n * @param initialState Tensor or `Array` of tensors or `null`/`undefined`.\n * @param constants Tensor or `Array` of tensors or `null`/`undefined`.\n * @returns An object consisting of\n *   inputs: A tensor.\n *   initialState: `Array` of tensors or `null`.\n *   constants: `Array` of tensors or `null`.\n * @throws ValueError, if `inputs` is an `Array` but either `initialState` or\n *   `constants` is provided.\n */\n\nexport function standardizeArgs(inputs, initialState, constants, numConstants) {\n  if (Array.isArray(inputs)) {\n    if (initialState != null || constants != null) {\n      throw new ValueError('When inputs is an array, neither initialState or constants ' + 'should be provided');\n    }\n\n    if (numConstants != null) {\n      constants = inputs.slice(inputs.length - numConstants, inputs.length);\n      inputs = inputs.slice(0, inputs.length - numConstants);\n    }\n\n    if (inputs.length > 1) {\n      initialState = inputs.slice(1, inputs.length);\n    }\n\n    inputs = inputs[0];\n  }\n\n  function toListOrNull(x) {\n    if (x == null || Array.isArray(x)) {\n      return x;\n    } else {\n      return [x];\n    }\n  }\n\n  initialState = toListOrNull(initialState);\n  constants = toListOrNull(constants);\n  return {\n    inputs,\n    initialState,\n    constants\n  };\n}\n/**\n * Iterates over the time dimension of a tensor.\n *\n * @param stepFunction RNN step function.\n *   Parameters:\n *     inputs: tensor with shape `[samples, ...]` (no time dimension),\n *       representing input for the batch of samples at a certain time step.\n *     states: an Array of tensors.\n *   Returns:\n *     outputs: tensor with shape `[samples, outputDim]` (no time dimension).\n *     newStates: list of tensors, same length and shapes as `states`. The first\n *       state in the list must be the output tensor at the previous timestep.\n * @param inputs Tensor of temporal data of shape `[samples, time, ...]` (at\n *   least 3D).\n * @param initialStates Tensor with shape `[samples, outputDim]` (no time\n *   dimension), containing the initial values of the states used in the step\n *   function.\n * @param goBackwards If `true`, do the iteration over the time dimension in\n *   reverse order and return the reversed sequence.\n * @param mask Binary tensor with shape `[sample, time, 1]`, with a zero for\n *   every element that is masked.\n * @param constants An Array of constant values passed at each step.\n * @param unroll Whether to unroll the RNN or to use a symbolic loop. *Not*\n *   applicable to this imperative deeplearn.js backend. Its value is ignored.\n * @param needPerStepOutputs Whether the per-step outputs are to be\n *   concatenated into a single tensor and returned (as the second return\n *   value). Default: `false`. This arg is included so that the relatively\n *   expensive concatenation of the stepwise outputs can be omitted unless\n *   the stepwise outputs need to be kept (e.g., for an LSTM layer of which\n *   `returnSequence` is `true`.)\n * @returns An Array: `[lastOutput, outputs, newStates]`.\n *   lastOutput: the lastest output of the RNN, of shape `[samples, ...]`.\n *   outputs: tensor with shape `[samples, time, ...]` where each entry\n *     `output[s, t]` is the output of the step function at time `t` for sample\n *     `s`. This return value is provided if and only if the\n *     `needPerStepOutputs` is set as `true`. If it is set as `false`, this\n *     return value will be `undefined`.\n *   newStates: Array of tensors, latest states returned by the step function,\n *      of shape `(samples, ...)`.\n * @throws ValueError If input dimension is less than 3.\n *\n * TODO(nielsene): This needs to be tidy-ed.\n */\n\nexport function rnn(stepFunction, inputs, initialStates) {\n  let goBackwards = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  let mask = arguments.length > 4 ? arguments[4] : undefined;\n  let constants = arguments.length > 5 ? arguments[5] : undefined;\n  let unroll = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n  let needPerStepOutputs = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n  return tfc.tidy(() => {\n    const ndim = inputs.shape.length;\n\n    if (ndim < 3) {\n      throw new ValueError(`Input should be at least 3D, but is ${ndim}D.`);\n    } // Transpose to time-major, i.e., from [batch, time, ...] to [time, batch,\n    // ...].\n\n\n    const axes = [1, 0].concat(math_utils.range(2, ndim));\n    inputs = tfc.transpose(inputs, axes);\n\n    if (constants != null) {\n      throw new NotImplementedError('The rnn() functoin of the deeplearn.js backend does not support ' + 'constants yet.');\n    } // Porting Note: the unroll option is ignored by the imperative backend.\n\n\n    if (unroll) {\n      console.warn('Backend rnn(): the unroll = true option is not applicable to the ' + 'imperative deeplearn.js backend.');\n    }\n\n    if (mask != null) {\n      mask = tfc.cast(tfc.cast(mask, 'bool'), 'float32');\n\n      if (mask.rank === ndim - 1) {\n        mask = tfc.expandDims(mask, -1);\n      }\n\n      mask = tfc.transpose(mask, axes);\n    }\n\n    if (goBackwards) {\n      inputs = tfc.reverse(inputs, 0);\n\n      if (mask != null) {\n        mask = tfc.reverse(mask, 0);\n      }\n    } // Porting Note: PyKeras with TensorFlow backend uses a symbolic loop\n    //   (tf.while_loop). But for the imperative deeplearn.js backend, we just\n    //   use the usual TypeScript control flow to iterate over the time steps in\n    //   the inputs.\n    // Porting Note: PyKeras patches a \"_use_learning_phase\" attribute to\n    // outputs.\n    //   This is not idiomatic in TypeScript. The info regarding whether we are\n    //   in a learning (i.e., training) phase for RNN is passed in a different\n    //   way.\n\n\n    const perStepOutputs = [];\n    let lastOutput;\n    let states = initialStates;\n    const timeSteps = inputs.shape[0];\n    const perStepInputs = tfc.unstack(inputs);\n    let perStepMasks;\n\n    if (mask != null) {\n      perStepMasks = tfc.unstack(mask);\n    }\n\n    for (let t = 0; t < timeSteps; ++t) {\n      const currentInput = perStepInputs[t];\n      const stepOutputs = tfc.tidy(() => stepFunction(currentInput, states));\n\n      if (mask == null) {\n        lastOutput = stepOutputs[0];\n        states = stepOutputs[1];\n      } else {\n        const maskedOutputs = tfc.tidy(() => {\n          const stepMask = perStepMasks[t];\n          const negStepMask = tfc.sub(tfc.onesLike(stepMask), stepMask); // TODO(cais): Would tfc.where() be better for performance?\n\n          const output = tfc.add(tfc.mul(stepOutputs[0], stepMask), tfc.mul(states[0], negStepMask));\n          const newStates = states.map((state, i) => {\n            return tfc.add(tfc.mul(stepOutputs[1][i], stepMask), tfc.mul(state, negStepMask));\n          });\n          return {\n            output,\n            newStates\n          };\n        });\n        lastOutput = maskedOutputs.output;\n        states = maskedOutputs.newStates;\n      }\n\n      if (needPerStepOutputs) {\n        perStepOutputs.push(lastOutput);\n      }\n    }\n\n    let outputs;\n\n    if (needPerStepOutputs) {\n      const axis = 1;\n      outputs = tfc.stack(perStepOutputs, axis);\n    }\n\n    return [lastOutput, outputs, states];\n  });\n}\nexport class RNN extends Layer {\n  constructor(args) {\n    super(args);\n    let cell;\n\n    if (args.cell == null) {\n      throw new ValueError('cell property is missing for the constructor of RNN.');\n    } else if (Array.isArray(args.cell)) {\n      cell = new StackedRNNCells({\n        cells: args.cell\n      });\n    } else {\n      cell = args.cell;\n    }\n\n    if (cell.stateSize == null) {\n      throw new ValueError('The RNN cell should have an attribute `stateSize` (tuple of ' + 'integers, one integer per RNN state).');\n    }\n\n    this.cell = cell;\n    this.returnSequences = args.returnSequences == null ? false : args.returnSequences;\n    this.returnState = args.returnState == null ? false : args.returnState;\n    this.goBackwards = args.goBackwards == null ? false : args.goBackwards;\n    this._stateful = args.stateful == null ? false : args.stateful;\n    this.unroll = args.unroll == null ? false : args.unroll;\n    this.supportsMasking = true;\n    this.inputSpec = [new InputSpec({\n      ndim: 3\n    })];\n    this.stateSpec = null;\n    this.states_ = null; // TODO(cais): Add constantsSpec and numConstants.\n\n    this.numConstants = null; // TODO(cais): Look into the use of initial_state in the kwargs of the\n    //   constructor.\n\n    this.keptStates = [];\n  } // Porting Note: This is the equivalent of `RNN.states` property getter in\n  //   PyKeras.\n\n\n  getStates() {\n    if (this.states_ == null) {\n      const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      return math_utils.range(0, numStates).map(x => null);\n    } else {\n      return this.states_;\n    }\n  } // Porting Note: This is the equivalent of the `RNN.states` property setter in\n  //   PyKeras.\n\n\n  setStates(states) {\n    this.states_ = states;\n  }\n\n  computeOutputShape(inputShape) {\n    if (isArrayOfShapes(inputShape)) {\n      inputShape = inputShape[0];\n    }\n\n    inputShape = inputShape; // TODO(cais): Remove the casting once stacked RNN cells become supported.\n\n    let stateSize = this.cell.stateSize;\n\n    if (!Array.isArray(stateSize)) {\n      stateSize = [stateSize];\n    }\n\n    const outputDim = stateSize[0];\n    let outputShape;\n\n    if (this.returnSequences) {\n      outputShape = [inputShape[0], inputShape[1], outputDim];\n    } else {\n      outputShape = [inputShape[0], outputDim];\n    }\n\n    if (this.returnState) {\n      const stateShape = [];\n\n      for (const dim of stateSize) {\n        stateShape.push([inputShape[0], dim]);\n      }\n\n      return [outputShape].concat(stateShape);\n    } else {\n      return outputShape;\n    }\n  }\n\n  computeMask(inputs, mask) {\n    return tfc.tidy(() => {\n      if (Array.isArray(mask)) {\n        mask = mask[0];\n      }\n\n      const outputMask = this.returnSequences ? mask : null;\n\n      if (this.returnState) {\n        const stateMask = this.states.map(s => null);\n        return [outputMask].concat(stateMask);\n      } else {\n        return outputMask;\n      }\n    });\n  }\n  /**\n   * Get the current state tensors of the RNN.\n   *\n   * If the state hasn't been set, return an array of `null`s of the correct\n   * length.\n   */\n\n\n  get states() {\n    if (this.states_ == null) {\n      const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      const output = [];\n\n      for (let i = 0; i < numStates; ++i) {\n        output.push(null);\n      }\n\n      return output;\n    } else {\n      return this.states_;\n    }\n  }\n\n  set states(s) {\n    this.states_ = s;\n  }\n\n  build(inputShape) {\n    // Note inputShape will be an Array of Shapes of initial states and\n    // constants if these are passed in apply().\n    const constantShape = null;\n\n    if (this.numConstants != null) {\n      throw new NotImplementedError('Constants support is not implemented in RNN yet.');\n    }\n\n    if (isArrayOfShapes(inputShape)) {\n      inputShape = inputShape[0];\n    }\n\n    inputShape = inputShape;\n    const batchSize = this.stateful ? inputShape[0] : null;\n    const inputDim = inputShape.slice(2);\n    this.inputSpec[0] = new InputSpec({\n      shape: [batchSize, null, ...inputDim]\n    }); // Allow cell (if RNNCell Layer) to build before we set or validate\n    // stateSpec.\n\n    const stepInputShape = [inputShape[0]].concat(inputShape.slice(2));\n\n    if (constantShape != null) {\n      throw new NotImplementedError('Constants support is not implemented in RNN yet.');\n    } else {\n      this.cell.build(stepInputShape);\n    } // Set or validate stateSpec.\n\n\n    let stateSize;\n\n    if (Array.isArray(this.cell.stateSize)) {\n      stateSize = this.cell.stateSize;\n    } else {\n      stateSize = [this.cell.stateSize];\n    }\n\n    if (this.stateSpec != null) {\n      if (!util.arraysEqual(this.stateSpec.map(spec => spec.shape[spec.shape.length - 1]), stateSize)) {\n        throw new ValueError(`An initialState was passed that is not compatible with ` + `cell.stateSize. Received stateSpec=${this.stateSpec}; ` + `However cell.stateSize is ${this.cell.stateSize}`);\n      }\n    } else {\n      this.stateSpec = stateSize.map(dim => new InputSpec({\n        shape: [null, dim]\n      }));\n    }\n\n    if (this.stateful) {\n      this.resetStates();\n    }\n  }\n  /**\n   * Reset the state tensors of the RNN.\n   *\n   * If the `states` argument is `undefined` or `null`, will set the\n   * state tensor(s) of the RNN to all-zero tensors of the appropriate\n   * shape(s).\n   *\n   * If `states` is provided, will set the state tensors of the RNN to its\n   * value.\n   *\n   * @param states Optional externally-provided initial states.\n   * @param training Whether this call is done during training. For stateful\n   *   RNNs, this affects whether the old states are kept or discarded. In\n   *   particular, if `training` is `true`, the old states will be kept so\n   *   that subsequent backpropgataion through time (BPTT) may work properly.\n   *   Else, the old states will be discarded.\n   */\n\n\n  resetStates(states) {\n    let training = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    tidy(() => {\n      if (!this.stateful) {\n        throw new AttributeError('Cannot call resetStates() on an RNN Layer that is not stateful.');\n      }\n\n      const batchSize = this.inputSpec[0].shape[0];\n\n      if (batchSize == null) {\n        throw new ValueError('If an RNN is stateful, it needs to know its batch size. Specify ' + 'the batch size of your input tensors: \\n' + '- If using a Sequential model, specify the batch size by ' + 'passing a `batchInputShape` option to your first layer.\\n' + '- If using the functional API, specify the batch size by ' + 'passing a `batchShape` option to your Input layer.');\n      } // Initialize state if null.\n\n\n      if (this.states_ == null) {\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ = this.cell.stateSize.map(dim => tfc.zeros([batchSize, dim]));\n        } else {\n          this.states_ = [tfc.zeros([batchSize, this.cell.stateSize])];\n        }\n      } else if (states == null) {\n        // Dispose old state tensors.\n        tfc.dispose(this.states_); // For stateful RNNs, fully dispose kept old states.\n\n        if (this.keptStates != null) {\n          tfc.dispose(this.keptStates);\n          this.keptStates = [];\n        }\n\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ = this.cell.stateSize.map(dim => tfc.zeros([batchSize, dim]));\n        } else {\n          this.states_[0] = tfc.zeros([batchSize, this.cell.stateSize]);\n        }\n      } else {\n        if (!Array.isArray(states)) {\n          states = [states];\n        }\n\n        if (states.length !== this.states_.length) {\n          throw new ValueError(`Layer ${this.name} expects ${this.states_.length} state(s), ` + `but it received ${states.length} state value(s). Input ` + `received: ${states}`);\n        }\n\n        if (training === true) {\n          // Store old state tensors for complete disposal later, i.e., during\n          // the next no-arg call to this method. We do not dispose the old\n          // states immediately because that BPTT (among other things) require\n          // them.\n          this.keptStates.push(this.states_.slice());\n        } else {\n          tfc.dispose(this.states_);\n        }\n\n        for (let index = 0; index < this.states_.length; ++index) {\n          const value = states[index];\n          const dim = Array.isArray(this.cell.stateSize) ? this.cell.stateSize[index] : this.cell.stateSize;\n          const expectedShape = [batchSize, dim];\n\n          if (!util.arraysEqual(value.shape, expectedShape)) {\n            throw new ValueError(`State ${index} is incompatible with layer ${this.name}: ` + `expected shape=${expectedShape}, received shape=${value.shape}`);\n          }\n\n          this.states_[index] = value;\n        }\n      }\n\n      this.states_ = this.states_.map(state => tfc.keep(state.clone()));\n    });\n  }\n\n  apply(inputs, kwargs) {\n    // TODO(cais): Figure out whether initialState is in kwargs or inputs.\n    let initialState = kwargs == null ? null : kwargs['initialState'];\n    let constants = kwargs == null ? null : kwargs['constants'];\n\n    if (kwargs == null) {\n      kwargs = {};\n    }\n\n    const standardized = standardizeArgs(inputs, initialState, constants, this.numConstants);\n    inputs = standardized.inputs;\n    initialState = standardized.initialState;\n    constants = standardized.constants; // If any of `initial_state` or `constants` are specified and are\n    // `tf.SymbolicTensor`s, then add them to the inputs and temporarily modify\n    // the input_spec to include them.\n\n    let additionalInputs = [];\n    let additionalSpecs = [];\n\n    if (initialState != null) {\n      kwargs['initialState'] = initialState;\n      additionalInputs = additionalInputs.concat(initialState);\n      this.stateSpec = [];\n\n      for (const state of initialState) {\n        this.stateSpec.push(new InputSpec({\n          shape: state.shape\n        }));\n      } // TODO(cais): Use the following instead.\n      // this.stateSpec = initialState.map(state => new InputSpec({shape:\n      // state.shape}));\n\n\n      additionalSpecs = additionalSpecs.concat(this.stateSpec);\n    }\n\n    if (constants != null) {\n      kwargs['constants'] = constants;\n      additionalInputs = additionalInputs.concat(constants); // TODO(cais): Add this.constantsSpec.\n\n      this.numConstants = constants.length;\n    }\n\n    const isTensor = additionalInputs[0] instanceof SymbolicTensor;\n\n    if (isTensor) {\n      // Compute full input spec, including state and constants.\n      const fullInput = [inputs].concat(additionalInputs);\n      const fullInputSpec = this.inputSpec.concat(additionalSpecs); // Perform the call with temporarily replaced inputSpec.\n\n      const originalInputSpec = this.inputSpec;\n      this.inputSpec = fullInputSpec;\n      const output = super.apply(fullInput, kwargs);\n      this.inputSpec = originalInputSpec;\n      return output;\n    } else {\n      return super.apply(inputs, kwargs);\n    }\n  } // tslint:disable-next-line:no-any\n\n\n  call(inputs, kwargs) {\n    // Input shape: `[samples, time (padded with zeros), input_dim]`.\n    // Note that the .build() method of subclasses **must** define\n    // this.inputSpec and this.stateSpec owith complete input shapes.\n    return tidy(() => {\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      let initialState = kwargs == null ? null : kwargs['initialState'];\n      inputs = getExactlyOneTensor(inputs);\n\n      if (initialState == null) {\n        if (this.stateful) {\n          initialState = this.states_;\n        } else {\n          initialState = this.getInitialState(inputs);\n        }\n      }\n\n      const numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n\n      if (initialState.length !== numStates) {\n        throw new ValueError(`RNN Layer has ${numStates} state(s) but was passed ` + `${initialState.length} initial state(s).`);\n      }\n\n      if (this.unroll) {\n        console.warn('Ignoring unroll = true for RNN layer, due to imperative backend.');\n      }\n\n      const cellCallKwargs = {\n        training\n      }; // TODO(cais): Add support for constants.\n\n      const step = (inputs, states) => {\n        // `inputs` and `states` are concatenated to form a single `Array` of\n        // `tf.Tensor`s as the input to `cell.call()`.\n        const outputs = this.cell.call([inputs].concat(states), cellCallKwargs); // Marshall the return value into output and new states.\n\n        return [outputs[0], outputs.slice(1)];\n      }; // TODO(cais): Add support for constants.\n\n\n      const rnnOutputs = rnn(step, inputs, initialState, this.goBackwards, mask, null, this.unroll, this.returnSequences);\n      const lastOutput = rnnOutputs[0];\n      const outputs = rnnOutputs[1];\n      const states = rnnOutputs[2];\n\n      if (this.stateful) {\n        this.resetStates(states, training);\n      }\n\n      const output = this.returnSequences ? outputs : lastOutput; // TODO(cais): Porperty set learning phase flag.\n\n      if (this.returnState) {\n        return [output].concat(states);\n      } else {\n        return output;\n      }\n    });\n  }\n\n  getInitialState(inputs) {\n    return tidy(() => {\n      // Build an all-zero tensor of shape [samples, outputDim].\n      // [Samples, timeSteps, inputDim].\n      let initialState = tfc.zeros(inputs.shape); // [Samples].\n\n      initialState = tfc.sum(initialState, [1, 2]);\n      initialState = K.expandDims(initialState); // [Samples, 1].\n\n      if (Array.isArray(this.cell.stateSize)) {\n        return this.cell.stateSize.map(dim => dim > 1 ? K.tile(initialState, [1, dim]) : initialState);\n      } else {\n        return this.cell.stateSize > 1 ? [K.tile(initialState, [1, this.cell.stateSize])] : [initialState];\n      }\n    });\n  }\n\n  get trainableWeights() {\n    if (!this.trainable) {\n      return [];\n    } // Porting Note: In TypeScript, `this` is always an instance of `Layer`.\n\n\n    return this.cell.trainableWeights;\n  }\n\n  get nonTrainableWeights() {\n    // Porting Note: In TypeScript, `this` is always an instance of `Layer`.\n    if (!this.trainable) {\n      return this.cell.weights;\n    }\n\n    return this.cell.nonTrainableWeights;\n  }\n\n  setFastWeightInitDuringBuild(value) {\n    super.setFastWeightInitDuringBuild(value);\n\n    if (this.cell != null) {\n      this.cell.setFastWeightInitDuringBuild(value);\n    }\n  }\n\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {\n      returnSequences: this.returnSequences,\n      returnState: this.returnState,\n      goBackwards: this.goBackwards,\n      stateful: this.stateful,\n      unroll: this.unroll\n    };\n\n    if (this.numConstants != null) {\n      config['numConstants'] = this.numConstants;\n    }\n\n    const cellConfig = this.cell.getConfig();\n\n    if (this.getClassName() === RNN.className) {\n      config['cell'] = {\n        'className': this.cell.getClassName(),\n        'config': cellConfig\n      };\n    } // this order is necessary, to prevent cell name from replacing layer name\n\n\n    return Object.assign({}, cellConfig, baseConfig, config);\n  }\n  /** @nocollapse */\n\n\n  static fromConfig(cls, config) {\n    let customObjects = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const cellConfig = config['cell'];\n    const cell = deserialize(cellConfig, customObjects);\n    return new cls(Object.assign(config, {\n      cell\n    }));\n  }\n\n}\n/** @nocollapse */\n\nRNN.className = 'RNN';\nserialization.registerClass(RNN); // Porting Note: This is a common parent class for RNN cells. There is no\n// equivalent of this in PyKeras. Having a common parent class forgoes the\n//  need for `has_attr(cell, ...)` checks or its TypeScript equivalent.\n\n/**\n * An RNNCell layer.\n *\n * @doc {heading: 'Layers', subheading: 'Classes'}\n */\n\nexport class RNNCell extends Layer {}\nexport class SimpleRNNCell extends RNNCell {\n  constructor(args) {\n    super(args);\n    this.DEFAULT_ACTIVATION = 'tanh';\n    this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n    this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n    this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n    this.units = args.units;\n    assertPositiveInteger(this.units, `units`);\n    this.activation = getActivation(args.activation == null ? this.DEFAULT_ACTIVATION : args.activation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n    this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n    this.biasInitializer = getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.dropout = math_utils.min([1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([1, math_utils.max([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])]);\n    this.dropoutFunc = args.dropoutFunc;\n    this.stateSize = this.units;\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape); // TODO(cais): Use regularizer.\n\n    this.kernel = this.addWeight('kernel', [inputShape[inputShape.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n    this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n\n    this.built = true;\n  } // Porting Note: PyKeras' equivalent of this method takes two tensor inputs:\n  //   `inputs` and `states`. Here, the two tensors are combined into an\n  //   `Tensor[]` Array as the first input argument.\n  //   Similarly, PyKeras' equivalent of this method returns two values:\n  //    `output` and `[output]`. Here the two are combined into one length-2\n  //    `Tensor[]`, consisting of `output` repeated.\n\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = inputs;\n\n      if (inputs.length !== 2) {\n        throw new ValueError(`SimpleRNNCell expects 2 input Tensors, got ${inputs.length}.`);\n      }\n\n      let prevOutput = inputs[1];\n      inputs = inputs[0];\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n          ones: () => tfc.onesLike(inputs),\n          rate: this.dropout,\n          training,\n          dropoutFunc: this.dropoutFunc\n        });\n      }\n\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n          ones: () => tfc.onesLike(prevOutput),\n          rate: this.recurrentDropout,\n          training,\n          dropoutFunc: this.dropoutFunc\n        });\n      }\n\n      let h;\n      const dpMask = this.dropoutMask;\n      const recDpMask = this.recurrentDropoutMask;\n\n      if (dpMask != null) {\n        h = K.dot(tfc.mul(inputs, dpMask), this.kernel.read());\n      } else {\n        h = K.dot(inputs, this.kernel.read());\n      }\n\n      if (this.bias != null) {\n        h = K.biasAdd(h, this.bias.read());\n      }\n\n      if (recDpMask != null) {\n        prevOutput = tfc.mul(prevOutput, recDpMask);\n      }\n\n      let output = tfc.add(h, K.dot(prevOutput, this.recurrentKernel.read()));\n\n      if (this.activation != null) {\n        output = this.activation.apply(output);\n      } // TODO(cais): Properly set learning phase on output tensor?\n\n\n      return [output, output];\n    });\n  }\n\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout\n    };\n    return Object.assign({}, baseConfig, config);\n  }\n\n}\n/** @nocollapse */\n\nSimpleRNNCell.className = 'SimpleRNNCell';\nserialization.registerClass(SimpleRNNCell);\nexport class SimpleRNN extends RNN {\n  constructor(args) {\n    args.cell = new SimpleRNNCell(args);\n    super(args); // TODO(cais): Add activityRegularizer.\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState = kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {\n        mask,\n        training,\n        initialState\n      });\n    });\n  }\n  /** @nocollapse */\n\n\n  static fromConfig(cls, config) {\n    return new cls(config);\n  }\n\n}\n/** @nocollapse */\n\nSimpleRNN.className = 'SimpleRNN';\nserialization.registerClass(SimpleRNN);\nexport class GRUCell extends RNNCell {\n  constructor(args) {\n    super(args);\n    this.DEFAULT_ACTIVATION = 'tanh';\n    this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n    this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n    this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n    this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n\n    if (args.resetAfter) {\n      throw new ValueError(`GRUCell does not support reset_after parameter set to true.`);\n    }\n\n    this.units = args.units;\n    assertPositiveInteger(this.units, 'units');\n    this.activation = getActivation(args.activation === undefined ? this.DEFAULT_ACTIVATION : args.activation);\n    this.recurrentActivation = getActivation(args.recurrentActivation === undefined ? this.DEFAULT_RECURRENT_ACTIVATION : args.recurrentActivation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n    this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n    this.biasInitializer = getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.dropout = math_utils.min([1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([1, math_utils.max([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])]);\n    this.dropoutFunc = args.dropoutFunc;\n    this.implementation = args.implementation;\n    this.stateSize = this.units;\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const inputDim = inputShape[inputShape.length - 1];\n    this.kernel = this.addWeight('kernel', [inputDim, this.units * 3], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n    this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units * 3], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [this.units * 3], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    } // Porting Notes: Unlike the PyKeras implementation, we perform slicing\n    //   of the weights and bias in the call() method, at execution time.\n\n\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = inputs;\n\n      if (inputs.length !== 2) {\n        throw new ValueError(`GRUCell expects 2 input Tensors (inputs, h, c), got ` + `${inputs.length}.`);\n      }\n\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      let hTMinus1 = inputs[1]; // Previous memory state.\n\n      inputs = inputs[0]; // Note: For superior performance, TensorFlow.js always uses\n      // implementation 2, regardless of the actual value of\n      // config.implementation.\n\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n          ones: () => tfc.onesLike(inputs),\n          rate: this.dropout,\n          training,\n          count: 3,\n          dropoutFunc: this.dropoutFunc\n        });\n      }\n\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n          ones: () => tfc.onesLike(hTMinus1),\n          rate: this.recurrentDropout,\n          training,\n          count: 3,\n          dropoutFunc: this.dropoutFunc\n        });\n      }\n\n      const dpMask = this.dropoutMask;\n      const recDpMask = this.recurrentDropoutMask;\n      let z;\n      let r;\n      let hh;\n\n      if (0 < this.dropout && this.dropout < 1) {\n        inputs = tfc.mul(inputs, dpMask[0]);\n      }\n\n      let matrixX = K.dot(inputs, this.kernel.read());\n\n      if (this.useBias) {\n        matrixX = K.biasAdd(matrixX, this.bias.read());\n      }\n\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1) {\n        hTMinus1 = tfc.mul(hTMinus1, recDpMask[0]);\n      }\n\n      const recurrentKernelValue = this.recurrentKernel.read();\n      const [rk1, rk2] = tfc.split(recurrentKernelValue, [2 * this.units, this.units], recurrentKernelValue.rank - 1);\n      const matrixInner = K.dot(hTMinus1, rk1);\n      const [xZ, xR, xH] = tfc.split(matrixX, 3, matrixX.rank - 1);\n      const [recurrentZ, recurrentR] = tfc.split(matrixInner, 2, matrixInner.rank - 1);\n      z = this.recurrentActivation.apply(tfc.add(xZ, recurrentZ));\n      r = this.recurrentActivation.apply(tfc.add(xR, recurrentR));\n      const recurrentH = K.dot(tfc.mul(r, hTMinus1), rk2);\n      hh = this.activation.apply(tfc.add(xH, recurrentH));\n      const h = tfc.add(tfc.mul(z, hTMinus1), tfc.mul(tfc.add(1, tfc.neg(z)), hh)); // TODO(cais): Add use_learning_phase flag properly.\n\n      return [h, h];\n    });\n  }\n\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      recurrentActivation: serializeActivation(this.recurrentActivation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n      implementation: this.implementation,\n      resetAfter: false\n    };\n    return Object.assign({}, baseConfig, config);\n  }\n\n}\n/** @nocollapse */\n\nGRUCell.className = 'GRUCell';\nserialization.registerClass(GRUCell);\nexport class GRU extends RNN {\n  constructor(args) {\n    if (args.implementation === 0) {\n      console.warn('`implementation=0` has been deprecated, and now defaults to ' + '`implementation=1`. Please update your layer call.');\n    }\n\n    args.cell = new GRUCell(args);\n    super(args); // TODO(cais): Add activityRegularizer.\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState = kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {\n        mask,\n        training,\n        initialState\n      });\n    });\n  }\n  /** @nocollapse */\n\n\n  static fromConfig(cls, config) {\n    if (config['implmentation'] === 0) {\n      config['implementation'] = 1;\n    }\n\n    return new cls(config);\n  }\n\n}\n/** @nocollapse */\n\nGRU.className = 'GRU';\nserialization.registerClass(GRU);\nexport class LSTMCell extends RNNCell {\n  constructor(args) {\n    super(args);\n    this.DEFAULT_ACTIVATION = 'tanh';\n    this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n    this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n    this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n    this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n    this.units = args.units;\n    assertPositiveInteger(this.units, 'units');\n    this.activation = getActivation(args.activation === undefined ? this.DEFAULT_ACTIVATION : args.activation);\n    this.recurrentActivation = getActivation(args.recurrentActivation === undefined ? this.DEFAULT_RECURRENT_ACTIVATION : args.recurrentActivation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n    this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n    this.biasInitializer = getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.unitForgetBias = args.unitForgetBias;\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.dropout = math_utils.min([1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([1, math_utils.max([0, args.recurrentDropout == null ? 0 : args.recurrentDropout])]);\n    this.dropoutFunc = args.dropoutFunc;\n    this.implementation = args.implementation;\n    this.stateSize = [this.units, this.units];\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n\n  build(inputShape) {\n    var _a;\n\n    inputShape = getExactlyOneShape(inputShape);\n    const inputDim = inputShape[inputShape.length - 1];\n    this.kernel = this.addWeight('kernel', [inputDim, this.units * 4], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n    this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units * 4], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n    let biasInitializer;\n\n    if (this.useBias) {\n      if (this.unitForgetBias) {\n        const capturedBiasInit = this.biasInitializer;\n        const capturedUnits = this.units;\n        biasInitializer = new (_a = class CustomInit extends Initializer {\n          apply(shape, dtype) {\n            // TODO(cais): More informative variable names?\n            const bI = capturedBiasInit.apply([capturedUnits]);\n            const bF = new Ones().apply([capturedUnits]);\n            const bCAndH = capturedBiasInit.apply([capturedUnits * 2]);\n            return K.concatAlongFirstAxis(K.concatAlongFirstAxis(bI, bF), bCAndH);\n          }\n\n        },\n        /** @nocollapse */\n        _a.className = 'CustomInit', _a)();\n      } else {\n        biasInitializer = this.biasInitializer;\n      }\n\n      this.bias = this.addWeight('bias', [this.units * 4], null, biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    } // Porting Notes: Unlike the PyKeras implementation, we perform slicing\n    //   of the weights and bias in the call() method, at execution time.\n\n\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      inputs = inputs;\n\n      if (inputs.length !== 3) {\n        throw new ValueError(`LSTMCell expects 3 input Tensors (inputs, h, c), got ` + `${inputs.length}.`);\n      }\n\n      let hTMinus1 = inputs[1]; // Previous memory state.\n\n      const cTMinus1 = inputs[2]; // Previous carry state.\n\n      inputs = inputs[0];\n\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n          ones: () => tfc.onesLike(inputs),\n          rate: this.dropout,\n          training,\n          count: 4,\n          dropoutFunc: this.dropoutFunc\n        });\n      }\n\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n          ones: () => tfc.onesLike(hTMinus1),\n          rate: this.recurrentDropout,\n          training,\n          count: 4,\n          dropoutFunc: this.dropoutFunc\n        });\n      }\n\n      const dpMask = this.dropoutMask;\n      const recDpMask = this.recurrentDropoutMask; // Note: For superior performance, TensorFlow.js always uses\n      // implementation 2 regardless of the actual value of\n      // config.implementation.\n\n      let i;\n      let f;\n      let c;\n      let o;\n\n      if (0 < this.dropout && this.dropout < 1) {\n        inputs = tfc.mul(inputs, dpMask[0]);\n      }\n\n      let z = K.dot(inputs, this.kernel.read());\n\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1) {\n        hTMinus1 = tfc.mul(hTMinus1, recDpMask[0]);\n      }\n\n      z = tfc.add(z, K.dot(hTMinus1, this.recurrentKernel.read()));\n\n      if (this.useBias) {\n        z = K.biasAdd(z, this.bias.read());\n      }\n\n      const [z0, z1, z2, z3] = tfc.split(z, 4, z.rank - 1);\n      i = this.recurrentActivation.apply(z0);\n      f = this.recurrentActivation.apply(z1);\n      c = tfc.add(tfc.mul(f, cTMinus1), tfc.mul(i, this.activation.apply(z2)));\n      o = this.recurrentActivation.apply(z3);\n      const h = tfc.mul(o, this.activation.apply(c)); // TODO(cais): Add use_learning_phase flag properly.\n\n      return [h, h, c];\n    });\n  }\n\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      recurrentActivation: serializeActivation(this.recurrentActivation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      unitForgetBias: this.unitForgetBias,\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n      implementation: this.implementation\n    };\n    return Object.assign({}, baseConfig, config);\n  }\n\n}\n/** @nocollapse */\n\nLSTMCell.className = 'LSTMCell';\nserialization.registerClass(LSTMCell);\nexport class LSTM extends RNN {\n  constructor(args) {\n    if (args.implementation === 0) {\n      console.warn('`implementation=0` has been deprecated, and now defaults to ' + '`implementation=1`. Please update your layer call.');\n    }\n\n    args.cell = new LSTMCell(args);\n    super(args); // TODO(cais): Add activityRegularizer.\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState = kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {\n        mask,\n        training,\n        initialState\n      });\n    });\n  }\n  /** @nocollapse */\n\n\n  static fromConfig(cls, config) {\n    if (config['implmentation'] === 0) {\n      config['implementation'] = 1;\n    }\n\n    return new cls(config);\n  }\n\n}\n/** @nocollapse */\n\nLSTM.className = 'LSTM';\nserialization.registerClass(LSTM);\nexport class StackedRNNCells extends RNNCell {\n  constructor(args) {\n    super(args);\n    this.cells = args.cells;\n  }\n\n  get stateSize() {\n    // States are a flat list in reverse order of the cell stack.\n    // This allows perserving the requirement `stack.statesize[0] ===\n    // outputDim`. E.g., states of a 2-layer LSTM would be `[h2, c2, h1, c1]`,\n    // assuming one LSTM has states `[h, c]`.\n    const stateSize = [];\n\n    for (const cell of this.cells.slice().reverse()) {\n      if (Array.isArray(cell.stateSize)) {\n        stateSize.push(...cell.stateSize);\n      } else {\n        stateSize.push(cell.stateSize);\n      }\n    }\n\n    return stateSize;\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = inputs;\n      let states = inputs.slice(1); // Recover per-cell states.\n\n      const nestedStates = [];\n\n      for (const cell of this.cells.slice().reverse()) {\n        if (Array.isArray(cell.stateSize)) {\n          nestedStates.push(states.splice(0, cell.stateSize.length));\n        } else {\n          nestedStates.push(states.splice(0, 1));\n        }\n      }\n\n      nestedStates.reverse(); // Call the cells in order and store the returned states.\n\n      const newNestedStates = [];\n      let callInputs;\n\n      for (let i = 0; i < this.cells.length; ++i) {\n        const cell = this.cells[i];\n        states = nestedStates[i]; // TODO(cais): Take care of constants.\n\n        if (i === 0) {\n          callInputs = [inputs[0]].concat(states);\n        } else {\n          callInputs = [callInputs[0]].concat(states);\n        }\n\n        callInputs = cell.call(callInputs, kwargs);\n        newNestedStates.push(callInputs.slice(1));\n      } // Format the new states as a flat list in reverse cell order.\n\n\n      states = [];\n\n      for (const cellStates of newNestedStates.slice().reverse()) {\n        states.push(...cellStates);\n      }\n\n      return [callInputs[0]].concat(states);\n    });\n  }\n\n  build(inputShape) {\n    if (isArrayOfShapes(inputShape)) {\n      // TODO(cais): Take care of input constants.\n      // const constantShape = inputShape.slice(1);\n      inputShape = inputShape[0];\n    }\n\n    inputShape = inputShape;\n    let outputDim;\n    this.cells.forEach((cell, i) => {\n      nameScope(`RNNCell_${i}`, () => {\n        // TODO(cais): Take care of input constants.\n        cell.build(inputShape);\n\n        if (Array.isArray(cell.stateSize)) {\n          outputDim = cell.stateSize[0];\n        } else {\n          outputDim = cell.stateSize;\n        }\n\n        inputShape = [inputShape[0], outputDim];\n      });\n    });\n    this.built = true;\n  }\n\n  getConfig() {\n    const baseConfig = super.getConfig();\n\n    const getCellConfig = cell => {\n      return {\n        'className': cell.getClassName(),\n        'config': cell.getConfig()\n      };\n    };\n\n    const cellConfigs = this.cells.map(getCellConfig);\n    const config = {\n      'cells': cellConfigs\n    };\n    return Object.assign({}, baseConfig, config);\n  }\n  /** @nocollapse */\n\n\n  static fromConfig(cls, config) {\n    let customObjects = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const cells = [];\n\n    for (const cellConfig of config['cells']) {\n      cells.push(deserialize(cellConfig, customObjects));\n    }\n\n    return new cls({\n      cells\n    });\n  }\n\n  get trainableWeights() {\n    if (!this.trainable) {\n      return [];\n    }\n\n    const weights = [];\n\n    for (const cell of this.cells) {\n      weights.push(...cell.trainableWeights);\n    }\n\n    return weights;\n  }\n\n  get nonTrainableWeights() {\n    const weights = [];\n\n    for (const cell of this.cells) {\n      weights.push(...cell.nonTrainableWeights);\n    }\n\n    if (!this.trainable) {\n      const trainableWeights = [];\n\n      for (const cell of this.cells) {\n        trainableWeights.push(...cell.trainableWeights);\n      }\n\n      return trainableWeights.concat(weights);\n    }\n\n    return weights;\n  }\n  /**\n   * Retrieve the weights of a the model.\n   *\n   * @returns A flat `Array` of `tf.Tensor`s.\n   */\n\n\n  getWeights() {\n    const weights = [];\n\n    for (const cell of this.cells) {\n      weights.push(...cell.weights);\n    }\n\n    return batchGetValue(weights);\n  }\n  /**\n   * Set the weights of the model.\n   *\n   * @param weights An `Array` of `tf.Tensor`s with shapes and types matching\n   *     the output of `getWeights()`.\n   */\n\n\n  setWeights(weights) {\n    const tuples = [];\n\n    for (const cell of this.cells) {\n      const numParams = cell.weights.length;\n      const inputWeights = weights.splice(numParams);\n\n      for (let i = 0; i < cell.weights.length; ++i) {\n        tuples.push([cell.weights[i], inputWeights[i]]);\n      }\n    }\n\n    batchSetValue(tuples);\n  }\n\n}\n/** @nocollapse */\n\nStackedRNNCells.className = 'StackedRNNCells';\nserialization.registerClass(StackedRNNCells);\nexport function generateDropoutMask(args) {\n  const {\n    ones,\n    rate,\n    training = false,\n    count = 1,\n    dropoutFunc\n  } = args;\n\n  const droppedInputs = () => dropoutFunc != null ? dropoutFunc(ones(), rate) : K.dropout(ones(), rate);\n\n  const createMask = () => K.inTrainPhase(droppedInputs, ones, training); // just in case count is provided with null or undefined\n\n\n  if (!count || count <= 1) {\n    return tfc.keep(createMask().clone());\n  }\n\n  const masks = Array(count).fill(undefined).map(createMask);\n  return masks.map(m => tfc.keep(m.clone()));\n}","map":{"version":3,"sources":["../../../../../../tfjs-layers/src/layers/recurrent.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Recurrent Neural Network Layers.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {DataType, serialization, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {Activation, getActivation, serializeActivation} from '../activations';\nimport * as K from '../backend/tfjs_backend';\nimport {nameScope} from '../common';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {InputSpec, SymbolicTensor} from '../engine/topology';\nimport {Layer, LayerArgs} from '../engine/topology';\nimport {AttributeError, NotImplementedError, ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, Ones, serializeInitializer} from '../initializers';\nimport {ActivationIdentifier} from '../keras_format/activation_config';\nimport {Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs, RnnStepFunction} from '../types';\nimport {assertPositiveInteger} from '../utils/generic_utils';\nimport * as math_utils from '../utils/math_utils';\nimport {getExactlyOneShape, getExactlyOneTensor, isArrayOfShapes} from '../utils/types_utils';\nimport {batchGetValue, batchSetValue, LayerVariable} from '../variables';\n\nimport {deserialize} from './serialization';\n\n/**\n * Standardize `apply()` args to a single list of tensor inputs.\n *\n * When running a model loaded from file, the input tensors `initialState` and\n * `constants` are passed to `RNN.apply()` as part of `inputs` instead of the\n * dedicated kwargs fields. `inputs` consists of\n * `[inputs, initialState0, initialState1, ..., constant0, constant1]` in this\n * case.\n * This method makes sure that arguments are\n * separated and that `initialState` and `constants` are `Array`s of tensors\n * (or None).\n *\n * @param inputs Tensor or `Array` of  tensors.\n * @param initialState Tensor or `Array` of tensors or `null`/`undefined`.\n * @param constants Tensor or `Array` of tensors or `null`/`undefined`.\n * @returns An object consisting of\n *   inputs: A tensor.\n *   initialState: `Array` of tensors or `null`.\n *   constants: `Array` of tensors or `null`.\n * @throws ValueError, if `inputs` is an `Array` but either `initialState` or\n *   `constants` is provided.\n */\nexport function standardizeArgs(\n    inputs: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n    initialState: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n    constants: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n    numConstants?: number): {\n  inputs: Tensor|SymbolicTensor,\n  initialState: Tensor[]|SymbolicTensor[],\n  constants: Tensor[]|SymbolicTensor[]\n} {\n  if (Array.isArray(inputs)) {\n    if (initialState != null || constants != null) {\n      throw new ValueError(\n          'When inputs is an array, neither initialState or constants ' +\n          'should be provided');\n    }\n    if (numConstants != null) {\n      constants = inputs.slice(inputs.length - numConstants, inputs.length);\n      inputs = inputs.slice(0, inputs.length - numConstants);\n    }\n    if (inputs.length > 1) {\n      initialState = inputs.slice(1, inputs.length);\n    }\n    inputs = inputs[0];\n  }\n\n  function toListOrNull(x: Tensor|Tensor[]|SymbolicTensor|\n                        SymbolicTensor[]): Tensor[]|SymbolicTensor[] {\n    if (x == null || Array.isArray(x)) {\n      return x as Tensor[] | SymbolicTensor[];\n    } else {\n      return [x] as Tensor[] | SymbolicTensor[];\n    }\n  }\n\n  initialState = toListOrNull(initialState);\n  constants = toListOrNull(constants);\n\n  return {inputs, initialState, constants};\n}\n\n/**\n * Iterates over the time dimension of a tensor.\n *\n * @param stepFunction RNN step function.\n *   Parameters:\n *     inputs: tensor with shape `[samples, ...]` (no time dimension),\n *       representing input for the batch of samples at a certain time step.\n *     states: an Array of tensors.\n *   Returns:\n *     outputs: tensor with shape `[samples, outputDim]` (no time dimension).\n *     newStates: list of tensors, same length and shapes as `states`. The first\n *       state in the list must be the output tensor at the previous timestep.\n * @param inputs Tensor of temporal data of shape `[samples, time, ...]` (at\n *   least 3D).\n * @param initialStates Tensor with shape `[samples, outputDim]` (no time\n *   dimension), containing the initial values of the states used in the step\n *   function.\n * @param goBackwards If `true`, do the iteration over the time dimension in\n *   reverse order and return the reversed sequence.\n * @param mask Binary tensor with shape `[sample, time, 1]`, with a zero for\n *   every element that is masked.\n * @param constants An Array of constant values passed at each step.\n * @param unroll Whether to unroll the RNN or to use a symbolic loop. *Not*\n *   applicable to this imperative deeplearn.js backend. Its value is ignored.\n * @param needPerStepOutputs Whether the per-step outputs are to be\n *   concatenated into a single tensor and returned (as the second return\n *   value). Default: `false`. This arg is included so that the relatively\n *   expensive concatenation of the stepwise outputs can be omitted unless\n *   the stepwise outputs need to be kept (e.g., for an LSTM layer of which\n *   `returnSequence` is `true`.)\n * @returns An Array: `[lastOutput, outputs, newStates]`.\n *   lastOutput: the lastest output of the RNN, of shape `[samples, ...]`.\n *   outputs: tensor with shape `[samples, time, ...]` where each entry\n *     `output[s, t]` is the output of the step function at time `t` for sample\n *     `s`. This return value is provided if and only if the\n *     `needPerStepOutputs` is set as `true`. If it is set as `false`, this\n *     return value will be `undefined`.\n *   newStates: Array of tensors, latest states returned by the step function,\n *      of shape `(samples, ...)`.\n * @throws ValueError If input dimension is less than 3.\n *\n * TODO(nielsene): This needs to be tidy-ed.\n */\nexport function rnn(\n    stepFunction: RnnStepFunction, inputs: Tensor, initialStates: Tensor[],\n    goBackwards = false, mask?: Tensor, constants?: Tensor[], unroll = false,\n    needPerStepOutputs = false): [Tensor, Tensor, Tensor[]] {\n  return tfc.tidy(() => {\n    const ndim = inputs.shape.length;\n    if (ndim < 3) {\n      throw new ValueError(`Input should be at least 3D, but is ${ndim}D.`);\n    }\n\n    // Transpose to time-major, i.e., from [batch, time, ...] to [time, batch,\n    // ...].\n    const axes = [1, 0].concat(math_utils.range(2, ndim));\n    inputs = tfc.transpose(inputs, axes);\n\n    if (constants != null) {\n      throw new NotImplementedError(\n          'The rnn() functoin of the deeplearn.js backend does not support ' +\n          'constants yet.');\n    }\n\n    // Porting Note: the unroll option is ignored by the imperative backend.\n    if (unroll) {\n      console.warn(\n          'Backend rnn(): the unroll = true option is not applicable to the ' +\n          'imperative deeplearn.js backend.');\n    }\n\n    if (mask != null) {\n      mask = tfc.cast(tfc.cast(mask, 'bool'), 'float32');\n      if (mask.rank === ndim - 1) {\n        mask = tfc.expandDims(mask, -1);\n      }\n      mask = tfc.transpose(mask, axes);\n    }\n\n    if (goBackwards) {\n      inputs = tfc.reverse(inputs, 0);\n      if (mask != null) {\n        mask = tfc.reverse(mask, 0);\n      }\n    }\n\n    // Porting Note: PyKeras with TensorFlow backend uses a symbolic loop\n    //   (tf.while_loop). But for the imperative deeplearn.js backend, we just\n    //   use the usual TypeScript control flow to iterate over the time steps in\n    //   the inputs.\n    // Porting Note: PyKeras patches a \"_use_learning_phase\" attribute to\n    // outputs.\n    //   This is not idiomatic in TypeScript. The info regarding whether we are\n    //   in a learning (i.e., training) phase for RNN is passed in a different\n    //   way.\n\n    const perStepOutputs: Tensor[] = [];\n    let lastOutput: Tensor;\n    let states = initialStates;\n    const timeSteps = inputs.shape[0];\n    const perStepInputs = tfc.unstack(inputs);\n    let perStepMasks: Tensor[];\n    if (mask != null) {\n      perStepMasks = tfc.unstack(mask);\n    }\n\n    for (let t = 0; t < timeSteps; ++t) {\n      const currentInput = perStepInputs[t];\n      const stepOutputs = tfc.tidy(() => stepFunction(currentInput, states));\n\n      if (mask == null) {\n        lastOutput = stepOutputs[0];\n        states = stepOutputs[1];\n      } else {\n        const maskedOutputs = tfc.tidy(() => {\n          const stepMask = perStepMasks[t];\n          const negStepMask = tfc.sub(tfc.onesLike(stepMask), stepMask);\n          // TODO(cais): Would tfc.where() be better for performance?\n          const output = tfc.add(\n              tfc.mul(stepOutputs[0], stepMask),\n              tfc.mul(states[0], negStepMask));\n          const newStates = states.map((state, i) => {\n            return tfc.add(\n                tfc.mul(stepOutputs[1][i], stepMask),\n                tfc.mul(state, negStepMask));\n          });\n          return {output, newStates};\n        });\n        lastOutput = maskedOutputs.output;\n        states = maskedOutputs.newStates;\n      }\n\n      if (needPerStepOutputs) {\n        perStepOutputs.push(lastOutput);\n      }\n    }\n    let outputs: Tensor;\n    if (needPerStepOutputs) {\n      const axis = 1;\n      outputs = tfc.stack(perStepOutputs, axis);\n    }\n    return [lastOutput, outputs, states] as [Tensor, Tensor, Tensor[]];\n  });\n}\n\nexport declare interface BaseRNNLayerArgs extends LayerArgs {\n  /**\n   * A RNN cell instance. A RNN cell is a class that has:\n   *   - a `call()` method, which takes `[Tensor, Tensor]` as the\n   *     first input argument. The first item is the input at time t, and\n   *     second item is the cell state at time t.\n   *     The `call()` method returns `[outputAtT, statesAtTPlus1]`.\n   *     The `call()` method of the cell can also take the argument `constants`,\n   *     see section \"Note on passing external constants\" below.\n   *     Porting Node: PyKeras overrides the `call()` signature of RNN cells,\n   *       which are Layer subtypes, to accept two arguments. tfjs-layers does\n   *       not do such overriding. Instead we preseve the `call()` signature,\n   *       which due to its `Tensor|Tensor[]` argument and return value, is\n   *       flexible enough to handle the inputs and states.\n   *   - a `stateSize` attribute. This can be a single integer (single state)\n   *     in which case it is the size of the recurrent state (which should be\n   *     the same as the size of the cell output). This can also be an Array of\n   *     integers (one size per state). In this case, the first entry\n   *     (`stateSize[0]`) should be the same as the size of the cell output.\n   * It is also possible for `cell` to be a list of RNN cell instances, in which\n   * case the cells get stacked on after the other in the RNN, implementing an\n   * efficient stacked RNN.\n   */\n  cell?: RNNCell|RNNCell[];\n\n  /**\n   * Whether to return the last output in the output sequence, or the full\n   * sequence.\n   */\n  returnSequences?: boolean;\n\n  /**\n   * Whether to return the last state in addition to the output.\n   */\n  returnState?: boolean;\n\n  /**\n   * If `true`, process the input sequence backwards and return the reversed\n   * sequence (default: `false`).\n   */\n  goBackwards?: boolean;\n\n  /**\n   * If `true`, the last state for each sample at index i in a batch will be\n   * used as initial state of the sample of index i in the following batch\n   * (default: `false`).\n   *\n   * You can set RNN layers to be \"stateful\", which means that the states\n   * computed for the samples in one batch will be reused as initial states\n   * for the samples in the next batch. This assumes a one-to-one mapping\n   * between samples in different successive batches.\n   *\n   * To enable \"statefulness\":\n   *   - specify `stateful: true` in the layer constructor.\n   *   - specify a fixed batch size for your model, by passing\n   *     - if sequential model:\n   *       `batchInputShape: [...]` to the first layer in your model.\n   *     - else for functional model with 1 or more Input layers:\n   *       `batchShape: [...]` to all the first layers in your model.\n   *     This is the expected shape of your inputs\n   *     *including the batch size*.\n   *     It should be a tuple of integers, e.g., `[32, 10, 100]`.\n   *   - specify `shuffle: false` when calling `LayersModel.fit()`.\n   *\n   * To reset the state of your model, call `resetStates()` on either the\n   * specific layer or on the entire model.\n   */\n  stateful?: boolean;\n  // TODO(cais): Explore whether we can warn users when they fail to set\n  //   `shuffle: false` when training a model consisting of stateful RNNs\n  //   and any stateful Layers in general.\n\n  /**\n   * If `true`, the network will be unrolled, else a symbolic loop will be\n   * used. Unrolling can speed-up a RNN, although it tends to be more memory-\n   * intensive. Unrolling is only suitable for short sequences (default:\n   * `false`).\n   * Porting Note: tfjs-layers has an imperative backend. RNNs are executed with\n   *   normal TypeScript control flow. Hence this property is inapplicable and\n   *   ignored in tfjs-layers.\n   */\n  unroll?: boolean;\n\n  /**\n   * Dimensionality of the input (integer).\n   *   This option (or alternatively, the option `inputShape`) is required when\n   *   this layer is used as the first layer in a model.\n   */\n  inputDim?: number;\n\n  /**\n   * Length of the input sequences, to be specified when it is constant.\n   * This argument is required if you are going to connect `Flatten` then\n   * `Dense` layers upstream (without it, the shape of the dense outputs cannot\n   * be computed). Note that if the recurrent layer is not the first layer in\n   * your model, you would need to specify the input length at the level of the\n   * first layer (e.g., via the `inputShape` option).\n   */\n  inputLength?: number;\n}\n\nexport class RNN extends Layer {\n  /** @nocollapse */\n  static className = 'RNN';\n  public readonly cell: RNNCell;\n  public readonly returnSequences: boolean;\n  public readonly returnState: boolean;\n  public readonly goBackwards: boolean;\n  public readonly unroll: boolean;\n\n  public stateSpec: InputSpec[];\n  protected states_: Tensor[];\n\n  // NOTE(cais): For stateful RNNs, the old states cannot be disposed right\n  // away when new states are set, because the old states may need to be used\n  // later for backpropagation through time (BPTT) and other purposes. So we\n  // keep them here for final disposal when the state is reset completely\n  // (i.e., through no-arg call to `resetStates()`).\n  protected keptStates: Tensor[][];\n\n  private numConstants: number;\n\n  constructor(args: RNNLayerArgs) {\n    super(args);\n    let cell: RNNCell;\n    if (args.cell == null) {\n      throw new ValueError(\n          'cell property is missing for the constructor of RNN.');\n    } else if (Array.isArray(args.cell)) {\n      cell = new StackedRNNCells({cells: args.cell});\n    } else {\n      cell = args.cell;\n    }\n    if (cell.stateSize == null) {\n      throw new ValueError(\n          'The RNN cell should have an attribute `stateSize` (tuple of ' +\n          'integers, one integer per RNN state).');\n    }\n    this.cell = cell;\n    this.returnSequences =\n        args.returnSequences == null ? false : args.returnSequences;\n    this.returnState = args.returnState == null ? false : args.returnState;\n    this.goBackwards = args.goBackwards == null ? false : args.goBackwards;\n    this._stateful = args.stateful == null ? false : args.stateful;\n    this.unroll = args.unroll == null ? false : args.unroll;\n\n    this.supportsMasking = true;\n    this.inputSpec = [new InputSpec({ndim: 3})];\n    this.stateSpec = null;\n    this.states_ = null;\n    // TODO(cais): Add constantsSpec and numConstants.\n    this.numConstants = null;\n    // TODO(cais): Look into the use of initial_state in the kwargs of the\n    //   constructor.\n\n    this.keptStates = [];\n  }\n\n  // Porting Note: This is the equivalent of `RNN.states` property getter in\n  //   PyKeras.\n  getStates(): Tensor[] {\n    if (this.states_ == null) {\n      const numStates =\n          Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      return math_utils.range(0, numStates).map(x => null);\n    } else {\n      return this.states_;\n    }\n  }\n\n  // Porting Note: This is the equivalent of the `RNN.states` property setter in\n  //   PyKeras.\n  setStates(states: Tensor[]): void {\n    this.states_ = states;\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    if (isArrayOfShapes(inputShape)) {\n      inputShape = (inputShape as Shape[])[0];\n    }\n    inputShape = inputShape as Shape;\n\n    // TODO(cais): Remove the casting once stacked RNN cells become supported.\n    let stateSize = this.cell.stateSize;\n    if (!Array.isArray(stateSize)) {\n      stateSize = [stateSize];\n    }\n    const outputDim = stateSize[0];\n    let outputShape: Shape|Shape[];\n    if (this.returnSequences) {\n      outputShape = [inputShape[0], inputShape[1], outputDim];\n    } else {\n      outputShape = [inputShape[0], outputDim];\n    }\n\n    if (this.returnState) {\n      const stateShape: Shape[] = [];\n      for (const dim of stateSize) {\n        stateShape.push([inputShape[0], dim]);\n      }\n      return [outputShape].concat(stateShape);\n    } else {\n      return outputShape;\n    }\n  }\n\n  computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]): Tensor\n      |Tensor[] {\n    return tfc.tidy(() => {\n      if (Array.isArray(mask)) {\n        mask = mask[0];\n      }\n      const outputMask = this.returnSequences ? mask : null;\n\n      if (this.returnState) {\n        const stateMask = this.states.map(s => null);\n        return [outputMask].concat(stateMask);\n      } else {\n        return outputMask;\n      }\n    });\n  }\n\n  /**\n   * Get the current state tensors of the RNN.\n   *\n   * If the state hasn't been set, return an array of `null`s of the correct\n   * length.\n   */\n  get states(): Tensor[] {\n    if (this.states_ == null) {\n      const numStates =\n          Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      const output: Tensor[] = [];\n      for (let i = 0; i < numStates; ++i) {\n        output.push(null);\n      }\n      return output;\n    } else {\n      return this.states_;\n    }\n  }\n\n  set states(s: Tensor[]) {\n    this.states_ = s;\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    // Note inputShape will be an Array of Shapes of initial states and\n    // constants if these are passed in apply().\n    const constantShape: Shape[] = null;\n    if (this.numConstants != null) {\n      throw new NotImplementedError(\n          'Constants support is not implemented in RNN yet.');\n    }\n\n    if (isArrayOfShapes(inputShape)) {\n      inputShape = (inputShape as Shape[])[0];\n    }\n    inputShape = inputShape as Shape;\n\n    const batchSize: number = this.stateful ? inputShape[0] : null;\n    const inputDim = inputShape.slice(2);\n    this.inputSpec[0] = new InputSpec({shape: [batchSize, null, ...inputDim]});\n\n    // Allow cell (if RNNCell Layer) to build before we set or validate\n    // stateSpec.\n    const stepInputShape = [inputShape[0]].concat(inputShape.slice(2));\n    if (constantShape != null) {\n      throw new NotImplementedError(\n          'Constants support is not implemented in RNN yet.');\n    } else {\n      this.cell.build(stepInputShape);\n    }\n\n    // Set or validate stateSpec.\n    let stateSize: number[];\n    if (Array.isArray(this.cell.stateSize)) {\n      stateSize = this.cell.stateSize;\n    } else {\n      stateSize = [this.cell.stateSize];\n    }\n\n    if (this.stateSpec != null) {\n      if (!util.arraysEqual(\n              this.stateSpec.map(spec => spec.shape[spec.shape.length - 1]),\n              stateSize)) {\n        throw new ValueError(\n            `An initialState was passed that is not compatible with ` +\n            `cell.stateSize. Received stateSpec=${this.stateSpec}; ` +\n            `However cell.stateSize is ${this.cell.stateSize}`);\n      }\n    } else {\n      this.stateSpec =\n          stateSize.map(dim => new InputSpec({shape: [null, dim]}));\n    }\n    if (this.stateful) {\n      this.resetStates();\n    }\n  }\n\n  /**\n   * Reset the state tensors of the RNN.\n   *\n   * If the `states` argument is `undefined` or `null`, will set the\n   * state tensor(s) of the RNN to all-zero tensors of the appropriate\n   * shape(s).\n   *\n   * If `states` is provided, will set the state tensors of the RNN to its\n   * value.\n   *\n   * @param states Optional externally-provided initial states.\n   * @param training Whether this call is done during training. For stateful\n   *   RNNs, this affects whether the old states are kept or discarded. In\n   *   particular, if `training` is `true`, the old states will be kept so\n   *   that subsequent backpropgataion through time (BPTT) may work properly.\n   *   Else, the old states will be discarded.\n   */\n  resetStates(states?: Tensor|Tensor[], training = false): void {\n    tidy(() => {\n      if (!this.stateful) {\n        throw new AttributeError(\n            'Cannot call resetStates() on an RNN Layer that is not stateful.');\n      }\n      const batchSize = this.inputSpec[0].shape[0];\n      if (batchSize == null) {\n        throw new ValueError(\n            'If an RNN is stateful, it needs to know its batch size. Specify ' +\n            'the batch size of your input tensors: \\n' +\n            '- If using a Sequential model, specify the batch size by ' +\n            'passing a `batchInputShape` option to your first layer.\\n' +\n            '- If using the functional API, specify the batch size by ' +\n            'passing a `batchShape` option to your Input layer.');\n      }\n      // Initialize state if null.\n      if (this.states_ == null) {\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ =\n              this.cell.stateSize.map(dim => tfc.zeros([batchSize, dim]));\n        } else {\n          this.states_ = [tfc.zeros([batchSize, this.cell.stateSize])];\n        }\n      } else if (states == null) {\n        // Dispose old state tensors.\n        tfc.dispose(this.states_);\n        // For stateful RNNs, fully dispose kept old states.\n        if (this.keptStates != null) {\n          tfc.dispose(this.keptStates);\n          this.keptStates = [];\n        }\n\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ =\n              this.cell.stateSize.map(dim => tfc.zeros([batchSize, dim]));\n        } else {\n          this.states_[0] = tfc.zeros([batchSize, this.cell.stateSize]);\n        }\n      } else {\n        if (!Array.isArray(states)) {\n          states = [states];\n        }\n        if (states.length !== this.states_.length) {\n          throw new ValueError(\n              `Layer ${this.name} expects ${this.states_.length} state(s), ` +\n              `but it received ${states.length} state value(s). Input ` +\n              `received: ${states}`);\n        }\n\n        if (training === true) {\n          // Store old state tensors for complete disposal later, i.e., during\n          // the next no-arg call to this method. We do not dispose the old\n          // states immediately because that BPTT (among other things) require\n          // them.\n          this.keptStates.push(this.states_.slice());\n        } else {\n          tfc.dispose(this.states_);\n        }\n\n        for (let index = 0; index < this.states_.length; ++index) {\n          const value = states[index];\n          const dim = Array.isArray(this.cell.stateSize) ?\n              this.cell.stateSize[index] :\n              this.cell.stateSize;\n          const expectedShape = [batchSize, dim];\n          if (!util.arraysEqual(value.shape, expectedShape)) {\n            throw new ValueError(\n                `State ${index} is incompatible with layer ${this.name}: ` +\n                `expected shape=${expectedShape}, received shape=${\n                    value.shape}`);\n          }\n          this.states_[index] = value;\n        }\n      }\n      this.states_ = this.states_.map(state => tfc.keep(state.clone()));\n    });\n  }\n\n  apply(\n      inputs: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n      kwargs?: Kwargs): Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[] {\n    // TODO(cais): Figure out whether initialState is in kwargs or inputs.\n    let initialState: Tensor[]|SymbolicTensor[] =\n        kwargs == null ? null : kwargs['initialState'];\n    let constants: Tensor[]|SymbolicTensor[] =\n        kwargs == null ? null : kwargs['constants'];\n    if (kwargs == null) {\n      kwargs = {};\n    }\n\n    const standardized =\n        standardizeArgs(inputs, initialState, constants, this.numConstants);\n    inputs = standardized.inputs;\n    initialState = standardized.initialState;\n    constants = standardized.constants;\n\n    // If any of `initial_state` or `constants` are specified and are\n    // `tf.SymbolicTensor`s, then add them to the inputs and temporarily modify\n    // the input_spec to include them.\n\n    let additionalInputs: Array<Tensor|SymbolicTensor> = [];\n    let additionalSpecs: InputSpec[] = [];\n    if (initialState != null) {\n      kwargs['initialState'] = initialState;\n      additionalInputs = additionalInputs.concat(initialState);\n      this.stateSpec = [];\n      for (const state of initialState) {\n        this.stateSpec.push(new InputSpec({shape: state.shape}));\n      }\n      // TODO(cais): Use the following instead.\n      // this.stateSpec = initialState.map(state => new InputSpec({shape:\n      // state.shape}));\n      additionalSpecs = additionalSpecs.concat(this.stateSpec);\n    }\n    if (constants != null) {\n      kwargs['constants'] = constants;\n      additionalInputs = additionalInputs.concat(constants);\n      // TODO(cais): Add this.constantsSpec.\n      this.numConstants = constants.length;\n    }\n\n    const isTensor = additionalInputs[0] instanceof SymbolicTensor;\n    if (isTensor) {\n      // Compute full input spec, including state and constants.\n      const fullInput =\n          [inputs].concat(additionalInputs) as Tensor[] | SymbolicTensor[];\n      const fullInputSpec = this.inputSpec.concat(additionalSpecs);\n      // Perform the call with temporarily replaced inputSpec.\n      const originalInputSpec = this.inputSpec;\n      this.inputSpec = fullInputSpec;\n      const output = super.apply(fullInput, kwargs);\n      this.inputSpec = originalInputSpec;\n      return output;\n    } else {\n      return super.apply(inputs, kwargs);\n    }\n  }\n\n  // tslint:disable-next-line:no-any\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    // Input shape: `[samples, time (padded with zeros), input_dim]`.\n    // Note that the .build() method of subclasses **must** define\n    // this.inputSpec and this.stateSpec owith complete input shapes.\n    return tidy(() => {\n      const mask = kwargs == null ? null : kwargs['mask'] as Tensor;\n      const training = kwargs == null ? null : kwargs['training'];\n      let initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n\n      inputs = getExactlyOneTensor(inputs);\n      if (initialState == null) {\n        if (this.stateful) {\n          initialState = this.states_;\n        } else {\n          initialState = this.getInitialState(inputs);\n        }\n      }\n\n      const numStates =\n          Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n      if (initialState.length !== numStates) {\n        throw new ValueError(\n            `RNN Layer has ${numStates} state(s) but was passed ` +\n            `${initialState.length} initial state(s).`);\n      }\n      if (this.unroll) {\n        console.warn(\n            'Ignoring unroll = true for RNN layer, due to imperative backend.');\n      }\n\n      const cellCallKwargs: Kwargs = {training};\n\n      // TODO(cais): Add support for constants.\n      const step = (inputs: Tensor, states: Tensor[]) => {\n        // `inputs` and `states` are concatenated to form a single `Array` of\n        // `tf.Tensor`s as the input to `cell.call()`.\n        const outputs =\n            this.cell.call([inputs].concat(states), cellCallKwargs) as Tensor[];\n        // Marshall the return value into output and new states.\n        return [outputs[0], outputs.slice(1)] as [Tensor, Tensor[]];\n      };\n\n      // TODO(cais): Add support for constants.\n\n      const rnnOutputs =\n          rnn(step, inputs, initialState, this.goBackwards, mask, null,\n              this.unroll, this.returnSequences);\n      const lastOutput = rnnOutputs[0];\n      const outputs = rnnOutputs[1];\n      const states = rnnOutputs[2];\n\n      if (this.stateful) {\n        this.resetStates(states, training);\n      }\n\n      const output = this.returnSequences ? outputs : lastOutput;\n\n      // TODO(cais): Porperty set learning phase flag.\n\n      if (this.returnState) {\n        return [output].concat(states);\n      } else {\n        return output;\n      }\n    });\n  }\n\n  getInitialState(inputs: Tensor): Tensor[] {\n    return tidy(() => {\n      // Build an all-zero tensor of shape [samples, outputDim].\n      // [Samples, timeSteps, inputDim].\n      let initialState = tfc.zeros(inputs.shape);\n      // [Samples].\n      initialState = tfc.sum(initialState, [1, 2]);\n      initialState = K.expandDims(initialState);  // [Samples, 1].\n\n      if (Array.isArray(this.cell.stateSize)) {\n        return this.cell.stateSize.map(\n            dim => dim > 1 ? K.tile(initialState, [1, dim]) : initialState);\n      } else {\n        return this.cell.stateSize > 1 ?\n            [K.tile(initialState, [1, this.cell.stateSize])] :\n            [initialState];\n      }\n    });\n  }\n\n  get trainableWeights(): LayerVariable[] {\n    if (!this.trainable) {\n      return [];\n    }\n    // Porting Note: In TypeScript, `this` is always an instance of `Layer`.\n    return this.cell.trainableWeights;\n  }\n\n  get nonTrainableWeights(): LayerVariable[] {\n    // Porting Note: In TypeScript, `this` is always an instance of `Layer`.\n    if (!this.trainable) {\n      return this.cell.weights;\n    }\n    return this.cell.nonTrainableWeights;\n  }\n\n  setFastWeightInitDuringBuild(value: boolean) {\n    super.setFastWeightInitDuringBuild(value);\n    if (this.cell != null) {\n      this.cell.setFastWeightInitDuringBuild(value);\n    }\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const baseConfig = super.getConfig();\n\n    const config: serialization.ConfigDict = {\n      returnSequences: this.returnSequences,\n      returnState: this.returnState,\n      goBackwards: this.goBackwards,\n      stateful: this.stateful,\n      unroll: this.unroll,\n    };\n\n    if (this.numConstants != null) {\n      config['numConstants'] = this.numConstants;\n    }\n\n    const cellConfig = this.cell.getConfig();\n\n    if (this.getClassName() === RNN.className) {\n      config['cell'] = {\n        'className': this.cell.getClassName(),\n        'config': cellConfig,\n      } as serialization.ConfigDictValue;\n    }\n\n    // this order is necessary, to prevent cell name from replacing layer name\n    return {...cellConfig, ...baseConfig, ...config};\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict,\n      customObjects = {} as serialization.ConfigDict): T {\n    const cellConfig = config['cell'] as serialization.ConfigDict;\n    const cell = deserialize(cellConfig, customObjects) as RNNCell;\n    return new cls(Object.assign(config, {cell}));\n  }\n}\nserialization.registerClass(RNN);\n\n// Porting Note: This is a common parent class for RNN cells. There is no\n// equivalent of this in PyKeras. Having a common parent class forgoes the\n//  need for `has_attr(cell, ...)` checks or its TypeScript equivalent.\n/**\n * An RNNCell layer.\n *\n * @doc {heading: 'Layers', subheading: 'Classes'}\n */\nexport abstract class RNNCell extends Layer {\n  /**\n   * Size(s) of the states.\n   * For RNN cells with only a single state, this is a single integer.\n   */\n  // See\n  // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-0.html#properties-overriding-accessors-and-vice-versa-is-an-error\n  public abstract stateSize: number|number[];\n  public dropoutMask: Tensor|Tensor[];\n  public recurrentDropoutMask: Tensor|Tensor[];\n}\n\nexport declare interface SimpleRNNCellLayerArgs extends LayerArgs {\n  /**\n   * units: Positive integer, dimensionality of the output space.\n   */\n  units: number;\n\n  /**\n   * Activation function to use.\n   * Default: hyperbolic tangent ('tanh').\n   * If you pass `null`,  'linear' activation will be applied.\n   */\n  activation?: ActivationIdentifier;\n\n  /**\n   * Whether the layer uses a bias vector.\n   */\n  useBias?: boolean;\n\n  /**\n   * Initializer for the `kernel` weights matrix, used for the linear\n   * transformation of the inputs.\n   */\n  kernelInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the `recurrentKernel` weights matrix, used for\n   * linear transformation of the recurrent state.\n   */\n  recurrentInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the bias vector.\n   */\n  biasInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Regularizer function applied to the `kernel` weights matrix.\n   */\n  kernelRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the `recurrent_kernel` weights matrix.\n   */\n  recurrentRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the bias vector.\n   */\n  biasRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Constraint function applied to the `kernel` weights matrix.\n   */\n  kernelConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the `recurrentKernel` weights matrix.\n   */\n  recurrentConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraintfunction applied to the bias vector.\n   */\n  biasConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Float number between 0 and 1. Fraction of the units to drop for the linear\n   * transformation of the inputs.\n   */\n  dropout?: number;\n\n  /**\n   * Float number between 0 and 1. Fraction of the units to drop for the linear\n   * transformation of the recurrent state.\n   */\n  recurrentDropout?: number;\n\n  /**\n   * This is added for test DI purpose.\n   */\n  dropoutFunc?: Function;\n}\n\nexport class SimpleRNNCell extends RNNCell {\n  /** @nocollapse */\n  static className = 'SimpleRNNCell';\n  readonly units: number;\n  readonly activation: Activation;\n  readonly useBias: boolean;\n\n  readonly kernelInitializer: Initializer;\n  readonly recurrentInitializer: Initializer;\n  readonly biasInitializer: Initializer;\n\n  readonly kernelConstraint: Constraint;\n  readonly recurrentConstraint: Constraint;\n  readonly biasConstraint: Constraint;\n\n  readonly kernelRegularizer: Regularizer;\n  readonly recurrentRegularizer: Regularizer;\n  readonly biasRegularizer: Regularizer;\n\n  readonly dropout: number;\n  readonly recurrentDropout: number;\n  readonly dropoutFunc: Function;\n\n  readonly stateSize: number;\n\n  kernel: LayerVariable;\n  recurrentKernel: LayerVariable;\n  bias: LayerVariable;\n\n  readonly DEFAULT_ACTIVATION = 'tanh';\n  readonly DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n  readonly DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n  readonly DEFAULT_BIAS_INITIALIZER: InitializerIdentifier = 'zeros';\n\n  constructor(args: SimpleRNNCellLayerArgs) {\n    super(args);\n    this.units = args.units;\n    assertPositiveInteger(this.units, `units`);\n    this.activation = getActivation(\n        args.activation == null ? this.DEFAULT_ACTIVATION : args.activation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(\n        args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n\n    this.dropout = math_utils.min(\n        [1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([\n      1,\n      math_utils.max(\n          [0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n    ]);\n    this.dropoutFunc = args.dropoutFunc;\n    this.stateSize = this.units;\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    // TODO(cais): Use regularizer.\n    this.kernel = this.addWeight(\n        'kernel', [inputShape[inputShape.length - 1], this.units], null,\n        this.kernelInitializer, this.kernelRegularizer, true,\n        this.kernelConstraint);\n    this.recurrentKernel = this.addWeight(\n        'recurrent_kernel', [this.units, this.units], null,\n        this.recurrentInitializer, this.recurrentRegularizer, true,\n        this.recurrentConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.units], null, this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    this.built = true;\n  }\n\n  // Porting Note: PyKeras' equivalent of this method takes two tensor inputs:\n  //   `inputs` and `states`. Here, the two tensors are combined into an\n  //   `Tensor[]` Array as the first input argument.\n  //   Similarly, PyKeras' equivalent of this method returns two values:\n  //    `output` and `[output]`. Here the two are combined into one length-2\n  //    `Tensor[]`, consisting of `output` repeated.\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = inputs as Tensor[];\n      if (inputs.length !== 2) {\n        throw new ValueError(\n            `SimpleRNNCell expects 2 input Tensors, got ${inputs.length}.`);\n      }\n      let prevOutput = inputs[1];\n      inputs = inputs[0];\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n                             ones: () => tfc.onesLike(inputs as Tensor),\n                             rate: this.dropout,\n                             training,\n                             dropoutFunc: this.dropoutFunc,\n                           }) as Tensor;\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n          this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n                                      ones: () => tfc.onesLike(prevOutput),\n                                      rate: this.recurrentDropout,\n                                      training,\n                                      dropoutFunc: this.dropoutFunc,\n                                    }) as Tensor;\n      }\n      let h: Tensor;\n      const dpMask: Tensor = this.dropoutMask as Tensor;\n      const recDpMask: Tensor = this.recurrentDropoutMask as Tensor;\n      if (dpMask != null) {\n        h = K.dot(tfc.mul(inputs, dpMask), this.kernel.read());\n      } else {\n        h = K.dot(inputs, this.kernel.read());\n      }\n      if (this.bias != null) {\n        h = K.biasAdd(h, this.bias.read());\n      }\n      if (recDpMask != null) {\n        prevOutput = tfc.mul(prevOutput, recDpMask);\n      }\n      let output = tfc.add(h, K.dot(prevOutput, this.recurrentKernel.read()));\n      if (this.activation != null) {\n        output = this.activation.apply(output);\n      }\n\n      // TODO(cais): Properly set learning phase on output tensor?\n      return [output, output];\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const baseConfig = super.getConfig();\n\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n    };\n\n    return {...baseConfig, ...config};\n  }\n}\nserialization.registerClass(SimpleRNNCell);\n\nexport declare interface SimpleRNNLayerArgs extends BaseRNNLayerArgs {\n  /**\n   * Positive integer, dimensionality of the output space.\n   */\n  units: number;\n\n  /**\n   * Activation function to use.\n   *\n   * Defaults to  hyperbolic tangent (`tanh`)\n   *\n   * If you pass `null`, no activation will be applied.\n   */\n  activation?: ActivationIdentifier;\n\n  /**\n   * Whether the layer uses a bias vector.\n   */\n  useBias?: boolean;\n\n  /**\n   * Initializer for the `kernel` weights matrix, used for the linear\n   * transformation of the inputs.\n   */\n  kernelInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the `recurrentKernel` weights matrix, used for\n   * linear transformation of the recurrent state.\n   */\n  recurrentInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the bias vector.\n   */\n  biasInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Regularizer function applied to the kernel weights matrix.\n   */\n  kernelRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the recurrentKernel weights matrix.\n   */\n  recurrentRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the bias vector.\n   */\n  biasRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Constraint function applied to the kernel weights matrix.\n   */\n  kernelConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the recurrentKernel weights matrix.\n   */\n  recurrentConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the bias vector.\n   */\n  biasConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Number between 0 and 1. Fraction of the units to drop for the linear\n   * transformation of the inputs.\n   */\n  dropout?: number;\n\n  /**\n   * Number between 0 and 1. Fraction of the units to drop for the linear\n   * transformation of the recurrent state.\n   */\n  recurrentDropout?: number;\n\n  /**\n   * This is added for test DI purpose.\n   */\n  dropoutFunc?: Function;\n}\n\n/**\n * RNNLayerConfig is identical to BaseRNNLayerConfig, except it makes the\n * `cell` property required. This interface is to be used with constructors\n * of concrete RNN layer subtypes.\n */\nexport declare interface RNNLayerArgs extends BaseRNNLayerArgs {\n  cell: RNNCell|RNNCell[];\n}\n\nexport class SimpleRNN extends RNN {\n  /** @nocollapse */\n  static className = 'SimpleRNN';\n  constructor(args: SimpleRNNLayerArgs) {\n    args.cell = new SimpleRNNCell(args);\n    super(args as RNNLayerArgs);\n    // TODO(cais): Add activityRegularizer.\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {mask, training, initialState});\n    });\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict): T {\n    return new cls(config);\n  }\n}\nserialization.registerClass(SimpleRNN);\n\n// Porting Note: Since this is a superset of SimpleRNNLayerConfig, we extend\n//   that interface instead of repeating the fields.\nexport declare interface GRUCellLayerArgs extends SimpleRNNCellLayerArgs {\n  /**\n   * Activation function to use for the recurrent step.\n   *\n   * Defaults to hard sigmoid (`hardSigmoid`).\n   *\n   * If `null`, no activation is applied.\n   */\n  recurrentActivation?: ActivationIdentifier;\n\n  /**\n   * Implementation mode, either 1 or 2.\n   *\n   * Mode 1 will structure its operations as a larger number of\n   *   smaller dot products and additions.\n   *\n   * Mode 2 will batch them into fewer, larger operations. These modes will\n   * have different performance profiles on different hardware and\n   * for different applications.\n   *\n   * Note: For superior performance, TensorFlow.js always uses implementation\n   * 2, regardless of the actual value of this configuration field.\n   */\n  implementation?: number;\n\n  /**\n   * GRU convention (whether to apply reset gate after or before matrix\n   * multiplication). false = \"before\", true = \"after\" (only false is\n   * supported).\n   */\n  resetAfter?: boolean;\n}\n\nexport class GRUCell extends RNNCell {\n  /** @nocollapse */\n  static className = 'GRUCell';\n  readonly units: number;\n  readonly activation: Activation;\n  readonly recurrentActivation: Activation;\n  readonly useBias: boolean;\n\n  readonly kernelInitializer: Initializer;\n  readonly recurrentInitializer: Initializer;\n  readonly biasInitializer: Initializer;\n\n  readonly kernelRegularizer: Regularizer;\n  readonly recurrentRegularizer: Regularizer;\n  readonly biasRegularizer: Regularizer;\n\n  readonly kernelConstraint: Constraint;\n  readonly recurrentConstraint: Constraint;\n  readonly biasConstraint: Constraint;\n\n  readonly dropout: number;\n  readonly recurrentDropout: number;\n  readonly dropoutFunc: Function;\n\n  readonly stateSize: number;\n  readonly implementation: number;\n\n  readonly DEFAULT_ACTIVATION = 'tanh';\n  readonly DEFAULT_RECURRENT_ACTIVATION: ActivationIdentifier = 'hardSigmoid';\n\n  readonly DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n  readonly DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n  readonly DEFAULT_BIAS_INITIALIZER: InitializerIdentifier = 'zeros';\n\n  kernel: LayerVariable;\n  recurrentKernel: LayerVariable;\n  bias: LayerVariable;\n\n  constructor(args: GRUCellLayerArgs) {\n    super(args);\n    if (args.resetAfter) {\n      throw new ValueError(\n          `GRUCell does not support reset_after parameter set to true.`);\n    }\n    this.units = args.units;\n    assertPositiveInteger(this.units, 'units');\n    this.activation = getActivation(\n        args.activation === undefined ? this.DEFAULT_ACTIVATION :\n                                        args.activation);\n    this.recurrentActivation = getActivation(\n        args.recurrentActivation === undefined ?\n            this.DEFAULT_RECURRENT_ACTIVATION :\n            args.recurrentActivation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(\n        args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n\n    this.dropout = math_utils.min(\n        [1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([\n      1,\n      math_utils.max(\n          [0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n    ]);\n    this.dropoutFunc = args.dropoutFunc;\n    this.implementation = args.implementation;\n    this.stateSize = this.units;\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const inputDim = inputShape[inputShape.length - 1];\n    this.kernel = this.addWeight(\n        'kernel', [inputDim, this.units * 3], null, this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    this.recurrentKernel = this.addWeight(\n        'recurrent_kernel', [this.units, this.units * 3], null,\n        this.recurrentInitializer, this.recurrentRegularizer, true,\n        this.recurrentConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.units * 3], null, this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    // Porting Notes: Unlike the PyKeras implementation, we perform slicing\n    //   of the weights and bias in the call() method, at execution time.\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = inputs as Tensor[];\n      if (inputs.length !== 2) {\n        throw new ValueError(\n            `GRUCell expects 2 input Tensors (inputs, h, c), got ` +\n            `${inputs.length}.`);\n      }\n\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      let hTMinus1 = inputs[1];  // Previous memory state.\n      inputs = inputs[0];\n\n      // Note: For superior performance, TensorFlow.js always uses\n      // implementation 2, regardless of the actual value of\n      // config.implementation.\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n                             ones: () => tfc.onesLike(inputs as Tensor),\n                             rate: this.dropout,\n                             training,\n                             count: 3,\n                             dropoutFunc: this.dropoutFunc,\n                           }) as Tensor[];\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n          this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n                                      ones: () => tfc.onesLike(hTMinus1),\n                                      rate: this.recurrentDropout,\n                                      training,\n                                      count: 3,\n                                      dropoutFunc: this.dropoutFunc,\n                                    }) as Tensor[];\n      }\n      const dpMask = this.dropoutMask as [Tensor, Tensor, Tensor];\n      const recDpMask = this.recurrentDropoutMask as [Tensor, Tensor, Tensor];\n      let z: Tensor;\n      let r: Tensor;\n      let hh: Tensor;\n\n      if (0 < this.dropout && this.dropout < 1) {\n        inputs = tfc.mul(inputs, dpMask[0]);\n      }\n      let matrixX = K.dot(inputs, this.kernel.read());\n      if (this.useBias) {\n        matrixX = K.biasAdd(matrixX, this.bias.read());\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1) {\n        hTMinus1 = tfc.mul(hTMinus1, recDpMask[0]);\n      }\n\n      const recurrentKernelValue = this.recurrentKernel.read();\n      const [rk1, rk2] = tfc.split(\n          recurrentKernelValue, [2 * this.units, this.units],\n          recurrentKernelValue.rank - 1);\n      const matrixInner = K.dot(hTMinus1, rk1);\n\n      const [xZ, xR, xH] = tfc.split(matrixX, 3, matrixX.rank - 1);\n      const [recurrentZ, recurrentR] =\n          tfc.split(matrixInner, 2, matrixInner.rank - 1);\n      z = this.recurrentActivation.apply(tfc.add(xZ, recurrentZ));\n      r = this.recurrentActivation.apply(tfc.add(xR, recurrentR));\n\n      const recurrentH = K.dot(tfc.mul(r, hTMinus1), rk2);\n      hh = this.activation.apply(tfc.add(xH, recurrentH));\n\n      const h =\n          tfc.add(tfc.mul(z, hTMinus1), tfc.mul(tfc.add(1, tfc.neg(z)), hh));\n      // TODO(cais): Add use_learning_phase flag properly.\n      return [h, h];\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const baseConfig = super.getConfig();\n\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      recurrentActivation: serializeActivation(this.recurrentActivation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n      implementation: this.implementation,\n      resetAfter: false\n    };\n\n    return {...baseConfig, ...config};\n  }\n}\nserialization.registerClass(GRUCell);\n\n// Porting Note: Since this is a superset of SimpleRNNLayerConfig, we inherit\n//   from that interface instead of repeating the fields here.\nexport declare interface GRULayerArgs extends SimpleRNNLayerArgs {\n  /**\n   * Activation function to use for the recurrent step.\n   *\n   * Defaults to hard sigmoid (`hardSigmoid`).\n   *\n   * If `null`, no activation is applied.\n   */\n  recurrentActivation?: ActivationIdentifier;\n\n  /**\n   * Implementation mode, either 1 or 2.\n   *\n   * Mode 1 will structure its operations as a larger number of\n   * smaller dot products and additions.\n   *\n   * Mode 2 will batch them into fewer, larger operations. These modes will\n   * have different performance profiles on different hardware and\n   * for different applications.\n   *\n   * Note: For superior performance, TensorFlow.js always uses implementation\n   * 2, regardless of the actual value of this configuration field.\n   */\n  implementation?: number;\n}\n\nexport class GRU extends RNN {\n  /** @nocollapse */\n  static className = 'GRU';\n  constructor(args: GRULayerArgs) {\n    if (args.implementation === 0) {\n      console.warn(\n          '`implementation=0` has been deprecated, and now defaults to ' +\n          '`implementation=1`. Please update your layer call.');\n    }\n    args.cell = new GRUCell(args);\n    super(args as RNNLayerArgs);\n    // TODO(cais): Add activityRegularizer.\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {mask, training, initialState});\n    });\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict): T {\n    if (config['implmentation'] === 0) {\n      config['implementation'] = 1;\n    }\n    return new cls(config);\n  }\n}\nserialization.registerClass(GRU);\n\n// Porting Note: Since this is a superset of SimpleRNNLayerConfig, we extend\n//   that interface instead of repeating the fields.\nexport declare interface LSTMCellLayerArgs extends SimpleRNNCellLayerArgs {\n  /**\n   * Activation function to use for the recurrent step.\n   *\n   * Defaults to hard sigmoid (`hardSigmoid`).\n   *\n   * If `null`, no activation is applied.\n   */\n  recurrentActivation?: ActivationIdentifier;\n\n  /**\n   * If `true`, add 1 to the bias of the forget gate at initialization.\n   * Setting it to `true` will also force `biasInitializer = 'zeros'`.\n   * This is recommended in\n   * [Jozefowicz et\n   * al.](http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf).\n   */\n  unitForgetBias?: boolean;\n\n  /**\n   * Implementation mode, either 1 or 2.\n   *\n   * Mode 1 will structure its operations as a larger number of\n   *   smaller dot products and additions.\n   *\n   * Mode 2 will batch them into fewer, larger operations. These modes will\n   * have different performance profiles on different hardware and\n   * for different applications.\n   *\n   * Note: For superior performance, TensorFlow.js always uses implementation\n   * 2, regardless of the actual value of this configuration field.\n   */\n  implementation?: number;\n}\n\nexport class LSTMCell extends RNNCell {\n  /** @nocollapse */\n  static className = 'LSTMCell';\n  readonly units: number;\n  readonly activation: Activation;\n  readonly recurrentActivation: Activation;\n  readonly useBias: boolean;\n\n  readonly kernelInitializer: Initializer;\n  readonly recurrentInitializer: Initializer;\n  readonly biasInitializer: Initializer;\n  readonly unitForgetBias: boolean;\n\n  readonly kernelConstraint: Constraint;\n  readonly recurrentConstraint: Constraint;\n  readonly biasConstraint: Constraint;\n\n  readonly kernelRegularizer: Regularizer;\n  readonly recurrentRegularizer: Regularizer;\n  readonly biasRegularizer: Regularizer;\n\n  readonly dropout: number;\n  readonly recurrentDropout: number;\n  readonly dropoutFunc: Function;\n\n  readonly stateSize: number[];\n  readonly implementation: number;\n\n  readonly DEFAULT_ACTIVATION = 'tanh';\n  readonly DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n  readonly DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n  readonly DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n\n  readonly DEFAULT_BIAS_INITIALIZER = 'zeros';\n\n  kernel: LayerVariable;\n  recurrentKernel: LayerVariable;\n  bias: LayerVariable;\n\n  constructor(args: LSTMCellLayerArgs) {\n    super(args);\n\n    this.units = args.units;\n    assertPositiveInteger(this.units, 'units');\n    this.activation = getActivation(\n        args.activation === undefined ? this.DEFAULT_ACTIVATION :\n                                        args.activation);\n    this.recurrentActivation = getActivation(\n        args.recurrentActivation === undefined ?\n            this.DEFAULT_RECURRENT_ACTIVATION :\n            args.recurrentActivation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.recurrentInitializer = getInitializer(\n        args.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER);\n\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.unitForgetBias = args.unitForgetBias;\n\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.recurrentRegularizer = getRegularizer(args.recurrentRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.recurrentConstraint = getConstraint(args.recurrentConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n\n    this.dropout = math_utils.min(\n        [1, math_utils.max([0, args.dropout == null ? 0 : args.dropout])]);\n    this.recurrentDropout = math_utils.min([\n      1,\n      math_utils.max(\n          [0, args.recurrentDropout == null ? 0 : args.recurrentDropout])\n    ]);\n    this.dropoutFunc = args.dropoutFunc;\n    this.implementation = args.implementation;\n    this.stateSize = [this.units, this.units];\n    this.dropoutMask = null;\n    this.recurrentDropoutMask = null;\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const inputDim = inputShape[inputShape.length - 1];\n    this.kernel = this.addWeight(\n        'kernel', [inputDim, this.units * 4], null, this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    this.recurrentKernel = this.addWeight(\n        'recurrent_kernel', [this.units, this.units * 4], null,\n        this.recurrentInitializer, this.recurrentRegularizer, true,\n        this.recurrentConstraint);\n    let biasInitializer: Initializer;\n    if (this.useBias) {\n      if (this.unitForgetBias) {\n        const capturedBiasInit = this.biasInitializer;\n        const capturedUnits = this.units;\n        biasInitializer = new (class CustomInit extends Initializer {\n          /** @nocollapse */\n          static className = 'CustomInit';\n\n          apply(shape: Shape, dtype?: DataType): Tensor {\n            // TODO(cais): More informative variable names?\n            const bI = capturedBiasInit.apply([capturedUnits]);\n            const bF = (new Ones()).apply([capturedUnits]);\n            const bCAndH = capturedBiasInit.apply([capturedUnits * 2]);\n            return K.concatAlongFirstAxis(\n                K.concatAlongFirstAxis(bI, bF), bCAndH);\n          }\n        })();\n      } else {\n        biasInitializer = this.biasInitializer;\n      }\n      this.bias = this.addWeight(\n          'bias', [this.units * 4], null, biasInitializer, this.biasRegularizer,\n          true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    // Porting Notes: Unlike the PyKeras implementation, we perform slicing\n    //   of the weights and bias in the call() method, at execution time.\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      inputs = inputs as Tensor[];\n      if (inputs.length !== 3) {\n        throw new ValueError(\n            `LSTMCell expects 3 input Tensors (inputs, h, c), got ` +\n            `${inputs.length}.`);\n      }\n      let hTMinus1 = inputs[1];    // Previous memory state.\n      const cTMinus1 = inputs[2];  // Previous carry state.\n      inputs = inputs[0];\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n                             ones: () => tfc.onesLike(inputs as Tensor),\n                             rate: this.dropout,\n                             training,\n                             count: 4,\n                             dropoutFunc: this.dropoutFunc\n                           }) as Tensor[];\n      }\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n          this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n                                      ones: () => tfc.onesLike(hTMinus1),\n                                      rate: this.recurrentDropout,\n                                      training,\n                                      count: 4,\n                                      dropoutFunc: this.dropoutFunc\n                                    }) as Tensor[];\n      }\n      const dpMask = this.dropoutMask as [Tensor, Tensor, Tensor, Tensor];\n      const recDpMask =\n          this.recurrentDropoutMask as [Tensor, Tensor, Tensor, Tensor];\n\n      // Note: For superior performance, TensorFlow.js always uses\n      // implementation 2 regardless of the actual value of\n      // config.implementation.\n      let i: Tensor;\n      let f: Tensor;\n      let c: Tensor;\n      let o: Tensor;\n      if (0 < this.dropout && this.dropout < 1) {\n        inputs = tfc.mul(inputs, dpMask[0]);\n      }\n      let z = K.dot(inputs, this.kernel.read());\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1) {\n        hTMinus1 = tfc.mul(hTMinus1, recDpMask[0]);\n      }\n      z = tfc.add(z, K.dot(hTMinus1, this.recurrentKernel.read()));\n      if (this.useBias) {\n        z = K.biasAdd(z, this.bias.read());\n      }\n\n      const [z0, z1, z2, z3] = tfc.split(z, 4, z.rank - 1);\n\n      i = this.recurrentActivation.apply(z0);\n      f = this.recurrentActivation.apply(z1);\n      c = tfc.add(tfc.mul(f, cTMinus1), tfc.mul(i, this.activation.apply(z2)));\n      o = this.recurrentActivation.apply(z3);\n\n      const h = tfc.mul(o, this.activation.apply(c));\n      // TODO(cais): Add use_learning_phase flag properly.\n      return [h, h, c];\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const baseConfig = super.getConfig();\n\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      recurrentActivation: serializeActivation(this.recurrentActivation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      recurrentInitializer: serializeInitializer(this.recurrentInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      unitForgetBias: this.unitForgetBias,\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      recurrentConstraint: serializeConstraint(this.recurrentConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint),\n      dropout: this.dropout,\n      recurrentDropout: this.recurrentDropout,\n      implementation: this.implementation,\n    };\n\n    return {...baseConfig, ...config};\n  }\n}\nserialization.registerClass(LSTMCell);\n\n// Porting Note: Since this is a superset of SimpleRNNLayerConfig, we inherit\n//   from that interface instead of repeating the fields here.\nexport declare interface LSTMLayerArgs extends SimpleRNNLayerArgs {\n  /**\n   * Activation function to use for the recurrent step.\n   *\n   * Defaults to hard sigmoid (`hardSigmoid`).\n   *\n   * If `null`, no activation is applied.\n   */\n  recurrentActivation?: ActivationIdentifier;\n\n  /**\n   * If `true`, add 1 to the bias of the forget gate at initialization.\n   * Setting it to `true` will also force `biasInitializer = 'zeros'`.\n   * This is recommended in\n   * [Jozefowicz et\n   * al.](http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf).\n   */\n  unitForgetBias?: boolean;\n\n  /**\n   * Implementation mode, either 1 or 2.\n   *   Mode 1 will structure its operations as a larger number of\n   *   smaller dot products and additions, whereas mode 2 will\n   *   batch them into fewer, larger operations. These modes will\n   *   have different performance profiles on different hardware and\n   *   for different applications.\n   *\n   * Note: For superior performance, TensorFlow.js always uses implementation\n   * 2, regardless of the actual value of this config field.\n   */\n  implementation?: number;\n}\n\nexport class LSTM extends RNN {\n  /** @nocollapse */\n  static className = 'LSTM';\n  constructor(args: LSTMLayerArgs) {\n    if (args.implementation === 0) {\n      console.warn(\n          '`implementation=0` has been deprecated, and now defaults to ' +\n          '`implementation=1`. Please update your layer call.');\n    }\n    args.cell = new LSTMCell(args);\n    super(args as RNNLayerArgs);\n    // TODO(cais): Add activityRegularizer.\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {mask, training, initialState});\n    });\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict): T {\n    if (config['implmentation'] === 0) {\n      config['implementation'] = 1;\n    }\n    return new cls(config);\n  }\n}\nserialization.registerClass(LSTM);\n\nexport declare interface StackedRNNCellsArgs extends LayerArgs {\n  /**\n   * A `Array` of `RNNCell` instances.\n   */\n  cells: RNNCell[];\n}\n\nexport class StackedRNNCells extends RNNCell {\n  /** @nocollapse */\n  static className = 'StackedRNNCells';\n  protected cells: RNNCell[];\n\n  constructor(args: StackedRNNCellsArgs) {\n    super(args);\n    this.cells = args.cells;\n  }\n\n  get stateSize(): number[] {\n    // States are a flat list in reverse order of the cell stack.\n    // This allows perserving the requirement `stack.statesize[0] ===\n    // outputDim`. E.g., states of a 2-layer LSTM would be `[h2, c2, h1, c1]`,\n    // assuming one LSTM has states `[h, c]`.\n    const stateSize: number[] = [];\n    for (const cell of this.cells.slice().reverse()) {\n      if (Array.isArray(cell.stateSize)) {\n        stateSize.push(...cell.stateSize);\n      } else {\n        stateSize.push(cell.stateSize);\n      }\n    }\n    return stateSize;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = inputs as Tensor[];\n      let states = inputs.slice(1);\n\n      // Recover per-cell states.\n      const nestedStates: Tensor[][] = [];\n      for (const cell of this.cells.slice().reverse()) {\n        if (Array.isArray(cell.stateSize)) {\n          nestedStates.push(states.splice(0, cell.stateSize.length));\n        } else {\n          nestedStates.push(states.splice(0, 1));\n        }\n      }\n      nestedStates.reverse();\n\n      // Call the cells in order and store the returned states.\n      const newNestedStates: Tensor[][] = [];\n      let callInputs: Tensor[];\n      for (let i = 0; i < this.cells.length; ++i) {\n        const cell = this.cells[i];\n        states = nestedStates[i];\n        // TODO(cais): Take care of constants.\n        if (i === 0) {\n          callInputs = [inputs[0]].concat(states);\n        } else {\n          callInputs = [callInputs[0]].concat(states);\n        }\n        callInputs = cell.call(callInputs, kwargs) as Tensor[];\n        newNestedStates.push(callInputs.slice(1));\n      }\n\n      // Format the new states as a flat list in reverse cell order.\n      states = [];\n      for (const cellStates of newNestedStates.slice().reverse()) {\n        states.push(...cellStates);\n      }\n      return [callInputs[0]].concat(states);\n    });\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    if (isArrayOfShapes(inputShape)) {\n      // TODO(cais): Take care of input constants.\n      // const constantShape = inputShape.slice(1);\n      inputShape = (inputShape as Shape[])[0];\n    }\n    inputShape = inputShape as Shape;\n    let outputDim: number;\n    this.cells.forEach((cell, i) => {\n      nameScope(`RNNCell_${i}`, () => {\n        // TODO(cais): Take care of input constants.\n\n        cell.build(inputShape);\n        if (Array.isArray(cell.stateSize)) {\n          outputDim = cell.stateSize[0];\n        } else {\n          outputDim = cell.stateSize;\n        }\n        inputShape = [inputShape[0], outputDim] as Shape;\n      });\n    });\n    this.built = true;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const baseConfig = super.getConfig();\n\n    const getCellConfig = (cell: RNNCell) => {\n      return {\n        'className': cell.getClassName(),\n        'config': cell.getConfig(),\n      };\n    };\n\n    const cellConfigs = this.cells.map(getCellConfig);\n\n    const config = {'cells': cellConfigs};\n\n    return {...baseConfig, ...config};\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict,\n      customObjects = {} as serialization.ConfigDict): T {\n    const cells: RNNCell[] = [];\n    for (const cellConfig of (config['cells'] as serialization.ConfigDict[])) {\n      cells.push(deserialize(cellConfig, customObjects) as RNNCell);\n    }\n    return new cls({cells});\n  }\n\n  get trainableWeights(): LayerVariable[] {\n    if (!this.trainable) {\n      return [];\n    }\n    const weights: LayerVariable[] = [];\n    for (const cell of this.cells) {\n      weights.push(...cell.trainableWeights);\n    }\n    return weights;\n  }\n\n  get nonTrainableWeights(): LayerVariable[] {\n    const weights: LayerVariable[] = [];\n    for (const cell of this.cells) {\n      weights.push(...cell.nonTrainableWeights);\n    }\n    if (!this.trainable) {\n      const trainableWeights: LayerVariable[] = [];\n      for (const cell of this.cells) {\n        trainableWeights.push(...cell.trainableWeights);\n      }\n      return trainableWeights.concat(weights);\n    }\n    return weights;\n  }\n\n  /**\n   * Retrieve the weights of a the model.\n   *\n   * @returns A flat `Array` of `tf.Tensor`s.\n   */\n  getWeights(): Tensor[] {\n    const weights: LayerVariable[] = [];\n    for (const cell of this.cells) {\n      weights.push(...cell.weights);\n    }\n    return batchGetValue(weights);\n  }\n\n  /**\n   * Set the weights of the model.\n   *\n   * @param weights An `Array` of `tf.Tensor`s with shapes and types matching\n   *     the output of `getWeights()`.\n   */\n  setWeights(weights: Tensor[]): void {\n    const tuples: Array<[LayerVariable, Tensor]> = [];\n    for (const cell of this.cells) {\n      const numParams = cell.weights.length;\n      const inputWeights = weights.splice(numParams);\n      for (let i = 0; i < cell.weights.length; ++i) {\n        tuples.push([cell.weights[i], inputWeights[i]]);\n      }\n    }\n    batchSetValue(tuples);\n  }\n\n  // TODO(cais): Maybe implemnt `losses` and `getLossesFor`.\n}\nserialization.registerClass(StackedRNNCells);\n\nexport function generateDropoutMask(args: {\n  ones: () => tfc.Tensor,\n  rate: number,\n  training?: boolean,\n  count?: number,\n  dropoutFunc?: Function,\n}): tfc.Tensor|tfc.Tensor[] {\n  const {ones, rate, training = false, count = 1, dropoutFunc} = args;\n\n  const droppedInputs = () =>\n      dropoutFunc != null ? dropoutFunc(ones(), rate) : K.dropout(ones(), rate);\n\n  const createMask = () => K.inTrainPhase(droppedInputs, ones, training);\n\n  // just in case count is provided with null or undefined\n  if (!count || count <= 1) {\n    return tfc.keep(createMask().clone());\n  }\n\n  const masks = Array(count).fill(undefined).map(createMask);\n\n  return masks.map(m => tfc.keep(m.clone()));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}