{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from './engine';\nimport { inferShape } from './tensor_util_env';\nimport { arraysEqual, encodeString, flatten, isString, isTypedArray } from './util';\nconst TEST_EPSILON_FLOAT32 = 1e-3;\nexport const TEST_EPSILON_FLOAT16 = 1e-1;\nexport function expectArraysClose(actual, expected, epsilon) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n\n  return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, epsilon));\n}\nexport function testEpsilon() {\n  return ENGINE.backend.floatPrecision() === 32 ? TEST_EPSILON_FLOAT32 : TEST_EPSILON_FLOAT16;\n}\n\nfunction expectArraysPredicate(actual, expected, predicate) {\n  let checkClassType = true;\n\n  if (isTypedArray(actual) || isTypedArray(expected)) {\n    checkClassType = false;\n  }\n\n  if (isTypedArray(actual) && isTypedArray(expected)) {\n    checkClassType = true;\n  }\n\n  if (checkClassType) {\n    const aType = actual.constructor.name;\n    const bType = expected.constructor.name;\n\n    if (aType !== bType) {\n      throw new Error(`Arrays are of different type. Actual: ${aType}. ` + `Expected: ${bType}`);\n    }\n  }\n\n  if (Array.isArray(actual) && Array.isArray(expected)) {\n    const actualShape = inferShape(actual);\n    const expectedShape = inferShape(expected);\n\n    if (!arraysEqual(actualShape, expectedShape)) {\n      throw new Error(`Arrays have different shapes. ` + `Actual: [${actualShape}]. Expected: [${expectedShape}]`);\n    }\n  }\n\n  const actualFlat = isTypedArray(actual) ? actual : flatten(actual);\n  const expectedFlat = isTypedArray(expected) ? expected : flatten(expected);\n\n  if (actualFlat.length !== expectedFlat.length) {\n    throw new Error(`Arrays have different lengths actual: ${actualFlat.length} vs ` + `expected: ${expectedFlat.length}.\\n` + `Actual:   ${actualFlat}.\\n` + `Expected: ${expectedFlat}.`);\n  }\n\n  for (let i = 0; i < expectedFlat.length; ++i) {\n    const a = actualFlat[i];\n    const e = expectedFlat[i];\n\n    if (!predicate(a, e)) {\n      throw new Error(`Arrays differ: actual[${i}] = ${a}, expected[${i}] = ${e}.\\n` + `Actual:   ${actualFlat}.\\n` + `Expected: ${expectedFlat}.`);\n    }\n  }\n}\n\nexport function expectPromiseToFail(fn, done) {\n  fn().then(() => done.fail(), () => done());\n}\nexport function expectArraysEqual(actual, expected) {\n  const exp = typeof expected === 'string' || typeof expected === 'number' || typeof expected === 'boolean' ? [expected] : expected;\n\n  if (isString(actual) || isString(actual[0]) || isString(expected) || isString(expected[0])) {\n    // tslint:disable-next-line: triple-equals\n    return expectArraysPredicate(actual, exp, (a, b) => a == b);\n  }\n\n  return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, 0));\n}\nexport function expectNumbersClose(a, e, epsilon) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n\n  if (!areClose(a, e, epsilon)) {\n    throw new Error(`Numbers differ: actual === ${a}, expected === ${e}`);\n  }\n}\n\nfunction areClose(a, e, epsilon) {\n  if (!isFinite(a) && !isFinite(e)) {\n    return true;\n  }\n\n  if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function expectValuesInRange(actual, low, high) {\n  for (let i = 0; i < actual.length; i++) {\n    if (actual[i] < low || actual[i] > high) {\n      throw new Error(`Value out of range:${actual[i]} low: ${low}, high: ${high}`);\n    }\n  }\n}\nexport function expectArrayBuffersEqual(actual, expected) {\n  // Safari does not like comparing ArrayBuffers directly. Wrapping in\n  // a Float32Array solves this issue.\n  const actualArray = new Float32Array(actual);\n  const expectedArray = new Float32Array(expected);\n\n  if (actualArray.length !== expectedArray.length) {\n    throw new Error('Expected ArrayBuffer to be of length ' + `${expectedArray.length}, but it was ${actualArray.length}`);\n  }\n\n  for (let i = 0; i < expectedArray.length; i++) {\n    if (actualArray[i] !== expectedArray[i]) {\n      throw new Error(`Expected ArrayBuffer value at ${i} to be ` + `${expectedArray[i]} but got ${actualArray[i]} instead`);\n    }\n  }\n}\n/** Encodes strings into utf-8 bytes. */\n\nexport function encodeStrings(a) {\n  for (let i = 0; i < a.length; i++) {\n    const val = a[i];\n\n    if (Array.isArray(val)) {\n      encodeStrings(val);\n    } else {\n      a[i] = encodeString(val);\n    }\n  }\n\n  return a;\n}","map":{"version":3,"sources":["../../../../../tfjs-core/src/test_util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from './engine';\nimport {inferShape} from './tensor_util_env';\nimport {RecursiveArray, TensorLike, TypedArray} from './types';\nimport {arraysEqual, encodeString, flatten, isString, isTypedArray} from './util';\n\nconst TEST_EPSILON_FLOAT32 = 1e-3;\nexport const TEST_EPSILON_FLOAT16 = 1e-1;\n\nexport function expectArraysClose(\n    actual: TypedArray|number|RecursiveArray<number>,\n    expected: TypedArray|number|RecursiveArray<number>, epsilon?: number) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  return expectArraysPredicate(\n      actual, expected, (a, b) => areClose(a as number, b as number, epsilon));\n}\n\nexport function testEpsilon() {\n  return ENGINE.backend.floatPrecision() === 32 ? TEST_EPSILON_FLOAT32 :\n                                                  TEST_EPSILON_FLOAT16;\n}\n\nfunction expectArraysPredicate(\n    actual: TensorLike, expected: TensorLike,\n    predicate: (a: {}, b: {}) => boolean) {\n  let checkClassType = true;\n  if (isTypedArray(actual) || isTypedArray(expected)) {\n    checkClassType = false;\n  }\n  if (isTypedArray(actual) && isTypedArray(expected)) {\n    checkClassType = true;\n  }\n  if (checkClassType) {\n    const aType = actual.constructor.name;\n    const bType = expected.constructor.name;\n\n    if (aType !== bType) {\n      throw new Error(\n          `Arrays are of different type. Actual: ${aType}. ` +\n          `Expected: ${bType}`);\n    }\n  }\n\n  if (Array.isArray(actual) && Array.isArray(expected)) {\n    const actualShape = inferShape(actual);\n    const expectedShape = inferShape(expected);\n    if (!arraysEqual(actualShape, expectedShape)) {\n      throw new Error(\n          `Arrays have different shapes. ` +\n          `Actual: [${actualShape}]. Expected: [${expectedShape}]`);\n    }\n  }\n\n  const actualFlat =\n      isTypedArray(actual) ? actual : flatten(actual as RecursiveArray<number>);\n  const expectedFlat = isTypedArray(expected) ?\n      expected :\n      flatten(expected as RecursiveArray<number>);\n\n  if (actualFlat.length !== expectedFlat.length) {\n    throw new Error(\n        `Arrays have different lengths actual: ${actualFlat.length} vs ` +\n        `expected: ${expectedFlat.length}.\\n` +\n        `Actual:   ${actualFlat}.\\n` +\n        `Expected: ${expectedFlat}.`);\n  }\n  for (let i = 0; i < expectedFlat.length; ++i) {\n    const a = actualFlat[i];\n    const e = expectedFlat[i];\n\n    if (!predicate(a, e)) {\n      throw new Error(\n          `Arrays differ: actual[${i}] = ${a}, expected[${i}] = ${e}.\\n` +\n          `Actual:   ${actualFlat}.\\n` +\n          `Expected: ${expectedFlat}.`);\n    }\n  }\n}\n\nexport interface DoneFn {\n  (): void;\n  fail: (message?: Error|string) => void;\n}\n\nexport function expectPromiseToFail(fn: () => Promise<{}>, done: DoneFn): void {\n  fn().then(() => done.fail(), () => done());\n}\n\nexport function expectArraysEqual(actual: TensorLike, expected: TensorLike) {\n  const exp = typeof expected === 'string' || typeof expected === 'number' ||\n          typeof expected === 'boolean' ?\n      [expected] as number[] :\n      expected as number[];\n  if (isString(actual) || isString((actual as string[])[0]) ||\n      isString(expected) || isString((expected as string[])[0])) {\n    // tslint:disable-next-line: triple-equals\n    return expectArraysPredicate(actual, exp, (a, b) => a == b);\n  }\n  return expectArraysPredicate(\n      actual, expected, (a, b) => areClose(a as number, b as number, 0));\n}\n\nexport function expectNumbersClose(a: number, e: number, epsilon?: number) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  if (!areClose(a, e, epsilon)) {\n    throw new Error(`Numbers differ: actual === ${a}, expected === ${e}`);\n  }\n}\n\nfunction areClose(a: number, e: number, epsilon: number): boolean {\n  if (!isFinite(a) && !isFinite(e)) {\n    return true;\n  }\n  if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {\n    return false;\n  }\n  return true;\n}\n\nexport function expectValuesInRange(\n    actual: TypedArray|number[], low: number, high: number) {\n  for (let i = 0; i < actual.length; i++) {\n    if (actual[i] < low || actual[i] > high) {\n      throw new Error(\n          `Value out of range:${actual[i]} low: ${low}, high: ${high}`);\n    }\n  }\n}\n\nexport function expectArrayBuffersEqual(\n    actual: ArrayBuffer, expected: ArrayBuffer) {\n  // Safari does not like comparing ArrayBuffers directly. Wrapping in\n  // a Float32Array solves this issue.\n  const actualArray = new Float32Array(actual);\n  const expectedArray = new Float32Array(expected);\n  if (actualArray.length !== expectedArray.length) {\n    throw new Error(\n        'Expected ArrayBuffer to be of length ' +\n        `${expectedArray.length}, but it was ${actualArray.length}`);\n  }\n\n  for (let i = 0; i < expectedArray.length; i++) {\n    if (actualArray[i] !== expectedArray[i]) {\n      throw new Error(\n          `Expected ArrayBuffer value at ${i} to be ` +\n          `${expectedArray[i]} but got ${actualArray[i]} instead`);\n    }\n  }\n}\n\n/** Encodes strings into utf-8 bytes. */\nexport function encodeStrings(a: RecursiveArray<{}>):\n    RecursiveArray<Uint8Array> {\n  for (let i = 0; i < (a as Array<{}>).length; i++) {\n    const val = a[i];\n    if (Array.isArray(val)) {\n      encodeStrings(val);\n    } else {\n      a[i] = encodeString(val as string);\n    }\n  }\n  return a as RecursiveArray<Uint8Array>;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}