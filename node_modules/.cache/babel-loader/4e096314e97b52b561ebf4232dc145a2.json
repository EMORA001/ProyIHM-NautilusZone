{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\nimport { buffer, util } from '@tensorflow/tfjs-core';\n\nconst comparePair = (a, b) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\n\n\nfunction select(array, k) {\n  let left = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let right = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : array.length - 1;\n\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    } // partition the elements between left and right around t\n\n\n    const t = array[k];\n    let i = left;\n    let j = right;\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    } // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n\n\n    if (j <= k) {\n      left = j + 1;\n    }\n\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl(x, xShape, xDtype, k, sorted) {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n    let valAndInd = new Array(vals.length);\n    vals.forEach((value, index) => valAndInd[index] = {\n      value,\n      index\n    });\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n\n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  } // Reshape back to the original input shape, except that the last\n  // dimension is k.\n\n\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n  return [buffer(outputShape, xDtype, allTopKVals), buffer(outputShape, 'int32', allTopKIndices)];\n}","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/TopK_impl.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\ntype Pair = {\n  value: number,\n  index: number\n};\n\nconst comparePair = (a: Pair, b: Pair) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array: Pair[], k: number, left = 0, right = array.length - 1) {\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    }\n    // partition the elements between left and right around t\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    }\n    // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n    if (j <= k) {\n      left = j + 1;\n    }\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n\n    let valAndInd: Pair[] = new Array(vals.length);\n    vals.forEach(\n        (value: number, index: number) => valAndInd[index] = {value, index});\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n    \n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}