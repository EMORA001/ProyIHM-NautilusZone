{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedBatchNorm } from '../kernel_names';\nimport { add } from '../ops/add';\nimport { getReductionAxes } from '../ops/broadcast_util';\nimport { mul } from '../ops/mul';\nimport { reshape } from '../ops/reshape';\nimport { rsqrt } from '../ops/rsqrt';\nimport { scalar } from '../ops/scalar';\nimport { sub } from '../ops/sub';\nimport { sum } from '../ops/sum';\nimport { tile } from '../ops/tile';\nexport const fusedBatchNormGradConfig = {\n  kernelName: FusedBatchNorm,\n  inputsToSave: ['x', 'mean', 'variance', 'scale'],\n  gradFunc: (dy, saved, attrs) => {\n    const {\n      varianceEpsilon\n    } = attrs;\n    const [x, mean, variance, scale] = saved;\n    const scaleValue = scale == null ? scalar(1) : scale;\n    const reductionAxes = getReductionAxes(mean.shape, x.shape);\n    const tileShape = [];\n\n    if (mean.rank === 1) {\n      for (let i = 0; i < x.shape.length - 1; ++i) {\n        tileShape.push(x.shape[i]);\n      }\n\n      tileShape.push(1);\n    }\n\n    const xMinusMean = sub(x, mean);\n    const dyTimesScaleValue = mul(dy, scaleValue);\n    const oneOverSqrtVariance = rsqrt(add(variance, scalar(varianceEpsilon)));\n    const minusHalfRCube = mul(mul(mul(oneOverSqrtVariance, oneOverSqrtVariance), oneOverSqrtVariance), scalar(-0.5));\n\n    const derX = () => {\n      if (mean.rank === 1) {\n        return reshape(mul(mul(dy, tile(reshape(oneOverSqrtVariance, [1, 1, 1, mean.shape[0]]), tileShape)), scaleValue), x.shape);\n      } else {\n        return reshape(mul(mul(dy, oneOverSqrtVariance), scaleValue), x.shape);\n      }\n    };\n\n    const derMean = () => {\n      let meanDer = mul(mul(oneOverSqrtVariance, scalar(-1)), dyTimesScaleValue);\n\n      if (mean.rank === 1) {\n        meanDer = sum(meanDer, reductionAxes);\n      }\n\n      return reshape(meanDer, mean.shape);\n    };\n\n    const derVariance = () => {\n      let varianceDer = mul(mul(minusHalfRCube, xMinusMean), dyTimesScaleValue);\n\n      if (mean.rank === 1) {\n        varianceDer = sum(varianceDer, reductionAxes);\n      }\n\n      return reshape(varianceDer, mean.shape);\n    };\n\n    const derScale = () => {\n      const xMinusMean2TimesRsqrt = mul(xMinusMean, oneOverSqrtVariance);\n      let scaleDer = mul(dy, xMinusMean2TimesRsqrt);\n\n      if (mean.rank === 1) {\n        scaleDer = sum(scaleDer, reductionAxes);\n      }\n\n      return reshape(scaleDer, mean.shape);\n    };\n\n    const derOffset = () => {\n      let offsetDer = dy;\n\n      if (mean.rank === 1) {\n        offsetDer = sum(offsetDer, reductionAxes);\n      }\n\n      return reshape(offsetDer, mean.shape);\n    };\n\n    return {\n      x: derX,\n      mean: derMean,\n      variance: derVariance,\n      scale: derScale,\n      offset: derOffset\n    };\n  }\n};","map":{"version":3,"sources":["../../../../../../tfjs-core/src/gradients/FusedBatchNorm_grad.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {FusedBatchNorm, FusedBatchNormAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {add} from '../ops/add';\nimport {getReductionAxes} from '../ops/broadcast_util';\nimport {mul} from '../ops/mul';\nimport {reshape} from '../ops/reshape';\nimport {rsqrt} from '../ops/rsqrt';\nimport {scalar} from '../ops/scalar';\nimport {sub} from '../ops/sub';\nimport {sum} from '../ops/sum';\nimport {tile} from '../ops/tile';\nimport {Tensor} from '../tensor';\nimport {Rank, ShapeMap} from '../types';\n\nexport const fusedBatchNormGradConfig: GradConfig = {\n  kernelName: FusedBatchNorm,\n  inputsToSave: ['x', 'mean', 'variance', 'scale'],\n  gradFunc: <R extends Rank>(\n      dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const {varianceEpsilon} = attrs as {} as FusedBatchNormAttrs;\n    const [x, mean, variance, scale] = saved;\n\n    const scaleValue = scale == null ? scalar(1) : scale;\n    const reductionAxes = getReductionAxes(mean.shape, x.shape);\n    const tileShape: number[] = [];\n    if (mean.rank === 1) {\n      for (let i = 0; i < x.shape.length - 1; ++i) {\n        tileShape.push(x.shape[i]);\n      }\n      tileShape.push(1);\n    }\n\n    const xMinusMean = sub(x, mean);\n    const dyTimesScaleValue = mul(dy, scaleValue);\n    const oneOverSqrtVariance = rsqrt(add(variance, scalar(varianceEpsilon)));\n    const minusHalfRCube = mul(\n        mul(mul(oneOverSqrtVariance, oneOverSqrtVariance), oneOverSqrtVariance),\n        scalar(-0.5));\n\n    const derX = () => {\n      if (mean.rank === 1) {\n        return reshape(\n            mul(mul(dy,\n                    tile(\n                        reshape(oneOverSqrtVariance, [1, 1, 1, mean.shape[0]]),\n                        tileShape)),\n                scaleValue),\n            x.shape);\n      } else {\n        return reshape(mul(mul(dy, oneOverSqrtVariance), scaleValue), x.shape);\n      }\n    };\n    const derMean = () => {\n      let meanDer =\n          mul(mul(oneOverSqrtVariance, scalar(-1)), dyTimesScaleValue);\n      if (mean.rank === 1) {\n        meanDer = sum(meanDer, reductionAxes);\n      }\n      return reshape(meanDer, mean.shape as ShapeMap[R]);\n    };\n    const derVariance = () => {\n      let varianceDer = mul(mul(minusHalfRCube, xMinusMean), dyTimesScaleValue);\n\n      if (mean.rank === 1) {\n        varianceDer = sum(varianceDer, reductionAxes);\n      }\n      return reshape(varianceDer, mean.shape as ShapeMap[R]);\n    };\n    const derScale = () => {\n      const xMinusMean2TimesRsqrt = mul(xMinusMean, oneOverSqrtVariance);\n\n      let scaleDer = mul(dy, xMinusMean2TimesRsqrt);\n      if (mean.rank === 1) {\n        scaleDer = sum(scaleDer, reductionAxes);\n      }\n      return reshape(scaleDer, mean.shape as ShapeMap[R]);\n    };\n    const derOffset = () => {\n      let offsetDer = dy;\n      if (mean.rank === 1) {\n        offsetDer = sum(offsetDer, reductionAxes);\n      }\n      return reshape(offsetDer, mean.shape as ShapeMap[R]);\n    };\n\n    return {\n      x: derX,\n      mean: derMean,\n      variance: derVariance,\n      scale: derScale,\n      offset: derOffset\n    };\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}