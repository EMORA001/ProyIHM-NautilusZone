{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseSegmentMean } from '@tensorflow/tfjs-core';\nimport { sparseSegmentReductionImpl } from './SparseSegmentReduction_impl';\nexport function sparseSegmentMean(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    data,\n    indices,\n    segmentIds\n  } = inputs;\n\n  if (data.shape.length < 1) {\n    throw new Error(`Data should be at least 1 dimensional but received scalar`);\n  }\n\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n          ${indices.shape}`);\n  }\n\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n          ${segmentIds.shape}`);\n  }\n\n  if (indices.shape[0] !== segmentIds.shape[0]) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n\n  const $data = backend.data.get(data.dataId).values;\n  const $indices = backend.data.get(indices.dataId).values;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values;\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl($data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\nexport const sparseSegmentMeanConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentMean\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/SparseSegmentMean.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAsB,iBAAtB,QAA+F,uBAA/F;AAIA,SAAQ,0BAAR,QAAyC,+BAAzC;AAEA,OAAM,SAAU,iBAAV,CACF,IADE,EAC8D;EAElE,MAAM;IAAC,MAAD;IAAS;EAAT,IAAoB,IAA1B;EACA,MAAM;IAAC,IAAD;IAAO,OAAP;IAAgB;EAAhB,IAA8B,MAApC;;EACA,IAAI,IAAI,CAAC,KAAL,CAAW,MAAX,GAAoB,CAAxB,EAA2B;IACzB,MAAM,IAAI,KAAJ,CACF,2DADE,CAAN;EAED;;EACD,IAAI,OAAO,CAAC,KAAR,CAAc,MAAd,KAAyB,CAA7B,EAAgC;IAC9B,MAAM,IAAI,KAAJ,CAAU;YACR,OAAO,CAAC,KAAK,EADf,CAAN;EAED;;EACD,IAAI,UAAU,CAAC,KAAX,CAAiB,MAAjB,KAA4B,CAAhC,EAAmC;IACjC,MAAM,IAAI,KAAJ,CAAU;YACR,UAAU,CAAC,KAAK,EADlB,CAAN;EAED;;EACD,IAAI,OAAO,CAAC,KAAR,CAAc,CAAd,MAAqB,UAAU,CAAC,KAAX,CAAiB,CAAjB,CAAzB,EAA8C;IAC5C,MAAM,IAAI,KAAJ,CAAU,+CAAV,CAAN;EACD;;EAED,MAAM,KAAK,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,IAAI,CAAC,MAAtB,EAA8B,MAA5C;EACA,MAAM,QAAQ,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,OAAO,CAAC,MAAzB,EAAiC,MAAlD;EACA,MAAM,WAAW,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,UAAU,CAAC,MAA5B,EAAoC,MAAxD;EAEA,MAAM,CAAC,UAAD,EAAa,eAAb,IAAgC,0BAA0B,CAC5D,KAD4D,EACrD,IAAI,CAAC,KADgD,EACzC,IAAI,CAAC,KADoC,EAC7B,QAD6B,EACnB,WADmB,EACN,IADM,CAAhE;EAEA,OAAO,OAAO,CAAC,cAAR,CAAuB,eAAvB,EAAwC,IAAI,CAAC,KAA7C,EAAoD,UAApD,CAAP;AACD;AAED,OAAO,MAAM,uBAAuB,GAAiB;EACnD,UAAU,EAAE,iBADuC;EAEnD,WAAW,EAAE,KAFsC;EAGnD,UAAU,EAAE;AAHuC,CAA9C","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n          ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n          ${segmentIds.shape}`);\n  }\n  if (indices.shape[0] !== segmentIds.shape[0]) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentMean,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}