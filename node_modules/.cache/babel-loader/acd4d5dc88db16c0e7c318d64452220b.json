{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { NodeValueImpl } from './custom_op/node_value_impl';\nimport { getRegisteredOp } from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as hashTable from './executors/hash_table_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as sparse from './executors/sparse_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as string from './executors/string_executor';\nimport * as transformation from './executors/transformation_executor';\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\n\nexport function executeOp(node, tensorMap, context, resourceManager) {\n  let tidy = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : tfc.tidy;\n\n  const value = ((node, tensorMap, context) => {\n    switch (node.category) {\n      case 'arithmetic':\n        return tidy(() => arithmetic.executeOp(node, tensorMap, context));\n\n      case 'basic_math':\n        return tidy(() => basicMath.executeOp(node, tensorMap, context));\n\n      case 'control':\n        return control.executeOp(node, tensorMap, context);\n\n      case 'convolution':\n        return tidy(() => convolution.executeOp(node, tensorMap, context));\n\n      case 'creation':\n        return tidy(() => creation.executeOp(node, tensorMap, context));\n\n      case 'dynamic':\n        return dynamic.executeOp(node, tensorMap, context);\n\n      case 'evaluation':\n        return tidy(() => evaluation.executeOp(node, tensorMap, context));\n\n      case 'image':\n        return tidy(() => image.executeOp(node, tensorMap, context));\n\n      case 'graph':\n        return tidy(() => graph.executeOp(node, tensorMap, context));\n\n      case 'logical':\n        return tidy(() => logical.executeOp(node, tensorMap, context));\n\n      case 'matrices':\n        return tidy(() => matrices.executeOp(node, tensorMap, context));\n\n      case 'normalization':\n        return tidy(() => normalization.executeOp(node, tensorMap, context));\n\n      case 'reduction':\n        return tidy(() => reduction.executeOp(node, tensorMap, context));\n\n      case 'slice_join':\n        return tidy(() => sliceJoin.executeOp(node, tensorMap, context));\n\n      case 'sparse':\n        return tidy(() => sparse.executeOp(node, tensorMap, context));\n\n      case 'spectral':\n        return tidy(() => spectral.executeOp(node, tensorMap, context));\n\n      case 'string':\n        return tidy(() => string.executeOp(node, tensorMap, context));\n\n      case 'transformation':\n        return tidy(() => transformation.executeOp(node, tensorMap, context));\n\n      case 'hash_table':\n        return hashTable.executeOp(node, tensorMap, context, resourceManager);\n\n      case 'custom':\n        const opMapper = getRegisteredOp(node.op);\n\n        if (opMapper && opMapper.customExecutor) {\n          return opMapper.customExecutor(new NodeValueImpl(node, tensorMap, context));\n        } else {\n          throw TypeError(`Custom op ${node.op} is not registered.`);\n        }\n\n      default:\n        throw TypeError(`Unknown op '${node.op}'. File an issue at ` + `https://github.com/tensorflow/tfjs/issues so we can add it` + `, or register a custom execution with tf.registerOp()`);\n    }\n  })(node, tensorMap, context);\n\n  if (tfc.util.isPromise(value)) {\n    return value.then(data => [].concat(data));\n  }\n\n  return [].concat(value);\n}","map":{"version":3,"sources":["../../../../../../tfjs-converter/src/operations/operation_executor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {ExecutionContext} from '../executor/execution_context';\nimport {ResourceManager} from '../executor/resource_manager';\n\nimport {NodeValueImpl} from './custom_op/node_value_impl';\nimport {getRegisteredOp} from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as hashTable from './executors/hash_table_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as sparse from './executors/sparse_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as string from './executors/string_executor';\nimport * as transformation from './executors/transformation_executor';\nimport {Node} from './types';\n\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function executeOp(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager?: ResourceManager, tidy = tfc.tidy): tfc.Tensor[]|\n    Promise<tfc.Tensor[]> {\n  const value =\n      ((node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) => {\n        switch (node.category) {\n          case 'arithmetic':\n            return tidy(() => arithmetic.executeOp(node, tensorMap, context));\n          case 'basic_math':\n            return tidy(() => basicMath.executeOp(node, tensorMap, context));\n          case 'control':\n            return control.executeOp(node, tensorMap, context);\n          case 'convolution':\n            return tidy(() => convolution.executeOp(node, tensorMap, context));\n          case 'creation':\n            return tidy(() => creation.executeOp(node, tensorMap, context));\n          case 'dynamic':\n            return dynamic.executeOp(node, tensorMap, context);\n          case 'evaluation':\n            return tidy(() => evaluation.executeOp(node, tensorMap, context));\n          case 'image':\n            return tidy(() => image.executeOp(node, tensorMap, context));\n          case 'graph':\n            return tidy(() => graph.executeOp(node, tensorMap, context));\n          case 'logical':\n            return tidy(() => logical.executeOp(node, tensorMap, context));\n          case 'matrices':\n            return tidy(() => matrices.executeOp(node, tensorMap, context));\n          case 'normalization':\n            return tidy(\n                () => normalization.executeOp(node, tensorMap, context));\n          case 'reduction':\n            return tidy(() => reduction.executeOp(node, tensorMap, context));\n          case 'slice_join':\n            return tidy(() => sliceJoin.executeOp(node, tensorMap, context));\n          case 'sparse':\n            return tidy(() => sparse.executeOp(node, tensorMap, context));\n          case 'spectral':\n            return tidy(() => spectral.executeOp(node, tensorMap, context));\n          case 'string':\n            return tidy(() => string.executeOp(node, tensorMap, context));\n          case 'transformation':\n            return tidy(\n                () => transformation.executeOp(node, tensorMap, context));\n          case 'hash_table':\n            return hashTable.executeOp(\n                node, tensorMap, context, resourceManager);\n          case 'custom':\n            const opMapper = getRegisteredOp(node.op);\n            if (opMapper && opMapper.customExecutor) {\n              return opMapper.customExecutor(\n                  new NodeValueImpl(node, tensorMap, context));\n            } else {\n              throw TypeError(`Custom op ${node.op} is not registered.`);\n            }\n          default:\n            throw TypeError(\n                `Unknown op '${node.op}'. File an issue at ` +\n                `https://github.com/tensorflow/tfjs/issues so we can add it` +\n                `, or register a custom execution with tf.registerOp()`);\n        }\n      })(node, tensorMap, context);\n  if (tfc.util.isPromise(value)) {\n    return value.then((data) => [].concat(data));\n  }\n  return [].concat(value);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}