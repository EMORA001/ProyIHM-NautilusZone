{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RealDiv } from '../kernel_names';\nimport * as broadcast_util from '../ops/broadcast_util';\nimport { cast } from '../ops/cast';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { neg } from '../ops/neg';\nimport { reshape } from '../ops/reshape';\nimport { square } from '../ops/square';\nimport { sum } from '../ops/sum';\nexport const divGradConfig = {\n  kernelName: RealDiv,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy, saved) => {\n    const [a, b] = saved;\n    const outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n\n    const derA = () => {\n      const res = div(dy, cast(b, 'float32'));\n      const reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        return reshape(sum(res, reduceAxes), a.shape);\n      }\n\n      return res;\n    };\n\n    const derB = () => {\n      let res = mul(dy, cast(a, 'float32'));\n      const reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        res = reshape(sum(res, reduceAxes), b.shape);\n      }\n\n      const tmp = square(b);\n      return neg(div(res, cast(tmp, 'float32')));\n    };\n\n    return {\n      a: derA,\n      b: derB\n    };\n  }\n};","map":{"version":3,"sources":["../../../../../../tfjs-core/src/gradients/RealDiv_grad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,OAAR,QAAsB,iBAAtB;AAEA,OAAO,KAAK,cAAZ,MAAgC,uBAAhC;AACA,SAAQ,IAAR,QAAmB,aAAnB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,OAAR,QAAsB,gBAAtB;AACA,SAAQ,MAAR,QAAqB,eAArB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AAGA,OAAO,MAAM,aAAa,GAAe;EACvC,UAAU,EAAE,OAD2B;EAEvC,YAAY,EAAE,CAAC,GAAD,EAAM,GAAN,CAFyB;EAGvC,QAAQ,EAAE,CAAC,EAAD,EAAa,KAAb,KAAgC;IACxC,MAAM,CAAC,CAAD,EAAI,CAAJ,IAAS,KAAf;IACA,MAAM,QAAQ,GACV,cAAc,CAAC,0BAAf,CAA0C,CAAC,CAAC,KAA5C,EAAmD,CAAC,CAAC,KAArD,CADJ;;IAEA,MAAM,IAAI,GAAG,MAAK;MAChB,MAAM,GAAG,GAAG,GAAG,CAAC,EAAD,EAAK,IAAI,CAAC,CAAD,EAAI,SAAJ,CAAT,CAAf;MACA,MAAM,UAAU,GAAG,cAAc,CAAC,gBAAf,CAAgC,CAAC,CAAC,KAAlC,EAAyC,QAAzC,CAAnB;;MACA,IAAI,UAAU,CAAC,MAAX,GAAoB,CAAxB,EAA2B;QACzB,OAAO,OAAO,CAAC,GAAG,CAAC,GAAD,EAAM,UAAN,CAAJ,EAAuB,CAAC,CAAC,KAAzB,CAAd;MACD;;MACD,OAAO,GAAP;IACD,CAPD;;IAQA,MAAM,IAAI,GAAG,MAAK;MAChB,IAAI,GAAG,GAAG,GAAG,CAAC,EAAD,EAAK,IAAI,CAAC,CAAD,EAAI,SAAJ,CAAT,CAAb;MACA,MAAM,UAAU,GAAG,cAAc,CAAC,gBAAf,CAAgC,CAAC,CAAC,KAAlC,EAAyC,QAAzC,CAAnB;;MACA,IAAI,UAAU,CAAC,MAAX,GAAoB,CAAxB,EAA2B;QACzB,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAD,EAAM,UAAN,CAAJ,EAAuB,CAAC,CAAC,KAAzB,CAAb;MACD;;MACD,MAAM,GAAG,GAAG,MAAM,CAAC,CAAD,CAAlB;MACA,OAAO,GAAG,CAAC,GAAG,CAAC,GAAD,EAAM,IAAI,CAAC,GAAD,EAAM,SAAN,CAAV,CAAJ,CAAV;IACD,CARD;;IASA,OAAO;MAAC,CAAC,EAAE,IAAJ;MAAU,CAAC,EAAE;IAAb,CAAP;EACD;AAzBsC,CAAlC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {RealDiv} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport * as broadcast_util from '../ops/broadcast_util';\nimport {cast} from '../ops/cast';\nimport {div} from '../ops/div';\nimport {mul} from '../ops/mul';\nimport {neg} from '../ops/neg';\nimport {reshape} from '../ops/reshape';\nimport {square} from '../ops/square';\nimport {sum} from '../ops/sum';\nimport {Tensor} from '../tensor';\n\nexport const divGradConfig: GradConfig = {\n  kernelName: RealDiv,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [a, b] = saved;\n    const outShape =\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    const derA = () => {\n      const res = div(dy, cast(b, 'float32'));\n      const reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return reshape(sum(res, reduceAxes), a.shape);\n      }\n      return res;\n    };\n    const derB = () => {\n      let res = mul(dy, cast(a, 'float32'));\n      const reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = reshape(sum(res, reduceAxes), b.shape);\n      }\n      const tmp = square(b);\n      return neg(div(res, cast(tmp, 'float32')));\n    };\n    return {a: derA, b: derB};\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}