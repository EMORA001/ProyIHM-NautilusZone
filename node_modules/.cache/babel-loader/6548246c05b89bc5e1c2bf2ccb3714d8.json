{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, kernel_impls, NonMaxSuppressionV3 } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\nexport function nonMaxSuppressionV3(args) {\n  backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' + 'Call tf.nonMaxSuppressionAsync() instead');\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    boxes,\n    scores\n  } = inputs;\n  const {\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold\n  } = attrs;\n  const boxesVals = backend.readSync(boxes.dataId);\n  const scoresVals = backend.readSync(scores.dataId);\n  const {\n    selectedIndices\n  } = nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n  return backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\nexport const nonMaxSuppressionV3Config = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV3\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-webgl/src/kernels/NonMaxSuppressionV3.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAsB,YAAtB,EAA8D,mBAA9D,QAAyJ,uBAAzJ;AAEA,MAAM,uBAAuB,GAAG,YAAY,CAAC,uBAA7C;AAGA,OAAM,SAAU,mBAAV,CAA8B,IAA9B,EAIL;EACC,YAAY,CAAC,IAAb,CACI,0DACA,0CAFJ;EAIA,MAAM;IAAC,MAAD;IAAS,OAAT;IAAkB;EAAlB,IAA2B,IAAjC;EACA,MAAM;IAAC,KAAD;IAAQ;EAAR,IAAkB,MAAxB;EACA,MAAM;IAAC,aAAD;IAAgB,YAAhB;IAA8B;EAA9B,IAAgD,KAAtD;EAEA,MAAM,SAAS,GAAG,OAAO,CAAC,QAAR,CAAiB,KAAK,CAAC,MAAvB,CAAlB;EACA,MAAM,UAAU,GAAG,OAAO,CAAC,QAAR,CAAiB,MAAM,CAAC,MAAxB,CAAnB;EAEA,MAAM;IAAC;EAAD,IAAoB,uBAAuB,CAC7C,SAD6C,EAClC,UADkC,EACtB,aADsB,EACP,YADO,EACO,cADP,CAAjD;EAGA,OAAO,OAAO,CAAC,cAAR,CACH,CAAC,eAAe,CAAC,MAAjB,CADG,EACuB,OADvB,EACgC,IAAI,UAAJ,CAAe,eAAf,CADhC,CAAP;AAED;AAED,OAAO,MAAM,yBAAyB,GAAiB;EACrD,UAAU,EAAE,mBADyC;EAErD,WAAW,EAAE,OAFwC;EAGrD,UAAU,EAAE;AAHyC,CAAhD","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV3Attrs\n}) {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV3 as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}