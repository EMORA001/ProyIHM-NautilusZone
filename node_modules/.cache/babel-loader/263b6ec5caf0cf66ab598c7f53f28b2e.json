{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Mean, util } from '@tensorflow/tfjs-core';\nimport { meanImpl } from './Mean_impl';\nimport { transposeImpl, transposeImplCPU } from './Transpose_impl';\nexport const meanConfig = {\n  kernelName: Mean,\n  backendName: 'webgl',\n  kernelFunc: _ref => {\n    let {\n      inputs,\n      attrs,\n      backend\n    } = _ref;\n    const {\n      x\n    } = inputs;\n    const {\n      keepDims,\n      axis\n    } = attrs;\n    const webglBackend = backend;\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(axis, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const meanInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n    const intermediates = [];\n    let meanInput = x;\n\n    if (meanInputIsTransposed) {\n      if (shouldExecuteOnCPU) {\n        const xTexData = webglBackend.texData.get(meanInput.dataId);\n        const values = xTexData.values;\n        const newShape = new Array(xRank);\n\n        for (let i = 0; i < newShape.length; i++) {\n          newShape[i] = x.shape[permutedAxes[i]];\n        }\n\n        const meanInputValues = transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n        meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const meanInputData = webglBackend.texData.get(meanInput.dataId);\n        meanInputData.values = meanInputValues;\n      } else {\n        meanInput = transposeImpl(x, permutedAxes, webglBackend);\n      }\n\n      intermediates.push(meanInput);\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n\n    backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n    const [meanOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(meanInput.shape, axes);\n    let outShape = meanOutShape;\n\n    if (keepDims) {\n      // rather than reshape at the end, set the target shape here.\n      outShape = backend_util.expandShapeToKeepDim(meanOutShape, origAxes);\n    }\n\n    const out = meanImpl(meanInput, reduceShape, outShape, webglBackend);\n\n    for (const i of intermediates) {\n      webglBackend.disposeIntermediateTensorInfo(i);\n    }\n\n    return out;\n  }\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-webgl/src/kernels/Mean.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Mean, MeanAttrs, MeanInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {meanImpl} from './Mean_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MeanInputs;\n    const {keepDims, axis} = attrs as {} as MeanAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(axis, x.shape);\n\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const meanInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n\n    const intermediates: TensorInfo[] = [];\n\n    let meanInput = x;\n    if (meanInputIsTransposed) {\n      if (shouldExecuteOnCPU) {\n        const xTexData = webglBackend.texData.get(meanInput.dataId);\n        const values = xTexData.values as TypedArray;\n\n        const newShape: number[] = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n          newShape[i] = x.shape[permutedAxes[i]];\n        }\n        const meanInputValues =\n            transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n        meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const meanInputData = webglBackend.texData.get(meanInput.dataId);\n        meanInputData.values = meanInputValues;\n      } else {\n        meanInput = transposeImpl(x, permutedAxes, webglBackend);\n      }\n\n      intermediates.push(meanInput);\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n\n    backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n    const [meanOutShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(meanInput.shape, axes);\n\n    let outShape = meanOutShape;\n    if (keepDims) {\n      // rather than reshape at the end, set the target shape here.\n      outShape = backend_util.expandShapeToKeepDim(meanOutShape, origAxes);\n    }\n\n    const out = meanImpl(meanInput, reduceShape, outShape, webglBackend);\n    for (const i of intermediates) {\n      webglBackend.disposeIntermediateTensorInfo(i);\n    }\n\n    return out;\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}