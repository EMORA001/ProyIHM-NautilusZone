{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { util } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat, checkPaddingMode } from '../common';\nimport { InputSpec } from '../engine/topology';\nimport { AttributeError, NotImplementedError, ValueError } from '../errors';\nimport { Initializer } from '../initializers';\nimport { convOutputLength, normalizeArray } from '../utils/conv_utils';\nimport { assertPositiveInteger } from '../utils/generic_utils';\nimport { getExactlyOneShape } from '../utils/types_utils';\nimport { generateDropoutMask, LSTMCell, RNN, RNNCell } from './recurrent';\n\nclass ConvRNN2DCell extends RNNCell {}\n/**\n * Base class for convolutional-recurrent layers.\n */\n\n\nclass ConvRNN2D extends RNN {\n  constructor(args) {\n    if (args.unroll) {\n      throw new NotImplementedError('Unrolling is not possible with convolutional RNNs.');\n    }\n\n    if (Array.isArray(args.cell)) {\n      throw new NotImplementedError('It is not possible at the moment to stack convolutional cells.');\n    }\n\n    super(args);\n    this.inputSpec = [new InputSpec({\n      ndim: 5\n    })];\n  }\n\n  call(inputs, kwargs) {\n    return tfc.tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n        this.cell.dropoutMask = null;\n      }\n\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n        this.cell.recurrentDropoutMask = null;\n      }\n\n      if (kwargs && kwargs['constants']) {\n        throw new ValueError('ConvRNN2D cell does not support constants');\n      }\n\n      const mask = kwargs == null ? null : kwargs['mask'];\n      const training = kwargs == null ? null : kwargs['training'];\n      const initialState = kwargs == null ? null : kwargs['initialState'];\n      return super.call(inputs, {\n        mask,\n        training,\n        initialState\n      });\n    });\n  }\n\n  computeOutputShape(inputShape) {\n    let outShape = this.computeSingleOutputShape(inputShape);\n\n    if (!this.returnSequences) {\n      outShape = [outShape[0], ...outShape.slice(2)];\n    }\n\n    if (this.returnState) {\n      outShape = [outShape, ...Array(2).fill([inputShape[0], ...outShape.slice(-3)])];\n    }\n\n    return outShape;\n  }\n\n  getInitialState(inputs) {\n    return tfc.tidy(() => {\n      const {\n        stateSize\n      } = this.cell;\n      const inputShape = inputs.shape;\n      const outputShape = this.computeSingleOutputShape(inputShape);\n      const stateShape = [outputShape[0], ...outputShape.slice(2)];\n      const initialState = tfc.zeros(stateShape);\n\n      if (Array.isArray(stateSize)) {\n        return Array(stateSize.length).fill(initialState);\n      }\n\n      return [initialState];\n    });\n  }\n\n  resetStates(states) {\n    let training = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    tfc.tidy(() => {\n      if (!this.stateful) {\n        throw new AttributeError('Cannot call resetStates() on an RNN Layer that is not stateful.');\n      }\n\n      const inputShape = this.inputSpec[0].shape;\n      const outputShape = this.computeSingleOutputShape(inputShape);\n      const stateShape = [outputShape[0], ...outputShape.slice(2)];\n      const batchSize = inputShape[0];\n\n      if (batchSize == null) {\n        throw new ValueError('If an RNN is stateful, it needs to know its batch size. Specify ' + 'the batch size of your input tensors: \\n' + '- If using a Sequential model, specify the batch size by ' + 'passing a `batchInputShape` option to your first layer.\\n' + '- If using the functional API, specify the batch size by ' + 'passing a `batchShape` option to your Input layer.');\n      } // Initialize state if null.\n\n\n      if (this.getStates() == null) {\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ = this.cell.stateSize.map(() => tfc.zeros(stateShape));\n        } else {\n          this.states_ = [tfc.zeros(stateShape)];\n        }\n      } else if (states == null) {\n        // Dispose old state tensors.\n        tfc.dispose(this.states_); // For stateful RNNs, fully dispose kept old states.\n\n        if (this.keptStates != null) {\n          tfc.dispose(this.keptStates);\n          this.keptStates = [];\n        }\n\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ = this.cell.stateSize.map(() => tfc.zeros(stateShape));\n        } else {\n          this.states_[0] = tfc.zeros(stateShape);\n        }\n      } else {\n        if (!Array.isArray(states)) {\n          states = [states];\n        }\n\n        if (states.length !== this.states_.length) {\n          throw new ValueError(`Layer ${this.name} expects ${this.states_.length} state(s), ` + `but it received ${states.length} state value(s). Input ` + `received: ${states}`);\n        }\n\n        if (training) {\n          // Store old state tensors for complete disposal later, i.e., during\n          // the next no-arg call to this method. We do not dispose the old\n          // states immediately because that BPTT (among other things) require\n          // them.\n          this.keptStates.push(this.states_.slice());\n        } else {\n          tfc.dispose(this.states_);\n        }\n\n        for (let index = 0; index < this.states_.length; ++index) {\n          const value = states[index];\n          const expectedShape = stateShape;\n\n          if (!util.arraysEqual(value.shape, expectedShape)) {\n            throw new ValueError(`State ${index} is incompatible with layer ${this.name}: ` + `expected shape=${expectedShape}, received shape=${value.shape}`);\n          }\n\n          this.states_[index] = value;\n        }\n      }\n\n      this.states_ = this.states_.map(state => tfc.keep(state.clone()));\n    });\n  }\n\n  computeSingleOutputShape(inputShape) {\n    const {\n      dataFormat,\n      filters,\n      kernelSize,\n      padding,\n      strides,\n      dilationRate\n    } = this.cell;\n    const isChannelsFirst = dataFormat === 'channelsFirst';\n    const h = inputShape[isChannelsFirst ? 3 : 2];\n    const w = inputShape[isChannelsFirst ? 4 : 3];\n    const hOut = convOutputLength(h, kernelSize[0], padding, strides[0], dilationRate[0]);\n    const wOut = convOutputLength(w, kernelSize[1], padding, strides[1], dilationRate[1]);\n    const outShape = [...inputShape.slice(0, 2), ...(isChannelsFirst ? [filters, hOut, wOut] : [hOut, wOut, filters])];\n    return outShape;\n  }\n\n}\n/** @nocollapse */\n\n\nConvRNN2D.className = 'ConvRNN2D';\nexport class ConvLSTM2DCell extends LSTMCell {\n  constructor(args) {\n    const {\n      filters,\n      kernelSize,\n      strides,\n      padding,\n      dataFormat,\n      dilationRate\n    } = args;\n    super(Object.assign({}, args, {\n      units: filters\n    }));\n    this.filters = filters;\n    assertPositiveInteger(this.filters, 'filters');\n    this.kernelSize = normalizeArray(kernelSize, 2, 'kernelSize');\n    this.kernelSize.forEach(size => assertPositiveInteger(size, 'kernelSize'));\n    this.strides = normalizeArray(strides || 1, 2, 'strides');\n    this.strides.forEach(stride => assertPositiveInteger(stride, 'strides'));\n    this.padding = padding || 'valid';\n    checkPaddingMode(this.padding);\n    this.dataFormat = dataFormat || 'channelsLast';\n    checkDataFormat(this.dataFormat);\n    this.dilationRate = normalizeArray(dilationRate || 1, 2, 'dilationRate');\n    this.dilationRate.forEach(rate => assertPositiveInteger(rate, 'dilationRate'));\n  }\n\n  build(inputShape) {\n    var _a;\n\n    inputShape = getExactlyOneShape(inputShape);\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(`The channel dimension of the input should be defined. ` + `Found ${inputShape[channelAxis]}`);\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const numOfKernels = 4;\n    const kernelShape = this.kernelSize.concat([inputDim, this.filters * numOfKernels]);\n    this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n    const recurrentKernelShape = this.kernelSize.concat([this.filters, this.filters * numOfKernels]);\n    this.recurrentKernel = this.addWeight('recurrent_kernel', recurrentKernelShape, null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n\n    if (this.useBias) {\n      let biasInitializer;\n\n      if (this.unitForgetBias) {\n        const init = this.biasInitializer;\n        const filters = this.filters;\n        biasInitializer = new (_a = class CustomInit extends Initializer {\n          apply(shape, dtype) {\n            const biasI = init.apply([filters]);\n            const biasF = tfc.ones([filters]);\n            const biasCAndO = init.apply([filters * 2]);\n            return K.concatenate([biasI, biasF, biasCAndO]);\n          }\n\n        },\n        /** @nocollapse */\n        _a.className = 'CustomInit', _a)();\n      } else {\n        biasInitializer = this.biasInitializer;\n      }\n\n      this.bias = this.addWeight('bias', [this.filters * numOfKernels], null, biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    return tfc.tidy(() => {\n      if (inputs.length !== 3) {\n        throw new ValueError(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ` + `${inputs.length}.`);\n      }\n\n      const training = kwargs['training'] || false;\n      const x = inputs[0]; // Current input\n\n      const hTMinus1 = inputs[1]; // Previous memory state.\n\n      const cTMinus1 = inputs[2]; // Previous carry state.\n\n      const numOfKernels = 4;\n\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n          ones: () => tfc.onesLike(x),\n          rate: this.dropout,\n          training,\n          count: numOfKernels,\n          dropoutFunc: this.dropoutFunc\n        });\n      }\n\n      const dropoutMask = this.dropoutMask;\n\n      const applyDropout = (x, mask, index) => {\n        if (!mask || !mask[index]) {\n          return x;\n        }\n\n        return tfc.mul(mask[index], x);\n      };\n\n      let xI = applyDropout(x, dropoutMask, 0);\n      let xF = applyDropout(x, dropoutMask, 1);\n      let xC = applyDropout(x, dropoutMask, 2);\n      let xO = applyDropout(x, dropoutMask, 3);\n\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n          ones: () => tfc.onesLike(hTMinus1),\n          rate: this.recurrentDropout,\n          training,\n          count: numOfKernels,\n          dropoutFunc: this.dropoutFunc\n        });\n      }\n\n      const recDropoutMask = this.recurrentDropoutMask;\n      let hI = applyDropout(hTMinus1, recDropoutMask, 0);\n      let hF = applyDropout(hTMinus1, recDropoutMask, 1);\n      let hC = applyDropout(hTMinus1, recDropoutMask, 2);\n      let hO = applyDropout(hTMinus1, recDropoutMask, 3);\n      const kernelChannelAxis = 3;\n      const [kernelI, kernelF, kernelC, kernelO] = tfc.split(this.kernel.read(), numOfKernels, kernelChannelAxis);\n      const [biasI, biasF, biasC, biasO] = this.useBias ? tfc.split(this.bias.read(), numOfKernels) : [null, null, null, null];\n      xI = this.inputConv(xI, kernelI, biasI, this.padding);\n      xF = this.inputConv(xF, kernelF, biasF, this.padding);\n      xC = this.inputConv(xC, kernelC, biasC, this.padding);\n      xO = this.inputConv(xO, kernelO, biasO, this.padding);\n      const [recKernelI, recKernelF, recKernelC, recKernelO] = tfc.split(this.recurrentKernel.read(), numOfKernels, kernelChannelAxis);\n      hI = this.recurrentConv(hI, recKernelI);\n      hF = this.recurrentConv(hF, recKernelF);\n      hC = this.recurrentConv(hC, recKernelC);\n      hO = this.recurrentConv(hO, recKernelO);\n      const i = this.recurrentActivation.apply(tfc.add(xI, hI));\n      const f = this.recurrentActivation.apply(tfc.add(xF, hF));\n      const c = tfc.add(tfc.mul(f, cTMinus1), tfc.mul(i, this.activation.apply(tfc.add(xC, hC))));\n      const h = tfc.mul(this.recurrentActivation.apply(tfc.add(xO, hO)), this.activation.apply(c));\n      return [h, h, c];\n    });\n  }\n\n  getConfig() {\n    const _a = super.getConfig(),\n          {\n      'units': _\n    } = _a,\n          baseConfig = __rest(_a, ['units']);\n\n    const config = {\n      filters: this.filters,\n      kernelSize: this.kernelSize,\n      padding: this.padding,\n      dataFormat: this.dataFormat,\n      dilationRate: this.dilationRate,\n      strides: this.strides\n    };\n    return Object.assign({}, baseConfig, config);\n  }\n\n  inputConv(x, w, b, padding) {\n    const out = tfc.conv2d(x, w, this.strides, padding || 'valid', this.dataFormat === 'channelsFirst' ? 'NCHW' : 'NHWC', this.dilationRate);\n\n    if (b) {\n      return K.biasAdd(out, b, this.dataFormat);\n    }\n\n    return out;\n  }\n\n  recurrentConv(x, w) {\n    const strides = 1;\n    return tfc.conv2d(x, w, strides, 'same', this.dataFormat === 'channelsFirst' ? 'NCHW' : 'NHWC');\n  }\n\n}\n/** @nocollapse */\n\nConvLSTM2DCell.className = 'ConvLSTM2DCell';\ntfc.serialization.registerClass(ConvLSTM2DCell);\nexport class ConvLSTM2D extends ConvRNN2D {\n  constructor(args) {\n    const cell = new ConvLSTM2DCell(args);\n    super(Object.assign({}, args, {\n      cell\n    }));\n  }\n  /** @nocollapse */\n\n\n  static fromConfig(cls, config) {\n    return new cls(config);\n  }\n\n}\n/** @nocollapse */\n\nConvLSTM2D.className = 'ConvLSTM2D';\ntfc.serialization.registerClass(ConvLSTM2D);","map":{"version":3,"sources":["../../../../../../tfjs-layers/src/layers/convolutional_recurrent.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {Tensor, util} from '@tensorflow/tfjs-core';\n\nimport {Activation} from '../activations';\nimport * as K from '../backend/tfjs_backend';\nimport {checkDataFormat, checkPaddingMode} from '../common';\nimport {Constraint} from '../constraints';\nimport {InputSpec} from '../engine/topology';\nimport {AttributeError, NotImplementedError, ValueError} from '../errors';\nimport {Initializer} from '../initializers';\nimport {DataFormat, DataType, PaddingMode, Shape} from '../keras_format/common';\nimport {Regularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport {convOutputLength, normalizeArray} from '../utils/conv_utils';\nimport {assertPositiveInteger} from '../utils/generic_utils';\nimport {getExactlyOneShape} from '../utils/types_utils';\n\nimport {BaseRNNLayerArgs, generateDropoutMask, LSTMCell, LSTMCellLayerArgs, LSTMLayerArgs, RNN, RNNCell, RNNLayerArgs, SimpleRNNCellLayerArgs} from './recurrent';\n\ndeclare interface ConvRNN2DCellArgs extends\n    Omit<SimpleRNNCellLayerArgs, 'units'> {\n  /**\n   * The dimensionality of the output space (i.e. the number of filters in the\n   * convolution).\n   */\n  filters: number;\n\n  /**\n   * The dimensions of the convolution window. If kernelSize is a number, the\n   * convolutional window will be square.\n   */\n  kernelSize: number|number[];\n\n  /**\n   * The strides of the convolution in each dimension. If strides is a number,\n   * strides in both dimensions are equal.\n   *\n   * Specifying any stride value != 1 is incompatible with specifying any\n   * `dilationRate` value != 1.\n   */\n  strides?: number|number[];\n\n  /**\n   * Padding mode.\n   */\n  padding?: PaddingMode;\n\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `channels_last` corresponds to inputs with shape\n   *   `(batch, ..., channels)`\n   *\n   *  `channels_first` corresponds to inputs with shape `(batch, channels,\n   * ...)`.\n   *\n   * Defaults to `channels_last`.\n   */\n  dataFormat?: DataFormat;\n\n  /**\n   * The dilation rate to use for the dilated convolution in each dimension.\n   * Should be an integer or array of two or three integers.\n   *\n   * Currently, specifying any `dilationRate` value != 1 is incompatible with\n   * specifying any `strides` value != 1.\n   */\n  dilationRate?: number|[number]|[number, number];\n}\n\nabstract class ConvRNN2DCell extends RNNCell {\n  readonly filters: number;\n  readonly kernelSize: number[];\n  readonly strides: number[];\n  readonly padding: PaddingMode;\n  readonly dataFormat: DataFormat;\n  readonly dilationRate: number[];\n\n  readonly activation: Activation;\n  readonly useBias: boolean;\n\n  readonly kernelInitializer: Initializer;\n  readonly recurrentInitializer: Initializer;\n  readonly biasInitializer: Initializer;\n\n  readonly kernelConstraint: Constraint;\n  readonly recurrentConstraint: Constraint;\n  readonly biasConstraint: Constraint;\n\n  readonly kernelRegularizer: Regularizer;\n  readonly recurrentRegularizer: Regularizer;\n  readonly biasRegularizer: Regularizer;\n\n  readonly dropout: number;\n  readonly recurrentDropout: number;\n}\n\ndeclare interface ConvRNN2DLayerArgs extends BaseRNNLayerArgs,\n                                             ConvRNN2DCellArgs {}\n\n/**\n * Base class for convolutional-recurrent layers.\n */\nclass ConvRNN2D extends RNN {\n  /** @nocollapse */\n  static className = 'ConvRNN2D';\n\n  readonly cell: ConvRNN2DCell;\n\n  constructor(args: ConvRNN2DLayerArgs) {\n    if (args.unroll) {\n      throw new NotImplementedError(\n          'Unrolling is not possible with convolutional RNNs.');\n    }\n\n    if (Array.isArray(args.cell)) {\n      throw new NotImplementedError(\n          'It is not possible at the moment to stack convolutional cells.');\n    }\n\n    super(args as RNNLayerArgs);\n\n    this.inputSpec = [new InputSpec({ndim: 5})];\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tfc.tidy(() => {\n      if (this.cell.dropoutMask != null) {\n        tfc.dispose(this.cell.dropoutMask);\n\n        this.cell.dropoutMask = null;\n      }\n\n      if (this.cell.recurrentDropoutMask != null) {\n        tfc.dispose(this.cell.recurrentDropoutMask);\n\n        this.cell.recurrentDropoutMask = null;\n      }\n\n      if (kwargs && kwargs['constants']) {\n        throw new ValueError('ConvRNN2D cell does not support constants');\n      }\n\n      const mask = kwargs == null ? null : kwargs['mask'];\n\n      const training = kwargs == null ? null : kwargs['training'];\n\n      const initialState: Tensor[] =\n          kwargs == null ? null : kwargs['initialState'];\n\n      return super.call(inputs, {mask, training, initialState});\n    });\n  }\n\n  computeOutputShape(inputShape: Shape): Shape|Shape[] {\n    let outShape: Shape = this.computeSingleOutputShape(inputShape);\n\n    if (!this.returnSequences) {\n      outShape = [outShape[0], ...outShape.slice(2)];\n    }\n\n    if (this.returnState) {\n      outShape =\n          [outShape, ...Array(2).fill([inputShape[0], ...outShape.slice(-3)])];\n    }\n\n    return outShape;\n  }\n\n  getInitialState(inputs: tfc.Tensor): tfc.Tensor[] {\n    return tfc.tidy(() => {\n      const {stateSize} = this.cell;\n\n      const inputShape = inputs.shape;\n\n      const outputShape = this.computeSingleOutputShape(inputShape);\n\n      const stateShape = [outputShape[0], ...outputShape.slice(2)];\n\n      const initialState = tfc.zeros(stateShape);\n\n      if (Array.isArray(stateSize)) {\n        return Array(stateSize.length).fill(initialState);\n      }\n\n      return [initialState];\n    });\n  }\n\n  resetStates(states?: Tensor|Tensor[], training = false): void {\n    tfc.tidy(() => {\n      if (!this.stateful) {\n        throw new AttributeError(\n            'Cannot call resetStates() on an RNN Layer that is not stateful.');\n      }\n\n      const inputShape = this.inputSpec[0].shape;\n\n      const outputShape = this.computeSingleOutputShape(inputShape);\n\n      const stateShape = [outputShape[0], ...outputShape.slice(2)];\n\n      const batchSize = inputShape[0];\n\n      if (batchSize == null) {\n        throw new ValueError(\n            'If an RNN is stateful, it needs to know its batch size. Specify ' +\n            'the batch size of your input tensors: \\n' +\n            '- If using a Sequential model, specify the batch size by ' +\n            'passing a `batchInputShape` option to your first layer.\\n' +\n            '- If using the functional API, specify the batch size by ' +\n            'passing a `batchShape` option to your Input layer.');\n      }\n\n      // Initialize state if null.\n      if (this.getStates() == null) {\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ = this.cell.stateSize.map(() => tfc.zeros(stateShape));\n        } else {\n          this.states_ = [tfc.zeros(stateShape)];\n        }\n      } else if (states == null) {\n        // Dispose old state tensors.\n        tfc.dispose(this.states_);\n\n        // For stateful RNNs, fully dispose kept old states.\n        if (this.keptStates != null) {\n          tfc.dispose(this.keptStates);\n          this.keptStates = [];\n        }\n\n        if (Array.isArray(this.cell.stateSize)) {\n          this.states_ = this.cell.stateSize.map(() => tfc.zeros(stateShape));\n        } else {\n          this.states_[0] = tfc.zeros(stateShape);\n        }\n      } else {\n        if (!Array.isArray(states)) {\n          states = [states];\n        }\n\n        if (states.length !== this.states_.length) {\n          throw new ValueError(\n              `Layer ${this.name} expects ${this.states_.length} state(s), ` +\n              `but it received ${states.length} state value(s). Input ` +\n              `received: ${states}`);\n        }\n\n        if (training) {\n          // Store old state tensors for complete disposal later, i.e., during\n          // the next no-arg call to this method. We do not dispose the old\n          // states immediately because that BPTT (among other things) require\n          // them.\n          this.keptStates.push(this.states_.slice());\n        } else {\n          tfc.dispose(this.states_);\n        }\n\n        for (let index = 0; index < this.states_.length; ++index) {\n          const value = states[index];\n\n          const expectedShape = stateShape;\n\n          if (!util.arraysEqual(value.shape, expectedShape)) {\n            throw new ValueError(\n                `State ${index} is incompatible with layer ${this.name}: ` +\n                `expected shape=${expectedShape}, received shape=${\n                    value.shape}`);\n          }\n\n          this.states_[index] = value;\n        }\n      }\n\n      this.states_ = this.states_.map(state => tfc.keep(state.clone()));\n    });\n  }\n\n  protected computeSingleOutputShape(inputShape: Shape): Shape {\n    const {dataFormat, filters, kernelSize, padding, strides, dilationRate} =\n        this.cell;\n\n    const isChannelsFirst = dataFormat === 'channelsFirst';\n\n    const h = inputShape[isChannelsFirst ? 3 : 2];\n    const w = inputShape[isChannelsFirst ? 4 : 3];\n\n    const hOut = convOutputLength(\n        h, kernelSize[0], padding, strides[0], dilationRate[0]);\n    const wOut = convOutputLength(\n        w, kernelSize[1], padding, strides[1], dilationRate[1]);\n\n    const outShape: Shape = [\n      ...inputShape.slice(0, 2),\n      ...(isChannelsFirst ? [filters, hOut, wOut] : [hOut, wOut, filters])\n    ];\n\n    return outShape;\n  }\n}\n\nexport declare interface ConvLSTM2DCellArgs extends\n    Omit<LSTMCellLayerArgs, 'units'>, ConvRNN2DCellArgs {}\n\nexport class ConvLSTM2DCell extends LSTMCell implements ConvRNN2DCell {\n  /** @nocollapse */\n  static className = 'ConvLSTM2DCell';\n\n  readonly filters: number;\n  readonly kernelSize: number[];\n  readonly strides: number[];\n  readonly padding: PaddingMode;\n  readonly dataFormat: DataFormat;\n  readonly dilationRate: number[];\n\n  constructor(args: ConvLSTM2DCellArgs) {\n    const {\n      filters,\n      kernelSize,\n      strides,\n      padding,\n      dataFormat,\n      dilationRate,\n    } = args;\n\n    super({...args, units: filters});\n\n    this.filters = filters;\n    assertPositiveInteger(this.filters, 'filters');\n\n    this.kernelSize = normalizeArray(kernelSize, 2, 'kernelSize');\n    this.kernelSize.forEach(size => assertPositiveInteger(size, 'kernelSize'));\n\n    this.strides = normalizeArray(strides || 1, 2, 'strides');\n    this.strides.forEach(stride => assertPositiveInteger(stride, 'strides'));\n\n    this.padding = padding || 'valid';\n    checkPaddingMode(this.padding);\n\n    this.dataFormat = dataFormat || 'channelsLast';\n    checkDataFormat(this.dataFormat);\n\n    this.dilationRate = normalizeArray(dilationRate || 1, 2, 'dilationRate');\n    this.dilationRate.forEach(\n        rate => assertPositiveInteger(rate, 'dilationRate'));\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(\n          `The channel dimension of the input should be defined. ` +\n          `Found ${inputShape[channelAxis]}`);\n    }\n\n    const inputDim = inputShape[channelAxis];\n\n    const numOfKernels = 4;\n\n    const kernelShape =\n        this.kernelSize.concat([inputDim, this.filters * numOfKernels]);\n\n    this.kernel = this.addWeight(\n        'kernel', kernelShape, null, this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n\n    const recurrentKernelShape =\n        this.kernelSize.concat([this.filters, this.filters * numOfKernels]);\n\n    this.recurrentKernel = this.addWeight(\n        'recurrent_kernel', recurrentKernelShape, null,\n        this.recurrentInitializer, this.recurrentRegularizer, true,\n        this.recurrentConstraint);\n\n    if (this.useBias) {\n      let biasInitializer: Initializer;\n\n      if (this.unitForgetBias) {\n        const init = this.biasInitializer;\n\n        const filters = this.filters;\n\n        biasInitializer = new (class CustomInit extends Initializer {\n          /** @nocollapse */\n          static className = 'CustomInit';\n\n          apply(shape: Shape, dtype?: DataType): tfc.Tensor {\n            const biasI = init.apply([filters]);\n            const biasF = tfc.ones([filters]);\n            const biasCAndO = init.apply([filters * 2]);\n            return K.concatenate([biasI, biasF, biasCAndO]);\n          }\n        })();\n      } else {\n        biasInitializer = this.biasInitializer;\n      }\n\n      this.bias = this.addWeight(\n          'bias', [this.filters * numOfKernels], null, biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    this.built = true;\n  }\n\n  call(inputs: tfc.Tensor[], kwargs: Kwargs): tfc.Tensor[] {\n    return tfc.tidy(() => {\n      if (inputs.length !== 3) {\n        throw new ValueError(\n            `ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ` +\n            `${inputs.length}.`);\n      }\n\n      const training = kwargs['training'] || false;\n\n      const x = inputs[0];         // Current input\n      const hTMinus1 = inputs[1];  // Previous memory state.\n      const cTMinus1 = inputs[2];  // Previous carry state.\n\n      const numOfKernels = 4;\n\n      type DropoutMasks = [tfc.Tensor, tfc.Tensor, tfc.Tensor, tfc.Tensor];\n\n      if (0 < this.dropout && this.dropout < 1 && this.dropoutMask == null) {\n        this.dropoutMask = generateDropoutMask({\n                             ones: () => tfc.onesLike(x),\n                             rate: this.dropout,\n                             training,\n                             count: numOfKernels,\n                             dropoutFunc: this.dropoutFunc\n                           }) as tfc.Tensor[];\n      }\n\n      const dropoutMask = this.dropoutMask as DropoutMasks;\n\n      const applyDropout =\n          (x: tfc.Tensor, mask: tfc.Tensor[], index: number) => {\n            if (!mask || !mask[index]) {\n              return x;\n            }\n\n            return tfc.mul(mask[index], x);\n          };\n\n      let xI = applyDropout(x, dropoutMask, 0);\n      let xF = applyDropout(x, dropoutMask, 1);\n      let xC = applyDropout(x, dropoutMask, 2);\n      let xO = applyDropout(x, dropoutMask, 3);\n\n      if (0 < this.recurrentDropout && this.recurrentDropout < 1 &&\n          this.recurrentDropoutMask == null) {\n        this.recurrentDropoutMask = generateDropoutMask({\n                                      ones: () => tfc.onesLike(hTMinus1),\n                                      rate: this.recurrentDropout,\n                                      training,\n                                      count: numOfKernels,\n                                      dropoutFunc: this.dropoutFunc\n                                    }) as tfc.Tensor[];\n      }\n\n      const recDropoutMask = this.recurrentDropoutMask as DropoutMasks;\n\n      let hI = applyDropout(hTMinus1, recDropoutMask, 0);\n      let hF = applyDropout(hTMinus1, recDropoutMask, 1);\n      let hC = applyDropout(hTMinus1, recDropoutMask, 2);\n      let hO = applyDropout(hTMinus1, recDropoutMask, 3);\n\n      const kernelChannelAxis = 3;\n\n      const [kernelI, kernelF, kernelC, kernelO]: tfc.Tensor[] =\n          tfc.split(this.kernel.read(), numOfKernels, kernelChannelAxis);\n\n      const [biasI, biasF, biasC, biasO]: tfc.Tensor[] = this.useBias ?\n          tfc.split(this.bias.read(), numOfKernels) :\n          [null, null, null, null];\n\n      xI = this.inputConv(xI, kernelI, biasI, this.padding);\n      xF = this.inputConv(xF, kernelF, biasF, this.padding);\n      xC = this.inputConv(xC, kernelC, biasC, this.padding);\n      xO = this.inputConv(xO, kernelO, biasO, this.padding);\n\n      const [recKernelI, recKernelF, recKernelC, recKernelO]: tfc.Tensor[] =\n          tfc.split(\n              this.recurrentKernel.read(), numOfKernels, kernelChannelAxis);\n\n      hI = this.recurrentConv(hI, recKernelI);\n      hF = this.recurrentConv(hF, recKernelF);\n      hC = this.recurrentConv(hC, recKernelC);\n      hO = this.recurrentConv(hO, recKernelO);\n\n      const i = this.recurrentActivation.apply(tfc.add(xI, hI));\n      const f = this.recurrentActivation.apply(tfc.add(xF, hF));\n      const c = tfc.add(\n          tfc.mul(f, cTMinus1),\n          tfc.mul(i, this.activation.apply(tfc.add(xC, hC))));\n      const h = tfc.mul(\n          this.recurrentActivation.apply(tfc.add(xO, hO)),\n          this.activation.apply(c));\n\n      return [h, h, c];\n    });\n  }\n\n  getConfig(): tfc.serialization.ConfigDict {\n    const {'units': _, ...baseConfig} = super.getConfig();\n\n    const config: tfc.serialization.ConfigDict = {\n      filters: this.filters,\n      kernelSize: this.kernelSize,\n      padding: this.padding,\n      dataFormat: this.dataFormat,\n      dilationRate: this.dilationRate,\n      strides: this.strides,\n    };\n\n    return {...baseConfig, ...config};\n  }\n\n  inputConv(x: Tensor, w: Tensor, b?: Tensor, padding?: PaddingMode) {\n    const out = tfc.conv2d(\n        x as tfc.Tensor3D, w as tfc.Tensor4D, this.strides as [number, number],\n        (padding || 'valid') as 'same' | 'valid',\n        this.dataFormat === 'channelsFirst' ? 'NCHW' : 'NHWC',\n        this.dilationRate as [number, number]);\n\n    if (b) {\n      return K.biasAdd(out, b, this.dataFormat) as tfc.Tensor3D;\n    }\n\n    return out;\n  }\n\n  recurrentConv(x: Tensor, w: Tensor) {\n    const strides = 1;\n\n    return tfc.conv2d(\n        x as tfc.Tensor3D, w as tfc.Tensor4D, strides, 'same',\n        this.dataFormat === 'channelsFirst' ? 'NCHW' : 'NHWC');\n  }\n}\n\ntfc.serialization.registerClass(ConvLSTM2DCell);\n\nexport declare interface ConvLSTM2DArgs extends\n    Omit<LSTMLayerArgs, 'units'|'cell'>, ConvRNN2DLayerArgs {}\n\nexport class ConvLSTM2D extends ConvRNN2D {\n  /** @nocollapse */\n  static className = 'ConvLSTM2D';\n\n  constructor(args: ConvLSTM2DArgs) {\n    const cell = new ConvLSTM2DCell(args);\n\n    super({...args, cell} as ConvRNN2DLayerArgs);\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends tfc.serialization.Serializable>(\n      cls: tfc.serialization.SerializableConstructor<T>,\n      config: tfc.serialization.ConfigDict): T {\n    return new cls(config);\n  }\n}\n\ntfc.serialization.registerClass(ConvLSTM2D);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}