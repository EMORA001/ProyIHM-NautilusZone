{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Embedding Layer.\n *\n * Original source: keras/constraints.py\n */\nimport { notEqual, reshape, serialization, tidy, zerosLike } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { Layer } from '../engine/topology';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport * as generic_utils from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nexport class Embedding extends Layer {\n  constructor(args) {\n    super(args);\n    this.embeddings = null;\n    this.DEFAULT_EMBEDDINGS_INITIALIZER = 'randomUniform';\n\n    if (args.batchInputShape == null && args.inputShape == null) {\n      // Porting Note: This logic is copied from Layer's constructor, since we\n      // can't do exactly what the Python constructor does for Embedding().\n      // Specifically, the super constructor can not be called after the\n      // mutation of the `config` argument.\n      let batchSize = null;\n\n      if (args.batchSize != null) {\n        batchSize = args.batchSize;\n      }\n\n      if (args.inputLength == null) {\n        // Fix super-constructor to what it would have done if\n        // 'config.inputShape' were (None, )\n        this.batchInputShape = [batchSize, null];\n      } else {\n        // Fix super-constructor to what it would have done if\n        // 'config.inputShape' were (config.inputLength, )\n        this.batchInputShape = [batchSize].concat(generic_utils.toList(args.inputLength));\n      }\n    }\n\n    this.inputDim = args.inputDim;\n    generic_utils.assertPositiveInteger(this.inputDim, 'inputDim');\n    this.outputDim = args.outputDim;\n    generic_utils.assertPositiveInteger(this.outputDim, 'outputDim');\n    this.embeddingsInitializer = getInitializer(args.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER);\n    this.embeddingsRegularizer = getRegularizer(args.embeddingsRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.embeddingsConstraint = getConstraint(args.embeddingsConstraint);\n    this.maskZero = args.maskZero;\n    this.supportsMasking = args.maskZero;\n    this.inputLength = args.inputLength;\n  }\n\n  build(inputShape) {\n    this.embeddings = this.addWeight('embeddings', [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, true, this.embeddingsConstraint);\n    this.built = true;\n  } // Override warnOnIncompatibleInputShape because an embedding layer allows\n  // the input to have varying ranks.\n\n\n  warnOnIncompatibleInputShape(inputShape) {}\n\n  computeMask(inputs, mask) {\n    return tidy(() => {\n      if (!this.maskZero) {\n        return null;\n      } else {\n        inputs = getExactlyOneTensor(inputs);\n        return notEqual(inputs, zerosLike(inputs));\n      }\n    });\n  }\n\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (this.inputLength == null) {\n      return [...inputShape, this.outputDim];\n    } // inputLength can be an array if input is 3D or higher.\n\n\n    const inLens = generic_utils.toList(this.inputLength);\n\n    if (inLens.length !== inputShape.length - 1) {\n      throw new ValueError(`\"inputLength\" is ${this.inputLength}, but received ` + `input shape has shape ${inputShape}`);\n    } else {\n      let i = 0;\n\n      for (let k = 0; k < inLens.length; ++k) {\n        const s1 = inLens[k];\n        const s2 = inputShape[k + 1];\n\n        if (s1 != null && s2 != null && s1 !== s2) {\n          throw new ValueError(`\"inputLength\" is ${this.inputLength}, but received ` + `input shape has shape ${inputShape}`);\n        } else if (s1 == null) {\n          inLens[i] = s2;\n        }\n\n        i++;\n      }\n    }\n\n    return [inputShape[0], ...inLens, this.outputDim];\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs); // Embedding layer accepts only a single input.\n\n      let input = getExactlyOneTensor(inputs);\n\n      if (input.dtype !== 'int32') {\n        input = K.cast(input, 'int32');\n      }\n\n      const output = K.gather(this.embeddings.read(), reshape(input, [input.size]));\n      return reshape(output, getExactlyOneShape(this.computeOutputShape(input.shape)));\n    });\n  }\n\n  getConfig() {\n    const config = {\n      inputDim: this.inputDim,\n      outputDim: this.outputDim,\n      embeddingsInitializer: serializeInitializer(this.embeddingsInitializer),\n      embeddingsRegularizer: serializeRegularizer(this.embeddingsRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      embeddingsConstraint: serializeConstraint(this.embeddingsConstraint),\n      maskZero: this.maskZero,\n      inputLength: this.inputLength\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nEmbedding.className = 'Embedding';\nserialization.registerClass(Embedding);","map":{"version":3,"sources":["../../../../../../tfjs-layers/src/layers/embeddings.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Embedding Layer.\n *\n * Original source: keras/constraints.py\n */\nimport {notEqual, reshape, serialization, Tensor, tidy, zerosLike} from '@tensorflow/tfjs-core';\n\nimport * as K from '../backend/tfjs_backend';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {Layer, LayerArgs} from '../engine/topology';\nimport {ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\nexport declare interface EmbeddingLayerArgs extends LayerArgs {\n  /**\n   * Integer > 0. Size of the vocabulary, i.e. maximum integer index + 1.\n   */\n  inputDim: number;\n  /**\n   * Integer >= 0. Dimension of the dense embedding.\n   */\n  outputDim: number;\n  /**\n   * Initializer for the `embeddings` matrix.\n   */\n  embeddingsInitializer?: InitializerIdentifier|Initializer;\n  /**\n   * Regularizer function applied to the `embeddings` matrix.\n   */\n  embeddingsRegularizer?: RegularizerIdentifier|Regularizer;\n  /**\n   * Regularizer function applied to the activation.\n   */\n  activityRegularizer?: RegularizerIdentifier|Regularizer;\n  /**\n   * Constraint function applied to the `embeddings` matrix.\n   */\n  embeddingsConstraint?: ConstraintIdentifier|Constraint;\n  /**\n   * Whether the input value 0 is a special \"padding\" value that should be\n   * masked out. This is useful when using recurrent layers which may take\n   * variable length input.\n   *\n   * If this is `True` then all subsequent layers in the model need to support\n   * masking or an exception will be raised. If maskZero is set to `True`, as a\n   * consequence, index 0 cannot be used in the vocabulary (inputDim should\n   * equal size of vocabulary + 1).\n   */\n  maskZero?: boolean;\n  /**\n   * Length of input sequences, when it is constant.\n   *\n   * This argument is required if you are going to connect `flatten` then\n   * `dense` layers upstream (without it, the shape of the dense outputs cannot\n   * be computed).\n   */\n  inputLength?: number|number[];\n}\n\nexport class Embedding extends Layer {\n  /** @nocollapse */\n  static className = 'Embedding';\n  private inputDim: number;\n  private outputDim: number;\n  private embeddingsInitializer: Initializer;\n  private maskZero: boolean;\n  private inputLength: number|number[];\n\n  private embeddings: LayerVariable = null;\n\n  readonly DEFAULT_EMBEDDINGS_INITIALIZER: InitializerIdentifier =\n      'randomUniform';\n  private readonly embeddingsRegularizer?: Regularizer;\n  private readonly embeddingsConstraint?: Constraint;\n\n  constructor(args: EmbeddingLayerArgs) {\n    super(args);\n    if (args.batchInputShape == null && args.inputShape == null) {\n      // Porting Note: This logic is copied from Layer's constructor, since we\n      // can't do exactly what the Python constructor does for Embedding().\n      // Specifically, the super constructor can not be called after the\n      // mutation of the `config` argument.\n      let batchSize: number = null;\n      if (args.batchSize != null) {\n        batchSize = args.batchSize;\n      }\n      if (args.inputLength == null) {\n        // Fix super-constructor to what it would have done if\n        // 'config.inputShape' were (None, )\n        this.batchInputShape = [batchSize, null];\n      } else {\n        // Fix super-constructor to what it would have done if\n        // 'config.inputShape' were (config.inputLength, )\n        this.batchInputShape =\n            [batchSize].concat(generic_utils.toList(args.inputLength));\n      }\n    }\n    this.inputDim = args.inputDim;\n    generic_utils.assertPositiveInteger(this.inputDim, 'inputDim');\n    this.outputDim = args.outputDim;\n    generic_utils.assertPositiveInteger(this.outputDim, 'outputDim');\n    this.embeddingsInitializer = getInitializer(\n        args.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER);\n    this.embeddingsRegularizer = getRegularizer(args.embeddingsRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.embeddingsConstraint = getConstraint(args.embeddingsConstraint);\n    this.maskZero = args.maskZero;\n    this.supportsMasking = args.maskZero;\n    this.inputLength = args.inputLength;\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    this.embeddings = this.addWeight(\n        'embeddings', [this.inputDim, this.outputDim], this.dtype,\n        this.embeddingsInitializer, this.embeddingsRegularizer, true,\n        this.embeddingsConstraint);\n    this.built = true;\n  }\n\n  // Override warnOnIncompatibleInputShape because an embedding layer allows\n  // the input to have varying ranks.\n  protected warnOnIncompatibleInputShape(inputShape: Shape) {}\n\n  computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]): Tensor {\n    return tidy(() => {\n      if (!this.maskZero) {\n        return null;\n      } else {\n        inputs = getExactlyOneTensor(inputs);\n        return notEqual(inputs, zerosLike(inputs));\n      }\n    });\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    if (this.inputLength == null) {\n      return [...inputShape, this.outputDim];\n    }\n    // inputLength can be an array if input is 3D or higher.\n    const inLens: number[] = generic_utils.toList(this.inputLength);\n    if (inLens.length !== inputShape.length - 1) {\n      throw new ValueError(\n          `\"inputLength\" is ${this.inputLength}, but received ` +\n          `input shape has shape ${inputShape}`);\n    } else {\n      let i = 0;\n      for (let k = 0; k < inLens.length; ++k) {\n        const s1 = inLens[k];\n        const s2 = inputShape[k + 1];\n        if ((s1 != null) && (s2 != null) && (s1 !== s2)) {\n          throw new ValueError(\n              `\"inputLength\" is ${this.inputLength}, but received ` +\n              `input shape has shape ${inputShape}`);\n        } else if (s1 == null) {\n          inLens[i] = s2;\n        }\n        i++;\n      }\n    }\n    return [inputShape[0], ...inLens, this.outputDim];\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      // Embedding layer accepts only a single input.\n      let input = getExactlyOneTensor(inputs);\n      if (input.dtype !== 'int32') {\n        input = K.cast(input, 'int32');\n      }\n      const output =\n          K.gather(this.embeddings.read(), reshape(input, [input.size]));\n      return reshape(\n          output, getExactlyOneShape(this.computeOutputShape(input.shape)));\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      inputDim: this.inputDim,\n      outputDim: this.outputDim,\n      embeddingsInitializer: serializeInitializer(this.embeddingsInitializer),\n      embeddingsRegularizer: serializeRegularizer(this.embeddingsRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      embeddingsConstraint: serializeConstraint(this.embeddingsConstraint),\n      maskZero: this.maskZero,\n      inputLength: this.inputLength\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Embedding);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}