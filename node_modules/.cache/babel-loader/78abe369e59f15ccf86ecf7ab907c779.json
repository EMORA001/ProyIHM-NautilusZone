{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { dispose } from '@tensorflow/tfjs-core';\n/**\n * Turn any Scalar values in a Logs object into actual number values.\n *\n * @param logs The `Logs` object to be resolved in place.\n */\n\nexport async function resolveScalarsInLogs(logs) {\n  if (logs == null) {\n    return;\n  }\n\n  const promises = [];\n  const keys = [];\n  const scalarsToDispose = [];\n\n  for (const key in logs) {\n    const value = logs[key];\n\n    if (typeof value !== 'number') {\n      const valueScalar = value;\n      promises.push(valueScalar.data());\n      keys.push(key);\n      scalarsToDispose.push(valueScalar);\n    }\n  }\n\n  if (promises.length > 0) {\n    const values = await Promise.all(promises);\n\n    for (let i = 0; i < values.length; ++i) {\n      logs[keys[i]] = values[i][0];\n    } // Dispose the original scalar tensors.\n\n\n    dispose(scalarsToDispose);\n  }\n}\n/**\n * Dispose all Tensors in an UnresolvedLogs object.\n *\n * @param logs An `UnresolvedLogs` object potentially containing `tf.Tensor`s in\n *   places where the values can be `tf.Tensor` or `number`.\n */\n\nexport function disposeTensorsInLogs(logs) {\n  if (logs == null) {\n    return;\n  }\n\n  for (const key in logs) {\n    const value = logs[key];\n\n    if (typeof value !== 'number') {\n      value.dispose();\n    }\n  }\n}","map":{"version":3,"sources":["../../../../../tfjs-layers/src/logs.ts"],"names":[],"mappings":"AAAA;;;;;;;;AAQG;AAEH,SAAQ,OAAR,QAA8B,uBAA9B;AAWA;;;;AAIG;;AACH,OAAO,eAAe,oBAAf,CAAoC,IAApC,EAAwD;EAC7D,IAAI,IAAI,IAAI,IAAZ,EAAkB;IAChB;EACD;;EACD,MAAM,QAAQ,GAAuD,EAArE;EACA,MAAM,IAAI,GAAa,EAAvB;EACA,MAAM,gBAAgB,GAAa,EAAnC;;EACA,KAAK,MAAM,GAAX,IAAkB,IAAlB,EAAwB;IACtB,MAAM,KAAK,GAAG,IAAI,CAAC,GAAD,CAAlB;;IACA,IAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;MAC7B,MAAM,WAAW,GAAG,KAApB;MACA,QAAQ,CAAC,IAAT,CAAc,WAAW,CAAC,IAAZ,EAAd;MACA,IAAI,CAAC,IAAL,CAAU,GAAV;MACA,gBAAgB,CAAC,IAAjB,CAAsB,WAAtB;IACD;EACF;;EACD,IAAI,QAAQ,CAAC,MAAT,GAAkB,CAAtB,EAAyB;IACvB,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,GAAR,CAAY,QAAZ,CAArB;;IACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,EAAE,CAArC,EAAwC;MACtC,IAAI,CAAC,IAAI,CAAC,CAAD,CAAL,CAAJ,GAAgB,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAhB;IACD,CAJsB,CAKvB;;;IACA,OAAO,CAAC,gBAAD,CAAP;EACD;AACF;AAED;;;;;AAKG;;AACH,OAAM,SAAU,oBAAV,CAA+B,IAA/B,EAAmD;EACvD,IAAI,IAAI,IAAI,IAAZ,EAAkB;IAChB;EACD;;EACD,KAAK,MAAM,GAAX,IAAkB,IAAlB,EAAwB;IACtB,MAAM,KAAK,GAAG,IAAI,CAAC,GAAD,CAAlB;;IACA,IAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;MAC7B,KAAK,CAAC,OAAN;IACD;EACF;AACF","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {dispose, Scalar} from '@tensorflow/tfjs-core';\n\n/**\n * Logs in which values can be either numbers or Tensors (Scalars).\n *\n * Used internally.\n */\nexport type UnresolvedLogs = {\n  [key: string]: number|Scalar;\n};\n\n/**\n * Turn any Scalar values in a Logs object into actual number values.\n *\n * @param logs The `Logs` object to be resolved in place.\n */\nexport async function resolveScalarsInLogs(logs: UnresolvedLogs) {\n  if (logs == null) {\n    return;\n  }\n  const promises: Array<Promise<Float32Array|Int32Array|Uint8Array>> = [];\n  const keys: string[] = [];\n  const scalarsToDispose: Scalar[] = [];\n  for (const key in logs) {\n    const value = logs[key];\n    if (typeof value !== 'number') {\n      const valueScalar = value;\n      promises.push(valueScalar.data());\n      keys.push(key);\n      scalarsToDispose.push(valueScalar);\n    }\n  }\n  if (promises.length > 0) {\n    const values = await Promise.all(promises);\n    for (let i = 0; i < values.length; ++i) {\n      logs[keys[i]] = values[i][0];\n    }\n    // Dispose the original scalar tensors.\n    dispose(scalarsToDispose);\n  }\n}\n\n/**\n * Dispose all Tensors in an UnresolvedLogs object.\n *\n * @param logs An `UnresolvedLogs` object potentially containing `tf.Tensor`s in\n *   places where the values can be `tf.Tensor` or `number`.\n */\nexport function disposeTensorsInLogs(logs: UnresolvedLogs) {\n  if (logs == null) {\n    return;\n  }\n  for (const key in logs) {\n    const value = logs[key];\n    if (typeof value !== 'number') {\n      value.dispose();\n    }\n  }\n}\n\n/**\n * Logs in which values can only be numbers.\n *\n * Used when calling client-provided custom callbacks.\n */\nexport type Logs = {\n  [key: string]: number;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}