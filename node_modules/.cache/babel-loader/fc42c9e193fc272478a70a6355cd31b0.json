{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { PadV2, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function padV2(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    paddings,\n    constantValue\n  } = attrs;\n  assertNotComplex(x, 'pad');\n  const outShape = paddings.map((p, i) => p[0]\n  /* beforePad */\n  + x.shape[i] + p[1]\n  /* afterPad */\n  );\n  const start = paddings.map(p => p[0]);\n  const xVals = backend.data.get(x.dataId).values;\n  const xSize = util.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals = util.getTypedArrayFromDType(x.dtype, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (let i = 0; i < xSize; i++) {\n    const coords = util.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords.map((c, i) => c + start[i]);\n    const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n    resVals[outIndex] = xVals[i];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n  return {\n    dataId: outId,\n    shape: outShape,\n    dtype: x.dtype\n  };\n}\nexport const padV2Config = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/PadV2.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAmD,KAAnD,EAA2G,IAA3G,QAAsH,uBAAtH;AAGA,SAAQ,gBAAR,QAA+B,aAA/B;AAEA,OAAM,SAAU,KAAV,CACF,IADE,EACqE;EAEzE,MAAM;IAAC,MAAD;IAAS,OAAT;IAAkB;EAAlB,IAA2B,IAAjC;EACA,MAAM;IAAC;EAAD,IAAM,MAAZ;EACA,MAAM;IAAC,QAAD;IAAW;EAAX,IAA4B,KAAlC;EAEA,gBAAgB,CAAC,CAAD,EAAI,KAAJ,CAAhB;EAEA,MAAM,QAAQ,GAAG,QAAQ,CAAC,GAAT,CACb,CAAC,CAAD,EAAI,CAAJ,KAAU,CAAC,CAAC,CAAD;EAAI;EAAL,EAAuB,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAvB,GAAoC,CAAC,CAAC,CAAD;EAAI;EADtC,CAAjB;EAGA,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAT,CAAa,CAAC,IAAI,CAAC,CAAC,CAAD,CAAnB,CAAd;EAEA,MAAM,KAAK,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,CAAC,CAAC,MAAnB,EAA2B,MAAzC;EACA,MAAM,KAAK,GAAG,IAAI,CAAC,aAAL,CAAmB,CAAC,CAAC,KAArB,CAAd;EACA,MAAM,KAAK,GAAG,CAAC,CAAC,KAAF,CAAQ,MAAtB;EACA,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAL,CAAoB,CAAC,CAAC,KAAtB,CAAjB;EAEA,MAAM,UAAU,GAAG,IAAI,CAAC,aAAL,CAAmB,QAAnB,CAAnB;EACA,MAAM,UAAU,GAAG,QAAQ,CAAC,MAA5B;EACA,MAAM,aAAa,GAAG,IAAI,CAAC,cAAL,CAAoB,QAApB,CAAtB;EACA,MAAM,OAAO,GACT,IAAI,CAAC,sBAAL,CAA4B,CAAC,CAAC,KAA9B,EAAwD,UAAxD,CADJ;;EAGA,IAAI,aAAa,KAAK,CAAtB,EAAyB;IACvB,OAAO,CAAC,IAAR,CAAa,aAAb;EACD;;EAED,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAApB,EAA2B,CAAC,EAA5B,EAAgC;IAC9B,MAAM,MAAM,GAAG,IAAI,CAAC,UAAL,CAAgB,CAAhB,EAAmB,KAAnB,EAA0B,QAA1B,CAAf;IACA,MAAM,SAAS,GAAG,MAAM,CAAC,GAAP,CAAW,CAAC,CAAD,EAAI,CAAJ,KAAU,CAAC,GAAG,KAAK,CAAC,CAAD,CAA9B,CAAlB;IACA,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAL,CAAgB,SAAhB,EAA2B,UAA3B,EAAuC,aAAvC,CAAjB;IAEA,OAAO,CAAC,QAAD,CAAP,GAAoB,KAAK,CAAC,CAAD,CAAzB;EACD;;EAED,MAAM,KAAK,GAAG,OAAO,CAAC,KAAR,CAAc,OAAd,EAAuB,QAAvB,EAAiC,CAAC,CAAC,KAAnC,CAAd;EAEA,OAAO;IAAC,MAAM,EAAE,KAAT;IAAgB,KAAK,EAAE,QAAvB;IAAiC,KAAK,EAAE,CAAC,CAAC;EAA1C,CAAP;AACD;AAED,OAAO,MAAM,WAAW,GAAiB;EACvC,UAAU,EAAE,KAD2B;EAEvC,WAAW,EAAE,KAF0B;EAGvC,UAAU,EAAE;AAH2B,CAAlC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function padV2(\n    args: {inputs: PadV2Inputs, backend: MathBackendCPU, attrs: PadV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, constantValue} = attrs;\n\n  assertNotComplex(x, 'pad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xSize = util.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (let i = 0; i < xSize; i++) {\n    const coords = util.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords.map((c, i) => c + start[i]);\n    const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n\n    resVals[outIndex] = xVals[i];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}