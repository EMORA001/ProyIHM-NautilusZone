{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport * as util from './util';\nexport class Profiler {\n  constructor(backendTimer, logger) {\n    this.backendTimer = backendTimer;\n    this.logger = logger;\n\n    if (logger == null) {\n      this.logger = new Logger();\n    }\n  }\n\n  profileKernel(kernelName, inputs, f) {\n    let outputs;\n\n    const holdResultWrapperFn = () => {\n      outputs = f();\n    };\n\n    let timer;\n    const start = util.now();\n\n    if (this.backendTimer.timerAvailable()) {\n      timer = this.backendTimer.time(holdResultWrapperFn);\n    } else {\n      holdResultWrapperFn();\n\n      for (const output of outputs) {\n        output.dataSync();\n      }\n\n      timer = Promise.resolve({\n        kernelMs: util.now() - start\n      });\n    }\n\n    if (env().getBool('CHECK_COMPUTATION_FOR_ERRORS')) {\n      for (let i = 0; i < outputs.length; i++) {\n        const output = outputs[i]; // Dangling promise here because we don't want to propagate up\n        // asynchronicity.\n\n        output.data().then(tensorVals => {\n          checkComputationForErrors(tensorVals, output.dtype, kernelName);\n        });\n      }\n    }\n\n    const kernelProfile = {\n      kernelName,\n      outputs,\n      inputs,\n      timeMs: timer.then(timing => timing.kernelMs),\n      extraInfo: timer.then(timing => timing.getExtraProfileInfo != null ? timing.getExtraProfileInfo() : '')\n    };\n    return kernelProfile;\n  }\n\n  logKernelProfile(kernelProfile) {\n    const {\n      kernelName,\n      outputs,\n      timeMs,\n      inputs,\n      extraInfo\n    } = kernelProfile;\n    outputs.forEach(result => {\n      Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {\n        this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);\n      });\n    });\n  }\n\n}\nexport function checkComputationForErrors(vals, dtype, kernelName) {\n  if (dtype !== 'float32') {\n    // Only floating point computations will generate NaN values\n    return false;\n  }\n\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i];\n\n    if (isNaN(num) || !isFinite(num)) {\n      // Throwing custom exception so behavior is testable.\n      console.warn(`Found ${num} in the result of '${kernelName}'`);\n      return true;\n    }\n  }\n\n  return false;\n}\nexport class Logger {\n  logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {\n    const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) : timeMs['error'];\n    const paddedName = util.rightPad(name, 25);\n    const rank = result.rank;\n    const size = result.size;\n    const shape = util.rightPad(result.shape.toString(), 14);\n    let inputShapesDescription = '';\n\n    for (const name in inputs) {\n      const input = inputs[name];\n\n      if (input != null) {\n        // The input might be a non-tensor (e.g HTMLImageElement), in which case\n        // we claim the output shape as input shape.\n        const inputShape = input.shape || result.shape;\n        const inputRank = inputShape.length;\n        inputShapesDescription += `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\n      }\n    }\n\n    console.log(`%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${inputShapesDescription}\\t%c${extraInfo}`, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');\n  }\n\n}","map":{"version":3,"sources":["../../../../../tfjs-core/src/profiler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendTimer, BackendTimingInfo} from './backends/backend';\nimport {env} from './environment';\nimport {Tensor} from './tensor';\nimport {NamedTensorMap} from './tensor_types';\nimport {DataType, DataTypeMap, TypedArray} from './types';\nimport * as util from './util';\n\nexport type KernelProfile = {\n  kernelName: string,\n  outputs: Tensor[],\n  inputs: NamedTensorMap,\n  timeMs: Promise<number|{error: string}>,\n  extraInfo: Promise<string>\n};\n\nexport class Profiler {\n  constructor(private backendTimer: BackendTimer, private logger?: Logger) {\n    if (logger == null) {\n      this.logger = new Logger();\n    }\n  }\n\n  profileKernel(kernelName: string, inputs: NamedTensorMap, f: () => Tensor[]):\n      KernelProfile {\n    let outputs: Tensor[];\n    const holdResultWrapperFn = () => {\n      outputs = f();\n    };\n    let timer: Promise<BackendTimingInfo>;\n    const start = util.now();\n    if (this.backendTimer.timerAvailable()) {\n      timer = this.backendTimer.time(holdResultWrapperFn);\n    } else {\n      holdResultWrapperFn();\n      for (const output of outputs) {\n        output.dataSync();\n      }\n      timer = Promise.resolve({kernelMs: util.now() - start});\n    }\n    if (env().getBool('CHECK_COMPUTATION_FOR_ERRORS')) {\n      for (let i = 0; i < outputs.length; i++) {\n        const output = outputs[i];\n        // Dangling promise here because we don't want to propagate up\n        // asynchronicity.\n        output.data().then(tensorVals => {\n          checkComputationForErrors(tensorVals, output.dtype, kernelName);\n        });\n      }\n    }\n\n    const kernelProfile = {\n      kernelName,\n      outputs,\n      inputs,\n      timeMs: timer.then(timing => timing.kernelMs),\n      extraInfo: timer.then(\n          timing => timing.getExtraProfileInfo != null ?\n              timing.getExtraProfileInfo() :\n              '')\n    };\n    return kernelProfile;\n  }\n\n  logKernelProfile(kernelProfile: KernelProfile): void {\n    const {kernelName, outputs, timeMs, inputs, extraInfo} = kernelProfile;\n\n    outputs.forEach(result => {\n      Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {\n        this.logger.logKernelProfile(\n            kernelName, result, valueContainer[0], valueContainer[1], inputs,\n            valueContainer[2]);\n      });\n    });\n  }\n}\n\nexport function checkComputationForErrors<D extends DataType>(\n    vals: DataTypeMap[D], dtype: D, kernelName: string): boolean {\n  if (dtype !== 'float32') {\n    // Only floating point computations will generate NaN values\n    return false;\n  }\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i] as number;\n    if (isNaN(num) || !isFinite(num)) {\n      // Throwing custom exception so behavior is testable.\n      console.warn(`Found ${num} in the result of '${kernelName}'`);\n      return true;\n    }\n  }\n  return false;\n}\n\nexport class Logger {\n  logKernelProfile(\n      name: string, result: Tensor, vals: TypedArray,\n      timeMs: number|{error: string}, inputs: NamedTensorMap,\n      extraInfo?: string) {\n    const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) :\n                                              timeMs['error'];\n    const paddedName = util.rightPad(name, 25);\n    const rank = result.rank;\n    const size = result.size;\n    const shape = util.rightPad(result.shape.toString(), 14);\n    let inputShapesDescription = '';\n\n    for (const name in inputs) {\n      const input = inputs[name];\n      if (input != null) {\n        // The input might be a non-tensor (e.g HTMLImageElement), in which case\n        // we claim the output shape as input shape.\n        const inputShape = input.shape || result.shape;\n        const inputRank = inputShape.length;\n        inputShapesDescription +=\n            `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\n      }\n    }\n\n    console.log(\n        `%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${\n            inputShapesDescription}\\t%c${extraInfo}`,\n        'font-weight:bold', 'color:red', 'color:blue', 'color: orange',\n        'color: green', 'color: steelblue');\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}