{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { serialization } from '@tensorflow/tfjs-core';\nimport { getUid } from '../backend/state';\nimport { ValueError } from '../errors';\nimport { Layer, Node, SymbolicTensor } from './topology';\nexport class InputLayer extends Layer {\n  constructor(args) {\n    super({\n      dtype: args.dtype,\n      name: args.name != null ? args.name : getUid('input').toString()\n    }); // Normalize config.batchSize and config.sparse\n\n    if (args.batchSize == null) {\n      args.batchSize = null;\n    }\n\n    if (args.sparse == null) {\n      args.sparse = false;\n    }\n\n    this.trainable = false;\n    this.built = true;\n    this.sparse = args.sparse;\n\n    if (args.inputShape != null && args.batchInputShape != null) {\n      throw new ValueError('Only provide the inputShape OR ' + 'batchInputShape argument to inputLayer, not both at the same time.');\n    }\n\n    let batchInputShape = args.batchInputShape;\n\n    if (batchInputShape == null) {\n      if (args.inputShape == null) {\n        throw new ValueError('An InputLayer should be passed either a ' + '`batchInputShape` or an `inputShape`.');\n      } else {\n        batchInputShape = [args.batchSize].concat(args.inputShape);\n      }\n    } else {\n      // TODO(michaelterry): Backport to PyKeras\n      if (args.batchSize != null) {\n        throw new ValueError('Cannot specify batchSize if batchInputShape is ' + 'specified when creating an InputLayer.');\n      }\n    }\n\n    const dtype = args.dtype || 'float32';\n    this.batchInputShape = batchInputShape;\n    this.dtype = dtype; // TODO(michaelterry): Backport this to PyKeras?\n\n    this.inputSpec = [{\n      shape: batchInputShape\n    }];\n    const inputTensor = new SymbolicTensor(this.dtype, this.batchInputShape, this, [], {}, this.name);\n    inputTensor.nodeIndex = 0;\n    inputTensor.tensorIndex = 0; // Create an input node to add to this.outboundNode.\n    // (This call has side effects.)\n    // tslint:disable-next-line:no-unused-expression\n\n    new Node({\n      outboundLayer: this,\n      inboundLayers: [],\n      nodeIndices: [],\n      tensorIndices: [],\n      inputTensors: [inputTensor],\n      outputTensors: [inputTensor],\n      inputMasks: [null],\n      outputMasks: [null],\n      inputShapes: [batchInputShape],\n      outputShapes: [batchInputShape]\n    });\n  }\n\n  apply(inputs, kwargs) {\n    throw new ValueError('Cannot pass any input to an ' + `InputLayer's apply() method. InputLayer name: ${this.name}`);\n  }\n\n  dispose() {\n    // dispose() for InputLayer is overridden as no-op.\n    return {\n      refCountAfterDispose: this._refCount,\n      numDisposedVariables: 0\n    };\n  }\n\n  getConfig() {\n    return {\n      batchInputShape: this.batchInputShape,\n      dtype: this.dtype,\n      sparse: this.sparse,\n      name: this.name\n    };\n  }\n\n}\n/** @nocollapse */\n\nInputLayer.className = 'InputLayer';\nserialization.registerClass(InputLayer);\nexport function Input(config) {\n  if (config.batchShape == null && config.shape == null) {\n    throw new Error('Please provide to Input either a `shape`' + ' or a `batchShape` argument. Note that ' + '`shape` does not include the batch ' + 'dimension.');\n  }\n\n  if (config.batchShape != null && config.shape != null) {\n    // TODO(michaelterry): Backport to PyKeras.\n    throw new ValueError('Please provide either a `shape` or `batchShape` ' + 'argument to Input, but not both.');\n  }\n\n  let batchShape = config.batchShape;\n\n  if (config.shape != null && batchShape == null) {\n    batchShape = [null].concat(config.shape);\n  }\n\n  let dtype = config.dtype;\n\n  if (dtype == null) {\n    dtype = 'float32';\n  }\n\n  const inputLayer = new InputLayer({\n    batchInputShape: batchShape,\n    name: config.name,\n    dtype,\n    sparse: config.sparse\n  });\n  const outputs = inputLayer.inboundNodes[0].outputTensors;\n  return outputs[0];\n}","map":{"version":3,"sources":["../../../../../../tfjs-layers/src/engine/input_layer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {DataType, serialization, Tensor} from '@tensorflow/tfjs-core';\n\nimport {getUid} from '../backend/state';\nimport {ValueError} from '../errors';\nimport {Shape} from '../keras_format/common';\nimport {Kwargs} from '../types';\n\nimport {DisposeResult, Layer, Node, SymbolicTensor} from './topology';\n\n/**\n * Constructor arguments for InputLayer.\n *\n * Note: You should provide only inputShape or batchInputShape (not both).\n * If only inputShape is provided, then the batchInputShape is determined by\n * the batchSize argument and the inputShape: [batchSize].concat(inputShape).\n */\nexport declare interface InputLayerArgs {\n  /** Input shape, not including the batch axis. */\n  inputShape?: Shape;\n  /** Optional input batch size (integer or null). */\n  batchSize?: number;\n  /** Batch input shape, including the batch axis. */\n  batchInputShape?: Shape;\n  /** Datatype of the input.  */\n  dtype?: DataType;\n  /**\n   * Whether the placeholder created is meant to be sparse.\n   */\n  sparse?: boolean;  // TODO(michaelterry): Not clear whether we'll need this.\n\n  /** Name of the layer. */\n  name?: string;\n}\n\nexport class InputLayer extends Layer {\n  /** @nocollapse */\n  static readonly className = 'InputLayer';\n  sparse: boolean;\n  constructor(args: InputLayerArgs) {\n    super({\n      dtype: args.dtype,\n      name: args.name != null ? args.name : getUid('input').toString()\n    });\n    // Normalize config.batchSize and config.sparse\n    if (args.batchSize == null) {\n      args.batchSize = null;\n    }\n    if (args.sparse == null) {\n      args.sparse = false;\n    }\n\n    this.trainable = false;\n    this.built = true;\n    this.sparse = args.sparse;\n\n    if (args.inputShape != null && args.batchInputShape != null) {\n      throw new ValueError(\n          'Only provide the inputShape OR ' +\n          'batchInputShape argument to inputLayer, not both at the same time.');\n    }\n    let batchInputShape = args.batchInputShape;\n    if (batchInputShape == null) {\n      if (args.inputShape == null) {\n        throw new ValueError(\n            'An InputLayer should be passed either a ' +\n            '`batchInputShape` or an `inputShape`.');\n      } else {\n        batchInputShape = [args.batchSize].concat(args.inputShape);\n      }\n    } else {\n      // TODO(michaelterry): Backport to PyKeras\n      if (args.batchSize != null) {\n        throw new ValueError(\n            'Cannot specify batchSize if batchInputShape is ' +\n            'specified when creating an InputLayer.');\n      }\n    }\n\n    const dtype = args.dtype || 'float32';\n\n    this.batchInputShape = batchInputShape;\n    this.dtype = dtype;\n    // TODO(michaelterry): Backport this to PyKeras?\n    this.inputSpec = [{shape: batchInputShape}];\n\n    const inputTensor = new SymbolicTensor(\n        this.dtype, this.batchInputShape, this, [], {}, this.name);\n    inputTensor.nodeIndex = 0;\n    inputTensor.tensorIndex = 0;\n\n    // Create an input node to add to this.outboundNode.\n    // (This call has side effects.)\n    // tslint:disable-next-line:no-unused-expression\n    new Node({\n      outboundLayer: this,\n      inboundLayers: [],\n      nodeIndices: [],\n      tensorIndices: [],\n      inputTensors: [inputTensor],\n      outputTensors: [inputTensor],\n      inputMasks: [null],\n      outputMasks: [null],\n      inputShapes: [batchInputShape],\n      outputShapes: [batchInputShape]\n    });\n  }\n\n  apply(\n      inputs: Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[],\n      kwargs?: Kwargs): Tensor|Tensor[]|SymbolicTensor {\n    throw new ValueError(\n        'Cannot pass any input to an ' +\n        `InputLayer's apply() method. InputLayer name: ${this.name}`);\n  }\n\n  dispose(): DisposeResult {\n    // dispose() for InputLayer is overridden as no-op.\n    return {refCountAfterDispose: this._refCount, numDisposedVariables: 0};\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {\n      batchInputShape: this.batchInputShape,\n      dtype: this.dtype,\n      sparse: this.sparse,\n      name: this.name\n    };\n  }\n}\nserialization.registerClass(InputLayer);\n\n/**\n * Config for the Input function.\n *\n * Note: You should provide only shape or batchShape (not both).\n * If only shape is provided, then the batchShape becomes\n * [null].concat(inputShape).\n */\nexport interface InputConfig {\n  /**\n   * A shape, not including the batch size. For instance, `shape=[32]`\n   * indicates that the expected input will be batches of 32-dimensional\n   * vectors.\n   */\n  shape?: Shape;\n  /**\n   * A shape tuple (integer), including the batch size. For instance,\n   * `batchShape=[10, 32]` indicates that the expected input will be batches of\n   * 10 32-dimensional vectors. `batchShape=[null, 32]` indicates batches of an\n   * arbitrary number of 32-dimensional vectors.\n   */\n  batchShape?: Shape;\n  /**\n   * An optional name string for the layer. Should be unique in a model (do not\n   * reuse the same name twice). It will be autogenerated if it isn't provided.\n   */\n  name?: string;\n  dtype?: DataType;\n  /**\n   * A boolean specifying whether the placeholder to be created is sparse.\n   */\n  sparse?: boolean;\n}\n\nexport function Input(config: InputConfig): SymbolicTensor {\n  if (config.batchShape == null && config.shape == null) {\n    throw new Error(\n        'Please provide to Input either a `shape`' +\n        ' or a `batchShape` argument. Note that ' +\n        '`shape` does not include the batch ' +\n        'dimension.');\n  }\n  if (config.batchShape != null && config.shape != null) {\n    // TODO(michaelterry): Backport to PyKeras.\n    throw new ValueError(\n        'Please provide either a `shape` or `batchShape` ' +\n        'argument to Input, but not both.');\n  }\n  let batchShape = config.batchShape;\n  if (config.shape != null && batchShape == null) {\n    batchShape = [null].concat(config.shape);\n  }\n\n  let dtype = config.dtype;\n  if (dtype == null) {\n    dtype = 'float32';\n  }\n\n  const inputLayer = new InputLayer({\n    batchInputShape: batchShape,\n    name: config.name,\n    dtype,\n    sparse: config.sparse\n  });\n\n  const outputs = inputLayer.inboundNodes[0].outputTensors;\n  return outputs[0];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}