{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [{\n  'tfOpName': 'EuclideanNorm',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'axis',\n    'type': 'number[]'\n  }],\n  'attrs': [{\n    'tfName': 'keep_dims',\n    'name': 'keepDims',\n    'type': 'bool',\n    'defaultValue': false\n  }]\n}, {\n  'tfOpName': 'FusedBatchNorm',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'scale',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'offset',\n    'type': 'tensor'\n  }, {\n    'start': 3,\n    'name': 'mean',\n    'type': 'tensor'\n  }, {\n    'start': 4,\n    'name': 'variance',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'epsilon',\n    'name': 'epsilon',\n    'type': 'number',\n    'defaultValue': 0.001\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'FusedBatchNormV2',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'scale',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'offset',\n    'type': 'tensor'\n  }, {\n    'start': 3,\n    'name': 'mean',\n    'type': 'tensor'\n  }, {\n    'start': 4,\n    'name': 'variance',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'epsilon',\n    'name': 'epsilon',\n    'type': 'number',\n    'defaultValue': 0.001\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'FusedBatchNormV3',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'scale',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'offset',\n    'type': 'tensor'\n  }, {\n    'start': 3,\n    'name': 'mean',\n    'type': 'tensor'\n  }, {\n    'start': 4,\n    'name': 'variance',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'epsilon',\n    'name': 'epsilon',\n    'type': 'number',\n    'defaultValue': 0.001\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'LRN',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'depth_radius',\n    'name': 'radius',\n    'type': 'number',\n    'defaultValue': 5\n  }, {\n    'tfName': 'bias',\n    'name': 'bias',\n    'type': 'number',\n    'defaultValue': 1\n  }, {\n    'tfName': 'alpha',\n    'name': 'alpha',\n    'type': 'number',\n    'defaultValue': 1\n  }, {\n    'tfName': 'beta',\n    'name': 'beta',\n    'type': 'number',\n    'defaultValue': 0.5\n  }]\n}, {\n  'tfOpName': 'Softmax',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'LogSoftmax',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'SparseToDense',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'sparseIndices',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'outputShape',\n    'type': 'number[]'\n  }, {\n    'start': 2,\n    'name': 'sparseValues',\n    'type': 'tensor'\n  }, {\n    'start': 3,\n    'name': 'defaultValue',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'validate_indices',\n    'name': 'validateIndices',\n    'type': 'bool',\n    'defaultValue': true,\n    'notSupported': true\n  }]\n}];","map":{"version":3,"sources":["../../../../../../../tfjs-converter/src/operations/op_list/normalization.ts"],"names":[],"mappings":"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","sourcesContent":["\n/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'EuclideanNorm',\n    'category': 'normalization',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'axis',\n        'type': 'number[]'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool',\n        'defaultValue': false\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNorm',\n    'category': 'normalization',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'scale',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'offset',\n        'type': 'tensor'\n      },\n      {\n        'start': 3,\n        'name': 'mean',\n        'type': 'tensor'\n      },\n      {\n        'start': 4,\n        'name': 'variance',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV2',\n    'category': 'normalization',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'scale',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'offset',\n        'type': 'tensor'\n      },\n      {\n        'start': 3,\n        'name': 'mean',\n        'type': 'tensor'\n      },\n      {\n        'start': 4,\n        'name': 'variance',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV3',\n    'category': 'normalization',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'scale',\n        'type': 'tensor'\n      },\n      {\n        'start': 2,\n        'name': 'offset',\n        'type': 'tensor'\n      },\n      {\n        'start': 3,\n        'name': 'mean',\n        'type': 'tensor'\n      },\n      {\n        'start': 4,\n        'name': 'variance',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LRN',\n    'category': 'normalization',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'depth_radius',\n        'name': 'radius',\n        'type': 'number',\n        'defaultValue': 5\n      },\n      {\n        'tfName': 'bias',\n        'name': 'bias',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {\n        'tfName': 'beta',\n        'name': 'beta',\n        'type': 'number',\n        'defaultValue': 0.5\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Softmax',\n    'category': 'normalization',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LogSoftmax',\n    'category': 'normalization',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'x',\n        'type': 'tensor'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'normalization',\n    'inputs': [\n      {\n        'start': 0,\n        'name': 'sparseIndices',\n        'type': 'tensor'\n      },\n      {\n        'start': 1,\n        'name': 'outputShape',\n        'type': 'number[]'\n      },\n      {\n        'start': 2,\n        'name': 'sparseValues',\n        'type': 'tensor'\n      },\n      {\n        'start': 3,\n        'name': 'defaultValue',\n        'type': 'tensor'\n      }\n    ],\n    'attrs': [\n      {\n        'tfName': 'validate_indices',\n        'name': 'validateIndices',\n        'type': 'bool',\n        'defaultValue': true,\n        'notSupported': true\n      }\n    ]\n  }\n]\n;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}