{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as seedrandom from 'seedrandom';\nimport { expectNumbersClose, testEpsilon } from '../test_util'; // https://en.wikipedia.org/wiki/Marsaglia_polar_method\n\nexport class MPRandGauss {\n  constructor(mean, stdDeviation, dtype, truncated, seed) {\n    this.mean = mean;\n    this.stdDev = stdDeviation;\n    this.dtype = dtype;\n    this.nextVal = NaN;\n    this.truncated = truncated;\n\n    if (this.truncated) {\n      this.upper = this.mean + this.stdDev * 2;\n      this.lower = this.mean - this.stdDev * 2;\n    }\n\n    const seedValue = seed ? seed : Math.random();\n    this.random = seedrandom.alea(seedValue.toString());\n  }\n  /** Returns next sample from a Gaussian distribution. */\n\n\n  nextValue() {\n    if (!isNaN(this.nextVal)) {\n      const value = this.nextVal;\n      this.nextVal = NaN;\n      return value;\n    }\n\n    let resultX, resultY;\n    let isValid = false;\n\n    while (!isValid) {\n      let v1, v2, s;\n\n      do {\n        v1 = 2 * this.random() - 1;\n        v2 = 2 * this.random() - 1;\n        s = v1 * v1 + v2 * v2;\n      } while (s >= 1 || s === 0);\n\n      const mul = Math.sqrt(-2.0 * Math.log(s) / s);\n      resultX = this.mean + this.stdDev * v1 * mul;\n      resultY = this.mean + this.stdDev * v2 * mul;\n\n      if (!this.truncated || this.isValidTruncated(resultX)) {\n        isValid = true;\n      }\n    }\n\n    if (!this.truncated || this.isValidTruncated(resultY)) {\n      this.nextVal = this.convertValue(resultY);\n    }\n\n    return this.convertValue(resultX);\n  }\n  /** Handles proper rounding for non-floating-point numbers. */\n\n\n  convertValue(value) {\n    if (this.dtype == null || this.dtype === 'float32') {\n      return value;\n    }\n\n    return Math.round(value);\n  }\n  /** Returns true if less than 2-standard-deviations from the mean. */\n\n\n  isValidTruncated(value) {\n    return value <= this.upper && value >= this.lower;\n  }\n\n} // Marsaglia, George, and Wai Wan Tsang. 2000. \"A Simple Method for Generating\n// Gamma Variables.\"\n\nexport class RandGamma {\n  constructor(alpha, beta, dtype, seed) {\n    this.alpha = alpha;\n    this.beta = 1 / beta; // convert rate to scale parameter\n\n    this.dtype = dtype;\n    const seedValue = seed ? seed : Math.random();\n    this.randu = seedrandom.alea(seedValue.toString());\n    this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());\n\n    if (alpha < 1) {\n      this.d = alpha + 2 / 3;\n    } else {\n      this.d = alpha - 1 / 3;\n    }\n\n    this.c = 1 / Math.sqrt(9 * this.d);\n  }\n  /** Returns next sample from a gamma distribution. */\n\n\n  nextValue() {\n    let x2, v0, v1, x, u, v;\n\n    while (true) {\n      do {\n        x = this.randn.nextValue();\n        v = 1 + this.c * x;\n      } while (v <= 0);\n\n      v *= v * v;\n      x2 = x * x;\n      v0 = 1 - 0.331 * x2 * x2;\n      v1 = 0.5 * x2 + this.d * (1 - v + Math.log(v));\n      u = this.randu();\n\n      if (u < v0 || Math.log(u) < v1) {\n        break;\n      }\n    }\n\n    v = 1 / this.beta * this.d * v;\n\n    if (this.alpha < 1) {\n      v *= Math.pow(this.randu(), 1 / this.alpha);\n    }\n\n    return this.convertValue(v);\n  }\n  /** Handles proper rounding for non-floating-point numbers. */\n\n\n  convertValue(value) {\n    if (this.dtype === 'float32') {\n      return value;\n    }\n\n    return Math.round(value);\n  }\n\n}\nexport class UniformRandom {\n  constructor() {\n    let min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let dtype = arguments.length > 2 ? arguments[2] : undefined;\n    let seed = arguments.length > 3 ? arguments[3] : undefined;\n\n    /** Handles proper rounding for non floating point numbers. */\n    this.canReturnFloat = () => this.dtype == null || this.dtype === 'float32';\n\n    this.min = min;\n    this.range = max - min;\n    this.dtype = dtype;\n\n    if (seed == null) {\n      seed = Math.random();\n    }\n\n    if (typeof seed === 'number') {\n      seed = seed.toString();\n    }\n\n    if (!this.canReturnFloat() && this.range <= 1) {\n      throw new Error(`The difference between ${min} - ${max} <= 1 and dtype is not float`);\n    }\n\n    this.random = seedrandom.alea(seed);\n  }\n\n  convertValue(value) {\n    if (this.canReturnFloat()) {\n      return value;\n    }\n\n    return Math.round(value);\n  }\n\n  nextValue() {\n    return this.convertValue(this.min + this.range * this.random());\n  }\n\n}\nexport function jarqueBeraNormalityTest(values) {\n  // https://en.wikipedia.org/wiki/Jarque%E2%80%93Bera_test\n  const n = values.length;\n  const s = skewness(values);\n  const k = kurtosis(values);\n  const jb = n / 6 * (Math.pow(s, 2) + 0.25 * Math.pow(k - 3, 2)); // JB test requires 2-degress of freedom from Chi-Square @ 0.95:\n  // http://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm\n\n  const CHI_SQUARE_2DEG = 5.991;\n\n  if (jb > CHI_SQUARE_2DEG) {\n    throw new Error(`Invalid p-value for JB: ${jb}`);\n  }\n}\nexport function expectArrayInMeanStdRange(actual, expectedMean, expectedStdDev, epsilon) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n\n  const actualMean = mean(actual);\n  expectNumbersClose(actualMean, expectedMean, epsilon);\n  expectNumbersClose(standardDeviation(actual, actualMean), expectedStdDev, epsilon);\n}\n\nfunction mean(values) {\n  let sum = 0;\n\n  for (let i = 0; i < values.length; i++) {\n    sum += values[i];\n  }\n\n  return sum / values.length;\n}\n\nfunction standardDeviation(values, mean) {\n  let squareDiffSum = 0;\n\n  for (let i = 0; i < values.length; i++) {\n    const diff = values[i] - mean;\n    squareDiffSum += diff * diff;\n  }\n\n  return Math.sqrt(squareDiffSum / values.length);\n}\n\nfunction kurtosis(values) {\n  // https://en.wikipedia.org/wiki/Kurtosis\n  const valuesMean = mean(values);\n  const n = values.length;\n  let sum2 = 0;\n  let sum4 = 0;\n\n  for (let i = 0; i < n; i++) {\n    const v = values[i] - valuesMean;\n    sum2 += Math.pow(v, 2);\n    sum4 += Math.pow(v, 4);\n  }\n\n  return 1 / n * sum4 / Math.pow(1 / n * sum2, 2);\n}\n\nfunction skewness(values) {\n  // https://en.wikipedia.org/wiki/Skewness\n  const valuesMean = mean(values);\n  const n = values.length;\n  let sum2 = 0;\n  let sum3 = 0;\n\n  for (let i = 0; i < n; i++) {\n    const v = values[i] - valuesMean;\n    sum2 += Math.pow(v, 2);\n    sum3 += Math.pow(v, 3);\n  }\n\n  return 1 / n * sum3 / Math.pow(1 / (n - 1) * sum2, 3 / 2);\n}","map":{"version":3,"sources":["../../../../../../tfjs-core/src/ops/rand_util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as seedrandom from 'seedrandom';\n\nimport {expectNumbersClose, testEpsilon} from '../test_util';\nimport {TypedArray} from '../types';\n\nexport interface RandomBase {\n  nextValue(): number;\n}\n\nexport interface RandomGamma {\n  nextValue(): number;\n}\n\nexport interface RandNormalDataTypes {\n  float32: Float32Array;\n  int32: Int32Array;\n}\n\nexport interface RandGammaDataTypes {\n  float32: Float32Array;\n  int32: Int32Array;\n}\n\n// https://en.wikipedia.org/wiki/Marsaglia_polar_method\nexport class MPRandGauss implements RandomBase {\n  private mean: number;\n  private stdDev: number;\n  private nextVal: number;\n  private dtype?: keyof RandNormalDataTypes;\n  private truncated?: boolean;\n  private upper?: number;\n  private lower?: number;\n  private random: seedrandom.prng;\n\n  constructor(\n      mean: number, stdDeviation: number, dtype?: keyof RandNormalDataTypes,\n      truncated?: boolean, seed?: number) {\n    this.mean = mean;\n    this.stdDev = stdDeviation;\n    this.dtype = dtype;\n    this.nextVal = NaN;\n    this.truncated = truncated;\n    if (this.truncated) {\n      this.upper = this.mean + this.stdDev * 2;\n      this.lower = this.mean - this.stdDev * 2;\n    }\n    const seedValue = seed ? seed : Math.random();\n    this.random = seedrandom.alea(seedValue.toString());\n  }\n\n  /** Returns next sample from a Gaussian distribution. */\n  public nextValue(): number {\n    if (!isNaN(this.nextVal)) {\n      const value = this.nextVal;\n      this.nextVal = NaN;\n      return value;\n    }\n\n    let resultX: number, resultY: number;\n    let isValid = false;\n    while (!isValid) {\n      let v1: number, v2: number, s: number;\n      do {\n        v1 = 2 * this.random() - 1;\n        v2 = 2 * this.random() - 1;\n        s = v1 * v1 + v2 * v2;\n      } while (s >= 1 || s === 0);\n\n      const mul = Math.sqrt(-2.0 * Math.log(s) / s);\n      resultX = this.mean + this.stdDev * v1 * mul;\n      resultY = this.mean + this.stdDev * v2 * mul;\n\n      if (!this.truncated || this.isValidTruncated(resultX)) {\n        isValid = true;\n      }\n    }\n\n    if (!this.truncated || this.isValidTruncated(resultY)) {\n      this.nextVal = this.convertValue(resultY);\n    }\n    return this.convertValue(resultX);\n  }\n\n  /** Handles proper rounding for non-floating-point numbers. */\n  private convertValue(value: number): number {\n    if (this.dtype == null || this.dtype === 'float32') {\n      return value;\n    }\n    return Math.round(value);\n  }\n\n  /** Returns true if less than 2-standard-deviations from the mean. */\n  private isValidTruncated(value: number): boolean {\n    return value <= this.upper && value >= this.lower;\n  }\n}\n\n// Marsaglia, George, and Wai Wan Tsang. 2000. \"A Simple Method for Generating\n// Gamma Variables.\"\nexport class RandGamma implements RandomGamma {\n  private alpha: number;\n  private beta: number;\n  private d: number;\n  private c: number;\n  private dtype?: keyof RandGammaDataTypes;\n  private randu: seedrandom.prng;\n  private randn: MPRandGauss;\n\n  constructor(\n      alpha: number, beta: number, dtype: keyof RandGammaDataTypes,\n      seed?: number) {\n    this.alpha = alpha;\n    this.beta = 1 / beta;  // convert rate to scale parameter\n    this.dtype = dtype;\n\n    const seedValue = seed ? seed : Math.random();\n    this.randu = seedrandom.alea(seedValue.toString());\n    this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());\n\n    if (alpha < 1) {\n      this.d = alpha + (2 / 3);\n    } else {\n      this.d = alpha - (1 / 3);\n    }\n    this.c = 1 / Math.sqrt(9 * this.d);\n  }\n\n  /** Returns next sample from a gamma distribution. */\n  public nextValue(): number {\n    let x2: number, v0: number, v1: number, x: number, u: number, v: number;\n    while (true) {\n      do {\n        x = this.randn.nextValue();\n        v = 1 + (this.c * x);\n      } while (v <= 0);\n      v *= v * v;\n      x2 = x * x;\n      v0 = 1 - (0.331 * x2 * x2);\n      v1 = (0.5 * x2) + (this.d * (1 - v + Math.log(v)));\n      u = this.randu();\n      if (u < v0 || Math.log(u) < v1) {\n        break;\n      }\n    }\n    v = (1 / this.beta) * this.d * v;\n    if (this.alpha < 1) {\n      v *= Math.pow(this.randu(), 1 / this.alpha);\n    }\n    return this.convertValue(v);\n  }\n  /** Handles proper rounding for non-floating-point numbers. */\n  private convertValue(value: number): number {\n    if (this.dtype === 'float32') {\n      return value;\n    }\n    return Math.round(value);\n  }\n}\n\nexport class UniformRandom implements RandomBase {\n  private min: number;\n  private range: number;\n  private random: seedrandom.prng;\n  private dtype?: keyof RandNormalDataTypes;\n\n  constructor(\n      min = 0, max = 1, dtype?: keyof RandNormalDataTypes,\n      seed?: string|number) {\n    this.min = min;\n    this.range = max - min;\n    this.dtype = dtype;\n    if (seed == null) {\n      seed = Math.random();\n    }\n    if (typeof seed === 'number') {\n      seed = seed.toString();\n    }\n\n    if (!this.canReturnFloat() && this.range <= 1) {\n      throw new Error(\n          `The difference between ${min} - ${max} <= 1 and dtype is not float`);\n    }\n    this.random = seedrandom.alea(seed);\n  }\n\n  /** Handles proper rounding for non floating point numbers. */\n  private canReturnFloat = () =>\n      (this.dtype == null || this.dtype === 'float32');\n\n  private convertValue(value: number): number {\n    if (this.canReturnFloat()) {\n      return value;\n    }\n    return Math.round(value);\n  }\n\n  nextValue() {\n    return this.convertValue(this.min + this.range * this.random());\n  }\n}\n\nexport function jarqueBeraNormalityTest(values: TypedArray|number[]) {\n  // https://en.wikipedia.org/wiki/Jarque%E2%80%93Bera_test\n  const n = values.length;\n  const s = skewness(values);\n  const k = kurtosis(values);\n  const jb = n / 6 * (Math.pow(s, 2) + 0.25 * Math.pow(k - 3, 2));\n  // JB test requires 2-degress of freedom from Chi-Square @ 0.95:\n  // http://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm\n  const CHI_SQUARE_2DEG = 5.991;\n  if (jb > CHI_SQUARE_2DEG) {\n    throw new Error(`Invalid p-value for JB: ${jb}`);\n  }\n}\n\nexport function expectArrayInMeanStdRange(\n    actual: TypedArray|number[], expectedMean: number, expectedStdDev: number,\n    epsilon?: number) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  const actualMean = mean(actual);\n  expectNumbersClose(actualMean, expectedMean, epsilon);\n  expectNumbersClose(\n      standardDeviation(actual, actualMean), expectedStdDev, epsilon);\n}\n\nfunction mean(values: TypedArray|number[]) {\n  let sum = 0;\n  for (let i = 0; i < values.length; i++) {\n    sum += values[i];\n  }\n  return sum / values.length;\n}\n\nfunction standardDeviation(values: TypedArray|number[], mean: number) {\n  let squareDiffSum = 0;\n  for (let i = 0; i < values.length; i++) {\n    const diff = values[i] - mean;\n    squareDiffSum += diff * diff;\n  }\n  return Math.sqrt(squareDiffSum / values.length);\n}\n\nfunction kurtosis(values: TypedArray|number[]) {\n  // https://en.wikipedia.org/wiki/Kurtosis\n  const valuesMean = mean(values);\n  const n = values.length;\n  let sum2 = 0;\n  let sum4 = 0;\n  for (let i = 0; i < n; i++) {\n    const v = values[i] - valuesMean;\n    sum2 += Math.pow(v, 2);\n    sum4 += Math.pow(v, 4);\n  }\n  return (1 / n) * sum4 / Math.pow((1 / n) * sum2, 2);\n}\n\nfunction skewness(values: TypedArray|number[]) {\n  // https://en.wikipedia.org/wiki/Skewness\n  const valuesMean = mean(values);\n  const n = values.length;\n  let sum2 = 0;\n  let sum3 = 0;\n  for (let i = 0; i < n; i++) {\n    const v = values[i] - valuesMean;\n    sum2 += Math.pow(v, 2);\n    sum3 += Math.pow(v, 3);\n  }\n  return (1 / n) * sum3 / Math.pow((1 / (n - 1)) * sum2, 3 / 2);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}