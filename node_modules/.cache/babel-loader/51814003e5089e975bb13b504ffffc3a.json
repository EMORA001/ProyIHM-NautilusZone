{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { complex } from '../kernels/Complex';\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\n\nexport function zeros(backend, shape) {\n  let dtype = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'float32';\n\n  if (dtype === 'complex64') {\n    const real = zeros(backend, shape, 'float32');\n    const imag = zeros(backend, shape, 'float32');\n    return complex({\n      inputs: {\n        real,\n        imag\n      },\n      backend\n    });\n  }\n\n  const values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n  return backend.makeTensorInfo(shape, dtype, values);\n}","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/utils/zeros_impl.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAA8B,IAA9B,QAAyC,uBAAzC;AAEA,SAAQ,OAAR,QAAsB,oBAAtB;AAEA;;;;;AAKG;;AACH,OAAM,SAAU,KAAV,CACF,OADE,EACuB,KADvB,EAEyB;EAAA,IAA3B,KAA2B,uEAAT,SAAS;;EAC7B,IAAI,KAAK,KAAK,WAAd,EAA2B;IACzB,MAAM,IAAI,GAAG,KAAK,CAAC,OAAD,EAAU,KAAV,EAAiB,SAAjB,CAAlB;IACA,MAAM,IAAI,GAAG,KAAK,CAAC,OAAD,EAAU,KAAV,EAAiB,SAAjB,CAAlB;IAEA,OAAO,OAAO,CAAC;MAAC,MAAM,EAAE;QAAC,IAAD;QAAO;MAAP,CAAT;MAAuB;IAAvB,CAAD,CAAd;EACD;;EAED,MAAM,MAAM,GAAG,IAAI,CAAC,mBAAL,CAAyB,IAAI,CAAC,aAAL,CAAmB,KAAnB,CAAzB,EAAoD,KAApD,CAAf;EAEA,OAAO,OAAO,CAAC,cAAR,CAAuB,KAAvB,EAA8B,KAA9B,EAAqC,MAArC,CAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from '../kernels/Complex';\n\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\nexport function zeros(\n    backend: MathBackendCPU, shape: number[],\n    dtype: DataType = 'float32'): TensorInfo {\n  if (dtype === 'complex64') {\n    const real = zeros(backend, shape, 'float32');\n    const imag = zeros(backend, shape, 'float32');\n\n    return complex({inputs: {real, imag}, backend});\n  }\n\n  const values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n\n  return backend.makeTensorInfo(shape, dtype, values);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}