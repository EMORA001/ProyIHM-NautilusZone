{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext, setWebGLContext } from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport class GPGPUContext {\n  constructor(gl) {\n    this.outputTexture = null;\n    this.program = null;\n    this.disposed = false;\n    this.vertexAttrsAreBound = false;\n    this.itemsToPoll = [];\n    const glVersion = env().getNumber('WEBGL_VERSION');\n\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    } // WebGL 2.0 enables texture floats without an extension.\n\n\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    this.parallelCompilationExtension = this.gl.getExtension('KHR_parallel_shader_compile');\n\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n      this.textureFloatExtension = webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension = webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error('GL context does not support half float textures, yet the ' + 'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension = webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error('GL context does not support color renderable half floats, yet ' + 'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension = this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n    this.textureConfig = tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  get debug() {\n    return env().getBool('DEBUG');\n  }\n\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n\n    if (this.program != null) {\n      console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' + ' This is probably a resource leak, delete the program with ' + 'GPGPUContext.deleteProgram before disposing.');\n    }\n\n    if (this.outputTexture != null) {\n      console.warn('Disposing a GPGPUContext that still has a bound output matrix ' + 'texture.  This is probably a resource leak, delete the output ' + 'matrix texture with GPGPUContext.deleteMatrixTexture before ' + 'disposing.');\n    }\n\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n\n  createFloat32MatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n\n  createFloat16MatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n\n  createUnsignedBytesMatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n\n  uploadPixelDataToTexture(texture, pixels) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n\n  uploadDenseMatrixToTexture(texture, width, height, data) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(this.gl, texture, width, height, data, this.textureConfig);\n  }\n\n  createFloat16PackedMatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n\n  createPackedMatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n\n  deleteMatrixTexture(texture) {\n    this.throwIfDisposed();\n\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n\n  downloadByteEncodedFloatMatrixFromOutputTexture(texture, rows, columns) {\n    return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(this.gl, rows, columns, this.textureConfig));\n  }\n\n  downloadPackedMatrixFromBuffer(buffer, batch, rows, columns, physicalRows, physicalCols) {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(this.gl, buffer, batch, rows, columns, physicalRows, physicalCols, this.textureConfig);\n  }\n\n  downloadFloat32MatrixFromBuffer(buffer, size) {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n\n  createBufferFromTexture(texture, rows, columns) {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(this.gl, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  createAndWaitForFence() {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  createFence(gl) {\n    let query;\n    let isFencePassed;\n\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl;\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n\n      query = sync;\n    } else if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n\n      isFencePassed = () => this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n\n    return {\n      query,\n      isFencePassed\n    };\n  }\n\n  downloadMatrixFromPackedTexture(texture, physicalRows, physicalCols) {\n    return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadMatrixFromPackedOutputTexture(this.gl, physicalRows, physicalCols));\n  }\n\n  createProgram(fragmentShader) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n\n    if (this.vertexShader == null) {\n      this.vertexShader = gpgpu_util.createVertexShader(gl);\n    }\n\n    const program = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, this.vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n\n    if (this.debug) {\n      webgl_util.validateProgram(gl, program);\n    }\n\n    if (!this.vertexAttrsAreBound) {\n      this.setProgram(program);\n      this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(gl, this.program, this.vertexBuffer);\n    }\n\n    return program;\n  }\n\n  deleteProgram(program) {\n    this.throwIfDisposed();\n\n    if (program === this.program) {\n      this.program = null;\n    }\n\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n    }\n  }\n\n  setProgram(program) {\n    this.throwIfDisposed();\n    this.program = program;\n\n    if (this.program != null && this.debug) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n\n  getUniformLocation(program, uniformName) {\n    let shouldThrow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    this.throwIfDisposed();\n\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(this.gl, program, uniformName);\n    }\n  }\n\n  getAttributeLocation(program, attribute) {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n\n  getUniformLocationNoThrow(program, uniformName) {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n\n  setInputMatrixTexture(inputMatrixTexture, uniformLocation, textureUnit) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n\n  setOutputMatrixTexture(outputMatrixTexture, rows, columns) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n\n  setOutputPackedMatrixTexture(outputPackedMatrixTexture, rows, columns) {\n    this.throwIfDisposed();\n    const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n\n  setOutputMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n    this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);\n  }\n\n  setOutputPackedMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n\n  debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n\n    webgl_util.validateFramebuffer(this.gl);\n  }\n\n  executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n\n    if (this.debug) {\n      this.debugValidate();\n    }\n\n    webgl_util.callAndCheck(gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n\n  blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n\n  getQueryTimerExtension() {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension = webgl_util.getExtensionOrThrow(this.gl, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ? 'EXT_disjoint_timer_query_webgl2' : 'EXT_disjoint_timer_query');\n    }\n\n    return this.disjointQueryTimerExtension;\n  }\n\n  getQueryTimerExtensionWebGL2() {\n    return this.getQueryTimerExtension();\n  }\n\n  getQueryTimerExtensionWebGL1() {\n    return this.getQueryTimerExtension();\n  }\n\n  beginQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT();\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n\n  async waitForQueryAndGetTime(query) {\n    await util.repeatedTry(() => this.disposed || // while testing contexts are created / disposed\n    // in rapid succession, so without this check we\n    // may poll for the query timer indefinitely\n    this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n\n  getQueryTime(query, queryTimerVersion) {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl;\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT); // Return milliseconds.\n\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n      const timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT); // Return milliseconds.\n\n      return timeElapsedNanos / 1000000;\n    }\n  }\n\n  isQueryAvailable(query, queryTimerVersion) {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      const available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n      const available = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    }\n  }\n\n  pollFence(fenceContext) {\n    return new Promise(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  pollItems() {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n\n    for (let i = 0; i <= index; ++i) {\n      const {\n        resolveFn\n      } = this.itemsToPoll[i];\n      resolveFn();\n    }\n\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  addItemToPoll(isDoneFn, resolveFn) {\n    this.itemsToPoll.push({\n      isDoneFn,\n      resolveFn\n    });\n\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    } // Start a new loop that polls.\n\n\n    util.repeatedTry(() => {\n      this.pollItems(); // End the loop if no more items to poll.\n\n      return this.itemsToPoll.length === 0;\n    });\n  }\n\n  bindTextureToFrameBuffer(texture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);\n\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n\n  unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);\n\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n\n  downloadMatrixDriver(texture, downloadAndDecode) {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  setOutputMatrixTextureDriver(outputMatrixTextureMaybePacked, width, height) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);\n\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n\n  setOutputMatrixWriteRegionDriver(x, y, width, height) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n\n  throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n\n  throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n\n}\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\n\nexport function linearSearchLastTrue(arr) {\n  let i = 0;\n\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n\n    if (!isDone) {\n      break;\n    }\n  }\n\n  return i - 1;\n}","map":{"version":3,"sources":["../../../../../tfjs-backend-webgl/src/gpgpu_context.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext, setWebGLContext} from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureConfig} from './tex_util';\nimport {WebGL1DisjointQueryTimerExtension, WebGL2DisjointQueryTimerExtension, WebGLParallelCompilationExtension} from './webgl_types';\nimport * as webgl_util from './webgl_util';\n\nexport interface FenceContext {\n  query: WebGLQuery|WebGLSync;\n  isFencePassed(): boolean;\n}\n\nexport class GPGPUContext {\n  gl: WebGLRenderingContext;\n  textureFloatExtension: {};\n  textureHalfFloatExtension: {};\n  colorBufferFloatExtension: {};\n  colorBufferHalfFloatExtension: {};\n  disjointQueryTimerExtension: WebGL2DisjointQueryTimerExtension|\n      WebGL1DisjointQueryTimerExtension;\n  parallelCompilationExtension: WebGLParallelCompilationExtension;\n  vertexBuffer: WebGLBuffer;\n  indexBuffer: WebGLBuffer;\n  framebuffer: WebGLFramebuffer;\n  outputTexture: WebGLTexture|null = null;\n  program: WebGLProgram|null = null;\n  private disposed = false;\n  private disjoint: boolean;\n  private vertexShader: WebGLShader;\n  textureConfig: TextureConfig;\n\n  constructor(gl?: WebGLRenderingContext) {\n    const glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    // WebGL 2.0 enables texture floats without an extension.\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    this.parallelCompilationExtension =\n        this.gl.getExtension('KHR_parallel_shader_compile');\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n\n      this.textureFloatExtension =\n          webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support half float textures, yet the ' +\n            'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support color renderable half floats, yet ' +\n            'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n\n    this.textureConfig =\n        tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  private get debug(): boolean {\n    return env().getBool('DEBUG');\n  }\n\n  public dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n          ' This is probably a resource leak, delete the program with ' +\n          'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound output matrix ' +\n          'texture.  This is probably a resource leak, delete the output ' +\n          'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n          'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(\n        gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n\n  public createFloat32MatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createFloat16MatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createUnsignedBytesMatrixTexture(rows: number, columns: number):\n      Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public uploadPixelDataToTexture(\n      texture: WebGLTexture,\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      ImageBitmap) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n\n  public uploadDenseMatrixToTexture(\n      texture: WebGLTexture, width: number, height: number, data: TypedArray) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(\n        this.gl, texture, width, height, data, this.textureConfig);\n  }\n\n  public createFloat16PackedMatrixTexture(rows: number, columns: number):\n      Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createPackedMatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public deleteMatrixTexture(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n\n  public downloadByteEncodedFloatMatrixFromOutputTexture(\n      texture: WebGLTexture, rows: number, columns: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(\n            this.gl, rows, columns, this.textureConfig));\n  }\n\n  public downloadPackedMatrixFromBuffer(\n      buffer: WebGLBuffer, batch: number, rows: number, columns: number,\n      physicalRows: number, physicalCols: number): Float32Array {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(\n        this.gl, buffer, batch, rows, columns, physicalRows, physicalCols,\n        this.textureConfig);\n  }\n\n  public downloadFloat32MatrixFromBuffer(buffer: WebGLBuffer, size: number):\n      Float32Array {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n\n  public createBufferFromTexture(\n      texture: WebGLTexture, rows: number, columns: number): WebGLBuffer {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(\n        this.gl as WebGL2RenderingContext, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  public createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let query: WebGLQuery|WebGLSync;\n    let isFencePassed: () => boolean;\n\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl as WebGL2RenderingContext;\n\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED ||\n            status === gl2.CONDITION_SATISFIED;\n      };\n\n      query = sync;\n    } else if (\n        env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(\n          query,\n          env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n\n    return {query, isFencePassed};\n  }\n\n  public downloadMatrixFromPackedTexture(\n      texture: WebGLTexture, physicalRows: number,\n      physicalCols: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadMatrixFromPackedOutputTexture(\n            this.gl, physicalRows, physicalCols));\n  }\n\n  private vertexAttrsAreBound = false;\n\n  public createProgram(fragmentShader: WebGLShader): WebGLProgram {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    if (this.vertexShader == null) {\n      this.vertexShader = gpgpu_util.createVertexShader(gl);\n    }\n    const program: WebGLProgram = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(\n        gl, () => gl.attachShader(program, this.vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n    if (this.debug) {\n      webgl_util.validateProgram(gl, program);\n    }\n    if (!this.vertexAttrsAreBound) {\n      this.setProgram(program);\n      this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(\n          gl, this.program, this.vertexBuffer);\n    }\n    return program;\n  }\n\n  public deleteProgram(program: WebGLProgram) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n    }\n  }\n\n  public setProgram(program: WebGLProgram|null) {\n    this.throwIfDisposed();\n    this.program = program;\n    if ((this.program != null) && this.debug) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n\n  public getUniformLocation(\n      program: WebGLProgram, uniformName: string,\n      shouldThrow = true): WebGLUniformLocation {\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(\n          this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(\n          this.gl, program, uniformName);\n    }\n  }\n\n  public getAttributeLocation(program: WebGLProgram, attribute: string):\n      number {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(\n        this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n\n  public getUniformLocationNoThrow(program: WebGLProgram, uniformName: string):\n      WebGLUniformLocation {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n\n  public setInputMatrixTexture(\n      inputMatrixTexture: WebGLTexture, uniformLocation: WebGLUniformLocation,\n      textureUnit: number) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(\n        this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n\n  public setOutputMatrixTexture(\n      outputMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n\n  public setOutputPackedMatrixTexture(\n      outputPackedMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.throwIfDisposed();\n    const [width, height] =\n        tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n\n  public setOutputMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    this.setOutputMatrixWriteRegionDriver(\n        startColumn, startRow, numColumns, numRows);\n  }\n\n  public setOutputPackedMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n\n  public debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n\n  public executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(\n        gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n\n  public blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n\n  private getQueryTimerExtension(): WebGL1DisjointQueryTimerExtension\n      |WebGL2DisjointQueryTimerExtension {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension =\n          webgl_util.getExtensionOrThrow(\n              this.gl,\n              env().getNumber(\n                  'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                  'EXT_disjoint_timer_query_webgl2' :\n                  'EXT_disjoint_timer_query') as\n              WebGL1DisjointQueryTimerExtension |\n          WebGL2DisjointQueryTimerExtension;\n    }\n    return this.disjointQueryTimerExtension;\n  }\n\n  private getQueryTimerExtensionWebGL2(): WebGL2DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension();\n  }\n\n  private getQueryTimerExtensionWebGL1(): WebGL1DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension() as WebGL1DisjointQueryTimerExtension;\n  }\n\n  beginQuery(): WebGLQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT() as WebGLQuery;\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n\n  public async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await util.repeatedTry(\n        () => this.disposed ||  // while testing contexts are created / disposed\n                                // in rapid succession, so without this check we\n                                // may poll for the query timer indefinitely\n            this.isQueryAvailable(\n                query,\n                env().getNumber(\n                    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(\n        query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n\n  private getQueryTime(query: WebGLQuery, queryTimerVersion: number): number {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const timeElapsedNanos =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n\n  private isQueryAvailable(query: WebGLQuery, queryTimerVersion: number):\n      boolean {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const available =\n          gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const available =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    }\n  }\n\n  pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n\n  private bindTextureToFrameBuffer(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(\n        this.gl, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n\n  private unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(\n          this.gl, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n\n  private downloadMatrixDriver(\n      texture: WebGLTexture,\n      downloadAndDecode: () => Float32Array): Float32Array {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n\n    return result;\n  }\n\n  private setOutputMatrixTextureDriver(\n      outputMatrixTextureMaybePacked: WebGLTexture, width: number,\n      height: number) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(\n        gl, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n\n  private setOutputMatrixWriteRegionDriver(\n      x: number, y: number, width: number, height: number) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(\n        this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n\n  private throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n\n  private throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean,\n  resolveFn: () => void\n};\n\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}