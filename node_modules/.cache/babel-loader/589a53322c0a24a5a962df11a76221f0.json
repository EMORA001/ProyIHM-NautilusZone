{"ast":null,"code":"import { getCoordsDataType } from './shader_compiler';\nexport class GatherNDProgram {\n  constructor(sliceDim, strides, shape, paramsShape) {\n    this.sliceDim = sliceDim;\n    this.strides = strides;\n    this.paramsShape = paramsShape;\n    this.variableNames = ['x', 'indices'];\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    const strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';\n    const paramsShapeType = getCoordsDataType(paramsShape.length);\n    const paramsShapeString = paramsShape.length > 1 ? 'paramsShape[j]' : 'paramsShape';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${this.strides});\n        ${paramsShapeType} paramsShape = ${paramsShapeType}(${this.paramsShape});\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            out_of_bounds = out_of_bounds || index < 0;\n            out_of_bounds = out_of_bounds || index >= ${paramsShapeString};\n            flattenIndex += index * ${strideString};\n          }\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `;\n  }\n\n}","map":{"version":3,"sources":["../../../../../tfjs-backend-webgl/src/gather_nd_gpu.ts"],"names":[],"mappings":"AAiBA,SAAQ,iBAAR,QAAgC,mBAAhC;AAEA,OAAM,MAAO,eAAP,CAAsB;EAI1B,WAAA,CACY,QADZ,EACsC,OADtC,EACyD,KADzD,EAEY,WAFZ,EAEiC;IADrB,KAAA,QAAA,GAAA,QAAA;IAA0B,KAAA,OAAA,GAAA,OAAA;IAC1B,KAAA,WAAA,GAAA,WAAA;IALZ,KAAA,aAAA,GAAgB,CAAC,GAAD,EAAM,SAAN,CAAhB;IAME,KAAK,WAAL,GAAmB,KAAnB;IACA,MAAM,WAAW,GAAG,iBAAiB,CAAC,OAAO,CAAC,MAAT,CAArC;IACA,MAAM,KAAK,GAAG,iBAAiB,CAAC,KAAK,CAAC,MAAP,CAA/B;IACA,MAAM,YAAY,GAAG,KAAK,QAAL,GAAgB,CAAhB,GAAoB,YAApB,GAAmC,SAAxD;IACA,MAAM,eAAe,GAAG,iBAAiB,CAAC,WAAW,CAAC,MAAb,CAAzC;IACA,MAAM,iBAAiB,GAAG,WAAW,CAAC,MAAZ,GAAqB,CAArB,GAAyB,gBAAzB,GAA4C,aAAtE;IACA,KAAK,QAAL,GAAgB;UACV,WAAW,cAAc,WAAW,IAAI,KAAK,OAAO;UACpD,eAAe,kBAAkB,eAAe,IAAI,KAAK,WAAW;;YAElE,KAAK;;;gCAGe,KAAK,QAAQ;;;wDAGW,iBAAiB;sCACnC,YAAY;;;;AAI3C,OAfH;EAgBD;;AA7ByB","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherNDProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  constructor(\n      private sliceDim: number, private strides: number[], shape: number[],\n      private paramsShape: number[]) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    const strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';\n    const paramsShapeType = getCoordsDataType(paramsShape.length);\n    const paramsShapeString = paramsShape.length > 1 ? 'paramsShape[j]' : 'paramsShape';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${this.strides});\n        ${paramsShapeType} paramsShape = ${paramsShapeType}(${this.paramsShape});\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            out_of_bounds = out_of_bounds || index < 0;\n            out_of_bounds = out_of_bounds || index >= ${paramsShapeString};\n            flattenIndex += index * ${strideString};\n          }\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}