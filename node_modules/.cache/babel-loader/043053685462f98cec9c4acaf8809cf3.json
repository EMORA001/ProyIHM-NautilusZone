{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IFFT, util } from '@tensorflow/tfjs-core';\nimport { fftBatch } from '../utils/fft_utils';\nimport { reshape } from './Reshape';\nexport function ifft(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    input\n  } = inputs;\n  const inputSize = util.sizeFromShape(input.shape); // Collapse all outer dimensions to a single batch dimension.\n\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n  const input2D = reshape({\n    inputs: {\n      x: input\n    },\n    backend,\n    attrs: {\n      shape: [batch, innerDimensionSize]\n    }\n  });\n  const result = fftBatch(input2D, true, backend);\n  const resultReshaped = reshape({\n    inputs: {\n      x: result\n    },\n    backend,\n    attrs: {\n      shape: input.shape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n  return resultReshaped;\n}\nexport const ifftConfig = {\n  kernelName: IFFT,\n  backendName: 'cpu',\n  kernelFunc: ifft\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/IFFT.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,IAAR,EAAgE,IAAhE,QAA2E,uBAA3E;AAGA,SAAQ,QAAR,QAAuB,oBAAvB;AACA,SAAQ,OAAR,QAAsB,WAAtB;AAEA,OAAM,SAAU,IAAV,CAAe,IAAf,EAAkE;EAEtE,MAAM;IAAC,MAAD;IAAS;EAAT,IAAoB,IAA1B;EACA,MAAM;IAAC;EAAD,IAAU,MAAhB;EAEA,MAAM,SAAS,GAAG,IAAI,CAAC,aAAL,CAAmB,KAAK,CAAC,KAAzB,CAAlB,CALsE,CAOtE;;EACA,MAAM,kBAAkB,GAAG,KAAK,CAAC,KAAN,CAAY,KAAK,CAAC,KAAN,CAAY,MAAZ,GAAqB,CAAjC,CAA3B;EACA,MAAM,KAAK,GAAG,SAAS,GAAG,kBAA1B;EAEA,MAAM,OAAO,GAAG,OAAO,CAAC;IACtB,MAAM,EAAE;MAAC,CAAC,EAAE;IAAJ,CADc;IAEtB,OAFsB;IAGtB,KAAK,EAAE;MAAC,KAAK,EAAE,CAAC,KAAD,EAAQ,kBAAR;IAAR;EAHe,CAAD,CAAvB;EAMA,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAD,EAAU,IAAV,EAAgB,OAAhB,CAAvB;EAEA,MAAM,cAAc,GAChB,OAAO,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAJ,CAAT;IAAsB,OAAtB;IAA+B,KAAK,EAAE;MAAC,KAAK,EAAE,KAAK,CAAC;IAAd;EAAtC,CAAD,CADX;EAGA,OAAO,CAAC,6BAAR,CAAsC,OAAtC;EACA,OAAO,CAAC,6BAAR,CAAsC,MAAtC;EAEA,OAAO,cAAP;AACD;AAED,OAAO,MAAM,UAAU,GAAiB;EACtC,UAAU,EAAE,IAD0B;EAEtC,WAAW,EAAE,KAFyB;EAGtC,UAAU,EAAE;AAH0B,CAAjC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, true, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'cpu',\n  kernelFunc: ifft as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}