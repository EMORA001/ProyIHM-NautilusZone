{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { complex } from '../ops/complex';\nimport { tensor } from '../ops/tensor';\nimport { sizeFromShape } from '../util';\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\n/** Number of bytes reserved for the length of the string. (32bit integer). */\n\nconst NUM_BYTES_STRING_LENGTH = 4;\n/**\n * Encode a map from names to weight values as an ArrayBuffer, along with an\n * `Array` of `WeightsManifestEntry` as specification of the encoded weights.\n *\n * This function does not perform sharding.\n *\n * This function is the reverse of `decodeWeights`.\n *\n * @param tensors A map (\"dict\") from names to tensors.\n * @param group Group to which the weights belong (optional).\n * @returns A `Promise` of\n *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s\n *     concatenated.\n *   - An `Array` of `WeightManifestEntry`s, carrying information including\n *     tensor names, `dtype`s and shapes.\n * @throws Error: on unsupported tensor `dtype`.\n */\n\nexport async function encodeWeights(tensors, group) {\n  // TODO(adarob, cais): Support quantization.\n  const specs = [];\n  const dataPromises = [];\n  const names = Array.isArray(tensors) ? tensors.map(tensor => tensor.name) : Object.keys(tensors);\n\n  for (let i = 0; i < names.length; ++i) {\n    const name = names[i];\n    const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];\n\n    if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' && t.dtype !== 'string' && t.dtype !== 'complex64') {\n      throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);\n    }\n\n    const spec = {\n      name,\n      shape: t.shape,\n      dtype: t.dtype\n    };\n\n    if (t.dtype === 'string') {\n      const utf8bytes = new Promise(async resolve => {\n        const vals = await t.bytes();\n        const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) + NUM_BYTES_STRING_LENGTH * vals.length;\n        const bytes = new Uint8Array(totalNumBytes);\n        let offset = 0;\n\n        for (let i = 0; i < vals.length; i++) {\n          const val = vals[i];\n          const bytesOfLength = new Uint8Array(new Uint32Array([val.length]).buffer);\n          bytes.set(bytesOfLength, offset);\n          offset += NUM_BYTES_STRING_LENGTH;\n          bytes.set(val, offset);\n          offset += val.length;\n        }\n\n        resolve(bytes);\n      });\n      dataPromises.push(utf8bytes);\n    } else {\n      dataPromises.push(t.data());\n    }\n\n    if (group != null) {\n      spec.group = group;\n    }\n\n    specs.push(spec);\n  }\n\n  const tensorValues = await Promise.all(dataPromises);\n  return {\n    data: concatenateTypedArrays(tensorValues),\n    specs\n  };\n}\n/**\n * Decode flat ArrayBuffer as weights.\n *\n * This function does not handle sharding.\n *\n * This function is the reverse of `encodeWeights`.\n *\n * @param buffer A flat ArrayBuffer carrying the binary values of the tensors\n *   concatenated in the order specified in `specs`.\n * @param specs Specifications of the names, dtypes and shapes of the tensors\n *   whose value are encoded by `buffer`.\n * @return A map from tensor name to tensor value, with the names corresponding\n *   to names in `specs`.\n * @throws Error, if any of the tensors has unsupported dtype.\n */\n\nexport function decodeWeights(buffer, specs) {\n  // TODO(adarob, cais): Support quantization.\n  const out = {};\n  let float16Decode;\n  let offset = 0;\n\n  for (const spec of specs) {\n    const name = spec.name;\n    const dtype = spec.dtype;\n    const shape = spec.shape;\n    const size = sizeFromShape(shape);\n    let values;\n\n    if ('quantization' in spec) {\n      const quantization = spec.quantization;\n\n      if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n        if (!('min' in quantization && 'scale' in quantization)) {\n          throw new Error(`Weight ${spec.name} with quantization ${quantization.dtype} ` + `doesn't have corresponding metadata min and scale.`);\n        }\n      } else if (quantization.dtype === 'float16') {\n        if (dtype !== 'float32') {\n          throw new Error(`Weight ${spec.name} is quantized with ${quantization.dtype} ` + `which only supports weights of type float32 not ${dtype}.`);\n        }\n      } else {\n        throw new Error(`Weight ${spec.name} has unknown ` + `quantization dtype ${quantization.dtype}. ` + `Supported quantization dtypes are: ` + `'uint8', 'uint16', and 'float16'.`);\n      }\n\n      const quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n      const byteBuffer = buffer.slice(offset, offset + size * quantizationSizeFactor);\n      const quantizedArray = quantization.dtype === 'uint8' ? new Uint8Array(byteBuffer) : new Uint16Array(byteBuffer);\n\n      if (dtype === 'float32') {\n        if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n          values = new Float32Array(quantizedArray.length);\n\n          for (let i = 0; i < quantizedArray.length; i++) {\n            const v = quantizedArray[i];\n            values[i] = v * quantization.scale + quantization.min;\n          }\n        } else if (quantization.dtype === 'float16') {\n          if (float16Decode === undefined) {\n            float16Decode = getFloat16Decoder();\n          }\n\n          values = float16Decode(quantizedArray);\n        } else {\n          throw new Error(`Unsupported quantization type ${quantization.dtype} ` + `for weight type float32.`);\n        }\n      } else if (dtype === 'int32') {\n        if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {\n          throw new Error(`Unsupported quantization type ${quantization.dtype} ` + `for weight type int32.`);\n        }\n\n        values = new Int32Array(quantizedArray.length);\n\n        for (let i = 0; i < quantizedArray.length; i++) {\n          const v = quantizedArray[i];\n          values[i] = Math.round(v * quantization.scale + quantization.min);\n        }\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n\n      offset += size * quantizationSizeFactor;\n    } else if (dtype === 'string') {\n      const size = sizeFromShape(spec.shape);\n      values = [];\n\n      for (let i = 0; i < size; i++) {\n        const byteLength = new Uint32Array(buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];\n        offset += NUM_BYTES_STRING_LENGTH;\n        const bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));\n        values.push(bytes);\n        offset += byteLength;\n      }\n    } else {\n      const dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];\n      const byteBuffer = buffer.slice(offset, offset + size * dtypeFactor);\n\n      if (dtype === 'float32') {\n        values = new Float32Array(byteBuffer);\n      } else if (dtype === 'int32') {\n        values = new Int32Array(byteBuffer);\n      } else if (dtype === 'bool') {\n        values = new Uint8Array(byteBuffer);\n      } else if (dtype === 'complex64') {\n        values = new Float32Array(byteBuffer);\n        const real = new Float32Array(values.length / 2);\n        const image = new Float32Array(values.length / 2);\n\n        for (let i = 0; i < real.length; i++) {\n          real[i] = values[i * 2];\n          image[i] = values[i * 2 + 1];\n        }\n\n        const realTensor = tensor(real, shape, 'float32');\n        const imageTensor = tensor(image, shape, 'float32');\n        out[name] = complex(realTensor, imageTensor);\n        realTensor.dispose();\n        imageTensor.dispose();\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n\n      offset += size * dtypeFactor;\n    }\n\n    if (dtype !== 'complex64') {\n      out[name] = tensor(values, shape, dtype);\n    }\n  }\n\n  return out;\n}\n/**\n * Concatenate TypedArrays into an ArrayBuffer.\n */\n\nexport function concatenateTypedArrays(xs) {\n  // TODO(adarob, cais): Support quantization.\n  if (xs === null) {\n    throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);\n  }\n\n  let totalByteLength = 0; // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'\n  // can have a different byte length from that of the `TypedArray` itself,\n  // for example, when the `TypedArray` is created from an offset in an\n  // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match\n  // the `TypedArray` in byte length. If an element of `xs` does not show\n  // this property, a new `TypedArray` that satisfy this property will be\n  // constructed and pushed into `normalizedXs`.\n\n  const normalizedXs = [];\n  xs.forEach(x => {\n    totalByteLength += x.byteLength; // tslint:disable:no-any\n\n    normalizedXs.push(x.byteLength === x.buffer.byteLength ? x : new x.constructor(x));\n\n    if (!(x instanceof Float32Array || x instanceof Int32Array || x instanceof Uint8Array)) {\n      throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);\n    } // tslint:enable:no-any\n\n  });\n  const y = new Uint8Array(totalByteLength);\n  let offset = 0;\n  normalizedXs.forEach(x => {\n    y.set(new Uint8Array(x.buffer), offset);\n    offset += x.byteLength;\n  });\n  return y.buffer;\n} // Use Buffer on Node.js instead of Blob/atob/btoa\n\nconst useNodeBuffer = typeof Buffer !== 'undefined' && (typeof Blob === 'undefined' || typeof atob === 'undefined' || typeof btoa === 'undefined');\n/**\n * Calculate the byte length of a JavaScript string.\n *\n * Note that a JavaScript string can contain wide characters, therefore the\n * length of the string is not necessarily equal to the byte length.\n *\n * @param str Input string.\n * @returns Byte length.\n */\n\nexport function stringByteLength(str) {\n  if (useNodeBuffer) {\n    return Buffer.byteLength(str);\n  }\n\n  return new Blob([str]).size;\n}\n/**\n * Encode an ArrayBuffer as a base64 encoded string.\n *\n * @param buffer `ArrayBuffer` to be converted.\n * @returns A string that base64-encodes `buffer`.\n */\n\nexport function arrayBufferToBase64String(buffer) {\n  if (useNodeBuffer) {\n    return Buffer.from(buffer).toString('base64');\n  }\n\n  const buf = new Uint8Array(buffer);\n  let s = '';\n\n  for (let i = 0, l = buf.length; i < l; i++) {\n    s += String.fromCharCode(buf[i]);\n  }\n\n  return btoa(s);\n}\n/**\n * Decode a base64 string as an ArrayBuffer.\n *\n * @param str Base64 string.\n * @returns Decoded `ArrayBuffer`.\n */\n\nexport function base64StringToArrayBuffer(str) {\n  if (useNodeBuffer) {\n    const buf = Buffer.from(str, 'base64');\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n  }\n\n  const s = atob(str);\n  const buffer = new Uint8Array(s.length);\n\n  for (let i = 0; i < s.length; ++i) {\n    buffer.set([s.charCodeAt(i)], i);\n  }\n\n  return buffer.buffer;\n}\n/**\n * Concatenate a number of ArrayBuffers into one.\n *\n * @param buffers A number of array buffers to concatenate.\n * @returns Result of concatenating `buffers` in order.\n */\n\nexport function concatenateArrayBuffers(buffers) {\n  if (buffers.length === 1) {\n    return buffers[0];\n  }\n\n  let totalByteLength = 0;\n  buffers.forEach(buffer => {\n    totalByteLength += buffer.byteLength;\n  });\n  const temp = new Uint8Array(totalByteLength);\n  let offset = 0;\n  buffers.forEach(buffer => {\n    temp.set(new Uint8Array(buffer), offset);\n    offset += buffer.byteLength;\n  });\n  return temp.buffer;\n}\n/**\n * Get the basename of a path.\n *\n * Behaves in a way analogous to Linux's basename command.\n *\n * @param path\n */\n\nexport function basename(path) {\n  const SEPARATOR = '/';\n  path = path.trim();\n\n  while (path.endsWith(SEPARATOR)) {\n    path = path.slice(0, path.length - 1);\n  }\n\n  const items = path.split(SEPARATOR);\n  return items[items.length - 1];\n}\n/**\n * Create `ModelJSON` from `ModelArtifacts`.\n *\n * @param artifacts Model artifacts, describing the model and its weights.\n * @param manifest Weight manifest, describing where the weights of the\n *     `ModelArtifacts` are stored, and some metadata about them.\n * @returns Object representing the `model.json` file describing the model\n *     artifacts and weights\n */\n\nexport function getModelJSONForModelArtifacts(artifacts, manifest) {\n  const result = {\n    modelTopology: artifacts.modelTopology,\n    format: artifacts.format,\n    generatedBy: artifacts.generatedBy,\n    convertedBy: artifacts.convertedBy,\n    weightsManifest: manifest\n  };\n\n  if (artifacts.signature != null) {\n    result.signature = artifacts.signature;\n  }\n\n  if (artifacts.userDefinedMetadata != null) {\n    result.userDefinedMetadata = artifacts.userDefinedMetadata;\n  }\n\n  if (artifacts.modelInitializer != null) {\n    result.modelInitializer = artifacts.modelInitializer;\n  }\n\n  if (artifacts.trainingConfig != null) {\n    result.trainingConfig = artifacts.trainingConfig;\n  }\n\n  return result;\n}\n/**\n * Create `ModelArtifacts` from a JSON file.\n *\n * @param modelJSON Object containing the parsed JSON of `model.json`\n * @param loadWeights Function that takes the JSON file's weights manifest,\n *     reads weights from the listed path(s), and returns a Promise of the\n *     weight manifest entries along with the weights data.\n * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.\n */\n\nexport async function getModelArtifactsForJSON(modelJSON, loadWeights) {\n  const modelArtifacts = {\n    modelTopology: modelJSON.modelTopology,\n    format: modelJSON.format,\n    generatedBy: modelJSON.generatedBy,\n    convertedBy: modelJSON.convertedBy\n  };\n\n  if (modelJSON.trainingConfig != null) {\n    modelArtifacts.trainingConfig = modelJSON.trainingConfig;\n  }\n\n  if (modelJSON.weightsManifest != null) {\n    const [weightSpecs, weightData] = await loadWeights(modelJSON.weightsManifest);\n    modelArtifacts.weightSpecs = weightSpecs;\n    modelArtifacts.weightData = weightData;\n  }\n\n  if (modelJSON.signature != null) {\n    modelArtifacts.signature = modelJSON.signature;\n  }\n\n  if (modelJSON.userDefinedMetadata != null) {\n    modelArtifacts.userDefinedMetadata = modelJSON.userDefinedMetadata;\n  }\n\n  if (modelJSON.modelInitializer != null) {\n    modelArtifacts.modelInitializer = modelJSON.modelInitializer;\n  }\n\n  return modelArtifacts;\n}\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\n\nexport function getModelArtifactsInfoForJSON(modelArtifacts) {\n  if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n    throw new Error('Expected JSON model topology, received ArrayBuffer.');\n  }\n\n  return {\n    dateSaved: new Date(),\n    modelTopologyType: 'JSON',\n    modelTopologyBytes: modelArtifacts.modelTopology == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),\n    weightSpecsBytes: modelArtifacts.weightSpecs == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),\n    weightDataBytes: modelArtifacts.weightData == null ? 0 : modelArtifacts.weightData.byteLength\n  };\n}\n/**\n * Computes mantisa table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 2048 mantissa lookup values.\n */\n\nfunction computeFloat16MantisaTable() {\n  const convertMantissa = i => {\n    let m = i << 13;\n    let e = 0;\n\n    while ((m & 0x00800000) === 0) {\n      e -= 0x00800000;\n      m <<= 1;\n    }\n\n    m &= ~0x00800000;\n    e += 0x38800000;\n    return m | e;\n  };\n\n  const mantisaTable = new Uint32Array(2048);\n  mantisaTable[0] = 0;\n\n  for (let i = 1; i < 1024; i++) {\n    mantisaTable[i] = convertMantissa(i);\n  }\n\n  for (let i = 1024; i < 2048; i++) {\n    mantisaTable[i] = 0x38000000 + (i - 1024 << 13);\n  }\n\n  return mantisaTable;\n}\n/**\n * Computes exponent table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 64 exponent lookup values.\n */\n\n\nfunction computeFloat16ExponentTable() {\n  const exponentTable = new Uint32Array(64);\n  exponentTable[0] = 0;\n  exponentTable[31] = 0x47800000;\n  exponentTable[32] = 0x80000000;\n  exponentTable[63] = 0xc7800000;\n\n  for (let i = 1; i < 31; i++) {\n    exponentTable[i] = i << 23;\n  }\n\n  for (let i = 33; i < 63; i++) {\n    exponentTable[i] = 0x80000000 + (i - 32 << 23);\n  }\n\n  return exponentTable;\n}\n/**\n * Computes offset table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 6d offset values.\n */\n\n\nfunction computeFloat16OffsetTable() {\n  const offsetTable = new Uint32Array(64);\n\n  for (let i = 0; i < 64; i++) {\n    offsetTable[i] = 1024;\n  }\n\n  offsetTable[0] = offsetTable[32] = 0;\n  return offsetTable;\n}\n/**\n * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values\n * to a Float32Array.\n *\n * @returns Function (buffer: Uint16Array) => Float32Array which decodes\n *          the Uint16Array of Float16 bytes to a Float32Array.\n */\n\n\nexport function getFloat16Decoder() {\n  // Algorithm is based off of\n  // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n  // Cache lookup tables\n  const mantisaTable = computeFloat16MantisaTable();\n  const exponentTable = computeFloat16ExponentTable();\n  const offsetTable = computeFloat16OffsetTable();\n  return quantizedArray => {\n    const buffer = new ArrayBuffer(4 * quantizedArray.length);\n    const bufferUint32View = new Uint32Array(buffer);\n\n    for (let index = 0; index < quantizedArray.length; index++) {\n      const float16Bits = quantizedArray[index];\n      const float32Bits = mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] + exponentTable[float16Bits >> 10];\n      bufferUint32View[index] = float32Bits;\n    }\n\n    return new Float32Array(buffer);\n  };\n}","map":{"version":3,"sources":["../../../../../../tfjs-core/src/io/io_utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {complex} from '../ops/complex';\nimport {tensor} from '../ops/tensor';\nimport {NamedTensor, NamedTensorMap} from '../tensor_types';\nimport {TypedArray} from '../types';\nimport {sizeFromShape} from '../util';\n\nimport {DTYPE_VALUE_SIZE_MAP, ModelArtifacts, ModelArtifactsInfo, ModelJSON, WeightGroup, WeightsManifestConfig, WeightsManifestEntry} from './types';\n\n/** Number of bytes reserved for the length of the string. (32bit integer). */\nconst NUM_BYTES_STRING_LENGTH = 4;\n\n/**\n * Encode a map from names to weight values as an ArrayBuffer, along with an\n * `Array` of `WeightsManifestEntry` as specification of the encoded weights.\n *\n * This function does not perform sharding.\n *\n * This function is the reverse of `decodeWeights`.\n *\n * @param tensors A map (\"dict\") from names to tensors.\n * @param group Group to which the weights belong (optional).\n * @returns A `Promise` of\n *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s\n *     concatenated.\n *   - An `Array` of `WeightManifestEntry`s, carrying information including\n *     tensor names, `dtype`s and shapes.\n * @throws Error: on unsupported tensor `dtype`.\n */\nexport async function encodeWeights(\n    tensors: NamedTensorMap|NamedTensor[], group?: WeightGroup):\n    Promise<{data: ArrayBuffer, specs: WeightsManifestEntry[]}> {\n  // TODO(adarob, cais): Support quantization.\n  const specs: WeightsManifestEntry[] = [];\n  const dataPromises: Array<Promise<TypedArray>> = [];\n\n  const names: string[] = Array.isArray(tensors) ?\n      tensors.map(tensor => tensor.name) :\n      Object.keys(tensors);\n\n  for (let i = 0; i < names.length; ++i) {\n    const name = names[i];\n    const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];\n    if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' &&\n        t.dtype !== 'string' && t.dtype !== 'complex64') {\n      throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);\n    }\n    const spec: WeightsManifestEntry = {name, shape: t.shape, dtype: t.dtype};\n    if (t.dtype === 'string') {\n      const utf8bytes = new Promise<TypedArray>(async resolve => {\n        const vals = await t.bytes() as Uint8Array[];\n        const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) +\n            NUM_BYTES_STRING_LENGTH * vals.length;\n        const bytes = new Uint8Array(totalNumBytes);\n        let offset = 0;\n        for (let i = 0; i < vals.length; i++) {\n          const val = vals[i];\n          const bytesOfLength =\n              new Uint8Array(new Uint32Array([val.length]).buffer);\n          bytes.set(bytesOfLength, offset);\n          offset += NUM_BYTES_STRING_LENGTH;\n          bytes.set(val, offset);\n          offset += val.length;\n        }\n        resolve(bytes);\n      });\n      dataPromises.push(utf8bytes);\n    } else {\n      dataPromises.push(t.data());\n    }\n    if (group != null) {\n      spec.group = group;\n    }\n    specs.push(spec);\n  }\n\n  const tensorValues = await Promise.all(dataPromises);\n  return {data: concatenateTypedArrays(tensorValues), specs};\n}\n\n/**\n * Decode flat ArrayBuffer as weights.\n *\n * This function does not handle sharding.\n *\n * This function is the reverse of `encodeWeights`.\n *\n * @param buffer A flat ArrayBuffer carrying the binary values of the tensors\n *   concatenated in the order specified in `specs`.\n * @param specs Specifications of the names, dtypes and shapes of the tensors\n *   whose value are encoded by `buffer`.\n * @return A map from tensor name to tensor value, with the names corresponding\n *   to names in `specs`.\n * @throws Error, if any of the tensors has unsupported dtype.\n */\nexport function decodeWeights(\n    buffer: ArrayBuffer, specs: WeightsManifestEntry[]): NamedTensorMap {\n  // TODO(adarob, cais): Support quantization.\n  const out: NamedTensorMap = {};\n  let float16Decode: (buffer: Uint16Array) => Float32Array | undefined;\n  let offset = 0;\n  for (const spec of specs) {\n    const name = spec.name;\n    const dtype = spec.dtype;\n    const shape = spec.shape;\n    const size = sizeFromShape(shape);\n    let values: TypedArray|string[]|Uint8Array[];\n\n    if ('quantization' in spec) {\n      const quantization = spec.quantization;\n      if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n        if (!('min' in quantization && 'scale' in quantization)) {\n          throw new Error(\n              `Weight ${spec.name} with quantization ${quantization.dtype} ` +\n              `doesn't have corresponding metadata min and scale.`);\n        }\n      } else if (quantization.dtype === 'float16') {\n        if (dtype !== 'float32') {\n          throw new Error(\n              `Weight ${spec.name} is quantized with ${quantization.dtype} ` +\n              `which only supports weights of type float32 not ${dtype}.`);\n        }\n      } else {\n        throw new Error(\n            `Weight ${spec.name} has unknown ` +\n            `quantization dtype ${quantization.dtype}. ` +\n            `Supported quantization dtypes are: ` +\n            `'uint8', 'uint16', and 'float16'.`);\n      }\n      const quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n      const byteBuffer =\n          buffer.slice(offset, offset + size * quantizationSizeFactor);\n      const quantizedArray = (quantization.dtype === 'uint8') ?\n          new Uint8Array(byteBuffer) :\n          new Uint16Array(byteBuffer);\n      if (dtype === 'float32') {\n        if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n          values = new Float32Array(quantizedArray.length);\n          for (let i = 0; i < quantizedArray.length; i++) {\n            const v = quantizedArray[i];\n            values[i] = v * quantization.scale + quantization.min;\n          }\n        } else if (quantization.dtype === 'float16') {\n          if (float16Decode === undefined) {\n            float16Decode = getFloat16Decoder();\n          }\n          values = float16Decode(quantizedArray as Uint16Array);\n        } else {\n          throw new Error(\n              `Unsupported quantization type ${quantization.dtype} ` +\n              `for weight type float32.`);\n        }\n      } else if (dtype === 'int32') {\n        if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {\n          throw new Error(\n              `Unsupported quantization type ${quantization.dtype} ` +\n              `for weight type int32.`);\n        }\n        values = new Int32Array(quantizedArray.length);\n        for (let i = 0; i < quantizedArray.length; i++) {\n          const v = quantizedArray[i];\n          values[i] = Math.round(v * quantization.scale + quantization.min);\n        }\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n      offset += size * quantizationSizeFactor;\n    } else if (dtype === 'string') {\n      const size = sizeFromShape(spec.shape);\n      values = [];\n      for (let i = 0; i < size; i++) {\n        const byteLength = new Uint32Array(\n            buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];\n        offset += NUM_BYTES_STRING_LENGTH;\n        const bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));\n        (values as Uint8Array[]).push(bytes);\n        offset += byteLength;\n      }\n    } else {\n      const dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];\n      const byteBuffer = buffer.slice(offset, offset + size * dtypeFactor);\n\n      if (dtype === 'float32') {\n        values = new Float32Array(byteBuffer);\n      } else if (dtype === 'int32') {\n        values = new Int32Array(byteBuffer);\n      } else if (dtype === 'bool') {\n        values = new Uint8Array(byteBuffer);\n      } else if (dtype === 'complex64') {\n        values = new Float32Array(byteBuffer);\n        const real = new Float32Array(values.length / 2);\n        const image = new Float32Array(values.length / 2);\n        for (let i = 0; i < real.length; i++) {\n          real[i] = values[i * 2];\n          image[i] = values[i * 2 + 1];\n        }\n        const realTensor = tensor(real, shape, 'float32');\n        const imageTensor = tensor(image, shape, 'float32');\n        out[name] = complex(realTensor, imageTensor);\n        realTensor.dispose();\n        imageTensor.dispose();\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n      offset += size * dtypeFactor;\n    }\n    if (dtype !== 'complex64') {\n      out[name] = tensor(values, shape, dtype);\n    }\n  }\n  return out;\n}\n\n/**\n * Concatenate TypedArrays into an ArrayBuffer.\n */\nexport function concatenateTypedArrays(xs: TypedArray[]): ArrayBuffer {\n  // TODO(adarob, cais): Support quantization.\n  if (xs === null) {\n    throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);\n  }\n\n  let totalByteLength = 0;\n\n  // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'\n  // can have a different byte length from that of the `TypedArray` itself,\n  // for example, when the `TypedArray` is created from an offset in an\n  // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match\n  // the `TypedArray` in byte length. If an element of `xs` does not show\n  // this property, a new `TypedArray` that satisfy this property will be\n  // constructed and pushed into `normalizedXs`.\n  const normalizedXs: TypedArray[] = [];\n  xs.forEach((x: TypedArray) => {\n    totalByteLength += x.byteLength;\n    // tslint:disable:no-any\n    normalizedXs.push(\n        x.byteLength === x.buffer.byteLength ? x :\n                                               new (x.constructor as any)(x));\n    if (!(x as any instanceof Float32Array || x as any instanceof Int32Array ||\n          x as any instanceof Uint8Array)) {\n      throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);\n    }\n    // tslint:enable:no-any\n  });\n\n  const y = new Uint8Array(totalByteLength);\n  let offset = 0;\n  normalizedXs.forEach((x: TypedArray) => {\n    y.set(new Uint8Array(x.buffer), offset);\n    offset += x.byteLength;\n  });\n\n  return y.buffer;\n}\n\n// Use Buffer on Node.js instead of Blob/atob/btoa\nconst useNodeBuffer = typeof Buffer !== 'undefined' &&\n    (typeof Blob === 'undefined' || typeof atob === 'undefined' ||\n     typeof btoa === 'undefined');\n\n/**\n * Calculate the byte length of a JavaScript string.\n *\n * Note that a JavaScript string can contain wide characters, therefore the\n * length of the string is not necessarily equal to the byte length.\n *\n * @param str Input string.\n * @returns Byte length.\n */\nexport function stringByteLength(str: string): number {\n  if (useNodeBuffer) {\n    return Buffer.byteLength(str);\n  }\n  return new Blob([str]).size;\n}\n\n/**\n * Encode an ArrayBuffer as a base64 encoded string.\n *\n * @param buffer `ArrayBuffer` to be converted.\n * @returns A string that base64-encodes `buffer`.\n */\nexport function arrayBufferToBase64String(buffer: ArrayBuffer): string {\n  if (useNodeBuffer) {\n    return Buffer.from(buffer).toString('base64');\n  }\n  const buf = new Uint8Array(buffer);\n  let s = '';\n  for (let i = 0, l = buf.length; i < l; i++) {\n    s += String.fromCharCode(buf[i]);\n  }\n  return btoa(s);\n}\n\n/**\n * Decode a base64 string as an ArrayBuffer.\n *\n * @param str Base64 string.\n * @returns Decoded `ArrayBuffer`.\n */\nexport function base64StringToArrayBuffer(str: string): ArrayBuffer {\n  if (useNodeBuffer) {\n    const buf = Buffer.from(str, 'base64');\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n  }\n  const s = atob(str);\n  const buffer = new Uint8Array(s.length);\n  for (let i = 0; i < s.length; ++i) {\n    buffer.set([s.charCodeAt(i)], i);\n  }\n  return buffer.buffer;\n}\n\n/**\n * Concatenate a number of ArrayBuffers into one.\n *\n * @param buffers A number of array buffers to concatenate.\n * @returns Result of concatenating `buffers` in order.\n */\nexport function concatenateArrayBuffers(buffers: ArrayBuffer[]): ArrayBuffer {\n  if (buffers.length === 1) {\n    return buffers[0];\n  }\n\n  let totalByteLength = 0;\n  buffers.forEach((buffer: ArrayBuffer) => {\n    totalByteLength += buffer.byteLength;\n  });\n\n  const temp = new Uint8Array(totalByteLength);\n  let offset = 0;\n  buffers.forEach((buffer: ArrayBuffer) => {\n    temp.set(new Uint8Array(buffer), offset);\n    offset += buffer.byteLength;\n  });\n  return temp.buffer;\n}\n\n/**\n * Get the basename of a path.\n *\n * Behaves in a way analogous to Linux's basename command.\n *\n * @param path\n */\nexport function basename(path: string): string {\n  const SEPARATOR = '/';\n  path = path.trim();\n  while (path.endsWith(SEPARATOR)) {\n    path = path.slice(0, path.length - 1);\n  }\n  const items = path.split(SEPARATOR);\n  return items[items.length - 1];\n}\n\n/**\n * Create `ModelJSON` from `ModelArtifacts`.\n *\n * @param artifacts Model artifacts, describing the model and its weights.\n * @param manifest Weight manifest, describing where the weights of the\n *     `ModelArtifacts` are stored, and some metadata about them.\n * @returns Object representing the `model.json` file describing the model\n *     artifacts and weights\n */\nexport function getModelJSONForModelArtifacts(\n    artifacts: ModelArtifacts, manifest: WeightsManifestConfig): ModelJSON {\n  const result: ModelJSON = {\n    modelTopology: artifacts.modelTopology,\n    format: artifacts.format,\n    generatedBy: artifacts.generatedBy,\n    convertedBy: artifacts.convertedBy,\n    weightsManifest: manifest\n  };\n  if (artifacts.signature != null) {\n    result.signature = artifacts.signature;\n  }\n  if (artifacts.userDefinedMetadata != null) {\n    result.userDefinedMetadata = artifacts.userDefinedMetadata;\n  }\n  if (artifacts.modelInitializer != null) {\n    result.modelInitializer = artifacts.modelInitializer;\n  }\n  if (artifacts.trainingConfig != null) {\n    result.trainingConfig = artifacts.trainingConfig;\n  }\n  return result;\n}\n\n/**\n * Create `ModelArtifacts` from a JSON file.\n *\n * @param modelJSON Object containing the parsed JSON of `model.json`\n * @param loadWeights Function that takes the JSON file's weights manifest,\n *     reads weights from the listed path(s), and returns a Promise of the\n *     weight manifest entries along with the weights data.\n * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.\n */\nexport async function getModelArtifactsForJSON(\n    modelJSON: ModelJSON,\n    loadWeights: (weightsManifest: WeightsManifestConfig) => Promise<[\n      /* weightSpecs */ WeightsManifestEntry[], /* weightData */ ArrayBuffer\n    ]>): Promise<ModelArtifacts> {\n  const modelArtifacts: ModelArtifacts = {\n    modelTopology: modelJSON.modelTopology,\n    format: modelJSON.format,\n    generatedBy: modelJSON.generatedBy,\n    convertedBy: modelJSON.convertedBy\n  };\n\n  if (modelJSON.trainingConfig != null) {\n    modelArtifacts.trainingConfig = modelJSON.trainingConfig;\n  }\n  if (modelJSON.weightsManifest != null) {\n    const [weightSpecs, weightData] =\n        await loadWeights(modelJSON.weightsManifest);\n    modelArtifacts.weightSpecs = weightSpecs;\n    modelArtifacts.weightData = weightData;\n  }\n  if (modelJSON.signature != null) {\n    modelArtifacts.signature = modelJSON.signature;\n  }\n  if (modelJSON.userDefinedMetadata != null) {\n    modelArtifacts.userDefinedMetadata = modelJSON.userDefinedMetadata;\n  }\n  if (modelJSON.modelInitializer != null) {\n    modelArtifacts.modelInitializer = modelJSON.modelInitializer;\n  }\n\n  return modelArtifacts;\n}\n\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\nexport function getModelArtifactsInfoForJSON(modelArtifacts: ModelArtifacts):\n    ModelArtifactsInfo {\n  if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n    throw new Error('Expected JSON model topology, received ArrayBuffer.');\n  }\n\n  return {\n    dateSaved: new Date(),\n    modelTopologyType: 'JSON',\n    modelTopologyBytes: modelArtifacts.modelTopology == null ?\n        0 :\n        stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),\n    weightSpecsBytes: modelArtifacts.weightSpecs == null ?\n        0 :\n        stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),\n    weightDataBytes: modelArtifacts.weightData == null ?\n        0 :\n        modelArtifacts.weightData.byteLength,\n  };\n}\n\n/**\n * Computes mantisa table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 2048 mantissa lookup values.\n */\nfunction computeFloat16MantisaTable(): Uint32Array {\n  const convertMantissa = (i: number): number => {\n    let m = i << 13;\n    let e = 0;\n\n    while ((m & 0x00800000) === 0) {\n      e -= 0x00800000;\n      m <<= 1;\n    }\n    m &= ~0x00800000;\n    e += 0x38800000;\n\n    return m | e;\n  };\n\n  const mantisaTable = new Uint32Array(2048);\n\n  mantisaTable[0] = 0;\n  for (let i = 1; i < 1024; i++) {\n    mantisaTable[i] = convertMantissa(i);\n  }\n  for (let i = 1024; i < 2048; i++) {\n    mantisaTable[i] = 0x38000000 + ((i - 1024) << 13);\n  }\n\n  return mantisaTable;\n}\n\n/**\n * Computes exponent table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 64 exponent lookup values.\n */\nfunction computeFloat16ExponentTable(): Uint32Array {\n  const exponentTable = new Uint32Array(64);\n\n  exponentTable[0] = 0;\n  exponentTable[31] = 0x47800000;\n  exponentTable[32] = 0x80000000;\n  exponentTable[63] = 0xc7800000;\n  for (let i = 1; i < 31; i++) {\n    exponentTable[i] = i << 23;\n  }\n  for (let i = 33; i < 63; i++) {\n    exponentTable[i] = 0x80000000 + ((i - 32) << 23);\n  }\n\n  return exponentTable;\n}\n\n/**\n * Computes offset table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 6d offset values.\n */\nfunction computeFloat16OffsetTable(): Uint32Array {\n  const offsetTable = new Uint32Array(64);\n\n  for (let i = 0; i < 64; i++) {\n    offsetTable[i] = 1024;\n  }\n  offsetTable[0] = offsetTable[32] = 0;\n\n  return offsetTable;\n}\n\n/**\n * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values\n * to a Float32Array.\n *\n * @returns Function (buffer: Uint16Array) => Float32Array which decodes\n *          the Uint16Array of Float16 bytes to a Float32Array.\n */\nexport function getFloat16Decoder(): (buffer: Uint16Array) => Float32Array {\n  // Algorithm is based off of\n  // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\n  // Cache lookup tables\n  const mantisaTable = computeFloat16MantisaTable();\n  const exponentTable = computeFloat16ExponentTable();\n  const offsetTable = computeFloat16OffsetTable();\n\n  return (quantizedArray: Uint16Array) => {\n    const buffer = new ArrayBuffer(4 * quantizedArray.length);\n    const bufferUint32View = new Uint32Array(buffer);\n    for (let index = 0; index < quantizedArray.length; index++) {\n      const float16Bits = quantizedArray[index];\n      const float32Bits =\n          mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] +\n          exponentTable[float16Bits >> 10];\n      bufferUint32View[index] = float32Bits;\n    }\n    return new Float32Array(buffer);\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}