{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nearestDivisor } from '../util';\nimport { PARALLELIZE_THRESHOLD } from './reduce_util';\nexport function segOpComputeOptimalWindowSize(inSize, numSegments) {\n  let done = false;\n  let res;\n\n  if (inSize <= PARALLELIZE_THRESHOLD) {\n    res = inSize;\n    done = true;\n  } else {\n    res = nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n  }\n\n  while (!done) {\n    if (res > numSegments || res === inSize) {\n      done = true;\n    } else {\n      res = nearestDivisor(inSize, res + 1);\n    }\n  }\n\n  return res;\n}\nexport function computeOutShape(aShape, axis, numSegments) {\n  const outShape = [];\n  const rank = aShape.length;\n\n  for (let dim = 0; dim < rank; dim++) {\n    if (dim !== axis) {\n      outShape.push(aShape[dim]);\n    } else {\n      outShape.push(numSegments);\n    }\n  }\n\n  return outShape;\n}\nexport function collectGatherOpShapeInfo(x, indices, axis, batchDims) {\n  const indicesRank = indices.shape.length;\n  const xRank = x.shape.length;\n\n  if (batchDims !== 0) {\n    if (batchDims < -indicesRank || batchDims > indicesRank) {\n      throw new Error(`Expect batchDims in the range of [-${indicesRank}, ${indicesRank}], but got ${batchDims}`);\n    }\n  }\n\n  if (batchDims < 0) {\n    batchDims += indicesRank;\n  }\n\n  if (batchDims > xRank) {\n    throw new Error(`batchDims (${batchDims}) must be less than rank(x) (\n    ${xRank}).`);\n  }\n\n  if (axis < batchDims) {\n    throw new Error(`batchDims (${batchDims}) must be less than or equal to axis (${axis}).`);\n  }\n\n  for (let i = 0; i < batchDims; ++i) {\n    if (x.shape[i] !== indices.shape[i]) {\n      throw new Error(`x.shape[${i}]: ${x.shape[i]} should be equal to indices.shape[${i}]: ${indices.shape[i]}.`);\n    }\n  }\n\n  const dimSize = x.shape[axis];\n  const outputShape = [];\n  let batchSize = 1;\n  let outerSize = 1;\n  let sliceSize = 1;\n\n  for (let i = 0; i < batchDims; ++i) {\n    outputShape.push(x.shape[i]);\n    batchSize *= x.shape[i];\n  }\n\n  for (let i = batchDims; i < axis; i++) {\n    outputShape.push(x.shape[i]);\n    outerSize *= x.shape[i];\n  }\n\n  for (let i = batchDims; i < indicesRank; i++) {\n    outputShape.push(indices.shape[i]);\n  }\n\n  for (let i = axis + 1; i < xRank; i++) {\n    outputShape.push(x.shape[i]);\n    sliceSize *= x.shape[i];\n  }\n\n  return {\n    batchSize,\n    sliceSize,\n    outerSize,\n    dimSize,\n    outputShape\n  };\n}","map":{"version":3,"sources":["../../../../../../tfjs-core/src/ops/segment_util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '../kernel_registry';\nimport {nearestDivisor} from '../util';\n\nimport {PARALLELIZE_THRESHOLD} from './reduce_util';\n\nexport interface SegOpInfo {\n  windowSize: number;\n  batchSize: number;\n  inSize: number;\n  numSegments: number;\n}\n\nexport function segOpComputeOptimalWindowSize(\n    inSize: number, numSegments: number): number {\n  let done = false;\n  let res;\n\n  if (inSize <= PARALLELIZE_THRESHOLD) {\n    res = inSize;\n    done = true;\n  } else {\n    res = nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n  }\n\n  while (!done) {\n    if (res > numSegments || res === inSize) {\n      done = true;\n    } else {\n      res = nearestDivisor(inSize, res + 1);\n    }\n  }\n  return res;\n}\n\nexport function computeOutShape(\n    aShape: number[], axis: number, numSegments: number): number[] {\n  const outShape = [];\n  const rank = aShape.length;\n  for (let dim = 0; dim < rank; dim++) {\n    if (dim !== axis) {\n      outShape.push(aShape[dim]);\n    } else {\n      outShape.push(numSegments);\n    }\n  }\n  return outShape;\n}\n\nexport interface GatherOpShapeInfo {\n  batchSize: number;\n  sliceSize: number;\n  outerSize: number;\n  dimSize: number;\n  outputShape: number[];\n}\n\nexport function collectGatherOpShapeInfo(\n    x: TensorInfo, indices: TensorInfo, axis: number,\n    batchDims: number): GatherOpShapeInfo {\n  const indicesRank = indices.shape.length;\n  const xRank = x.shape.length;\n\n  if (batchDims !== 0) {\n    if (batchDims < -indicesRank || batchDims > indicesRank) {\n      throw new Error(`Expect batchDims in the range of [-${indicesRank}, ${\n          indicesRank}], but got ${batchDims}`);\n    }\n  }\n\n  if (batchDims < 0) {\n    batchDims += indicesRank;\n  }\n\n  if (batchDims > xRank) {\n    throw new Error(`batchDims (${batchDims}) must be less than rank(x) (\n    ${xRank}).`);\n  }\n\n  if (axis < batchDims) {\n    throw new Error(`batchDims (${\n        batchDims}) must be less than or equal to axis (${axis}).`);\n  }\n\n  for (let i = 0; i < batchDims; ++i) {\n    if (x.shape[i] !== indices.shape[i]) {\n      throw new Error(\n          `x.shape[${i}]: ${x.shape[i]} should be equal to indices.shape[${\n              i}]: ${indices.shape[i]}.`);\n    }\n  }\n  const dimSize = x.shape[axis];\n\n  const outputShape: number[] = [];\n  let batchSize = 1;\n  let outerSize = 1;\n  let sliceSize = 1;\n\n  for (let i = 0; i < batchDims; ++i) {\n    outputShape.push(x.shape[i]);\n    batchSize *= x.shape[i];\n  }\n\n  for (let i = batchDims; i < axis; i++) {\n    outputShape.push(x.shape[i]);\n    outerSize *= x.shape[i];\n  }\n\n  for (let i = batchDims; i < indicesRank; i++) {\n    outputShape.push(indices.shape[i]);\n  }\n\n  for (let i = axis + 1; i < xRank; i++) {\n    outputShape.push(x.shape[i]);\n    sliceSize *= x.shape[i];\n  }\n\n  return {batchSize, sliceSize, outerSize, dimSize, outputShape};\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}