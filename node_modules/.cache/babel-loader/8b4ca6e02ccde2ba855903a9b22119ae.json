{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TensorBuffer, util } from '@tensorflow/tfjs-core';\nexport function uniqueImpl(values, axis, shape, dtype) {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0]; // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n\n  const newShape = [1, shape[0], 1];\n\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n\n  newShape[1] = shape[$axis];\n\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  } // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n\n\n  const uniqueElements = {}; // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n\n  const indices = new Int32Array(shape[$axis]); // Create a buffer so we can easily extract value at a given location.\n\n  const inputBuffer = new TensorBuffer(newShape, dtype, values); // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n\n  const uniqueIndices = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element;\n\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n\n      element = axisValues.join(',');\n    } // Dedup and update various indices.\n\n\n    if (uniqueElements[element] !== undefined) {\n      indices[i] = uniqueElements[element];\n    } else {\n      const uniqueIndex = Object.keys(uniqueElements).length;\n      uniqueElements[element] = uniqueIndex;\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  } // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n\n\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = Object.keys(uniqueElements).length;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  }); // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n  return {\n    outputValues: outputBuffer.values,\n    outputShape,\n    indices\n  };\n}","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/Unique_impl.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAiC,YAAjC,EAA2D,IAA3D,QAAsE,uBAAtE;AAEA,OAAM,SAAU,UAAV,CACF,MADE,EACqB,IADrB,EACmC,KADnC,EACoD,KADpD,EACmE;EAKvE;EACA,MAAM,KAAK,GAAG,IAAI,CAAC,cAAL,CAAoB,IAApB,EAA0B,KAA1B,EAAiC,CAAjC,CAAd,CANuE,CAQvE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,MAAM,QAAQ,GAAG,CAAC,CAAD,EAAI,KAAK,CAAC,CAAD,CAAT,EAAc,CAAd,CAAjB;;EACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAApB,EAA2B,CAAC,EAA5B,EAAgC;IAC9B,QAAQ,CAAC,CAAD,CAAR,IAAe,KAAK,CAAC,CAAD,CAApB;EACD;;EACD,QAAQ,CAAC,CAAD,CAAR,GAAc,KAAK,CAAC,KAAD,CAAnB;;EACA,KAAK,IAAI,CAAC,GAAG,KAAK,GAAG,CAArB,EAAwB,CAAC,GAAG,KAAK,CAAC,MAAlC,EAA0C,CAAC,EAA3C,EAA+C;IAC7C,QAAQ,CAAC,CAAD,CAAR,IAAe,KAAK,CAAC,CAAD,CAApB;EACD,CAtEsE,CAwEvE;EACA;;;EACA,MAAM,cAAc,GAA4B,EAAhD,CA1EuE,CA2EvE;EACA;;EACA,MAAM,OAAO,GAAG,IAAI,UAAJ,CAAe,KAAK,CAAC,KAAD,CAApB,CAAhB,CA7EuE,CA8EvE;;EACA,MAAM,WAAW,GAAG,IAAI,YAAJ,CAAiB,QAAjB,EAA2B,KAA3B,EAAkC,MAAlC,CAApB,CA/EuE,CAgFvE;EACA;;EACA,MAAM,aAAa,GAAa,EAAhC;EACA,MAAM,UAAU,GAAG,QAAQ,CAAC,CAAD,CAAR,KAAgB,CAAhB,IAAqB,QAAQ,CAAC,CAAD,CAAR,KAAgB,CAAxD;;EACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,KAAD,CAAzB,EAAkC,CAAC,EAAnC,EAAuC;IACrC;IACA,IAAI,OAAJ;;IACA,IAAI,UAAJ,EAAgB;MACd;MACA,OAAO,GAAG,MAAM,CAAC,CAAD,CAAN,CAAU,QAAV,EAAV;IACD,CAHD,MAGO;MACL,MAAM,UAAU,GAAG,EAAnB;;MACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,CAAD,CAA5B,EAAiC,CAAC,EAAlC,EAAsC;QACpC,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,CAAD,CAA5B,EAAiC,CAAC,EAAlC,EAAsC;UACpC,UAAU,CAAC,IAAX,CAAgB,WAAW,CAAC,GAAZ,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAAhB;QACD;MACF;;MACD,OAAO,GAAG,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAAV;IACD,CAdoC,CAgBrC;;;IACA,IAAI,cAAc,CAAC,OAAD,CAAd,KAA4B,SAAhC,EAA2C;MACzC,OAAO,CAAC,CAAD,CAAP,GAAa,cAAc,CAAC,OAAD,CAA3B;IACD,CAFD,MAEO;MACL,MAAM,WAAW,GAAG,MAAM,CAAC,IAAP,CAAY,cAAZ,EAA4B,MAAhD;MACA,cAAc,CAAC,OAAD,CAAd,GAA0B,WAA1B;MACA,OAAO,CAAC,CAAD,CAAP,GAAa,WAAb;MACA,aAAa,CAAC,IAAd,CAAmB,CAAnB;IACD;EACF,CA7GsE,CA+GvE;EACA;EACA;;;EACA,MAAM,cAAc,GAAG,QAAQ,CAAC,KAAT,EAAvB;EACA,cAAc,CAAC,CAAD,CAAd,GAAoB,MAAM,CAAC,IAAP,CAAY,cAAZ,EAA4B,MAAhD;EACA,MAAM,YAAY,GAAG,IAAI,YAAJ,CAAiB,cAAjB,EAAiC,KAAjC,CAArB;EACA,aAAa,CAAC,OAAd,CAAsB,CAAC,kBAAD,EAAqB,CAArB,KAA0B;IAC9C,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,CAAD,CAA5B,EAAiC,CAAC,EAAlC,EAAsC;MACpC,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,CAAD,CAA5B,EAAiC,CAAC,EAAlC,EAAsC;QACpC,YAAY,CAAC,GAAb,CAAiB,WAAW,CAAC,GAAZ,CAAgB,CAAhB,EAAmB,kBAAnB,EAAuC,CAAvC,CAAjB,EAA4D,CAA5D,EAA+D,CAA/D,EAAkE,CAAlE;MACD;IACF;EACF,CAND,EArHuE,CA6HvE;EACA;;EACA,MAAM,WAAW,GAAG,KAAK,CAAC,KAAN,EAApB;EACA,WAAW,CAAC,KAAD,CAAX,GAAqB,cAAc,CAAC,CAAD,CAAnC;EAEA,OAAO;IACL,YAAY,EAAE,YAAY,CAAC,MADtB;IAEL,WAFK;IAGL;EAHK,CAAP;AAKD","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements: {[key: string]: number} = {};\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    if (uniqueElements[element] !== undefined) {\n      indices[i] = uniqueElements[element];\n    } else {\n      const uniqueIndex = Object.keys(uniqueElements).length;\n      uniqueElements[element] = uniqueIndex;\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = Object.keys(uniqueElements).length;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}