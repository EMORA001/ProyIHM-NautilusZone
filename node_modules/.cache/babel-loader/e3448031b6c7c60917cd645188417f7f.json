{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Unpack } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nexport function unpack(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    value\n  } = inputs;\n  let {\n    axis\n  } = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const valueRank = value.shape.length;\n  const num = value.shape[axis];\n  const outShape = new Array(valueRank - 1);\n  let outIndex = 0;\n\n  for (let i = 0; i < valueRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = value.shape[i];\n    }\n  }\n\n  const begin = new Array(valueRank).fill(0);\n  const size = value.shape.slice();\n  size[axis] = 1;\n  const res = new Array(num);\n\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const tempRes = slice({\n      inputs: {\n        x: value\n      },\n      backend,\n      attrs: {\n        begin,\n        size\n      }\n    });\n    res[i] = reshape({\n      inputs: {\n        x: tempRes\n      },\n      backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n    backend.disposeIntermediateTensorInfo(tempRes);\n  }\n\n  return res;\n}\nexport const unpackConfig = {\n  kernelName: Unpack,\n  backendName: 'cpu',\n  kernelFunc: unpack\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/Unpack.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAA8C,MAA9C,QAAsF,uBAAtF;AAGA,SAAQ,OAAR,QAAsB,WAAtB;AACA,SAAQ,KAAR,QAAoB,SAApB;AAEA,OAAM,SAAU,MAAV,CACF,IADE,EACuE;EAE3E,MAAM;IAAC,MAAD;IAAS,OAAT;IAAkB;EAAlB,IAA2B,IAAjC;EACA,MAAM;IAAC;EAAD,IAAU,MAAhB;EACA,IAAI;IAAC;EAAD,IAAS,KAAb;;EAEA,IAAI,IAAI,GAAG,CAAX,EAAc;IACZ,IAAI,IAAI,KAAK,CAAC,KAAN,CAAY,MAApB;EACD;;EAED,MAAM,SAAS,GAAG,KAAK,CAAC,KAAN,CAAY,MAA9B;EAEA,MAAM,GAAG,GAAG,KAAK,CAAC,KAAN,CAAY,IAAZ,CAAZ;EACA,MAAM,QAAQ,GAAa,IAAI,KAAJ,CAAU,SAAS,GAAG,CAAtB,CAA3B;EACA,IAAI,QAAQ,GAAG,CAAf;;EACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAApB,EAA+B,CAAC,EAAhC,EAAoC;IAClC,IAAI,CAAC,KAAK,IAAV,EAAgB;MACd,QAAQ,CAAC,QAAQ,EAAT,CAAR,GAAuB,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAvB;IACD;EACF;;EAED,MAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,SAAV,EAAqB,IAArB,CAA0B,CAA1B,CAAd;EACA,MAAM,IAAI,GAAG,KAAK,CAAC,KAAN,CAAY,KAAZ,EAAb;EACA,IAAI,CAAC,IAAD,CAAJ,GAAa,CAAb;EACA,MAAM,GAAG,GAAG,IAAI,KAAJ,CAAU,GAAV,CAAZ;;EACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAAG,CAAC,MAAxB,EAAgC,CAAC,EAAjC,EAAqC;IACnC,KAAK,CAAC,IAAD,CAAL,GAAc,CAAd;IACA,MAAM,OAAO,GAAG,KAAK,CAAC;MAAC,MAAM,EAAE;QAAC,CAAC,EAAE;MAAJ,CAAT;MAAqB,OAArB;MAA8B,KAAK,EAAE;QAAC,KAAD;QAAQ;MAAR;IAArC,CAAD,CAArB;IACA,GAAG,CAAC,CAAD,CAAH,GAAS,OAAO,CAAC;MAAC,MAAM,EAAE;QAAC,CAAC,EAAE;MAAJ,CAAT;MAAuB,OAAvB;MAAgC,KAAK,EAAE;QAAC,KAAK,EAAE;MAAR;IAAvC,CAAD,CAAhB;IACA,OAAO,CAAC,6BAAR,CAAsC,OAAtC;EACD;;EAED,OAAO,GAAP;AACD;AAED,OAAO,MAAM,YAAY,GAAiB;EACxC,UAAU,EAAE,MAD4B;EAExC,WAAW,EAAE,KAF2B;EAGxC,UAAU,EAAE;AAH4B,CAAnC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args: {inputs: UnpackInputs, backend: MathBackendCPU, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const valueRank = value.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(valueRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < valueRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = value.shape[i];\n    }\n  }\n\n  const begin = new Array(valueRank).fill(0);\n  const size = value.shape.slice();\n  size[axis] = 1;\n  const res = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const tempRes = slice({inputs: {x: value}, backend, attrs: {begin, size}});\n    res[i] = reshape({inputs: {x: tempRes}, backend, attrs: {shape: outShape}});\n    backend.disposeIntermediateTensorInfo(tempRes);\n  }\n\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'cpu',\n  kernelFunc: unpack as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}