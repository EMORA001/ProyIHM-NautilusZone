{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Basic Layers.\n */\nimport { any, cast, mul, notEqual, reshape, serialization, tidy, transpose, util } from '@tensorflow/tfjs-core';\nimport { getActivation, serializeActivation } from '../activations';\nimport * as K from '../backend/tfjs_backend';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { assertPositiveInteger, mapActivationToFusedKernel } from '../utils/generic_utils';\nimport { arrayProd, range } from '../utils/math_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nexport class Dropout extends Layer {\n  constructor(args) {\n    super(args);\n    this.rate = Math.max(Math.min(args.rate, 1), 0); // So that the scalar doesn't get tidied up between executions.\n\n    this.noiseShape = args.noiseShape;\n    this.seed = args.seed;\n    this.supportsMasking = true;\n  }\n\n  getNoiseShape(input) {\n    if (this.noiseShape == null) {\n      return this.noiseShape;\n    }\n\n    const inputShape = input.shape;\n    const noiseShape = [];\n\n    for (let i = 0; i < this.noiseShape.length; ++i) {\n      noiseShape.push(this.noiseShape[i] == null ? inputShape[i] : this.noiseShape[i]);\n    }\n\n    return noiseShape;\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n\n      if (0 < this.rate && this.rate < 1) {\n        const training = kwargs['training'] == null ? false : kwargs['training'];\n        const noiseShape = this.getNoiseShape(input);\n        const output = K.inTrainPhase(() => K.dropout(input, this.rate, noiseShape, this.seed), () => input, training);\n        return output;\n      }\n\n      return inputs;\n    });\n  }\n\n  getConfig() {\n    const config = {\n      rate: this.rate,\n      noiseShape: this.noiseShape,\n      seed: this.seed\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  dispose() {\n    return super.dispose();\n  }\n\n}\n/** @nocollapse */\n\nDropout.className = 'Dropout';\nserialization.registerClass(Dropout);\nexport class SpatialDropout1D extends Dropout {\n  constructor(args) {\n    super(args);\n    this.inputSpec = [{\n      ndim: 3\n    }];\n  }\n\n  getNoiseShape(input) {\n    const inputShape = input.shape;\n    return [inputShape[0], 1, inputShape[2]];\n  }\n\n}\n/** @nocollapse */\n\nSpatialDropout1D.className = 'SpatialDropout1D';\nserialization.registerClass(SpatialDropout1D);\nexport class Dense extends Layer {\n  constructor(args) {\n    super(args); // Default activation: Linear (none).\n\n    this.activation = null;\n    this.useBias = true;\n    this.kernel = null;\n    this.bias = null;\n    this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n    this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n\n    if (args.batchInputShape == null && args.inputShape == null && args.inputDim != null) {\n      // This logic is copied from Layer's constructor, since we can't\n      // do exactly what the Python constructor does for Dense().\n      let batchSize = null;\n\n      if (args.batchSize != null) {\n        batchSize = args.batchSize;\n      }\n\n      this.batchInputShape = [batchSize, args.inputDim];\n    }\n\n    this.units = args.units;\n    assertPositiveInteger(this.units, 'units');\n    this.activation = getActivation(args.activation);\n\n    if (args.useBias != null) {\n      this.useBias = args.useBias;\n    }\n\n    this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.biasInitializer = getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.supportsMasking = true;\n    this.inputSpec = [{\n      minNDim: 2\n    }];\n  }\n\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const inputLastDim = inputShape[inputShape.length - 1];\n\n    if (this.kernel == null) {\n      this.kernel = this.addWeight('kernel', [inputLastDim, this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n\n      if (this.useBias) {\n        this.bias = this.addWeight('bias', [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n      }\n    }\n\n    this.inputSpec = [{\n      minNDim: 2,\n      axes: {\n        [-1]: inputLastDim\n      }\n    }];\n    this.built = true;\n  }\n\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n    outputShape[outputShape.length - 1] = this.units;\n    return outputShape;\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs); // Dense layer accepts only a single input.\n\n      const input = getExactlyOneTensor(inputs);\n      const fusedActivationName = mapActivationToFusedKernel(this.activation.getClassName());\n      let output;\n\n      if (fusedActivationName != null) {\n        output = K.dot(input, this.kernel.read(), fusedActivationName, this.bias ? this.bias.read() : null);\n      } else {\n        output = K.dot(input, this.kernel.read());\n\n        if (this.bias != null) {\n          output = K.biasAdd(output, this.bias.read());\n        }\n\n        if (this.activation != null) {\n          output = this.activation.apply(output);\n        }\n      }\n\n      return output;\n    });\n  }\n\n  getConfig() {\n    const config = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nDense.className = 'Dense';\nserialization.registerClass(Dense);\nexport class Flatten extends Layer {\n  constructor(args) {\n    args = args || {};\n    super(args);\n    this.inputSpec = [{\n      minNDim: 3\n    }];\n    this.dataFormat = args.dataFormat;\n  }\n\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n\n    for (const dim of inputShape.slice(1)) {\n      if (dim == null) {\n        throw new ValueError(`The shape of the input to \"Flatten\" is not fully defined ` + `(got ${inputShape.slice(1)}). Make sure to pass a complete ` + `\"input_shape\" or \"batch_input_shape\" argument to the first ` + `layer in your model.`);\n      }\n    }\n\n    return [inputShape[0], arrayProd(inputShape, 1)];\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      let input = getExactlyOneTensor(inputs);\n\n      if (this.dataFormat === 'channelsFirst' && input.rank > 1) {\n        const permutation = [0];\n\n        for (let i = 2; i < input.rank; ++i) {\n          permutation.push(i);\n        }\n\n        permutation.push(1);\n        input = transpose(input, permutation);\n      }\n\n      return K.batchFlatten(input);\n    });\n  }\n\n  getConfig() {\n    const config = {};\n\n    if (this.dataFormat != null) {\n      config['dataFormat'] = this.dataFormat;\n    }\n\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nFlatten.className = 'Flatten';\nserialization.registerClass(Flatten);\nexport class Activation extends Layer {\n  constructor(args) {\n    super(args);\n    this.supportsMasking = true;\n    this.activation = getActivation(args.activation);\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n      return this.activation.apply(input);\n    });\n  }\n\n  getConfig() {\n    const config = {\n      activation: serializeActivation(this.activation)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nActivation.className = 'Activation';\nserialization.registerClass(Activation);\nexport class RepeatVector extends Layer {\n  constructor(args) {\n    super(args);\n    this.n = args.n;\n    this.inputSpec = [{\n      ndim: 2\n    }];\n  }\n\n  computeOutputShape(inputShape) {\n    return [inputShape[0], this.n, inputShape[1]];\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      return K.repeat(inputs, this.n);\n    });\n  }\n\n  getConfig() {\n    const config = {\n      n: this.n\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nRepeatVector.className = 'RepeatVector';\nserialization.registerClass(RepeatVector);\nexport class Reshape extends Layer {\n  constructor(args) {\n    super(args);\n    this.targetShape = args.targetShape; // Make sure that all unknown dimensions are represented as `null`.\n\n    for (let i = 0; i < this.targetShape.length; ++i) {\n      if (this.isUnknown(this.targetShape[i])) {\n        this.targetShape[i] = null;\n      }\n    }\n  }\n\n  isUnknown(dim) {\n    return dim < 0 || dim == null;\n  }\n  /**\n   * Finds and replaces a missing dimension in output shape.\n   *\n   * This is a near direct port of the internal Numpy function\n   * `_fix_unknown_dimension` in `numpy/core/src/multiarray/shape.c`.\n   *\n   * @param inputShape: Original shape of array begin reshape.\n   * @param outputShape: Target shape of the array, with at most a single\n   * `null` or negative number, which indicates an underdetermined dimension\n   * that should be derived from `inputShape` and the known dimensions of\n   *   `outputShape`.\n   * @returns: The output shape with `null` replaced with its computed value.\n   * @throws: ValueError: If `inputShape` and `outputShape` do not match.\n   */\n\n\n  fixUnknownDimension(inputShape, outputShape) {\n    const errorMsg = 'Total size of new array must be unchanged.';\n    const finalShape = outputShape.slice();\n    let known = 1;\n    let unknown = null;\n\n    for (let i = 0; i < finalShape.length; ++i) {\n      const dim = finalShape[i];\n\n      if (this.isUnknown(dim)) {\n        if (unknown === null) {\n          unknown = i;\n        } else {\n          throw new ValueError('Can only specifiy one unknown dimension.');\n        }\n      } else {\n        known *= dim;\n      }\n    }\n\n    const originalSize = arrayProd(inputShape);\n\n    if (unknown !== null) {\n      if (known === 0 || originalSize % known !== 0) {\n        throw new ValueError(errorMsg);\n      }\n\n      finalShape[unknown] = originalSize / known;\n    } else if (originalSize !== known) {\n      throw new ValueError(errorMsg);\n    }\n\n    return finalShape;\n  }\n\n  computeOutputShape(inputShape) {\n    let anyUnknownDims = false;\n\n    for (let i = 0; i < inputShape.length; ++i) {\n      if (this.isUnknown(inputShape[i])) {\n        anyUnknownDims = true;\n        break;\n      }\n    }\n\n    if (anyUnknownDims) {\n      return inputShape.slice(0, 1).concat(this.targetShape);\n    } else {\n      return inputShape.slice(0, 1).concat(this.fixUnknownDimension(inputShape.slice(1), this.targetShape));\n    }\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n      const inputShape = input.shape;\n      const outputShape = inputShape.slice(0, 1).concat(this.fixUnknownDimension(inputShape.slice(1), this.targetShape));\n      return reshape(input, outputShape);\n    });\n  }\n\n  getConfig() {\n    const config = {\n      targetShape: this.targetShape\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nReshape.className = 'Reshape';\nserialization.registerClass(Reshape);\nexport class Permute extends Layer {\n  constructor(args) {\n    super(args);\n\n    if (args.dims == null) {\n      throw new Error('Required configuration field `dims` is missing during Permute ' + 'constructor call.');\n    }\n\n    if (!Array.isArray(args.dims)) {\n      throw new Error('Permute constructor requires `dims` to be an Array, but received ' + `${args.dims} instead.`);\n    } // Check the validity of the permutation indices.\n\n\n    const expectedSortedIndices = range(1, args.dims.length + 1);\n\n    if (!util.arraysEqual(args.dims.slice().sort(), expectedSortedIndices)) {\n      throw new Error('Invalid permutation `dims`: ' + JSON.stringify(args.dims) + ' `dims` must contain consecutive integers starting from 1.');\n    }\n\n    this.dims = args.dims;\n    this.dimsIncludingBatch = [0].concat(this.dims);\n    this.inputSpec = [new InputSpec({\n      ndim: this.dims.length + 1\n    })];\n  }\n\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n    this.dims.forEach((dim, i) => {\n      outputShape[i + 1] = inputShape[dim];\n    });\n    return outputShape;\n  }\n\n  call(inputs, kwargs) {\n    return transpose(getExactlyOneTensor(inputs), this.dimsIncludingBatch);\n  }\n\n  getConfig() {\n    const config = {\n      dims: this.dims\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nPermute.className = 'Permute';\nserialization.registerClass(Permute);\nexport class Masking extends Layer {\n  constructor(args) {\n    super(args == null ? {} : args);\n    this.supportsMasking = true;\n\n    if (args != null) {\n      this.maskValue = args.maskValue == null ? 0 : args.maskValue;\n    } else {\n      this.maskValue = 0;\n    }\n  }\n\n  computeOutputShape(inputShape) {\n    return inputShape;\n  }\n\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {\n      maskValue: this.maskValue\n    };\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  computeMask(inputs, mask) {\n    const input = getExactlyOneTensor(inputs);\n    const axis = -1;\n    return any(notEqual(input, this.maskValue), axis);\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n      const axis = -1;\n      const keepDims = true;\n      const booleanMask = any(notEqual(input, this.maskValue), axis, keepDims);\n      const output = mul(input, cast(booleanMask, input.dtype));\n      return output;\n    });\n  }\n\n}\n/** @nocollapse */\n\nMasking.className = 'Masking';\nserialization.registerClass(Masking);","map":{"version":3,"sources":["../../../../../../tfjs-layers/src/layers/core.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Basic Layers.\n */\n\nimport {any, cast, mul, notEqual, reshape, serialization, Tensor, tidy, transpose, util} from '@tensorflow/tfjs-core';\n\nimport {Activation as ActivationFn, getActivation, serializeActivation} from '../activations';\nimport * as K from '../backend/tfjs_backend';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {DisposeResult, InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {ActivationIdentifier} from '../keras_format/activation_config';\nimport {DataFormat, Shape} from '../keras_format/common';\nimport {LayerConfig} from '../keras_format/topology_config';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport {assertPositiveInteger, mapActivationToFusedKernel} from '../utils/generic_utils';\nimport {arrayProd, range} from '../utils/math_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\nexport declare interface DropoutLayerArgs extends LayerArgs {\n  /** Float between 0 and 1. Fraction of the input units to drop. */\n  rate: number;\n\n  /**\n   * Integer array representing the shape of the binary dropout mask that will\n   * be multiplied with the input.\n   *\n   * For instance, if your inputs have shape `(batchSize, timesteps, features)`\n   * and you want the dropout mask to be the same for all timesteps, you can use\n   * `noise_shape=(batch_size, 1, features)`.\n   */\n  noiseShape?: number[];\n\n  /** An integer to use as random seed. */\n  seed?: number;\n}\n\nexport class Dropout extends Layer {\n  /** @nocollapse */\n  static className = 'Dropout';\n  private readonly rate: number;\n  private readonly noiseShape: number[];\n  private readonly seed: number;\n\n  constructor(args: DropoutLayerArgs) {\n    super(args);\n    this.rate = Math.max(Math.min(args.rate, 1), 0);\n    // So that the scalar doesn't get tidied up between executions.\n    this.noiseShape = args.noiseShape;\n    this.seed = args.seed;\n    this.supportsMasking = true;\n  }\n\n  protected getNoiseShape(input: Tensor): Shape {\n    if (this.noiseShape == null) {\n      return this.noiseShape;\n    }\n    const inputShape = input.shape;\n    const noiseShape: Shape = [];\n    for (let i = 0; i < this.noiseShape.length; ++i) {\n      noiseShape.push(\n          this.noiseShape[i] == null ? inputShape[i] : this.noiseShape[i]);\n    }\n    return noiseShape;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n      if (0 < this.rate && this.rate < 1) {\n        const training =\n            kwargs['training'] == null ? false : kwargs['training'];\n        const noiseShape = this.getNoiseShape(input);\n        const output = K.inTrainPhase(\n            () => K.dropout(input, this.rate, noiseShape, this.seed),\n            () => input, training);\n        return output;\n      }\n      return inputs;\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      rate: this.rate,\n      noiseShape: this.noiseShape,\n      seed: this.seed,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  dispose(): DisposeResult {\n    return super.dispose();\n  }\n}\nserialization.registerClass(Dropout);\n\nexport declare interface DenseLayerArgs extends LayerArgs {\n  /** Positive integer, dimensionality of the output space. */\n  units: number;\n  /**\n   * Activation function to use.\n   *\n   * If unspecified, no activation is applied.\n   */\n  activation?: ActivationIdentifier;\n  /** Whether to apply a bias. */\n  useBias?: boolean;\n  /**\n   * Initializer for the dense kernel weights matrix.\n   */\n  kernelInitializer?: InitializerIdentifier|Initializer;\n  /**\n   * Initializer for the bias vector.\n   */\n  biasInitializer?: InitializerIdentifier|Initializer;\n  /**\n   * If specified, defines inputShape as `[inputDim]`.\n   */\n  inputDim?: number;\n\n  /**\n   * Constraint for the kernel weights.\n   */\n  kernelConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint for the bias vector.\n   */\n  biasConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Regularizer function applied to the dense kernel weights matrix.\n   */\n  kernelRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the bias vector.\n   */\n  biasRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the activation.\n   */\n  activityRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\nexport interface SpatialDropout1DLayerConfig extends LayerConfig {\n  /** Float between 0 and 1. Fraction of the input units to drop. */\n  rate: number;\n\n  /** An integer to use as random seed. */\n  seed?: number;\n}\n\nexport class SpatialDropout1D extends Dropout {\n  /** @nocollapse */\n  static className = 'SpatialDropout1D';\n\n  constructor(args: SpatialDropout1DLayerConfig) {\n    super(args);\n    this.inputSpec = [{ndim: 3}];\n  }\n\n  protected getNoiseShape(input: Tensor): Shape {\n    const inputShape = input.shape;\n    return [inputShape[0], 1, inputShape[2]];\n  }\n}\nserialization.registerClass(SpatialDropout1D);\n\nexport class Dense extends Layer {\n  /** @nocollapse */\n  static className = 'Dense';\n  private units: number;\n  // Default activation: Linear (none).\n  private activation: ActivationFn = null;\n  private useBias = true;\n  private kernelInitializer: Initializer;\n  private biasInitializer: Initializer;\n  private kernel: LayerVariable = null;\n  private bias: LayerVariable = null;\n\n  readonly DEFAULT_KERNEL_INITIALIZER: InitializerIdentifier = 'glorotNormal';\n  readonly DEFAULT_BIAS_INITIALIZER: InitializerIdentifier = 'zeros';\n  private readonly kernelConstraint?: Constraint;\n  private readonly biasConstraint?: Constraint;\n  private readonly kernelRegularizer?: Regularizer;\n  private readonly biasRegularizer?: Regularizer;\n\n  constructor(args: DenseLayerArgs) {\n    super(args);\n    if (args.batchInputShape == null && args.inputShape == null &&\n        args.inputDim != null) {\n      // This logic is copied from Layer's constructor, since we can't\n      // do exactly what the Python constructor does for Dense().\n      let batchSize: number = null;\n      if (args.batchSize != null) {\n        batchSize = args.batchSize;\n      }\n      this.batchInputShape = [batchSize, args.inputDim];\n    }\n\n    this.units = args.units;\n    assertPositiveInteger(this.units, 'units');\n    this.activation = getActivation(args.activation);\n    if (args.useBias != null) {\n      this.useBias = args.useBias;\n    }\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.supportsMasking = true;\n\n    this.inputSpec = [{minNDim: 2}];\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const inputLastDim = inputShape[inputShape.length - 1];\n    if (this.kernel == null) {\n      this.kernel = this.addWeight(\n          'kernel', [inputLastDim, this.units], null, this.kernelInitializer,\n          this.kernelRegularizer, true, this.kernelConstraint);\n      if (this.useBias) {\n        this.bias = this.addWeight(\n            'bias', [this.units], null, this.biasInitializer,\n            this.biasRegularizer, true, this.biasConstraint);\n      }\n    }\n\n    this.inputSpec = [{minNDim: 2, axes: {[-1]: inputLastDim}}];\n    this.built = true;\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n    outputShape[outputShape.length - 1] = this.units;\n    return outputShape;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      // Dense layer accepts only a single input.\n      const input = getExactlyOneTensor(inputs);\n      const fusedActivationName =\n          mapActivationToFusedKernel(this.activation.getClassName());\n      let output: Tensor;\n\n      if (fusedActivationName != null) {\n        output = K.dot(\n            input, this.kernel.read(), fusedActivationName,\n            this.bias ? this.bias.read() : null);\n      } else {\n        output = K.dot(input, this.kernel.read());\n        if (this.bias != null) {\n          output = K.biasAdd(output, this.bias.read());\n        }\n        if (this.activation != null) {\n          output = this.activation.apply(output);\n        }\n      }\n\n      return output;\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      units: this.units,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint),\n      biasConstraint: serializeConstraint(this.biasConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Dense);\n\nexport declare interface FlattenLayerArgs extends LayerArgs {\n  /** Image data format: channeLast (default) or channelFirst. */\n  dataFormat?: DataFormat;\n}\n\nexport class Flatten extends Layer {\n  private dataFormat: DataFormat;\n\n  /** @nocollapse */\n  static className = 'Flatten';\n  constructor(args?: FlattenLayerArgs) {\n    args = args || {};\n    super(args);\n    this.inputSpec = [{minNDim: 3}];\n    this.dataFormat = args.dataFormat;\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    for (const dim of inputShape.slice(1)) {\n      if (dim == null) {\n        throw new ValueError(\n            `The shape of the input to \"Flatten\" is not fully defined ` +\n            `(got ${inputShape.slice(1)}). Make sure to pass a complete ` +\n            `\"input_shape\" or \"batch_input_shape\" argument to the first ` +\n            `layer in your model.`);\n      }\n    }\n    return [inputShape[0], arrayProd(inputShape, 1)];\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n\n      let input = getExactlyOneTensor(inputs);\n      if (this.dataFormat === 'channelsFirst' && input.rank > 1) {\n        const permutation: number[] = [0];\n        for (let i = 2; i < input.rank; ++i) {\n          permutation.push(i);\n        }\n        permutation.push(1);\n        input = transpose(input, permutation);\n      }\n\n      return K.batchFlatten(input);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {};\n    if (this.dataFormat != null) {\n      config['dataFormat'] = this.dataFormat;\n    }\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Flatten);\n\nexport declare interface ActivationLayerArgs extends LayerArgs {\n  /**\n   * Name of the activation function to use.\n   */\n  activation: ActivationIdentifier;\n}\n\nexport class Activation extends Layer {\n  /** @nocollapse */\n  static className = 'Activation';\n  activation: ActivationFn;\n\n  constructor(args: ActivationLayerArgs) {\n    super(args);\n    this.supportsMasking = true;\n    this.activation = getActivation(args.activation);\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n      return this.activation.apply(input);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {activation: serializeActivation(this.activation)};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Activation);\n\nexport declare interface ReshapeLayerArgs extends LayerArgs {\n  /** The target shape. Does not include the batch axis. */\n  targetShape: Shape;\n}\n\nexport declare interface RepeatVectorLayerArgs extends LayerArgs {\n  /**\n   * The integer number of times to repeat the input.\n   */\n  n: number;\n}\n\nexport class RepeatVector extends Layer {\n  /** @nocollapse */\n  static className = 'RepeatVector';\n  readonly n: number;\n\n  constructor(args: RepeatVectorLayerArgs) {\n    super(args);\n    this.n = args.n;\n    this.inputSpec = [{ndim: 2}];\n  }\n\n  computeOutputShape(inputShape: Shape): Shape {\n    return [inputShape[0], this.n, inputShape[1]];\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      return K.repeat(inputs, this.n);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      n: this.n,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(RepeatVector);\n\nexport class Reshape extends Layer {\n  /** @nocollapse */\n  static className = 'Reshape';\n  private targetShape: Shape;\n\n  constructor(args: ReshapeLayerArgs) {\n    super(args);\n    this.targetShape = args.targetShape;\n\n    // Make sure that all unknown dimensions are represented as `null`.\n    for (let i = 0; i < this.targetShape.length; ++i) {\n      if (this.isUnknown(this.targetShape[i])) {\n        this.targetShape[i] = null;\n      }\n    }\n  }\n\n  private isUnknown(dim: number): boolean {\n    return dim < 0 || dim == null;\n  }\n\n  /**\n   * Finds and replaces a missing dimension in output shape.\n   *\n   * This is a near direct port of the internal Numpy function\n   * `_fix_unknown_dimension` in `numpy/core/src/multiarray/shape.c`.\n   *\n   * @param inputShape: Original shape of array begin reshape.\n   * @param outputShape: Target shape of the array, with at most a single\n   * `null` or negative number, which indicates an underdetermined dimension\n   * that should be derived from `inputShape` and the known dimensions of\n   *   `outputShape`.\n   * @returns: The output shape with `null` replaced with its computed value.\n   * @throws: ValueError: If `inputShape` and `outputShape` do not match.\n   */\n  private fixUnknownDimension(inputShape: Shape, outputShape: Shape): Shape {\n    const errorMsg = 'Total size of new array must be unchanged.';\n    const finalShape = outputShape.slice();\n    let known = 1;\n    let unknown = null;\n    for (let i = 0; i < finalShape.length; ++i) {\n      const dim = finalShape[i];\n      if (this.isUnknown(dim)) {\n        if (unknown === null) {\n          unknown = i;\n        } else {\n          throw new ValueError('Can only specifiy one unknown dimension.');\n        }\n      } else {\n        known *= dim;\n      }\n    }\n\n    const originalSize = arrayProd(inputShape);\n    if (unknown !== null) {\n      if (known === 0 || originalSize % known !== 0) {\n        throw new ValueError(errorMsg);\n      }\n      finalShape[unknown] = originalSize / known;\n    } else if (originalSize !== known) {\n      throw new ValueError(errorMsg);\n    }\n\n    return finalShape;\n  }\n\n  computeOutputShape(inputShape: Shape): Shape {\n    let anyUnknownDims = false;\n    for (let i = 0; i < inputShape.length; ++i) {\n      if (this.isUnknown(inputShape[i])) {\n        anyUnknownDims = true;\n        break;\n      }\n    }\n\n    if (anyUnknownDims) {\n      return inputShape.slice(0, 1).concat(this.targetShape);\n    } else {\n      return inputShape.slice(0, 1).concat(\n          this.fixUnknownDimension(inputShape.slice(1), this.targetShape));\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n      const inputShape = input.shape;\n      const outputShape = inputShape.slice(0, 1).concat(\n          this.fixUnknownDimension(inputShape.slice(1), this.targetShape));\n      return reshape(input, outputShape);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      targetShape: this.targetShape,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Reshape);\n\nexport declare interface PermuteLayerArgs extends LayerArgs {\n  /**\n   * Array of integers. Permutation pattern. Does not include the\n   * sample (batch) dimension. Index starts at 1.\n   * For instance, `[2, 1]` permutes the first and second dimensions\n   * of the input.\n   */\n  dims: number[];\n}\n\nexport class Permute extends Layer {\n  /** @nocollapse */\n  static className = 'Permute';\n  readonly dims: number[];\n  private readonly dimsIncludingBatch: number[];\n\n  constructor(args: PermuteLayerArgs) {\n    super(args);\n    if (args.dims == null) {\n      throw new Error(\n          'Required configuration field `dims` is missing during Permute ' +\n          'constructor call.');\n    }\n    if (!Array.isArray(args.dims)) {\n      throw new Error(\n          'Permute constructor requires `dims` to be an Array, but received ' +\n          `${args.dims} instead.`);\n    }\n\n    // Check the validity of the permutation indices.\n    const expectedSortedIndices = range(1, args.dims.length + 1);\n    if (!util.arraysEqual(args.dims.slice().sort(), expectedSortedIndices)) {\n      throw new Error(\n          'Invalid permutation `dims`: ' + JSON.stringify(args.dims) +\n          ' `dims` must contain consecutive integers starting from 1.');\n    }\n\n    this.dims = args.dims;\n    this.dimsIncludingBatch = [0].concat(this.dims);\n    this.inputSpec = [new InputSpec({ndim: this.dims.length + 1})];\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n    this.dims.forEach((dim: number, i: number) => {\n      outputShape[i + 1] = (inputShape as Shape)[dim];\n    });\n    return outputShape;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return transpose(getExactlyOneTensor(inputs), this.dimsIncludingBatch);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      dims: this.dims,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Permute);\n\nexport declare interface MaskingArgs extends LayerArgs {\n  /**\n   * Masking Value. Defaults to `0.0`.\n   */\n  maskValue?: number;\n}\n\nexport class Masking extends Layer {\n  /** @nocollapse */\n  static className = 'Masking';\n  maskValue: number;\n\n  constructor(args?: MaskingArgs) {\n    super(args == null ? {} : args);\n    this.supportsMasking = true;\n    if (args != null) {\n      this.maskValue = args.maskValue == null ? 0 : args.maskValue;\n    } else {\n      this.maskValue = 0;\n    }\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {maskValue: this.maskValue};\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  computeMask(inputs: Tensor|Tensor[], mask?: Tensor|Tensor[]): Tensor {\n    const input = getExactlyOneTensor(inputs);\n    const axis = -1;\n    return any(notEqual(input, this.maskValue), axis);\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n      const axis = -1;\n      const keepDims = true;\n      const booleanMask = any(notEqual(input, this.maskValue), axis, keepDims);\n      const output = mul(input, cast(booleanMask, input.dtype));\n      return output;\n    });\n  }\n}\nserialization.registerClass(Masking);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}