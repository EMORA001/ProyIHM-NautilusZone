{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Pow } from '../kernel_names';\nimport * as broadcast_util from '../ops/broadcast_util';\nimport { cast } from '../ops/cast';\nimport { greater } from '../ops/greater';\nimport { log } from '../ops/log';\nimport { mul } from '../ops/mul';\nimport { pow } from '../ops/pow';\nimport { reshape } from '../ops/reshape';\nimport { scalar } from '../ops/scalar';\nimport { sub } from '../ops/sub';\nimport { sum } from '../ops/sum';\nimport { where } from '../ops/where';\nimport { zerosLike } from '../ops/zeros_like';\nexport const powGradConfig = {\n  kernelName: Pow,\n  inputsToSave: ['a', 'b'],\n  outputsToSave: [true],\n  gradFunc: (dy, saved) => {\n    const [a, b, y] = saved;\n    const base = a;\n    const exp = b;\n    const outShape = broadcast_util.assertAndGetBroadcastShape(base.shape, exp.shape);\n\n    const derBase = () => {\n      const expFloat = cast(exp, 'float32');\n      let res = mul(dy, mul(expFloat, pow(base, sub(expFloat, scalar(1)))));\n      const reduceAxes = broadcast_util.getReductionAxes(base.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n      }\n\n      return reshape(res, base.shape);\n    };\n\n    const derExp = () => {\n      const condition = greater(base, 0);\n      const logBase = where(condition, log(base), zerosLike(base));\n      let res = mul(dy, mul(y, logBase));\n      const reduceAxes = broadcast_util.getReductionAxes(exp.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n      }\n\n      return reshape(res, exp.shape);\n    };\n\n    return {\n      a: derBase,\n      b: derExp\n    };\n  }\n};","map":{"version":3,"sources":["../../../../../../tfjs-core/src/gradients/Pow_grad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,GAAR,QAAkB,iBAAlB;AAEA,OAAO,KAAK,cAAZ,MAAgC,uBAAhC;AACA,SAAQ,IAAR,QAAmB,aAAnB;AACA,SAAQ,OAAR,QAAsB,gBAAtB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,OAAR,QAAsB,gBAAtB;AACA,SAAQ,MAAR,QAAqB,eAArB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,GAAR,QAAkB,YAAlB;AACA,SAAQ,KAAR,QAAoB,cAApB;AACA,SAAQ,SAAR,QAAwB,mBAAxB;AAGA,OAAO,MAAM,aAAa,GAAe;EACvC,UAAU,EAAE,GAD2B;EAEvC,YAAY,EAAE,CAAC,GAAD,EAAM,GAAN,CAFyB;EAGvC,aAAa,EAAE,CAAC,IAAD,CAHwB;EAIvC,QAAQ,EAAE,CAAC,EAAD,EAAa,KAAb,KAAgC;IACxC,MAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,IAAY,KAAlB;IACA,MAAM,IAAI,GAAG,CAAb;IACA,MAAM,GAAG,GAAG,CAAZ;IACA,MAAM,QAAQ,GACV,cAAc,CAAC,0BAAf,CAA0C,IAAI,CAAC,KAA/C,EAAsD,GAAG,CAAC,KAA1D,CADJ;;IAGA,MAAM,OAAO,GAAG,MAAK;MACnB,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAD,EAAM,SAAN,CAArB;MACA,IAAI,GAAG,GAAG,GAAG,CAAC,EAAD,EAAK,GAAG,CAAC,QAAD,EAAW,GAAG,CAAC,IAAD,EAAO,GAAG,CAAC,QAAD,EAAW,MAAM,CAAC,CAAD,CAAjB,CAAV,CAAd,CAAR,CAAb;MACA,MAAM,UAAU,GAAG,cAAc,CAAC,gBAAf,CAAgC,IAAI,CAAC,KAArC,EAA4C,QAA5C,CAAnB;;MACA,IAAI,UAAU,CAAC,MAAX,GAAoB,CAAxB,EAA2B;QACzB,GAAG,GAAG,GAAG,CAAC,GAAD,EAAM,UAAN,CAAT;MACD;;MACD,OAAO,OAAO,CAAC,GAAD,EAAM,IAAI,CAAC,KAAX,CAAd;IACD,CARD;;IASA,MAAM,MAAM,GAAG,MAAK;MAClB,MAAM,SAAS,GAAG,OAAO,CAAC,IAAD,EAAO,CAAP,CAAzB;MACA,MAAM,OAAO,GAAG,KAAK,CAAC,SAAD,EAAY,GAAG,CAAC,IAAD,CAAf,EAAuB,SAAS,CAAC,IAAD,CAAhC,CAArB;MACA,IAAI,GAAG,GAAG,GAAG,CAAC,EAAD,EAAK,GAAG,CAAC,CAAD,EAAI,OAAJ,CAAR,CAAb;MACA,MAAM,UAAU,GAAG,cAAc,CAAC,gBAAf,CAAgC,GAAG,CAAC,KAApC,EAA2C,QAA3C,CAAnB;;MACA,IAAI,UAAU,CAAC,MAAX,GAAoB,CAAxB,EAA2B;QACzB,GAAG,GAAG,GAAG,CAAC,GAAD,EAAM,UAAN,CAAT;MACD;;MACD,OAAO,OAAO,CAAC,GAAD,EAAM,GAAG,CAAC,KAAV,CAAd;IACD,CATD;;IAUA,OAAO;MAAC,CAAC,EAAE,OAAJ;MAAa,CAAC,EAAE;IAAhB,CAAP;EACD;AA/BsC,CAAlC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Pow} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport * as broadcast_util from '../ops/broadcast_util';\nimport {cast} from '../ops/cast';\nimport {greater} from '../ops/greater';\nimport {log} from '../ops/log';\nimport {mul} from '../ops/mul';\nimport {pow} from '../ops/pow';\nimport {reshape} from '../ops/reshape';\nimport {scalar} from '../ops/scalar';\nimport {sub} from '../ops/sub';\nimport {sum} from '../ops/sum';\nimport {where} from '../ops/where';\nimport {zerosLike} from '../ops/zeros_like';\nimport {Tensor} from '../tensor';\n\nexport const powGradConfig: GradConfig = {\n  kernelName: Pow,\n  inputsToSave: ['a', 'b'],\n  outputsToSave: [true],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [a, b, y] = saved;\n    const base = a;\n    const exp = b;\n    const outShape =\n        broadcast_util.assertAndGetBroadcastShape(base.shape, exp.shape);\n\n    const derBase = () => {\n      const expFloat = cast(exp, 'float32');\n      let res = mul(dy, mul(expFloat, pow(base, sub(expFloat, scalar(1)))));\n      const reduceAxes = broadcast_util.getReductionAxes(base.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n      }\n      return reshape(res, base.shape);\n    };\n    const derExp = () => {\n      const condition = greater(base, 0);\n      const logBase = where(condition, log(base), zerosLike(base));\n      let res = mul(dy, mul(y, logBase));\n      const reduceAxes = broadcast_util.getReductionAxes(exp.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n      }\n      return reshape(res, exp.shape);\n    };\n    return {a: derBase, b: derExp};\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}