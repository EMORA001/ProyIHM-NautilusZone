{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: utils/generic_utils.py */\nimport { util } from '@tensorflow/tfjs-core';\nimport { AssertionError, ValueError } from '../errors'; // tslint:enable\n\n/**\n * If `value` is an Array, equivalent to Python's `value * numValues`.\n * If `value` is not an Array, equivalent to Python's `[value] * numValues`\n */\n// tslint:disable-next-line:no-any\n\nexport function pyListRepeat(value, numValues) {\n  if (Array.isArray(value)) {\n    // tslint:disable-next-line:no-any\n    let newArray = [];\n\n    for (let i = 0; i < numValues; i++) {\n      newArray = newArray.concat(value);\n    }\n\n    return newArray;\n  } else {\n    const newArray = new Array(numValues);\n    newArray.fill(value);\n    return newArray;\n  }\n}\nexport function assert(val, message) {\n  if (!val) {\n    throw new AssertionError(message);\n  }\n}\n/**\n * Count the number of elements of the `array` that are equal to `reference`.\n */\n\nexport function count(array, refernce) {\n  let counter = 0;\n\n  for (const item of array) {\n    if (item === refernce) {\n      counter++;\n    }\n  }\n\n  return counter;\n}\n/**\n * If an array is of length 1, just return the first element. Otherwise, return\n * the full array.\n * @param tensors\n */\n\nexport function singletonOrArray(xs) {\n  if (xs.length === 1) {\n    return xs[0];\n  }\n\n  return xs;\n}\n/**\n * Normalizes a list/tensor into a list.\n *\n * If a tensor is passed, we return\n * a list of size 1 containing the tensor.\n *\n * @param x target object to be normalized.\n */\n// tslint:disable-next-line:no-any\n\nexport function toList(x) {\n  if (Array.isArray(x)) {\n    return x;\n  }\n\n  return [x];\n}\n/**\n * Generate a UID for a list\n */\n// tslint:disable-next-line:no-any\n\nexport function objectListUid(objs) {\n  const objectList = toList(objs);\n  let retVal = '';\n\n  for (const obj of objectList) {\n    if (obj.id == null) {\n      throw new ValueError(`Object ${obj} passed to objectListUid without an id`);\n    }\n\n    if (retVal !== '') {\n      retVal = retVal + ', ';\n    }\n\n    retVal = `${retVal}${Math.abs(obj.id)}`;\n  }\n\n  return retVal;\n}\n/**\n * Converts string to snake-case.\n * @param name\n */\n\nexport function toSnakeCase(name) {\n  const intermediate = name.replace(/(.)([A-Z][a-z0-9]+)/g, '$1_$2');\n  const insecure = intermediate.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n  /*\n   If the class is private the name starts with \"_\" which is not secure\n   for creating scopes. We prefix the name with \"private\" in this case.\n   */\n\n  if (insecure[0] !== '_') {\n    return insecure;\n  }\n\n  return 'private' + insecure;\n}\nexport function toCamelCase(identifier) {\n  // quick return for empty string or single character strings\n  if (identifier.length <= 1) {\n    return identifier;\n  } // Check for the underscore indicating snake_case\n\n\n  if (identifier.indexOf('_') === -1) {\n    return identifier;\n  }\n\n  return identifier.replace(/[_]+(\\w|$)/g, (m, p1) => p1.toUpperCase());\n} // tslint:disable-next-line:no-any\n\nlet _GLOBAL_CUSTOM_OBJECTS = {};\nexport function serializeKerasObject(instance) {\n  if (instance === null || instance === undefined) {\n    return null;\n  }\n\n  const dict = {};\n  dict['className'] = instance.getClassName();\n  dict['config'] = instance.getConfig();\n  return dict;\n}\n/**\n * Replace ndarray-style scalar objects in serialization objects with numbers.\n *\n * Background: In some versions of tf.keras, certain scalar values in the HDF5\n * model save file can be serialized as: `{'type': 'ndarray', 'value': num}`,\n * where in `num` is a plain number. This method converts such serialization\n * to a `number`.\n *\n * @param config The keras-format serialization object to be processed\n *   (in place).\n */\n\nfunction convertNDArrayScalarsInConfig(config) {\n  if (config == null || typeof config !== 'object') {\n    return;\n  } else if (Array.isArray(config)) {\n    config.forEach(configItem => convertNDArrayScalarsInConfig(configItem));\n  } else {\n    const fields = Object.keys(config);\n\n    for (const field of fields) {\n      const value = config[field];\n\n      if (value != null && typeof value === 'object') {\n        if (!Array.isArray(value) && value['type'] === 'ndarray' && typeof value['value'] === 'number') {\n          config[field] = value['value'];\n        } else {\n          convertNDArrayScalarsInConfig(value);\n        }\n      }\n    }\n  }\n}\n/**\n * Deserialize a saved Keras Object\n * @param identifier either a string ID or a saved Keras dictionary\n * @param moduleObjects a list of Python class names to object constructors\n * @param customObjects a list of Python class names to object constructors\n * @param printableModuleName debug text for the object being reconstituted\n * @param fastWeightInit Optional flag to use fast weight initialization\n *   during deserialization. This is applicable to cases in which\n *   the initialization will be immediately overwritten by loaded weight\n *   values. Default: `false`.\n * @returns a TensorFlow.js Layers object\n */\n// tslint:disable:no-any\n\n\nexport function deserializeKerasObject(identifier) {\n  let moduleObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let customObjects = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let printableModuleName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'object';\n  let fastWeightInit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  // tslint:enable\n  if (typeof identifier === 'string') {\n    const functionName = identifier;\n    let fn;\n\n    if (functionName in customObjects) {\n      fn = customObjects[functionName];\n    } else if (functionName in _GLOBAL_CUSTOM_OBJECTS) {\n      fn = _GLOBAL_CUSTOM_OBJECTS[functionName];\n    } else {\n      fn = moduleObjects[functionName];\n\n      if (fn == null) {\n        throw new ValueError(`Unknown ${printableModuleName}: ${identifier}. ` + `This may be due to one of the following reasons:\\n` + `1. The ${printableModuleName} is defined in Python, in which ` + `case it needs to be ported to TensorFlow.js or your JavaScript ` + `code.\\n` + `2. The custom ${printableModuleName} is defined in JavaScript, ` + `but is not registered properly with ` + `tf.serialization.registerClass().`); // TODO(cais): Add link to tutorial page on custom layers.\n      }\n    }\n\n    return fn;\n  } else {\n    // In this case we are dealing with a Keras config dictionary.\n    const config = identifier;\n\n    if (config['className'] == null || config['config'] == null) {\n      throw new ValueError(`${printableModuleName}: Improper config format: ` + `${JSON.stringify(config)}.\\n` + `'className' and 'config' must set.`);\n    }\n\n    const className = config['className'];\n    let cls, fromConfig;\n\n    if (className in customObjects) {\n      [cls, fromConfig] = customObjects[className];\n    } else if (className in _GLOBAL_CUSTOM_OBJECTS) {\n      [cls, fromConfig] = _GLOBAL_CUSTOM_OBJECTS['className'];\n    } else if (className in moduleObjects) {\n      [cls, fromConfig] = moduleObjects[className];\n    }\n\n    if (cls == null) {\n      throw new ValueError(`Unknown ${printableModuleName}: ${className}. ` + `This may be due to one of the following reasons:\\n` + `1. The ${printableModuleName} is defined in Python, in which ` + `case it needs to be ported to TensorFlow.js or your JavaScript ` + `code.\\n` + `2. The custom ${printableModuleName} is defined in JavaScript, ` + `but is not registered properly with ` + `tf.serialization.registerClass().`); // TODO(cais): Add link to tutorial page on custom layers.\n    }\n\n    if (fromConfig != null) {\n      // Porting notes: Instead of checking to see whether fromConfig accepts\n      // customObjects, we create a customObjects dictionary and tack it on to\n      // config['config'] as config['config'].customObjects. Objects can use it,\n      // if they want.\n      // tslint:disable-next-line:no-any\n      const customObjectsCombined = {};\n\n      for (const key of Object.keys(_GLOBAL_CUSTOM_OBJECTS)) {\n        customObjectsCombined[key] = _GLOBAL_CUSTOM_OBJECTS[key];\n      }\n\n      for (const key of Object.keys(customObjects)) {\n        customObjectsCombined[key] = customObjects[key];\n      } // Add the customObjects to config\n\n\n      const nestedConfig = config['config'];\n      nestedConfig['customObjects'] = customObjectsCombined;\n      const backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);\n\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      }\n\n      convertNDArrayScalarsInConfig(config['config']);\n      const returnObj = fromConfig(cls, config['config'], customObjects, fastWeightInit);\n      _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects);\n      return returnObj;\n    } else {\n      // Then `cls` may be a function returning a class.\n      // In this case by convention `config` holds\n      // the kwargs of the function.\n      const backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);\n\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      } // In python this is **config['config'], for tfjs-layers we require\n      // classes that use this fall-through construction method to take\n      // a config interface that mimics the expansion of named parameters.\n\n\n      const returnObj = new cls(config['config']);\n      _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects);\n      return returnObj;\n    }\n  }\n}\n/**\n * Compares two numbers for sorting.\n * @param a\n * @param b\n */\n\nexport function numberCompare(a, b) {\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n/**\n * Comparison of two numbers for reverse sorting.\n * @param a\n * @param b\n */\n\nexport function reverseNumberCompare(a, b) {\n  return -1 * numberCompare(a, b);\n}\n/**\n * Convert a string into the corresponding DType.\n * @param dtype\n * @returns An instance of DType.\n */\n\nexport function stringToDType(dtype) {\n  switch (dtype) {\n    case 'float32':\n      return 'float32';\n\n    default:\n      throw new ValueError(`Invalid dtype: ${dtype}`);\n  }\n}\n/**\n * Test the element-by-element equality of two Arrays of strings.\n * @param xs First array of strings.\n * @param ys Second array of strings.\n * @returns Wether the two arrays are all equal, element by element.\n */\n\nexport function stringsEqual(xs, ys) {\n  if (xs == null || ys == null) {\n    return xs === ys;\n  }\n\n  if (xs.length !== ys.length) {\n    return false;\n  }\n\n  for (let i = 0; i < xs.length; ++i) {\n    if (xs[i] !== ys[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Get the unique elements of an array.\n * @param xs Array.\n * @returns An Array consisting of the unique elements in `xs`.\n */\n\nexport function unique(xs) {\n  if (xs == null) {\n    return xs;\n  }\n\n  const out = []; // TODO(cais): Maybe improve performance by sorting.\n\n  for (const x of xs) {\n    if (out.indexOf(x) === -1) {\n      out.push(x);\n    }\n  }\n\n  return out;\n}\n/**\n * Determine if an Object is empty (i.e., does not have own properties).\n * @param obj Object\n * @returns Whether the Object is empty.\n * @throws ValueError: If object is `null` or `undefined`.\n */\n\nexport function isObjectEmpty(obj) {\n  if (obj == null) {\n    throw new ValueError(`Invalid value in obj: ${JSON.stringify(obj)}`);\n  }\n\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Helper function used to build type union/enum run-time checkers.\n * @param values The list of allowed values.\n * @param label A string name for the type\n * @param value The value to test.\n * @throws ValueError: If the value is not in values nor `undefined`/`null`.\n */\n\nexport function checkStringTypeUnionValue(values, label, value) {\n  if (value == null) {\n    return;\n  }\n\n  if (values.indexOf(value) < 0) {\n    throw new ValueError(`${value} is not a valid ${label}.  Valid values are ${values} or null/undefined.`);\n  }\n}\n/**\n * Helper function for verifying the types of inputs.\n *\n * Ensures that the elements of `x` are all of type `expectedType`.\n * Also verifies that the length of `x` is within bounds.\n *\n * @param x Object to test.\n * @param expectedType The string expected type of all of the elements in the\n * Array.\n * @param minLength Return false if x.length is less than this.\n * @param maxLength Return false if x.length is greater than this.\n * @returns true if and only if `x` is an `Array<expectedType>` with\n * length >= `minLength` and <= `maxLength`.\n */\n// tslint:disable:no-any\n\nexport function checkArrayTypeAndLength(x, expectedType) {\n  let minLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let maxLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Infinity;\n  assert(minLength >= 0);\n  assert(maxLength >= minLength);\n  return Array.isArray(x) && x.length >= minLength && x.length <= maxLength && x.every(e => typeof e === expectedType);\n} // tslint:enable:no-any\n\n/**\n * Assert that a value or an array of value are positive integer.\n *\n * @param value The value being asserted on. May be a single number or an array\n *   of numbers.\n * @param name Name of the value, used to make the error message.\n */\n\nexport function assertPositiveInteger(value, name) {\n  if (Array.isArray(value)) {\n    util.assert(value.length > 0, () => `${name} is unexpectedly an empty array.`);\n    value.forEach((v, i) => assertPositiveInteger(v, `element ${i + 1} of ${name}`));\n  } else {\n    util.assert(Number.isInteger(value) && value > 0, () => `Expected ${name} to be a positive integer, but got ` + `${formatAsFriendlyString(value)}.`);\n  }\n}\n/**\n * Format a value into a display-friendly, human-readable fashion.\n *\n * - `null` is formatted as `'null'`\n * - Strings are formated with flanking pair of quotes.\n * - Arrays are formatted with flanking pair of square brackets.\n *\n * @param value The value to display.\n * @return Formatted string.\n */\n// tslint:disable-next-line:no-any\n\nexport function formatAsFriendlyString(value) {\n  if (value === null) {\n    return 'null';\n  } else if (Array.isArray(value)) {\n    return '[' + value.map(v => formatAsFriendlyString(v)).join(',') + ']';\n  } else if (typeof value === 'string') {\n    return `\"${value}\"`;\n  } else {\n    return `${value}`;\n  }\n}\n/**\n * Returns a function `f2` (decorator) which wraps the original function\n * `f`. `f2` guarantees that `f` can be called at most once\n * every `waitMs` ms. If `f2` is called more often, it will return\n * the last returned result of `f`.\n *\n * @param f The original function `f` to wrap.\n * @param waitMs The time between two consecutive calls to `f` in ms.\n */\n\nexport function debounce(f, waitMs, nowFunc) {\n  let lastTime = nowFunc != null ? nowFunc() : util.now();\n  let lastResult;\n\n  const f2 = function () {\n    const now = nowFunc != null ? nowFunc() : util.now();\n\n    if (now - lastTime < waitMs) {\n      return lastResult;\n    }\n\n    lastTime = now;\n    lastResult = f(...arguments);\n    return lastResult;\n  };\n\n  return f2;\n}\n/**\n * Returns the fusable activation given a layers identifier.\n *\n * @param activationName The layers identifier string.\n * @return The name of the fusable activation.\n */\n\nexport function mapActivationToFusedKernel(activationName) {\n  if (activationName === 'relu') {\n    return 'relu';\n  }\n\n  if (activationName === 'linear') {\n    return 'linear';\n  }\n\n  if (activationName === 'elu') {\n    return 'elu';\n  }\n\n  return null;\n}\n/**\n * Returns the cartesian product of sets of values.\n * This works the same as itertools.product in Python.\n *\n * Example:\n *\n * filters = [128, 256, 512]\n * paddings = ['same', 'valid']\n *\n * product = [ [128, 'same'], [128, 'valid'], [256, 'same'], [256, 'valid'],\n * [512, 'same'], [512, 'valid']]\n *\n * @param arrayOfValues List/array of values.\n * @return The cartesian product.\n */\n\nexport function getCartesianProductOfValues() {\n  for (var _len = arguments.length, arrayOfValues = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrayOfValues[_key] = arguments[_key];\n  }\n\n  assert(arrayOfValues.length > 0, 'arrayOfValues is empty');\n\n  for (const values of arrayOfValues) {\n    assert(Array.isArray(values), 'one of the values is not an array');\n    assert(values.length > 0, 'one of the values is empty');\n  }\n\n  return arrayOfValues.reduce((products, values) => {\n    if (products.length === 0) {\n      return values.map(value => [value]);\n    }\n\n    return values.map(value => {\n      return products.map(prevValue => [...prevValue, value]);\n    }).reduce((flattenedProduct, unflattenedProduct) => {\n      return flattenedProduct.concat(unflattenedProduct);\n    }, []);\n  }, []);\n}","map":{"version":3,"sources":["../../../../../../tfjs-layers/src/utils/generic_utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: utils/generic_utils.py */\n\nimport {DataType, fused, serialization, util} from '@tensorflow/tfjs-core';\n\nimport {AssertionError, ValueError} from '../errors';\n\n// tslint:enable\n\n/**\n * If `value` is an Array, equivalent to Python's `value * numValues`.\n * If `value` is not an Array, equivalent to Python's `[value] * numValues`\n */\n// tslint:disable-next-line:no-any\nexport function pyListRepeat(value: any, numValues: number): any[] {\n  if (Array.isArray(value)) {\n    // tslint:disable-next-line:no-any\n    let newArray: any[] = [];\n    for (let i = 0; i < numValues; i++) {\n      newArray = newArray.concat(value);\n    }\n    return newArray;\n  } else {\n    const newArray = new Array(numValues);\n    newArray.fill(value);\n    return newArray;\n  }\n}\n\nexport function assert(val: boolean, message?: string): void {\n  if (!val) {\n    throw new AssertionError(message);\n  }\n}\n\n/**\n * Count the number of elements of the `array` that are equal to `reference`.\n */\nexport function count<T>(array: T[], refernce: T) {\n  let counter = 0;\n  for (const item of array) {\n    if (item === refernce) {\n      counter++;\n    }\n  }\n  return counter;\n}\n\n/**\n * If an array is of length 1, just return the first element. Otherwise, return\n * the full array.\n * @param tensors\n */\nexport function singletonOrArray<T>(xs: T[]): T|T[] {\n  if (xs.length === 1) {\n    return xs[0];\n  }\n  return xs;\n}\n\n/**\n * Normalizes a list/tensor into a list.\n *\n * If a tensor is passed, we return\n * a list of size 1 containing the tensor.\n *\n * @param x target object to be normalized.\n */\n// tslint:disable-next-line:no-any\nexport function toList(x: any): any[] {\n  if (Array.isArray(x)) {\n    return x;\n  }\n  return [x];\n}\n\n/**\n * Generate a UID for a list\n */\n// tslint:disable-next-line:no-any\nexport function objectListUid(objs: any|any[]): string {\n  const objectList = toList(objs);\n  let retVal = '';\n  for (const obj of objectList) {\n    if (obj.id == null) {\n      throw new ValueError(\n          `Object ${obj} passed to objectListUid without an id`);\n    }\n    if (retVal !== '') {\n      retVal = retVal + ', ';\n    }\n    retVal = `${retVal}${Math.abs(obj.id)}`;\n  }\n  return retVal;\n}\n/**\n * Converts string to snake-case.\n * @param name\n */\nexport function toSnakeCase(name: string): string {\n  const intermediate = name.replace(/(.)([A-Z][a-z0-9]+)/g, '$1_$2');\n  const insecure =\n      intermediate.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n  /*\n   If the class is private the name starts with \"_\" which is not secure\n   for creating scopes. We prefix the name with \"private\" in this case.\n   */\n  if (insecure[0] !== '_') {\n    return insecure;\n  }\n  return 'private' + insecure;\n}\n\nexport function toCamelCase(identifier: string): string {\n  // quick return for empty string or single character strings\n  if (identifier.length <= 1) {\n    return identifier;\n  }\n  // Check for the underscore indicating snake_case\n  if (identifier.indexOf('_') === -1) {\n    return identifier;\n  }\n  return identifier.replace(/[_]+(\\w|$)/g, (m, p1) => p1.toUpperCase());\n}\n\n// tslint:disable-next-line:no-any\nlet _GLOBAL_CUSTOM_OBJECTS = {} as {[objName: string]: any};\n\nexport function serializeKerasObject(instance: serialization.Serializable):\n    serialization.ConfigDictValue {\n  if (instance === null || instance === undefined) {\n    return null;\n  }\n  const dict: serialization.ConfigDictValue = {};\n  dict['className'] = instance.getClassName();\n  dict['config'] = instance.getConfig();\n  return dict;\n}\n\n/**\n * Replace ndarray-style scalar objects in serialization objects with numbers.\n *\n * Background: In some versions of tf.keras, certain scalar values in the HDF5\n * model save file can be serialized as: `{'type': 'ndarray', 'value': num}`,\n * where in `num` is a plain number. This method converts such serialization\n * to a `number`.\n *\n * @param config The keras-format serialization object to be processed\n *   (in place).\n */\nfunction convertNDArrayScalarsInConfig(config: serialization.ConfigDictValue):\n    void {\n  if (config == null || typeof config !== 'object') {\n    return;\n  } else if (Array.isArray(config)) {\n    config.forEach(configItem => convertNDArrayScalarsInConfig(configItem));\n  } else {\n    const fields = Object.keys(config);\n    for (const field of fields) {\n      const value = config[field];\n      if (value != null && typeof value === 'object') {\n        if (!Array.isArray(value) && value['type'] === 'ndarray' &&\n            typeof value['value'] === 'number') {\n          config[field] = value['value'];\n        } else {\n          convertNDArrayScalarsInConfig(value as serialization.ConfigDict);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Deserialize a saved Keras Object\n * @param identifier either a string ID or a saved Keras dictionary\n * @param moduleObjects a list of Python class names to object constructors\n * @param customObjects a list of Python class names to object constructors\n * @param printableModuleName debug text for the object being reconstituted\n * @param fastWeightInit Optional flag to use fast weight initialization\n *   during deserialization. This is applicable to cases in which\n *   the initialization will be immediately overwritten by loaded weight\n *   values. Default: `false`.\n * @returns a TensorFlow.js Layers object\n */\n// tslint:disable:no-any\nexport function deserializeKerasObject(\n    identifier: string|serialization.ConfigDict,\n    moduleObjects = {} as {[objName: string]: any},\n    customObjects = {} as {[objName: string]: any},\n    printableModuleName = 'object', fastWeightInit = false): any {\n  // tslint:enable\n  if (typeof identifier === 'string') {\n    const functionName = identifier;\n    let fn;\n    if (functionName in customObjects) {\n      fn = customObjects[functionName];\n    } else if (functionName in _GLOBAL_CUSTOM_OBJECTS) {\n      fn = _GLOBAL_CUSTOM_OBJECTS[functionName];\n    } else {\n      fn = moduleObjects[functionName];\n      if (fn == null) {\n        throw new ValueError(\n            `Unknown ${printableModuleName}: ${identifier}. ` +\n            `This may be due to one of the following reasons:\\n` +\n            `1. The ${printableModuleName} is defined in Python, in which ` +\n            `case it needs to be ported to TensorFlow.js or your JavaScript ` +\n            `code.\\n` +\n            `2. The custom ${printableModuleName} is defined in JavaScript, ` +\n            `but is not registered properly with ` +\n            `tf.serialization.registerClass().`);\n        // TODO(cais): Add link to tutorial page on custom layers.\n      }\n    }\n    return fn;\n  } else {\n    // In this case we are dealing with a Keras config dictionary.\n    const config = identifier;\n    if (config['className'] == null || config['config'] == null) {\n      throw new ValueError(\n          `${printableModuleName}: Improper config format: ` +\n          `${JSON.stringify(config)}.\\n` +\n          `'className' and 'config' must set.`);\n    }\n    const className = config['className'] as string;\n    let cls, fromConfig;\n    if (className in customObjects) {\n      [cls, fromConfig] = customObjects[className];\n    } else if (className in _GLOBAL_CUSTOM_OBJECTS) {\n      [cls, fromConfig] = _GLOBAL_CUSTOM_OBJECTS['className'];\n    } else if (className in moduleObjects) {\n      [cls, fromConfig] = moduleObjects[className];\n    }\n    if (cls == null) {\n      throw new ValueError(\n          `Unknown ${printableModuleName}: ${className}. ` +\n          `This may be due to one of the following reasons:\\n` +\n          `1. The ${printableModuleName} is defined in Python, in which ` +\n          `case it needs to be ported to TensorFlow.js or your JavaScript ` +\n          `code.\\n` +\n          `2. The custom ${printableModuleName} is defined in JavaScript, ` +\n          `but is not registered properly with ` +\n          `tf.serialization.registerClass().`);\n      // TODO(cais): Add link to tutorial page on custom layers.\n    }\n    if (fromConfig != null) {\n      // Porting notes: Instead of checking to see whether fromConfig accepts\n      // customObjects, we create a customObjects dictionary and tack it on to\n      // config['config'] as config['config'].customObjects. Objects can use it,\n      // if they want.\n\n      // tslint:disable-next-line:no-any\n      const customObjectsCombined = {} as {[objName: string]: any};\n      for (const key of Object.keys(_GLOBAL_CUSTOM_OBJECTS)) {\n        customObjectsCombined[key] = _GLOBAL_CUSTOM_OBJECTS[key];\n      }\n      for (const key of Object.keys(customObjects)) {\n        customObjectsCombined[key] = customObjects[key];\n      }\n      // Add the customObjects to config\n      const nestedConfig = config['config'] as serialization.ConfigDict;\n      nestedConfig['customObjects'] = customObjectsCombined;\n\n      const backupCustomObjects = {..._GLOBAL_CUSTOM_OBJECTS};\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      }\n      convertNDArrayScalarsInConfig(config['config']);\n      const returnObj =\n          fromConfig(cls, config['config'], customObjects, fastWeightInit);\n      _GLOBAL_CUSTOM_OBJECTS = {...backupCustomObjects};\n\n      return returnObj;\n    } else {\n      // Then `cls` may be a function returning a class.\n      // In this case by convention `config` holds\n      // the kwargs of the function.\n      const backupCustomObjects = {..._GLOBAL_CUSTOM_OBJECTS};\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      }\n      // In python this is **config['config'], for tfjs-layers we require\n      // classes that use this fall-through construction method to take\n      // a config interface that mimics the expansion of named parameters.\n      const returnObj = new cls(config['config']);\n      _GLOBAL_CUSTOM_OBJECTS = {...backupCustomObjects};\n      return returnObj;\n    }\n  }\n}\n\n/**\n * Compares two numbers for sorting.\n * @param a\n * @param b\n */\nexport function numberCompare(a: number, b: number) {\n  return (a < b) ? -1 : ((a > b) ? 1 : 0);\n}\n\n/**\n * Comparison of two numbers for reverse sorting.\n * @param a\n * @param b\n */\nexport function reverseNumberCompare(a: number, b: number) {\n  return -1 * numberCompare(a, b);\n}\n\n/**\n * Convert a string into the corresponding DType.\n * @param dtype\n * @returns An instance of DType.\n */\nexport function stringToDType(dtype: string): DataType {\n  switch (dtype) {\n    case 'float32':\n      return 'float32';\n    default:\n      throw new ValueError(`Invalid dtype: ${dtype}`);\n  }\n}\n\n/**\n * Test the element-by-element equality of two Arrays of strings.\n * @param xs First array of strings.\n * @param ys Second array of strings.\n * @returns Wether the two arrays are all equal, element by element.\n */\nexport function stringsEqual(xs: string[], ys: string[]): boolean {\n  if (xs == null || ys == null) {\n    return xs === ys;\n  }\n  if (xs.length !== ys.length) {\n    return false;\n  }\n  for (let i = 0; i < xs.length; ++i) {\n    if (xs[i] !== ys[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Get the unique elements of an array.\n * @param xs Array.\n * @returns An Array consisting of the unique elements in `xs`.\n */\nexport function unique<T>(xs: T[]): T[] {\n  if (xs == null) {\n    return xs;\n  }\n  const out: T[] = [];\n  // TODO(cais): Maybe improve performance by sorting.\n  for (const x of xs) {\n    if (out.indexOf(x) === -1) {\n      out.push(x);\n    }\n  }\n  return out;\n}\n\n/**\n * Determine if an Object is empty (i.e., does not have own properties).\n * @param obj Object\n * @returns Whether the Object is empty.\n * @throws ValueError: If object is `null` or `undefined`.\n */\nexport function isObjectEmpty(obj: {}): boolean {\n  if (obj == null) {\n    throw new ValueError(`Invalid value in obj: ${JSON.stringify(obj)}`);\n  }\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Helper function used to build type union/enum run-time checkers.\n * @param values The list of allowed values.\n * @param label A string name for the type\n * @param value The value to test.\n * @throws ValueError: If the value is not in values nor `undefined`/`null`.\n */\nexport function checkStringTypeUnionValue(\n    values: string[], label: string, value: string): void {\n  if (value == null) {\n    return;\n  }\n  if (values.indexOf(value) < 0) {\n    throw new ValueError(`${value} is not a valid ${label}.  Valid values are ${\n        values} or null/undefined.`);\n  }\n}\n\n/**\n * Helper function for verifying the types of inputs.\n *\n * Ensures that the elements of `x` are all of type `expectedType`.\n * Also verifies that the length of `x` is within bounds.\n *\n * @param x Object to test.\n * @param expectedType The string expected type of all of the elements in the\n * Array.\n * @param minLength Return false if x.length is less than this.\n * @param maxLength Return false if x.length is greater than this.\n * @returns true if and only if `x` is an `Array<expectedType>` with\n * length >= `minLength` and <= `maxLength`.\n */\n// tslint:disable:no-any\nexport function checkArrayTypeAndLength(\n    x: any, expectedType: string, minLength = 0,\n    maxLength = Infinity): boolean {\n  assert(minLength >= 0);\n  assert(maxLength >= minLength);\n  return (\n      Array.isArray(x) && x.length >= minLength && x.length <= maxLength &&\n      x.every(e => typeof e === expectedType));\n}\n// tslint:enable:no-any\n\n/**\n * Assert that a value or an array of value are positive integer.\n *\n * @param value The value being asserted on. May be a single number or an array\n *   of numbers.\n * @param name Name of the value, used to make the error message.\n */\nexport function assertPositiveInteger(value: number|number[], name: string) {\n  if (Array.isArray(value)) {\n    util.assert(\n        value.length > 0, () => `${name} is unexpectedly an empty array.`);\n    value.forEach(\n        (v, i) => assertPositiveInteger(v, `element ${i + 1} of ${name}`));\n  } else {\n    util.assert(\n        Number.isInteger(value) && value > 0,\n        () => `Expected ${name} to be a positive integer, but got ` +\n            `${formatAsFriendlyString(value)}.`);\n  }\n}\n\n/**\n * Format a value into a display-friendly, human-readable fashion.\n *\n * - `null` is formatted as `'null'`\n * - Strings are formated with flanking pair of quotes.\n * - Arrays are formatted with flanking pair of square brackets.\n *\n * @param value The value to display.\n * @return Formatted string.\n */\n// tslint:disable-next-line:no-any\nexport function formatAsFriendlyString(value: any): string {\n  if (value === null) {\n    return 'null';\n  } else if (Array.isArray(value)) {\n    return '[' + value.map(v => formatAsFriendlyString(v)).join(',') + ']';\n  } else if (typeof value === 'string') {\n    return `\"${value}\"`;\n  } else {\n    return `${value}`;\n  }\n}\n\n/**\n * Returns a function `f2` (decorator) which wraps the original function\n * `f`. `f2` guarantees that `f` can be called at most once\n * every `waitMs` ms. If `f2` is called more often, it will return\n * the last returned result of `f`.\n *\n * @param f The original function `f` to wrap.\n * @param waitMs The time between two consecutive calls to `f` in ms.\n */\nexport function debounce<T>(\n    f: (...args: Array<{}>) => T, waitMs: number,\n    nowFunc?: Function): (...args: Array<{}>) => T {\n  let lastTime = nowFunc != null ? nowFunc() : util.now();\n  let lastResult: T;\n  const f2 = (...args: Array<{}>) => {\n    const now = nowFunc != null ? nowFunc() : util.now();\n    if (now - lastTime < waitMs) {\n      return lastResult;\n    }\n    lastTime = now;\n    lastResult = f(...args);\n    return lastResult;\n  };\n  return f2;\n}\n\n/**\n * Returns the fusable activation given a layers identifier.\n *\n * @param activationName The layers identifier string.\n * @return The name of the fusable activation.\n */\nexport function mapActivationToFusedKernel(activationName: string):\n    fused.Activation {\n  if (activationName === 'relu') {\n    return 'relu';\n  }\n  if (activationName === 'linear') {\n    return 'linear';\n  }\n  if (activationName === 'elu') {\n    return 'elu';\n  }\n  return null;\n}\n\ntype PossibleValues = Array<Array<boolean|string|number>>;\n\n/**\n * Returns the cartesian product of sets of values.\n * This works the same as itertools.product in Python.\n *\n * Example:\n *\n * filters = [128, 256, 512]\n * paddings = ['same', 'valid']\n *\n * product = [ [128, 'same'], [128, 'valid'], [256, 'same'], [256, 'valid'],\n * [512, 'same'], [512, 'valid']]\n *\n * @param arrayOfValues List/array of values.\n * @return The cartesian product.\n */\nexport function getCartesianProductOfValues(...arrayOfValues: PossibleValues):\n    PossibleValues {\n  assert(arrayOfValues.length > 0, 'arrayOfValues is empty');\n\n  for (const values of arrayOfValues) {\n    assert(Array.isArray(values), 'one of the values is not an array');\n    assert(values.length > 0, 'one of the values is empty');\n  }\n\n  return arrayOfValues.reduce((products, values) => {\n    if (products.length === 0) {\n      return values.map(value => [value]);\n    }\n\n    return values\n        .map(value => {\n          return products.map((prevValue) => [...prevValue, value]);\n        })\n        .reduce((flattenedProduct, unflattenedProduct) => {\n          return flattenedProduct.concat(unflattenedProduct);\n        }, []);\n  }, [] as PossibleValues);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}