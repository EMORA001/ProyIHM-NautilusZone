{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport { Cast, util } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { identity } from './Identity';\nimport { notEqual } from './NotEqual';\nimport { real } from './Real';\nimport { int } from '../kernel_utils/int';\nexport function cast(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    dtype\n  } = attrs; // Casting to complex64.\n\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({\n        inputs: {\n          x\n        },\n        backend\n      });\n    } // TODO(annxingyuan): Import kernel function once zeros is modularized.\n\n\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    const result = complex({\n      inputs: {\n        real: floatX,\n        imag: zerosTensor\n      },\n      backend\n    });\n    zerosTensor.dispose();\n    backend.disposeIntermediateTensorInfo(floatX);\n    return result;\n  } // Casting from complex64\n\n\n  if (x.dtype === 'complex64') {\n    const realPart = real({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const result = cast({\n      inputs: {\n        x: realPart\n      },\n      backend,\n      attrs: {\n        dtype\n      }\n    });\n    backend.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n    return {\n      dataId: result.dataId,\n      shape: result.shape,\n      dtype\n    };\n  }\n\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n\n  if (dtype === 'bool') {\n    const zerosTensorInfo = backend.makeTensorInfo([], 'bool', util.getTypedArrayFromDType('bool', 1));\n    const binaryInputs = {\n      a: x,\n      b: zerosTensorInfo\n    };\n    const result = notEqual({\n      inputs: binaryInputs,\n      backend\n    });\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    return result;\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\nexport const castConfig = {\n  kernelName: Cast,\n  backendName: 'webgl',\n  kernelFunc: cast\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-webgl/src/kernels/Cast.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport {BinaryInputs, Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {notEqual} from './NotEqual';\nimport {real} from './Real';\n\nimport {int} from '../kernel_utils/int';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendWebGL, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    // TODO(annxingyuan): Import kernel function once zeros is modularized.\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensor}, backend});\n\n    zerosTensor.dispose();\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n    backend.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n\n  if (dtype === 'bool') {\n    const zerosTensorInfo = backend.makeTensorInfo(\n        [], 'bool', util.getTypedArrayFromDType('bool', 1));\n\n    const binaryInputs: BinaryInputs = {a: x, b: zerosTensorInfo};\n\n    const result = notEqual({inputs: binaryInputs, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    return result;\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'webgl',\n  kernelFunc: cast as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}