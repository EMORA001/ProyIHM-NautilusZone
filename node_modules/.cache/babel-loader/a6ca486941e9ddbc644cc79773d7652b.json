{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multinomial } from '@tensorflow/tfjs-core';\nimport { MultinomialProgram } from '../multinomial_gpu';\nimport { softmax } from './Softmax';\nexport function multinomial(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    logits\n  } = inputs;\n  const {\n    numSamples,\n    seed,\n    normalized\n  } = attrs;\n  const probs = normalized ? logits : softmax({\n    inputs: {\n      logits\n    },\n    backend,\n    attrs: {\n      dim: logits.shape.length - 1\n    }\n  });\n  const batchSize = probs.shape[0];\n  const numOutcomes = probs.shape[1];\n  const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n  const customValues = [[seed]];\n  const res = backend.runWebGLProgram(program, [probs], 'int32', customValues);\n\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probs);\n  }\n\n  return res;\n}\nexport const multinomialConfig = {\n  kernelName: Multinomial,\n  backendName: 'webgl',\n  kernelFunc: multinomial\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-webgl/src/kernels/Multinomial.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,WAAlC,QAAqG,uBAArG;AAGA,SAAQ,kBAAR,QAAiC,oBAAjC;AAEA,SAAQ,OAAR,QAAsB,WAAtB;AAEA,OAAM,SAAU,WAAV,CAAsB,IAAtB,EAIL;EACC,MAAM;IAAC,MAAD;IAAS,OAAT;IAAkB;EAAlB,IAA2B,IAAjC;EACA,MAAM;IAAC;EAAD,IAAW,MAAjB;EACA,MAAM;IAAC,UAAD;IAAa,IAAb;IAAmB;EAAnB,IAAiC,KAAvC;EAEA,MAAM,KAAK,GAAG,UAAU,GACpB,MADoB,GAEpB,OAAO,CACH;IAAC,MAAM,EAAE;MAAC;IAAD,CAAT;IAAmB,OAAnB;IAA4B,KAAK,EAAE;MAAC,GAAG,EAAE,MAAM,CAAC,KAAP,CAAa,MAAb,GAAsB;IAA5B;EAAnC,CADG,CAFX;EAIA,MAAM,SAAS,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAlB;EACA,MAAM,WAAW,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,CAApB;EACA,MAAM,OAAO,GAAG,IAAI,kBAAJ,CAAuB,SAAvB,EAAkC,WAAlC,EAA+C,UAA/C,CAAhB;EACA,MAAM,YAAY,GAAG,CAAC,CAAC,IAAD,CAAD,CAArB;EACA,MAAM,GAAG,GAAG,OAAO,CAAC,eAAR,CAAwB,OAAxB,EAAiC,CAAC,KAAD,CAAjC,EAA0C,OAA1C,EAAmD,YAAnD,CAAZ;;EACA,IAAI,CAAC,UAAL,EAAiB;IACf,OAAO,CAAC,6BAAR,CAAsC,KAAtC;EACD;;EACD,OAAO,GAAP;AACD;AAED,OAAO,MAAM,iBAAiB,GAAiB;EAC7C,UAAU,EAAE,WADiC;EAE7C,WAAW,EAAE,OAFgC;EAG7C,UAAU,EAAE;AAHiC,CAAxC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MultinomialProgram} from '../multinomial_gpu';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendWebGL,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  const probs = normalized ?\n      logits :\n      softmax(\n          {inputs: {logits}, backend, attrs: {dim: logits.shape.length - 1}});\n  const batchSize = probs.shape[0];\n  const numOutcomes = probs.shape[1];\n  const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n  const customValues = [[seed]];\n  const res = backend.runWebGLProgram(program, [probs], 'int32', customValues);\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probs);\n  }\n  return res;\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'webgl',\n  kernelFunc: multinomial as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}