{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedDepthwiseConv2D } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { depthwiseConv2dNative } from './DepthwiseConv2dNative';\nexport function fusedDepthwiseConv2D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  let result = depthwiseConv2dNative({\n    inputs: {\n      x,\n      filter\n    },\n    backend,\n    attrs: {\n      strides,\n      pad,\n      dataFormat,\n      dilations,\n      dimRoundingMode\n    }\n  });\n\n  if (bias) {\n    const oldResult = result;\n    result = add({\n      inputs: {\n        a: result,\n        b: bias\n      },\n      backend\n    });\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  if (activation) {\n    const oldResult = result;\n    result = applyActivation(backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  return result;\n}\nexport const fusedDepthwiseConv2DConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedDepthwiseConv2D\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/FusedDepthwiseConv2D.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,oBAAR,QAAgI,uBAAhI;AAGA,SAAQ,eAAR,QAA8B,sBAA9B;AACA,SAAQ,GAAR,QAAkB,OAAlB;AACA,SAAQ,qBAAR,QAAoC,yBAApC;AAEA,OAAM,SAAU,oBAAV,CAA+B,IAA/B,EAIL;EACC,MAAM;IAAC,MAAD;IAAS,OAAT;IAAkB;EAAlB,IAA2B,IAAjC;EACA,MAAM;IAAC,CAAD;IAAI,MAAJ;IAAY,IAAZ;IAAkB;EAAlB,IAA4C,MAAlD;EACA,MAAM;IACJ,OADI;IAEJ,GAFI;IAGJ,UAHI;IAIJ,SAJI;IAKJ,eALI;IAMJ,UANI;IAOJ;EAPI,IAQF,KARJ;EAUA,IAAI,MAAM,GAAG,qBAAqB,CAAC;IACjC,MAAM,EAAE;MAAC,CAAD;MAAI;IAAJ,CADyB;IAEjC,OAFiC;IAGjC,KAAK,EAAE;MAAC,OAAD;MAAU,GAAV;MAAe,UAAf;MAA2B,SAA3B;MAAsC;IAAtC;EAH0B,CAAD,CAAlC;;EAMA,IAAI,IAAJ,EAAU;IACR,MAAM,SAAS,GAAG,MAAlB;IACA,MAAM,GAAG,GAAG,CAAC;MAAC,MAAM,EAAE;QAAC,CAAC,EAAE,MAAJ;QAAY,CAAC,EAAE;MAAf,CAAT;MAA+B;IAA/B,CAAD,CAAZ;IACA,OAAO,CAAC,6BAAR,CAAsC,SAAtC;EACD;;EACD,IAAI,UAAJ,EAAgB;IACd,MAAM,SAAS,GAAG,MAAlB;IACA,MAAM,GAAG,eAAe,CACpB,OADoB,EACX,MADW,EACH,UADG,EACS,sBADT,EACiC,cADjC,CAAxB;IAEA,OAAO,CAAC,6BAAR,CAAsC,SAAtC;EACD;;EAED,OAAO,MAAP;AACD;AAED,OAAO,MAAM,0BAA0B,GAAiB;EACtD,UAAU,EAAE,oBAD0C;EAEtD,WAAW,EAAE,KAFyC;EAGtD,UAAU,EAAE;AAH0C,CAAjD","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {depthwiseConv2dNative} from './DepthwiseConv2dNative';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedDepthwiseConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = depthwiseConv2dNative({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const oldResult = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n  if (activation) {\n    const oldResult = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}