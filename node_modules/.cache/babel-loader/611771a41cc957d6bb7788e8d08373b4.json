{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SparseToDense, util } from '@tensorflow/tfjs-core';\nimport { scatterImpl } from './Scatter_impl';\nexport function sparseToDense(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    sparseIndices,\n    sparseValues,\n    defaultValue\n  } = inputs;\n  const {\n    outputShape\n  } = attrs;\n  const {\n    sliceRank,\n    numUpdates,\n    sliceSize,\n    strides,\n    outputSize\n  } = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n  const indicesBuf = backend.bufferSync(sparseIndices);\n  let outBuf;\n\n  switch (sparseValues.dtype) {\n    case 'bool':\n      {\n        const updatesBuf = backend.bufferSync(sparseValues);\n        const $defaultValue = Boolean(backend.data.get(defaultValue.dataId).values[0]);\n        outBuf = scatterImpl(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n        break;\n      }\n\n    case 'float32':\n      {\n        const updatesBuf = backend.bufferSync(sparseValues);\n        const $defaultValue = backend.data.get(defaultValue.dataId).values[0];\n        outBuf = scatterImpl(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n        break;\n      }\n\n    case 'int32':\n      {\n        const updatesBuf = backend.bufferSync(sparseValues);\n        const $defaultValue = backend.data.get(defaultValue.dataId).values[0];\n        outBuf = scatterImpl(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n        break;\n      }\n\n    case 'string':\n      {\n        const updatesBuf = backend.bufferSync(sparseValues);\n        const $defaultValue = util.decodeString(backend.data.get(defaultValue.dataId).values[0]);\n        outBuf = scatterImpl(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n        break;\n      }\n\n    default:\n      throw new Error(`Unsupported type ${sparseValues.dtype}`);\n  }\n\n  return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\nexport const sparseToDenseConfig = {\n  kernelName: SparseToDense,\n  backendName: 'cpu',\n  kernelFunc: sparseToDense\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/SparseToDense.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAsD,aAAtD,EAA0H,IAA1H,QAAqI,uBAArI;AAGA,SAAQ,WAAR,QAA0B,gBAA1B;AAEA,OAAM,SAAU,aAAV,CAAwB,IAAxB,EAIL;EACC,MAAM;IAAC,MAAD;IAAS,OAAT;IAAkB;EAAlB,IAA2B,IAAjC;EACA,MAAM;IAAC,aAAD;IAAgB,YAAhB;IAA8B;EAA9B,IAA8C,MAApD;EACA,MAAM;IAAC;EAAD,IAAgB,KAAtB;EAEA,MAAM;IAAC,SAAD;IAAY,UAAZ;IAAwB,SAAxB;IAAmC,OAAnC;IAA4C;EAA5C,IACF,YAAY,CAAC,eAAb,CAA6B,YAA7B,EAA2C,aAA3C,EAA0D,WAA1D,CADJ;EAEA,MAAM,cAAc,GAAG,KAAvB;EAEA,MAAM,UAAU,GAAG,OAAO,CAAC,UAAR,CAAkC,aAAlC,CAAnB;EAEA,IAAI,MAAJ;;EACA,QAAQ,YAAY,CAAC,KAArB;IACE,KAAK,MAAL;MAAa;QACX,MAAM,UAAU,GAAG,OAAO,CAAC,UAAR,CAAiC,YAAjC,CAAnB;QACA,MAAM,aAAa,GACf,OAAO,CAAC,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,YAAY,CAAC,MAA9B,EAAsC,MAAtC,CAA6C,CAA7C,CAAD,CADX;QAEA,MAAM,GAAG,WAAW,CAChB,UADgB,EACJ,UADI,EACQ,WADR,EACqB,UADrB,EACiC,SADjC,EAEhB,UAFgB,EAEJ,SAFI,EAEO,OAFP,EAEgB,aAFhB,EAE+B,cAF/B,CAApB;QAGA;MACD;;IACD,KAAK,SAAL;MAAgB;QACd,MAAM,UAAU,GAAG,OAAO,CAAC,UAAR,CAAoC,YAApC,CAAnB;QACA,MAAM,aAAa,GACf,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,YAAY,CAAC,MAA9B,EAAsC,MAAtC,CAA6C,CAA7C,CADJ;QAEA,MAAM,GAAG,WAAW,CAChB,UADgB,EACJ,UADI,EACQ,WADR,EACqB,UADrB,EACiC,SADjC,EAEhB,UAFgB,EAEJ,SAFI,EAEO,OAFP,EAEgB,aAFhB,EAE+B,cAF/B,CAApB;QAGA;MACD;;IACD,KAAK,OAAL;MAAc;QACZ,MAAM,UAAU,GAAG,OAAO,CAAC,UAAR,CAAkC,YAAlC,CAAnB;QACA,MAAM,aAAa,GACf,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,YAAY,CAAC,MAA9B,EAAsC,MAAtC,CAA6C,CAA7C,CADJ;QAEA,MAAM,GAAG,WAAW,CAChB,UADgB,EACJ,UADI,EACQ,WADR,EACqB,UADrB,EACiC,SADjC,EAEhB,UAFgB,EAEJ,SAFI,EAEO,OAFP,EAEgB,aAFhB,EAE+B,cAF/B,CAApB;QAGA;MACD;;IACD,KAAK,QAAL;MAAe;QACb,MAAM,UAAU,GAAG,OAAO,CAAC,UAAR,CAAmC,YAAnC,CAAnB;QACA,MAAM,aAAa,GAAG,IAAI,CAAC,YAAL,CAClB,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,YAAY,CAAC,MAA9B,EAAsC,MAAtC,CAA6C,CAA7C,CADkB,CAAtB;QAEA,MAAM,GAAG,WAAW,CAChB,UADgB,EACJ,UADI,EACQ,WADR,EACqB,UADrB,EACiC,SADjC,EAEhB,UAFgB,EAEJ,SAFI,EAEO,OAFP,EAEgB,aAFhB,EAE+B,cAF/B,CAApB;QAGA;MACD;;IACD;MACE,MAAM,IAAI,KAAJ,CAAU,oBAAoB,YAAY,CAAC,KAAK,EAAhD,CAAN;EAtCJ;;EAwCA,OAAO,OAAO,CAAC,cAAR,CAAuB,WAAvB,EAAoC,MAAM,CAAC,KAA3C,EAAkD,MAAM,CAAC,MAAzD,CAAP;AACD;AAED,OAAO,MAAM,mBAAmB,GAAiB;EAC/C,UAAU,EAAE,aADmC;EAE/C,WAAW,EAAE,KAFkC;EAG/C,UAAU,EAAE;AAHmC,CAA1C","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendCPU,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  const indicesBuf = backend.bufferSync<Rank, 'int32'>(sparseIndices);\n\n  let outBuf;\n  switch (sparseValues.dtype) {\n    case 'bool': {\n      const updatesBuf = backend.bufferSync<Rank, 'bool'>(sparseValues);\n      const $defaultValue =\n          Boolean(backend.data.get(defaultValue.dataId).values[0]);\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'float32': {\n      const updatesBuf = backend.bufferSync<Rank, 'float32'>(sparseValues);\n      const $defaultValue =\n          backend.data.get(defaultValue.dataId).values[0] as number;\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'int32': {\n      const updatesBuf = backend.bufferSync<Rank, 'int32'>(sparseValues);\n      const $defaultValue =\n          backend.data.get(defaultValue.dataId).values[0] as number;\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'string': {\n      const updatesBuf = backend.bufferSync<Rank, 'string'>(sparseValues);\n      const $defaultValue = util.decodeString(\n          backend.data.get(defaultValue.dataId).values[0] as Uint8Array);\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    default:\n      throw new Error(`Unsupported type ${sparseValues.dtype}`);\n  }\n  return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'cpu',\n  kernelFunc: sparseToDense as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}