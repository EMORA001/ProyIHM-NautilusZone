{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, FusedBatchNorm, util } from '@tensorflow/tfjs-core';\nimport { BatchNormProgram } from '../batchnorm_gpu';\nimport { BatchNormPackedProgram } from '../batchnorm_packed_gpu';\nexport const batchNorm = _ref => {\n  let {\n    inputs,\n    backend,\n    attrs\n  } = _ref;\n  const {\n    x,\n    mean,\n    variance,\n    offset,\n    scale\n  } = inputs;\n  util.assert(mean.shape.length === variance.shape.length, () => 'Batch normalization gradient requires mean and variance to have ' + 'equal ranks.');\n  util.assert(offset == null || mean.shape.length === offset.shape.length, () => 'Batch normalization gradient requires mean and offset to have ' + 'equal ranks.');\n  util.assert(scale == null || mean.shape.length === scale.shape.length, () => 'Batch normalization gradient requires mean and scale to have ' + 'equal ranks.');\n  let {\n    varianceEpsilon\n  } = attrs;\n\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const finalInputs = [x, mean, variance];\n  let offsetShape = null;\n\n  if (offset != null) {\n    offsetShape = offset.shape;\n    finalInputs.push(offset);\n  }\n\n  let scaleShape = null;\n\n  if (scale != null) {\n    scaleShape = scale.shape;\n    finalInputs.push(scale);\n  }\n\n  const program = env().getBool('WEBGL_PACK_NORMALIZATION') ? new BatchNormPackedProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon) : new BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n  const output = backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n  return output;\n};\nexport const batchNormConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgl',\n  kernelFunc: batchNorm\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-webgl/src/kernels/BatchNorm.ts"],"names":[],"mappings":"AACA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,GAAR,EAAa,cAAb,EAA8G,IAA9G,QAAyH,uBAAzH;AAGA,SAAQ,gBAAR,QAA+B,kBAA/B;AACA,SAAQ,sBAAR,QAAqC,yBAArC;AAEA,OAAO,MAAM,SAAS,GAIH,QAA6B;EAAA,IAA5B;IAAC,MAAD;IAAS,OAAT;IAAkB;EAAlB,CAA4B;EAC9C,MAAM;IAAC,CAAD;IAAI,IAAJ;IAAU,QAAV;IAAoB,MAApB;IAA4B;EAA5B,IAAqC,MAA3C;EAEA,IAAI,CAAC,MAAL,CACI,IAAI,CAAC,KAAL,CAAW,MAAX,KAAsB,QAAQ,CAAC,KAAT,CAAe,MADzC,EAEI,MAAM,qEACF,cAHR;EAIA,IAAI,CAAC,MAAL,CACI,MAAM,IAAI,IAAV,IAAkB,IAAI,CAAC,KAAL,CAAW,MAAX,KAAsB,MAAM,CAAC,KAAP,CAAa,MADzD,EAEI,MAAM,mEACF,cAHR;EAIA,IAAI,CAAC,MAAL,CACI,KAAK,IAAI,IAAT,IAAiB,IAAI,CAAC,KAAL,CAAW,MAAX,KAAsB,KAAK,CAAC,KAAN,CAAY,MADvD,EAEI,MAAM,kEACF,cAHR;EAKA,IAAI;IAAC;EAAD,IAAoB,KAAxB;;EACA,IAAI,eAAe,IAAI,IAAvB,EAA6B;IAC3B,eAAe,GAAG,KAAlB;EACD;;EAED,MAAM,WAAW,GAAG,CAAC,CAAD,EAAI,IAAJ,EAAU,QAAV,CAApB;EAEA,IAAI,WAAW,GAAG,IAAlB;;EACA,IAAI,MAAM,IAAI,IAAd,EAAoB;IAClB,WAAW,GAAG,MAAM,CAAC,KAArB;IACA,WAAW,CAAC,IAAZ,CAAiB,MAAjB;EACD;;EAED,IAAI,UAAU,GAAG,IAAjB;;EACA,IAAI,KAAK,IAAI,IAAb,EAAmB;IACjB,UAAU,GAAG,KAAK,CAAC,KAAnB;IACA,WAAW,CAAC,IAAZ,CAAiB,KAAjB;EACD;;EAED,MAAM,OAAO,GAAG,GAAG,GAAG,OAAN,CAAc,0BAAd,IACZ,IAAI,sBAAJ,CACI,CAAC,CAAC,KADN,EACa,IAAI,CAAC,KADlB,EACyB,QAAQ,CAAC,KADlC,EACyC,WADzC,EACsD,UADtD,EAEI,eAFJ,CADY,GAIZ,IAAI,gBAAJ,CACI,CAAC,CAAC,KADN,EACa,IAAI,CAAC,KADlB,EACyB,QAAQ,CAAC,KADlC,EACyC,WADzC,EACsD,UADtD,EAEI,eAFJ,CAJJ;EAOA,MAAM,MAAM,GACR,OAAO,CAAC,eAAR,CAAwB,OAAxB,EAAiC,WAAjC,EAA8C,WAAW,CAAC,CAAD,CAAX,CAAe,KAA7D,CADJ;EAGA,OAAO,MAAP;AACD,CAlDM;AAoDP,OAAO,MAAM,eAAe,GAAiB;EAC3C,UAAU,EAAE,cAD+B;EAE3C,WAAW,EAAE,OAF8B;EAG3C,UAAU,EAAE;AAH+B,CAAtC","sourcesContent":["\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BatchNormProgram} from '../batchnorm_gpu';\nimport {BatchNormPackedProgram} from '../batchnorm_packed_gpu';\n\nexport const batchNorm: (params: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendWebGL,\n  attrs: FusedBatchNormAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x, mean, variance, offset, scale} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const finalInputs = [x, mean, variance];\n\n  let offsetShape = null;\n  if (offset != null) {\n    offsetShape = offset.shape;\n    finalInputs.push(offset);\n  }\n\n  let scaleShape = null;\n  if (scale != null) {\n    scaleShape = scale.shape;\n    finalInputs.push(scale);\n  }\n\n  const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n      new BatchNormPackedProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon) :\n      new BatchNormProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon);\n  const output =\n      backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n\n  return output;\n};\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgl',\n  kernelFunc: batchNorm as {} as KernelFunc,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}