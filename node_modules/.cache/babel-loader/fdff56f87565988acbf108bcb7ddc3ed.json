{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\n\nfunction nmsParams(node, tensorMap, context) {\n  const boxes = getParamValue('boxes', node, tensorMap, context);\n  const scores = getParamValue('scores', node, tensorMap, context);\n  const maxOutputSize = getParamValue('maxOutputSize', node, tensorMap, context);\n  const iouThreshold = getParamValue('iouThreshold', node, tensorMap, context);\n  const scoreThreshold = getParamValue('scoreThreshold', node, tensorMap, context);\n  const softNmsSigma = getParamValue('softNmsSigma', node, tensorMap, context);\n  return {\n    boxes,\n    scores,\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  };\n}\n\nexport const executeOp = async function (node, tensorMap, context, resourceManager) {\n  let ops = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : tfOps;\n\n  switch (node.op) {\n    case 'NonMaxSuppressionV5':\n      {\n        const {\n          boxes,\n          scores,\n          maxOutputSize,\n          iouThreshold,\n          scoreThreshold,\n          softNmsSigma\n        } = nmsParams(node, tensorMap, context);\n        const result = await ops.image.nonMaxSuppressionWithScoreAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n        return [result.selectedIndices, result.selectedScores];\n      }\n\n    case 'NonMaxSuppressionV4':\n      {\n        const {\n          boxes,\n          scores,\n          maxOutputSize,\n          iouThreshold,\n          scoreThreshold\n        } = nmsParams(node, tensorMap, context);\n        const padToMaxOutputSize = getParamValue('padToMaxOutputSize', node, tensorMap, context);\n        const result = await ops.image.nonMaxSuppressionPaddedAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n        return [result.selectedIndices, result.validOutputs];\n      }\n\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2':\n      {\n        const {\n          boxes,\n          scores,\n          maxOutputSize,\n          iouThreshold,\n          scoreThreshold\n        } = nmsParams(node, tensorMap, context);\n        return [await ops.image.nonMaxSuppressionAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold)];\n      }\n\n    case 'Where':\n      {\n        const condition = ops.cast(getParamValue('condition', node, tensorMap, context), 'bool');\n        const result = [await ops.whereAsync(condition)];\n        condition.dispose();\n        return result;\n      }\n\n    case 'ListDiff':\n      {\n        return ops.setdiff1dAsync(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context));\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'dynamic';","map":{"version":3,"sources":["../../../../../../../tfjs-converter/src/operations/executors/dynamic_executor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport { ResourceManager } from '../../executor/resource_manager';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nfunction nmsParams(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) {\n  const boxes = getParamValue('boxes', node, tensorMap, context) as Tensor;\n  const scores = getParamValue('scores', node, tensorMap, context) as Tensor;\n  const maxOutputSize =\n      getParamValue('maxOutputSize', node, tensorMap, context) as number;\n  const iouThreshold =\n      getParamValue('iouThreshold', node, tensorMap, context) as number;\n  const scoreThreshold =\n      getParamValue('scoreThreshold', node, tensorMap, context) as number;\n  const softNmsSigma =\n      getParamValue('softNmsSigma', node, tensorMap, context) as number;\n\n  return {\n    boxes,\n    scores,\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  };\n}\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext, resourceManager: ResourceManager,\n    ops = tfOps): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'NonMaxSuppressionV5': {\n      const {\n        boxes,\n        scores,\n        maxOutputSize,\n        iouThreshold,\n        scoreThreshold,\n        softNmsSigma\n      } = nmsParams(node, tensorMap, context);\n\n      const result = await ops.image.nonMaxSuppressionWithScoreAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold, softNmsSigma);\n\n      return [result.selectedIndices, result.selectedScores];\n    }\n    case 'NonMaxSuppressionV4': {\n      const {boxes, scores, maxOutputSize, iouThreshold, scoreThreshold} =\n          nmsParams(node, tensorMap, context);\n\n      const padToMaxOutputSize =\n          getParamValue('padToMaxOutputSize', node, tensorMap, context) as\n          boolean;\n\n      const result = await ops.image.nonMaxSuppressionPaddedAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold, padToMaxOutputSize);\n\n      return [result.selectedIndices, result.validOutputs];\n    }\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2': {\n      const {boxes, scores, maxOutputSize, iouThreshold, scoreThreshold} =\n          nmsParams(node, tensorMap, context);\n\n      return [await ops.image.nonMaxSuppressionAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold)];\n    }\n    case 'Where': {\n      const condition = ops.cast(\n          (getParamValue('condition', node, tensorMap, context) as Tensor),\n          'bool');\n      const result = [await ops.whereAsync(condition)];\n      condition.dispose();\n      return result;\n    }\n    case 'ListDiff': {\n      return ops.setdiff1dAsync(\n          getParamValue('x', node, tensorMap, context) as Tensor,\n          getParamValue('y', node, tensorMap, context) as Tensor);\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'dynamic';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}