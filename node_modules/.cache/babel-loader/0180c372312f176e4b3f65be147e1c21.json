{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\n\nclass StringNGramsOp {\n  constructor(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  getPadWidth(nGramWidth) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  getNumNGrams(length, nGramWidth) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, length + 2 * padWidth - nGramWidth + 1);\n  }\n\n  createNGrams(data, splitIndex, output, outputStartIndex, numNGrams, nGramWidth) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding = Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex = splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth); // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n\n      let nGramSize = 0; // Size of the left padding.\n\n      nGramSize += leftPadding * this.leftPad.length; // Size of the tokens.\n\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      } // Size of the right padding.\n\n\n      nGramSize += rightPadding * this.rightPad.length; // Size of the separators.\n\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length; // Build the nGram.\n\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n      let nextNGramIndex = 0;\n\n      const appendToNGram = str => str.forEach(value => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      } // Only output first numTokens - 1 pairs of data and separator\n\n\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      } // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n\n\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n\n        appendToNGram(this.rightPad);\n      }\n    }\n  } // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n\n\n  compute(data, splits) {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && splits[i] <= inputDataSize;\n\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${prevSplit}, ${inputDataSize}]`);\n        }\n\n        prevSplit = splits[i];\n      }\n\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize); // If there is no data or size, return an empty ragged tensor.\n\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty = new Array(inputDataSize);\n\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach(nGramWidth => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach(nGramWidth => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      }); // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i]; // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n\n        if (dataLength === 0) {\n          continue;\n        } // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n\n\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n\n    return [nGrams, nGramsSplits];\n  }\n\n}\n\nexport function stringNGramsImpl(data, dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n  return new StringNGramsOp(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences).compute(data, dataSplits);\n}","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/StringNGrams_impl.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}