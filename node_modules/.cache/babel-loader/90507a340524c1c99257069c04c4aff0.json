{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class PackProgram {\n  constructor(outputShape) {\n    this.variableNames = ['A'];\n    this.packedInputs = false;\n    this.packedOutput = true; // Only input / output 3D tensors.\n\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    if (this.rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', this.rank);\n      const dtype = getCoordsDataType(this.rank);\n      const outOfBoundsCondition = this.getOutOfBoundsCondition(channels);\n      const setup = this.getSetup(channels);\n      const output = this.getOutput(channels);\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n\n  getSourceCoordsArr(dims) {\n    const coords = [];\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n\n        for (let d = 2; d < this.rank; d++) {\n          coord = `${dims[dims.length - 1 - d]},` + coord;\n        }\n\n        coords.push(coord);\n      }\n    }\n\n    return coords;\n  }\n\n  getOutOfBoundsCondition(dims) {\n    if (this.rank === 1) {\n      return `rc > ${this.enableShapeUniforms ? 'outShape' : this.outputShape[0]}`;\n    }\n\n    let cond = '';\n\n    for (let i = this.rank - 2; i < this.rank; i++) {\n      cond += `${dims[i]} >= ${this.enableShapeUniforms ? `outShape[${i}]` : this.outputShape[i]}`;\n\n      if (i < this.rank - 1) {\n        cond += '||';\n      }\n    }\n\n    return cond;\n  }\n\n  getSetup(dims) {\n    if (this.rank === 1) {\n      return '';\n    }\n\n    const innerDims = dims.slice(-2);\n    const col = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` : this.outputShape[this.rank - 1];\n    const row = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` : this.outputShape[this.rank - 2];\n    return `\n      int r = ${innerDims[0]};\n      int c = ${innerDims[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${col};\n      bool rEdge = rp1 >= ${row};\n    `;\n  }\n\n  getOutput(dims) {\n    const sourceCoords = this.getSourceCoordsArr(dims);\n\n    if (this.rank === 1) {\n      const outShape = this.enableShapeUniforms ? 'outShape' : this.outputShape[0];\n      return `getA(rc), (rc + 1 >= ${outShape} ? 0. : getA(rc + 1)), 0, 0`;\n    }\n\n    return `getA(${sourceCoords[0]}),\n            cEdge ? 0. : getA(${sourceCoords[1]}),\n            rEdge ? 0. : getA(${sourceCoords[2]}),\n            rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n  }\n\n}","map":{"version":3,"sources":["../../../../../tfjs-backend-webgl/src/pack_gpu.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = false;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n  rank: number;\n\n  constructor(\n      outputShape:\n          number[]) {  // TODO(https://github.com/tensorflow/tfjs/issues/893):\n                       // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    if (this.rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', this.rank);\n      const dtype = getCoordsDataType(this.rank);\n      const outOfBoundsCondition = this.getOutOfBoundsCondition(channels);\n      const setup = this.getSetup(channels);\n      const output = this.getOutput(channels);\n\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n\n  private getSourceCoordsArr(dims: string[]): string[] {\n    const coords = [];\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n\n        for (let d = 2; d < this.rank; d++) {\n          coord = `${dims[dims.length - 1 - d]},` + coord;\n        }\n\n        coords.push(coord);\n      }\n    }\n    return coords;\n  }\n\n  private getOutOfBoundsCondition(dims: string[]): string {\n    if (this.rank === 1) {\n      return `rc > ${\n          this.enableShapeUniforms ? 'outShape' : this.outputShape[0]}`;\n    }\n\n    let cond = '';\n    for (let i = this.rank - 2; i < this.rank; i++) {\n      cond += `${dims[i]} >= ${\n          this.enableShapeUniforms ? `outShape[${i}]` : this.outputShape[i]}`;\n      if (i < this.rank - 1) {\n        cond += '||';\n      }\n    }\n\n    return cond;\n  }\n\n  private getSetup(dims: string[]): string {\n    if (this.rank === 1) {\n      return '';\n    }\n\n    const innerDims = dims.slice(-2);\n    const col = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` :\n                                           this.outputShape[this.rank - 1];\n    const row = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` :\n                                           this.outputShape[this.rank - 2];\n\n    return `\n      int r = ${innerDims[0]};\n      int c = ${innerDims[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${col};\n      bool rEdge = rp1 >= ${row};\n    `;\n  }\n\n  private getOutput(dims: string[]): string {\n    const sourceCoords = this.getSourceCoordsArr(dims);\n    if (this.rank === 1) {\n      const outShape =\n          this.enableShapeUniforms ? 'outShape' : this.outputShape[0];\n      return `getA(rc), (rc + 1 >= ${outShape} ? 0. : getA(rc + 1)), 0, 0`;\n    }\n\n    return `getA(${sourceCoords[0]}),\n            cEdge ? 0. : getA(${sourceCoords[1]}),\n            rEdge ? 0. : getA(${sourceCoords[2]}),\n            rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}