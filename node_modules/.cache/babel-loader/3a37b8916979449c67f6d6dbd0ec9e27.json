{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Interfaces and methods for training models using tf.Tensor objects.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { Tensor, tensor1d, util } from '@tensorflow/tfjs-core';\nimport { expandDims, gather, sliceAlongFirstAxis } from '../backend/tfjs_backend';\nimport { configureCallbacks, standardizeCallbacks } from '../base_callbacks';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { disposeTensorsInLogs } from '../logs';\nimport { range } from '../utils/math_utils';\nexport function checkBatchSize(batchSize) {\n  tfc.util.assert(batchSize > 0 && Number.isInteger(batchSize), () => `batchSize is required to be a positive integer, but got ${batchSize}`);\n}\n/**\n * Slice a Tensor or an Array of Tensors, by start and stop indices.\n *\n * Porting Note: The `_slice_arrays` function in PyKeras is covered by this\n *   function and `sliceArraysByIndices()` together.\n *\n * @param arrays: the input.\n * @param start: the starting index (inclusive).\n * @param stop: the stopping index (exclusive).\n * @returns The result of the slicing. If `arrays` is an `Array` of\n *   `tf.Tensor`s, the slicing will be applied to all elements of the `Array`\n *   in the same way.\n */\n\nexport function sliceArrays(arrays, start, stop) {\n  if (arrays == null) {\n    return [null];\n  } else if (Array.isArray(arrays)) {\n    return arrays.map(array => sliceAlongFirstAxis(array, start, stop - start));\n  } else {\n    // Tensor.\n    return sliceAlongFirstAxis(arrays, start, stop - start);\n  }\n}\n/**\n * Slice a Tensor or an Array of Tensors, by random-order indices.\n *\n * Porting Note: The `_slice_arrays` function in PyKeras is covered by this\n *   function and `sliceArrays()` together.\n *\n * @param arrays The input `tf.Tensor` or `Array` of `tf.Tensor`s to slice.\n *   If an `Array` of `tf.Tensor`s, all `tf.Tensor`s will be sliced in the\n *   same fashion.\n * @param indices The indices to use for slicing along the first (batch)\n *   dimension.\n * @returns Result(s) of the slicing.\n */\n\nexport function sliceArraysByIndices(arrays, indices) {\n  return tfc.tidy(() => {\n    if (arrays == null) {\n      return null;\n    } else if (Array.isArray(arrays)) {\n      return arrays.map(array => sliceArraysByIndices(array, indices));\n    } else {\n      // TODO(cais): indices should be a pre-constructed Tensor1D to avoid\n      //   tensor1d() calls.\n      return gather(arrays, indices.dtype === 'int32' ? indices : tfc.cast(indices, 'int32'));\n    }\n  });\n}\n/**\n * Returns a list of batch indices (tuples of indices).\n * @param size: Integer, total size of the data to slice into batches.\n * @param batchSize: Integer, batch size.\n * @returns An Array of [batchStart, batchEnd] tuples. batchStart is\n *   inclusive; batchEnd is exclusive. I.e., each batch consists of indices x\n *   that satisfy batchStart <= x < batchEnd.\n */\n\nexport function makeBatches(size, batchSize) {\n  const output = [];\n  let batchStart = 0;\n  let batchEnd = null;\n\n  while (batchStart < size) {\n    batchEnd = batchStart + batchSize;\n\n    if (batchEnd >= size) {\n      batchEnd = size;\n    }\n\n    output.push([batchStart, batchEnd]);\n    batchStart = batchEnd;\n  }\n\n  return output;\n}\n/**\n * Abstract fit function for `f(ins)`.\n * @param f A Function returning a list of tensors. For training, this\n *   function is expected to perform the updates to the variables.\n * @param ins List of tensors to be fed to `f`.\n * @param outLabels List of strings, display names of the outputs of `f`.\n * @param batchSize Integer batch size or `== null` if unknown. Default : 32.\n * @param epochs Number of times to iterate over the data. Default : 1.\n * @param verbose Verbosity mode: 0, 1, or 2. Default: 1.\n * @param callbacks List of callbacks to be called during training.\n * @param valF Function to call for validation.\n * @param valIns List of tensors to be fed to `valF`.\n * @param shuffle Whether to shuffle the data at the beginning of every\n * epoch. Default : true.\n * @param callbackMetrics List of strings, the display names of the metrics\n *   passed to the callbacks. They should be the concatenation of the\n *   display names of the outputs of `f` and the list of display names\n *   of the outputs of `valF`.\n * @param initialEpoch Epoch at which to start training (useful for\n *   resuming a previous training run). Default : 0.\n * @param stepsPerEpoch Total number of steps (batches on samples) before\n *   declaring one epoch finished and starting the next epoch. Ignored with\n *   the default value of `undefined` or `null`.\n * @param validationSteps Number of steps to run validation for (only if\n *   doing validation from data tensors). Not applicable for tfjs-layers.\n * @returns A `History` object.\n */\n\nasync function fitLoop( // Type `model` as `any` here to avoid circular dependency w/ training.ts.\n// tslint:disable-next-line:no-any\nmodel, f, ins, outLabels, batchSize, epochs, verbose, callbacks, valF, valIns, shuffle, callbackMetrics, initialEpoch, stepsPerEpoch, validationSteps) {\n  if (batchSize == null) {\n    batchSize = 32;\n  }\n\n  if (epochs == null) {\n    epochs = 1;\n  }\n\n  if (shuffle == null) {\n    shuffle = true;\n  }\n\n  if (initialEpoch == null) {\n    initialEpoch = 0;\n  } // TODO(cais): Change const to let below when implementing validation.\n\n\n  let doValidation = false;\n\n  if (valF != null && valIns != null) {\n    doValidation = true; // TODO(cais): verbose message.\n  }\n\n  if (validationSteps != null) {\n    doValidation = true;\n\n    if (stepsPerEpoch == null) {\n      throw new ValueError('Can only use `validationSteps` when doing step-wise training, ' + 'i.e., `stepsPerEpoch` must be set.');\n    }\n  }\n\n  const numTrainSamples = model.checkNumSamples(ins, batchSize, stepsPerEpoch, 'steps_per_epoch');\n  let indexArray;\n\n  if (numTrainSamples != null) {\n    indexArray = range(0, numTrainSamples);\n  }\n\n  if (verbose == null) {\n    verbose = 1;\n  }\n\n  const {\n    callbackList,\n    history\n  } = configureCallbacks(callbacks, verbose, epochs, initialEpoch, numTrainSamples, stepsPerEpoch, batchSize, doValidation, callbackMetrics);\n  callbackList.setModel(model);\n  model.history = history;\n  await callbackList.onTrainBegin();\n  model.stopTraining_ = false; // TODO(cais): Take care of callbacks.validation_data as in PyKeras.\n  // TODO(cais): Pre-convert feeds for performance as in PyKeras.\n\n  for (let epoch = initialEpoch; epoch < epochs; ++epoch) {\n    await callbackList.onEpochBegin(epoch);\n    const epochLogs = {};\n\n    if (stepsPerEpoch != null) {\n      throw new NotImplementedError('stepsPerEpoch mode is not implemented yet.');\n    } else {\n      if (shuffle === 'batch') {\n        throw new NotImplementedError('batch shuffling is not implemneted yet');\n      } else if (shuffle) {\n        util.shuffle(indexArray);\n      } // Convert the potentially shuffled indices to Tensor1D, to avoid the\n      // cost of repeated creation of Array1Ds later on.\n\n\n      const epochIndexArray1D = tensor1d(indexArray);\n      const batches = makeBatches(numTrainSamples, batchSize);\n\n      for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n        const batchLogs = {};\n        await callbackList.onBatchBegin(batchIndex, batchLogs);\n        tfc.tidy(() => {\n          const batchStart = batches[batchIndex][0];\n          const batchEnd = batches[batchIndex][1];\n          const batchIds = sliceAlongFirstAxis(epochIndexArray1D, batchStart, batchEnd - batchStart);\n          batchLogs['batch'] = batchIndex;\n          batchLogs['size'] = batchEnd - batchStart; // TODO(cais): In ins, train flag can be a number, instead of an\n          //   Tensor? Do we need to handle this in tfjs-layers?\n\n          const insBatch = sliceArraysByIndices(ins, batchIds);\n          const outs = f(insBatch);\n\n          for (let i = 0; i < outLabels.length; ++i) {\n            const label = outLabels[i];\n            const out = outs[i];\n            batchLogs[label] = out;\n            tfc.keep(out); // TODO(cais): Use scope() to avoid ownership.\n          }\n\n          if (batchIndex === batches.length - 1) {\n            // Last batch.\n            if (doValidation) {\n              const valOuts = model.testLoop(valF, valIns, batchSize); // Porting Notes: In tfjs-layers, valOuts is always an Array.\n\n              for (let i = 0; i < outLabels.length; ++i) {\n                const label = outLabels[i];\n                const out = valOuts[i];\n                tfc.keep(out); // TODO(cais): Use scope() to avoid ownership.\n\n                epochLogs['val_' + label] = out;\n              }\n            }\n          }\n        });\n        await callbackList.onBatchEnd(batchIndex, batchLogs);\n        disposeTensorsInLogs(batchLogs);\n\n        if (model.stopTraining_) {\n          break;\n        } // TODO(cais): return outs as list of Tensor.\n\n      }\n\n      epochIndexArray1D.dispose();\n    } // TODO(cais): Run validation at the end of the epoch.\n\n\n    await callbackList.onEpochEnd(epoch, epochLogs);\n\n    if (model.stopTraining_) {\n      break;\n    }\n  }\n\n  await callbackList.onTrainEnd();\n  await model.history.syncData();\n  return model.history;\n}\n\nexport async function fitTensors( // Type `model` as `any` here to avoid circular dependency w/ training.ts.\n// tslint:disable-next-line:no-any\nmodel, x, y) {\n  let args = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  if (model.isTraining) {\n    throw new Error('Cannot start training because another fit() call is ongoing.');\n  }\n\n  model.isTraining = true;\n  let inputs;\n  let targets;\n  let originalInputs;\n  let originalTargets;\n  let inputValX;\n  let inputValY;\n  let valX;\n  let valY;\n  let sampleWeights;\n\n  try {\n    const batchSize = args.batchSize == null ? 32 : args.batchSize;\n    checkBatchSize(batchSize); // Validate user data.\n    // TODO(cais): Support sampleWeight.\n\n    const checkBatchAxis = false;\n    const standardizedOuts = await model.standardizeUserData(x, y, args.sampleWeight, args.classWeight, checkBatchAxis, batchSize);\n    inputs = standardizedOuts[0];\n    targets = standardizedOuts[1];\n    sampleWeights = standardizedOuts[2]; // Prepare validation data.\n\n    let doValidation = false;\n    let valIns;\n\n    if (args.validationData != null && args.validationData.length > 0) {\n      doValidation = true;\n\n      if (args.validationData.length === 2) {\n        // config.validationData consists of valX and valY.\n        inputValX = args.validationData[0];\n        inputValY = args.validationData[1];\n      } else if (args.validationData.length === 3) {\n        throw new NotImplementedError('validationData including sample weights is not supported yet.');\n      } else {\n        throw new ValueError(`When passing validation data, it must contain 2 (valX, valY) ` + `or 3 (valX, valY, valSampleWeight) items; ` + `${args.validationData} is invalid.`);\n      }\n\n      const checkBatchAxis = true;\n      const valStandardized = await model.standardizeUserData(inputValX, inputValY, null,\n      /** Unused sample weights. */\n      null,\n      /** Unused class weights. */\n      checkBatchAxis, batchSize);\n      valX = valStandardized[0];\n      valY = valStandardized[1];\n      valIns = valX.concat(valY); // TODO(cais): Add useLearningPhase data properly.\n    } else if (args.validationSplit != null && args.validationSplit > 0 && args.validationSplit < 1) {\n      doValidation = true; // Porting Note: In tfjs-layers, inputs[0] is always a Tensor.\n\n      const splitAt = Math.floor(inputs[0].shape[0] * (1 - args.validationSplit));\n      const originalBatchSize = inputs[0].shape[0];\n      valX = sliceArrays(inputs, splitAt, originalBatchSize);\n      originalInputs = inputs;\n      inputs = sliceArrays(inputs, 0, splitAt);\n      valY = sliceArrays(targets, splitAt, originalBatchSize);\n      originalTargets = targets;\n      targets = sliceArrays(targets, 0, splitAt); // TODO(cais): Once sampleWeights becomes available, slice it to get\n      //   valSampleWeights.\n\n      valIns = valX.concat(valY); // TODO(cais): Add useLearningPhase data properly.\n    } else if (args.validationSteps != null) {\n      doValidation = true; // TODO(cais): Add useLearningPhase.\n    }\n\n    const ins = inputs.concat(targets).concat(sampleWeights);\n    model.checkTrainableWeightsConsistency(); // TODO(cais): Handle use_learning_phase and learning_phase?\n    // Porting Note: Here we see a key deviation of tfjs-layers from\n    // Keras.\n    //  Due to the imperative nature of tfjs-layers' backend (tfjs-core),\n    //  we do not construct symbolic computation graphs to embody the\n    //  training process. Instead, we define a function that performs the\n    //  training action. In PyKeras, the data (inputs and targets) are fed\n    //  through graph placeholders. In tfjs-layers, the data are fed as\n    //  function arguments. Since the function are defined below in the\n    //  scope, we don't have equivalents of PyKeras's\n    //  `_make_train_funciton`.\n\n    const trainFunction = model.makeTrainFunction();\n    const outLabels = model.getDedupedMetricsNames();\n    let valFunction;\n    let callbackMetrics;\n\n    if (doValidation) {\n      model.makeTestFunction();\n      valFunction = model.testFunction;\n      callbackMetrics = outLabels.slice().concat(outLabels.map(n => 'val_' + n));\n    } else {\n      valFunction = null;\n      valIns = [];\n      callbackMetrics = outLabels.slice();\n    }\n\n    const callbacks = standardizeCallbacks(args.callbacks, args.yieldEvery);\n    const out = await fitLoop(model, trainFunction, ins, outLabels, batchSize, args.epochs, args.verbose, callbacks, valFunction, valIns, args.shuffle, callbackMetrics, args.initialEpoch, null, null);\n    return out;\n  } finally {\n    model.isTraining = false; // Memory clean up.\n\n    disposeNewTensors(inputs, x);\n    disposeNewTensors(targets, y);\n    disposeNewTensors(originalInputs, x);\n    disposeNewTensors(originalTargets, y);\n    disposeNewTensors(valX, inputValX);\n    disposeNewTensors(valY, inputValY);\n\n    if (sampleWeights != null) {\n      tfc.dispose(sampleWeights);\n    }\n  } // TODO(cais): Add value to outLabels.\n\n}\n/**\n * Ensure tensors all have a rank of at least 2.\n *\n * If a tensor has a rank of 1, it is dimension-expanded to rank 2.\n * If any tensor has a rank of 0 (i.e., is a scalar), an error will be thrown.\n */\n\nexport function ensureTensorsRank2OrHigher(tensors) {\n  const outs = [];\n\n  if (tensors instanceof Tensor) {\n    tensors = [tensors];\n  } // Make Tensors at least 2D.\n\n\n  for (let i = 0; i < tensors.length; ++i) {\n    const tensor = tensors[i];\n\n    if (tensor.rank === 1) {\n      outs.push(expandDims(tensor, 1));\n    } else if (tensor.rank === 0) {\n      throw new Error('Expected tensor to be at least 1D, but received a 0D tensor ' + '(scalar).');\n    } else {\n      outs.push(tensor);\n    }\n  }\n\n  return outs;\n}\n/**\n * Compare a set of tensors with a reference (old) set, discard the ones\n * in the new set that are not present in the reference set.\n *\n * This method is used for memory clenaup during calls such as\n * LayersModel.fit().\n *\n * @param tensors New set which may contain Tensors not present in\n *   `refTensors`.\n * @param refTensors Reference Tensor set.\n */\n// TODO(cais, kangyizhang): Deduplicate with tfjs-data.\n\nexport function disposeNewTensors(tensors, refTensors) {\n  if (tensors == null) {\n    return;\n  }\n\n  const oldTensorIds = [];\n\n  if (refTensors instanceof Tensor) {\n    oldTensorIds.push(refTensors.id);\n  } else if (Array.isArray(refTensors)) {\n    refTensors.forEach(t => oldTensorIds.push(t.id));\n  } else if (refTensors != null) {\n    // `oldTensors` is a map from string name to Tensor.\n    for (const name in refTensors) {\n      const oldTensor = refTensors[name];\n      oldTensorIds.push(oldTensor.id);\n    }\n  }\n\n  const tensorsToDispose = [];\n\n  if (tensors instanceof Tensor) {\n    if (oldTensorIds.indexOf(tensors.id) === -1) {\n      tensorsToDispose.push(tensors);\n    }\n  } else if (Array.isArray(tensors)) {\n    tensors.forEach(t => {\n      if (oldTensorIds.indexOf(t.id) === -1) {\n        tensorsToDispose.push(t);\n      }\n    });\n  } else if (tensors != null) {\n    // `oldTensors` is a map from string name to Tensor.\n    for (const name in tensors) {\n      const tensor = tensors[name];\n\n      if (oldTensorIds.indexOf(tensor.id) === -1) {\n        tensorsToDispose.push(tensor);\n      }\n    }\n  }\n\n  tensorsToDispose.forEach(t => {\n    if (!t.isDisposed) {\n      t.dispose();\n    }\n  });\n}","map":{"version":3,"sources":["../../../../../../tfjs-layers/src/engine/training_tensors.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Interfaces and methods for training models using tf.Tensor objects.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {Scalar, Tensor, Tensor1D, tensor1d, util} from '@tensorflow/tfjs-core';\n\nimport {expandDims, gather, sliceAlongFirstAxis} from '../backend/tfjs_backend';\nimport {BaseCallback, configureCallbacks, CustomCallbackArgs, History, ModelLoggingVerbosity, standardizeCallbacks, YieldEveryOptions} from '../base_callbacks';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {disposeTensorsInLogs, UnresolvedLogs} from '../logs';\nimport {range} from '../utils/math_utils';\nimport {ClassWeight, ClassWeightMap} from './training_utils';\n\n/**\n * Interface configuration model training based on data as `tf.Tensor`s.\n */\nexport interface ModelFitArgs {\n  /**\n   * Number of samples per gradient update. If unspecified, it\n   * will default to 32.\n   */\n  batchSize?: number;\n\n  /**\n   * Integer number of times to iterate over the training data arrays.\n   */\n  epochs?: number;\n\n  /**\n   * Verbosity level.\n   *\n   * Expected to be 0, 1, or 2. Default: 1.\n   *\n   * 0 - No printed message during fit() call.\n   * 1 - In Node.js (tfjs-node), prints the progress bar, together with\n   *     real-time updates of loss and metric values and training speed.\n   *     In the browser: no action. This is the default.\n   * 2 - Not implemented yet.\n   */\n  verbose?: ModelLoggingVerbosity;\n\n  /**\n   * List of callbacks to be called during training.\n   * Can have one or more of the following callbacks:\n   *   - `onTrainBegin(logs)`: called when training starts.\n   *   - `onTrainEnd(logs)`: called when training ends.\n   *   - `onEpochBegin(epoch, logs)`: called at the start of every epoch.\n   *   - `onEpochEnd(epoch, logs)`: called at the end of every epoch.\n   *   - `onBatchBegin(batch, logs)`: called at the start of every batch.\n   *   - `onBatchEnd(batch, logs)`: called at the end of every batch.\n   *   - `onYield(epoch, batch, logs)`: called every `yieldEvery` milliseconds\n   *      with the current epoch, batch and logs. The logs are the same\n   *      as in `onBatchEnd()`. Note that `onYield` can skip batches or\n   *      epochs. See also docs for `yieldEvery` below.\n   */\n  callbacks?: BaseCallback[]|CustomCallbackArgs|CustomCallbackArgs[];\n\n  /**\n   * Float between 0 and 1: fraction of the training data\n   * to be used as validation data. The model will set apart this fraction of\n   * the training data, will not train on it, and will evaluate the loss and\n   * any model metrics on this data at the end of each epoch.\n   * The validation data is selected from the last samples in the `x` and `y`\n   * data provided, before shuffling.\n   */\n  validationSplit?: number;\n\n  /**\n   * Data on which to evaluate the loss and any model\n   * metrics at the end of each epoch. The model will not be trained on this\n   * data. This could be a tuple [xVal, yVal] or a tuple [xVal, yVal,\n   * valSampleWeights]. The model will not be trained on this data.\n   * `validationData` will override `validationSplit`.\n   */\n  validationData?: [\n    Tensor|Tensor[], Tensor|Tensor[]\n  ]|[Tensor | Tensor[], Tensor|Tensor[], Tensor|Tensor[]];\n\n  /**\n   * Whether to shuffle the training data before each epoch. Has\n   * no effect when `stepsPerEpoch` is not `null`.\n   */\n  shuffle?: boolean;\n\n  /**\n   * Optional object mapping class indices (integers) to\n   * a weight (float) to apply to the model's loss for the samples from this\n   * class during training. This can be useful to tell the model to \"pay more\n   * attention\" to samples from an under-represented class.\n   *\n   * If the model has multiple outputs, a class weight can be specified for\n   * each of the outputs by setting this field an array of weight object\n   * or a object that maps model output names (e.g., `model.outputNames[0]`)\n   * to weight objects.\n   */\n  classWeight?: ClassWeight|ClassWeight[]|ClassWeightMap;\n\n  /**\n   * Optional array of the same length as x, containing\n   * weights to apply to the model's loss for each sample. In the case of\n   * temporal data, you can pass a 2D array with shape (samples,\n   * sequenceLength), to apply a different weight to every timestep of every\n   * sample. In this case you should make sure to specify\n   * sampleWeightMode=\"temporal\" in compile().\n   */\n  sampleWeight?: Tensor;\n\n  /**\n   * Epoch at which to start training (useful for resuming a previous training\n   * run). When this is used, `epochs` is the index of the \"final epoch\".\n   * The model is not trained for a number of iterations given by `epochs`,\n   * but merely until the epoch of index `epochs` is reached.\n   */\n  initialEpoch?: number;\n\n  /**\n   * Total number of steps (batches of samples) before\n   * declaring one epoch finished and starting the next epoch. When training\n   * with Input Tensors such as TensorFlow data tensors, the default `null` is\n   * equal to the number of unique samples in your dataset divided by the\n   * batch size, or 1 if that cannot be determined.\n   */\n  stepsPerEpoch?: number;\n\n  /**\n   * Only relevant if `stepsPerEpoch` is specified. Total number of steps\n   * (batches of samples) to validate before stopping.\n   */\n  validationSteps?: number;\n\n  /**\n   * Configures the frequency of yielding the main thread to other tasks.\n   *\n   * In the browser environment, yielding the main thread can improve the\n   * responsiveness of the page during training. In the Node.js environment,\n   * it can ensure tasks queued in the event loop can be handled in a timely\n   * manner.\n   *\n   * The value can be one of the following:\n   *   - `'auto'`: The yielding happens at a certain frame rate (currently set\n   *               at 125ms). This is the default.\n   *   - `'batch'`: yield every batch.\n   *   - `'epoch'`: yield every epoch.\n   *   - any `number`: yield every `number` milliseconds.\n   *   - `'never'`: never yield. (yielding can still happen through `await\n   *      nextFrame()` calls in custom callbacks.)\n   */\n  yieldEvery?: YieldEveryOptions;\n}\n\nexport function checkBatchSize(batchSize: number) {\n  tfc.util.assert(\n      batchSize > 0 && Number.isInteger(batchSize),\n      () => `batchSize is required to be a positive integer, but got ${\n          batchSize}`);\n}\n\n/**\n * Slice a Tensor or an Array of Tensors, by start and stop indices.\n *\n * Porting Note: The `_slice_arrays` function in PyKeras is covered by this\n *   function and `sliceArraysByIndices()` together.\n *\n * @param arrays: the input.\n * @param start: the starting index (inclusive).\n * @param stop: the stopping index (exclusive).\n * @returns The result of the slicing. If `arrays` is an `Array` of\n *   `tf.Tensor`s, the slicing will be applied to all elements of the `Array`\n *   in the same way.\n */\nexport function sliceArrays(\n    arrays: Tensor|Tensor[], start: number, stop: number): Tensor|Tensor[] {\n  if (arrays == null) {\n    return [null];\n  } else if (Array.isArray(arrays)) {\n    return arrays.map(array => sliceAlongFirstAxis(array, start, stop - start));\n  } else {  // Tensor.\n    return sliceAlongFirstAxis(arrays, start, stop - start);\n  }\n}\n\n/**\n * Slice a Tensor or an Array of Tensors, by random-order indices.\n *\n * Porting Note: The `_slice_arrays` function in PyKeras is covered by this\n *   function and `sliceArrays()` together.\n *\n * @param arrays The input `tf.Tensor` or `Array` of `tf.Tensor`s to slice.\n *   If an `Array` of `tf.Tensor`s, all `tf.Tensor`s will be sliced in the\n *   same fashion.\n * @param indices The indices to use for slicing along the first (batch)\n *   dimension.\n * @returns Result(s) of the slicing.\n */\nexport function sliceArraysByIndices(\n    arrays: Tensor|Tensor[], indices: Tensor1D): Tensor|Tensor[] {\n  return tfc.tidy(() => {\n    if (arrays == null) {\n      return null;\n    } else if (Array.isArray(arrays)) {\n      return arrays.map(\n          array => (sliceArraysByIndices(array, indices) as Tensor));\n    } else {\n      // TODO(cais): indices should be a pre-constructed Tensor1D to avoid\n      //   tensor1d() calls.\n      return gather(\n          arrays,\n          indices.dtype === 'int32' ? indices : tfc.cast(indices, 'int32'));\n    }\n  });\n}\n\n/**\n * Returns a list of batch indices (tuples of indices).\n * @param size: Integer, total size of the data to slice into batches.\n * @param batchSize: Integer, batch size.\n * @returns An Array of [batchStart, batchEnd] tuples. batchStart is\n *   inclusive; batchEnd is exclusive. I.e., each batch consists of indices x\n *   that satisfy batchStart <= x < batchEnd.\n */\nexport function makeBatches(\n    size: number, batchSize: number): Array<[number, number]> {\n  const output: Array<[number, number]> = [];\n  let batchStart = 0;\n  let batchEnd: number = null;\n  while (batchStart < size) {\n    batchEnd = batchStart + batchSize;\n    if (batchEnd >= size) {\n      batchEnd = size;\n    }\n    output.push([batchStart, batchEnd]);\n    batchStart = batchEnd;\n  }\n  return output;\n}\n\n/**\n * Abstract fit function for `f(ins)`.\n * @param f A Function returning a list of tensors. For training, this\n *   function is expected to perform the updates to the variables.\n * @param ins List of tensors to be fed to `f`.\n * @param outLabels List of strings, display names of the outputs of `f`.\n * @param batchSize Integer batch size or `== null` if unknown. Default : 32.\n * @param epochs Number of times to iterate over the data. Default : 1.\n * @param verbose Verbosity mode: 0, 1, or 2. Default: 1.\n * @param callbacks List of callbacks to be called during training.\n * @param valF Function to call for validation.\n * @param valIns List of tensors to be fed to `valF`.\n * @param shuffle Whether to shuffle the data at the beginning of every\n * epoch. Default : true.\n * @param callbackMetrics List of strings, the display names of the metrics\n *   passed to the callbacks. They should be the concatenation of the\n *   display names of the outputs of `f` and the list of display names\n *   of the outputs of `valF`.\n * @param initialEpoch Epoch at which to start training (useful for\n *   resuming a previous training run). Default : 0.\n * @param stepsPerEpoch Total number of steps (batches on samples) before\n *   declaring one epoch finished and starting the next epoch. Ignored with\n *   the default value of `undefined` or `null`.\n * @param validationSteps Number of steps to run validation for (only if\n *   doing validation from data tensors). Not applicable for tfjs-layers.\n * @returns A `History` object.\n */\nasync function fitLoop(\n    // Type `model` as `any` here to avoid circular dependency w/ training.ts.\n    // tslint:disable-next-line:no-any\n    model: any, f: (data: Tensor[]) => Scalar[], ins: Tensor[],\n    outLabels?: string[], batchSize?: number, epochs?: number, verbose?: number,\n    callbacks?: BaseCallback[], valF?: (data: Tensor[]) => Scalar[],\n    valIns?: Tensor[], shuffle?: boolean|string, callbackMetrics?: string[],\n    initialEpoch?: number, stepsPerEpoch?: number,\n    validationSteps?: number): Promise<History> {\n  if (batchSize == null) {\n    batchSize = 32;\n  }\n  if (epochs == null) {\n    epochs = 1;\n  }\n  if (shuffle == null) {\n    shuffle = true;\n  }\n  if (initialEpoch == null) {\n    initialEpoch = 0;\n  }\n\n  // TODO(cais): Change const to let below when implementing validation.\n  let doValidation = false;\n  if (valF != null && valIns != null) {\n    doValidation = true;\n    // TODO(cais): verbose message.\n  }\n  if (validationSteps != null) {\n    doValidation = true;\n    if (stepsPerEpoch == null) {\n      throw new ValueError(\n          'Can only use `validationSteps` when doing step-wise training, ' +\n          'i.e., `stepsPerEpoch` must be set.');\n    }\n  }\n\n  const numTrainSamples =\n      model.checkNumSamples(ins, batchSize, stepsPerEpoch, 'steps_per_epoch');\n  let indexArray: number[];\n  if (numTrainSamples != null) {\n    indexArray = range(0, numTrainSamples);\n  }\n\n  if (verbose == null) {\n    verbose = 1;\n  }\n\n  const {callbackList, history} = configureCallbacks(\n      callbacks, verbose, epochs, initialEpoch, numTrainSamples, stepsPerEpoch,\n      batchSize, doValidation, callbackMetrics);\n  callbackList.setModel(model);\n  model.history = history;\n  await callbackList.onTrainBegin();\n  model.stopTraining_ = false;\n  // TODO(cais): Take care of callbacks.validation_data as in PyKeras.\n  // TODO(cais): Pre-convert feeds for performance as in PyKeras.\n\n  for (let epoch = initialEpoch; epoch < epochs; ++epoch) {\n    await callbackList.onEpochBegin(epoch);\n    const epochLogs: UnresolvedLogs = {};\n    if (stepsPerEpoch != null) {\n      throw new NotImplementedError(\n          'stepsPerEpoch mode is not implemented yet.');\n    } else {\n      if (shuffle === 'batch') {\n        throw new NotImplementedError('batch shuffling is not implemneted yet');\n      } else if (shuffle) {\n        util.shuffle(indexArray);\n      }\n      // Convert the potentially shuffled indices to Tensor1D, to avoid the\n      // cost of repeated creation of Array1Ds later on.\n      const epochIndexArray1D = tensor1d(indexArray);\n\n      const batches = makeBatches(numTrainSamples, batchSize);\n      for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n        const batchLogs: UnresolvedLogs = {};\n        await callbackList.onBatchBegin(batchIndex, batchLogs);\n\n        tfc.tidy(() => {\n          const batchStart = batches[batchIndex][0];\n          const batchEnd = batches[batchIndex][1];\n          const batchIds = sliceAlongFirstAxis(\n                               epochIndexArray1D, batchStart,\n                               batchEnd - batchStart) as Tensor1D;\n          batchLogs['batch'] = batchIndex;\n          batchLogs['size'] = batchEnd - batchStart;\n\n          // TODO(cais): In ins, train flag can be a number, instead of an\n          //   Tensor? Do we need to handle this in tfjs-layers?\n          const insBatch = sliceArraysByIndices(ins, batchIds) as Tensor[];\n          const outs = f(insBatch);\n          for (let i = 0; i < outLabels.length; ++i) {\n            const label = outLabels[i];\n            const out = outs[i];\n            batchLogs[label] = out;\n            tfc.keep(out);\n            // TODO(cais): Use scope() to avoid ownership.\n          }\n\n          if (batchIndex === batches.length - 1) {  // Last batch.\n            if (doValidation) {\n              const valOuts = model.testLoop(valF, valIns, batchSize);\n              // Porting Notes: In tfjs-layers, valOuts is always an Array.\n              for (let i = 0; i < outLabels.length; ++i) {\n                const label = outLabels[i];\n                const out = valOuts[i];\n                tfc.keep(out);\n                // TODO(cais): Use scope() to avoid ownership.\n                epochLogs['val_' + label] = out;\n              }\n            }\n          }\n        });\n\n        await callbackList.onBatchEnd(batchIndex, batchLogs);\n        disposeTensorsInLogs(batchLogs);\n\n        if (model.stopTraining_) {\n          break;\n        }\n        // TODO(cais): return outs as list of Tensor.\n      }\n\n      epochIndexArray1D.dispose();\n    }\n    // TODO(cais): Run validation at the end of the epoch.\n    await callbackList.onEpochEnd(epoch, epochLogs);\n    if (model.stopTraining_) {\n      break;\n    }\n  }\n  await callbackList.onTrainEnd();\n\n  await model.history.syncData();\n  return model.history;\n}\n\nexport async function fitTensors(\n    // Type `model` as `any` here to avoid circular dependency w/ training.ts.\n    // tslint:disable-next-line:no-any\n    model: any, x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n    y: Tensor|Tensor[]|{[inputName: string]: Tensor},\n    args: ModelFitArgs = {}): Promise<History> {\n  if (model.isTraining) {\n    throw new Error(\n        'Cannot start training because another fit() call is ongoing.');\n  }\n  model.isTraining = true;\n  let inputs: Tensor[];\n  let targets: Tensor[];\n  let originalInputs: Tensor[];\n  let originalTargets: Tensor[];\n  let inputValX: Tensor|Tensor[];\n  let inputValY: Tensor|Tensor[];\n  let valX: Tensor|Tensor[];\n  let valY: Tensor|Tensor[];\n  let sampleWeights: Tensor[];\n  try {\n    const batchSize = args.batchSize == null ? 32 : args.batchSize;\n    checkBatchSize(batchSize);\n\n    // Validate user data.\n    // TODO(cais): Support sampleWeight.\n    const checkBatchAxis = false;\n    const standardizedOuts =\n        await model.standardizeUserData(\n            x, y, args.sampleWeight, args.classWeight, checkBatchAxis,\n            batchSize) as [Tensor[], Tensor[], Tensor[]];\n    inputs = standardizedOuts[0];\n    targets = standardizedOuts[1];\n    sampleWeights = standardizedOuts[2];\n\n    // Prepare validation data.\n    let doValidation = false;\n    let valIns: Tensor[];\n    if (args.validationData != null && args.validationData.length > 0) {\n      doValidation = true;\n      if (args.validationData.length === 2) {\n        // config.validationData consists of valX and valY.\n        inputValX = args.validationData[0];\n        inputValY = args.validationData[1];\n      } else if (args.validationData.length === 3) {\n        throw new NotImplementedError(\n            'validationData including sample weights is not supported yet.');\n      } else {\n        throw new ValueError(\n            `When passing validation data, it must contain 2 (valX, valY) ` +\n            `or 3 (valX, valY, valSampleWeight) items; ` +\n            `${args.validationData} is invalid.`);\n      }\n\n      const checkBatchAxis = true;\n      const valStandardized =\n          await model.standardizeUserData(\n              inputValX, inputValY, null, /** Unused sample weights. */\n              null,                       /** Unused class weights. */\n              checkBatchAxis, batchSize) as [Tensor[], Tensor[], Tensor[]];\n      valX = valStandardized[0];\n      valY = valStandardized[1];\n      valIns = valX.concat(valY);\n      // TODO(cais): Add useLearningPhase data properly.\n    } else if (\n        args.validationSplit != null && args.validationSplit > 0 &&\n        args.validationSplit < 1) {\n      doValidation = true;\n      // Porting Note: In tfjs-layers, inputs[0] is always a Tensor.\n      const splitAt =\n          Math.floor(inputs[0].shape[0] * (1 - args.validationSplit));\n      const originalBatchSize = inputs[0].shape[0];\n      valX = sliceArrays(inputs, splitAt, originalBatchSize) as Tensor[];\n      originalInputs = inputs;\n      inputs = sliceArrays(inputs, 0, splitAt) as Tensor[];\n      valY = sliceArrays(targets, splitAt, originalBatchSize) as Tensor[];\n      originalTargets = targets;\n      targets = sliceArrays(targets, 0, splitAt) as Tensor[];\n      // TODO(cais): Once sampleWeights becomes available, slice it to get\n      //   valSampleWeights.\n      valIns = valX.concat(valY);\n\n      // TODO(cais): Add useLearningPhase data properly.\n    } else if (args.validationSteps != null) {\n      doValidation = true;\n      // TODO(cais): Add useLearningPhase.\n    }\n\n    const ins = inputs.concat(targets).concat(sampleWeights);\n\n    model.checkTrainableWeightsConsistency();\n\n    // TODO(cais): Handle use_learning_phase and learning_phase?\n\n    // Porting Note: Here we see a key deviation of tfjs-layers from\n    // Keras.\n    //  Due to the imperative nature of tfjs-layers' backend (tfjs-core),\n    //  we do not construct symbolic computation graphs to embody the\n    //  training process. Instead, we define a function that performs the\n    //  training action. In PyKeras, the data (inputs and targets) are fed\n    //  through graph placeholders. In tfjs-layers, the data are fed as\n    //  function arguments. Since the function are defined below in the\n    //  scope, we don't have equivalents of PyKeras's\n    //  `_make_train_funciton`.\n    const trainFunction = model.makeTrainFunction();\n    const outLabels = model.getDedupedMetricsNames() as string[];\n\n    let valFunction: (data: Tensor[]) => Scalar[];\n    let callbackMetrics: string[];\n    if (doValidation) {\n      model.makeTestFunction();\n      valFunction = model.testFunction;\n      callbackMetrics =\n          outLabels.slice().concat(outLabels.map(n => 'val_' + n));\n    } else {\n      valFunction = null;\n      valIns = [];\n      callbackMetrics = outLabels.slice();\n    }\n\n    const callbacks = standardizeCallbacks(args.callbacks, args.yieldEvery);\n    const out = await fitLoop(\n        model, trainFunction, ins, outLabels, batchSize, args.epochs,\n        args.verbose, callbacks, valFunction, valIns, args.shuffle,\n        callbackMetrics, args.initialEpoch, null, null);\n    return out;\n  } finally {\n    model.isTraining = false;\n    // Memory clean up.\n    disposeNewTensors(inputs, x);\n    disposeNewTensors(targets, y);\n    disposeNewTensors(originalInputs, x);\n    disposeNewTensors(originalTargets, y);\n    disposeNewTensors(valX as Tensor[], inputValX);\n    disposeNewTensors(valY as Tensor[], inputValY);\n    if (sampleWeights != null) {\n      tfc.dispose(sampleWeights);\n    }\n  }\n  // TODO(cais): Add value to outLabels.\n}\n\n/**\n * Ensure tensors all have a rank of at least 2.\n *\n * If a tensor has a rank of 1, it is dimension-expanded to rank 2.\n * If any tensor has a rank of 0 (i.e., is a scalar), an error will be thrown.\n */\nexport function ensureTensorsRank2OrHigher(tensors: Tensor|Tensor[]): Tensor[] {\n  const outs: Tensor[] = [];\n  if (tensors instanceof Tensor) {\n    tensors = [tensors];\n  }\n\n  // Make Tensors at least 2D.\n  for (let i = 0; i < tensors.length; ++i) {\n    const tensor = tensors[i];\n    if (tensor.rank === 1) {\n      outs.push(expandDims(tensor, 1));\n    } else if (tensor.rank === 0) {\n      throw new Error(\n          'Expected tensor to be at least 1D, but received a 0D tensor ' +\n          '(scalar).');\n    } else {\n      outs.push(tensor);\n    }\n  }\n  return outs;\n}\n\n/**\n * Compare a set of tensors with a reference (old) set, discard the ones\n * in the new set that are not present in the reference set.\n *\n * This method is used for memory clenaup during calls such as\n * LayersModel.fit().\n *\n * @param tensors New set which may contain Tensors not present in\n *   `refTensors`.\n * @param refTensors Reference Tensor set.\n */\n// TODO(cais, kangyizhang): Deduplicate with tfjs-data.\nexport function disposeNewTensors(\n    tensors: Tensor|Tensor[]|{[inputName: string]: Tensor},\n    refTensors: Tensor|Tensor[]|{[inputName: string]: Tensor}): void {\n  if (tensors == null) {\n    return;\n  }\n  const oldTensorIds: number[] = [];\n  if (refTensors instanceof Tensor) {\n    oldTensorIds.push(refTensors.id);\n  } else if (Array.isArray(refTensors)) {\n    refTensors.forEach(t => oldTensorIds.push(t.id));\n  } else if (refTensors != null) {\n    // `oldTensors` is a map from string name to Tensor.\n    for (const name in refTensors) {\n      const oldTensor = refTensors[name];\n      oldTensorIds.push(oldTensor.id);\n    }\n  }\n\n  const tensorsToDispose: Tensor[] = [];\n  if (tensors instanceof Tensor) {\n    if (oldTensorIds.indexOf(tensors.id) === -1) {\n      tensorsToDispose.push(tensors);\n    }\n  } else if (Array.isArray(tensors)) {\n    tensors.forEach(t => {\n      if (oldTensorIds.indexOf(t.id) === -1) {\n        tensorsToDispose.push(t);\n      }\n    });\n  } else if (tensors != null) {\n    // `oldTensors` is a map from string name to Tensor.\n    for (const name in tensors) {\n      const tensor = tensors[name];\n      if (oldTensorIds.indexOf(tensor.id) === -1) {\n        tensorsToDispose.push(tensor);\n      }\n    }\n  }\n\n  tensorsToDispose.forEach(t => {\n    if (!t.isDisposed) {\n      t.dispose();\n    }\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}