{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst DATABASE_NAME = 'tensorflowjs';\nconst DATABASE_VERSION = 1; // Model data and ModelArtifactsInfo (metadata) are stored in two separate\n// stores for efficient access of the list of stored models and their metadata.\n// 1. The object store for model data: topology, weights and weight manifests.\n\nconst MODEL_STORE_NAME = 'models_store'; // 2. The object store for ModelArtifactsInfo, including meta-information such\n//    as the type of topology (JSON vs binary), byte size of the topology, byte\n//    size of the weights, etc.\n\nconst INFO_STORE_NAME = 'model_info_store';\n/**\n * Delete the entire database for tensorflow.js, including the models store.\n */\n\nexport async function deleteDatabase() {\n  const idbFactory = getIndexedDBFactory();\n  return new Promise((resolve, reject) => {\n    const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\n\n    deleteRequest.onsuccess = () => resolve();\n\n    deleteRequest.onerror = error => reject(error);\n  });\n}\n\nfunction getIndexedDBFactory() {\n  if (!env().getBool('IS_BROWSER')) {\n    // TODO(cais): Add more info about what IOHandler subtypes are available.\n    //   Maybe point to a doc page on the web and/or automatically determine\n    //   the available IOHandlers and print them in the error message.\n    throw new Error('Failed to obtain IndexedDB factory because the current environment' + 'is not a web browser.');\n  } // tslint:disable-next-line:no-any\n\n\n  const theWindow = typeof window === 'undefined' ? self : window;\n  const factory = theWindow.indexedDB || theWindow.mozIndexedDB || theWindow.webkitIndexedDB || theWindow.msIndexedDB || theWindow.shimIndexedDB;\n\n  if (factory == null) {\n    throw new Error('The current browser does not appear to support IndexedDB.');\n  }\n\n  return factory;\n}\n\nfunction setUpDatabase(openRequest) {\n  const db = openRequest.result;\n  db.createObjectStore(MODEL_STORE_NAME, {\n    keyPath: 'modelPath'\n  });\n  db.createObjectStore(INFO_STORE_NAME, {\n    keyPath: 'modelPath'\n  });\n}\n/**\n * IOHandler subclass: Browser IndexedDB.\n *\n * See the doc string of `browserIndexedDB` for more details.\n */\n\n\nexport class BrowserIndexedDB {\n  constructor(modelPath) {\n    this.indexedDB = getIndexedDBFactory();\n\n    if (modelPath == null || !modelPath) {\n      throw new Error('For IndexedDB, modelPath must not be null, undefined or empty.');\n    }\n\n    this.modelPath = modelPath;\n  }\n\n  async save(modelArtifacts) {\n    // TODO(cais): Support saving GraphDef models.\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error('BrowserLocalStorage.save() does not support saving model topology ' + 'in binary formats yet.');\n    }\n\n    return this.databaseAction(this.modelPath, modelArtifacts);\n  }\n\n  async load() {\n    return this.databaseAction(this.modelPath);\n  }\n  /**\n   * Perform database action to put model artifacts into or read model artifacts\n   * from IndexedDB object store.\n   *\n   * Whether the action is put or get depends on whether `modelArtifacts` is\n   * specified. If it is specified, the action will be put; otherwise the action\n   * will be get.\n   *\n   * @param modelPath A unique string path for the model.\n   * @param modelArtifacts If specified, it will be the model artifacts to be\n   *   stored in IndexedDB.\n   * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`\n   *   of `ModelArtifacts`, if the action is get.\n   */\n\n\n  databaseAction(modelPath, modelArtifacts) {\n    return new Promise((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n\n        if (modelArtifacts == null) {\n          // Read model out from object store.\n          const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\n          const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n          const getRequest = modelStore.get(this.modelPath);\n\n          getRequest.onsuccess = () => {\n            if (getRequest.result == null) {\n              db.close();\n              return reject(new Error(`Cannot find model with path '${this.modelPath}' ` + `in IndexedDB.`));\n            } else {\n              resolve(getRequest.result.modelArtifacts);\n            }\n          };\n\n          getRequest.onerror = error => {\n            db.close();\n            return reject(getRequest.error);\n          };\n\n          modelTx.oncomplete = () => db.close();\n        } else {\n          // Put model into object store.\n          const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts); // First, put ModelArtifactsInfo into info store.\n\n          const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n          let infoStore = infoTx.objectStore(INFO_STORE_NAME);\n          const putInfoRequest = infoStore.put({\n            modelPath: this.modelPath,\n            modelArtifactsInfo\n          });\n          let modelTx;\n\n          putInfoRequest.onsuccess = () => {\n            // Second, put model data into model store.\n            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n            const putModelRequest = modelStore.put({\n              modelPath: this.modelPath,\n              modelArtifacts,\n              modelArtifactsInfo\n            });\n\n            putModelRequest.onsuccess = () => resolve({\n              modelArtifactsInfo\n            });\n\n            putModelRequest.onerror = error => {\n              // If the put-model request fails, roll back the info entry as\n              // well.\n              infoStore = infoTx.objectStore(INFO_STORE_NAME);\n              const deleteInfoRequest = infoStore.delete(this.modelPath);\n\n              deleteInfoRequest.onsuccess = () => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n\n              deleteInfoRequest.onerror = error => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n            };\n          };\n\n          putInfoRequest.onerror = error => {\n            db.close();\n            return reject(putInfoRequest.error);\n          };\n\n          infoTx.oncomplete = () => {\n            if (modelTx == null) {\n              db.close();\n            } else {\n              modelTx.oncomplete = () => db.close();\n            }\n          };\n        }\n      };\n\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n\n}\nBrowserIndexedDB.URL_SCHEME = 'indexeddb://';\nexport const indexedDBRouter = url => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n      return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\n/**\n * Creates a browser IndexedDB IOHandler for saving and loading models.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save('indexeddb://MyModel'));\n * console.log(saveResult);\n * ```\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),\n *   which can be used with, e.g., `tf.Model.save`.\n */\n\nexport function browserIndexedDB(modelPath) {\n  return new BrowserIndexedDB(modelPath);\n}\n\nfunction maybeStripScheme(key) {\n  return key.startsWith(BrowserIndexedDB.URL_SCHEME) ? key.slice(BrowserIndexedDB.URL_SCHEME.length) : key;\n}\n\nexport class BrowserIndexedDBManager {\n  constructor() {\n    this.indexedDB = getIndexedDBFactory();\n  }\n\n  async listModels() {\n    return new Promise((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n        const tx = db.transaction(INFO_STORE_NAME, 'readonly');\n        const store = tx.objectStore(INFO_STORE_NAME); // tslint:disable:max-line-length\n        // Need to cast `store` as `any` here because TypeScript's DOM\n        // library does not have the `getAll()` method even though the\n        // method is supported in the latest version of most mainstream\n        // browsers:\n        // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll\n        // tslint:enable:max-line-length\n        // tslint:disable-next-line:no-any\n\n        const getAllInfoRequest = store.getAll();\n\n        getAllInfoRequest.onsuccess = () => {\n          const out = {};\n\n          for (const item of getAllInfoRequest.result) {\n            out[item.modelPath] = item.modelArtifactsInfo;\n          }\n\n          resolve(out);\n        };\n\n        getAllInfoRequest.onerror = error => {\n          db.close();\n          return reject(getAllInfoRequest.error);\n        };\n\n        tx.oncomplete = () => db.close();\n      };\n\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n\n  async removeModel(path) {\n    path = maybeStripScheme(path);\n    return new Promise((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n        const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n        const infoStore = infoTx.objectStore(INFO_STORE_NAME);\n        const getInfoRequest = infoStore.get(path);\n        let modelTx;\n\n        getInfoRequest.onsuccess = () => {\n          if (getInfoRequest.result == null) {\n            db.close();\n            return reject(new Error(`Cannot find model with path '${path}' ` + `in IndexedDB.`));\n          } else {\n            // First, delete the entry in the info store.\n            const deleteInfoRequest = infoStore.delete(path);\n\n            const deleteModelData = () => {\n              // Second, delete the entry in the model store.\n              modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n              const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n              const deleteModelRequest = modelStore.delete(path);\n\n              deleteModelRequest.onsuccess = () => resolve(getInfoRequest.result.modelArtifactsInfo);\n\n              deleteModelRequest.onerror = error => reject(getInfoRequest.error);\n            }; // Proceed with deleting model data regardless of whether deletion\n            // of info data succeeds or not.\n\n\n            deleteInfoRequest.onsuccess = deleteModelData;\n\n            deleteInfoRequest.onerror = error => {\n              deleteModelData();\n              db.close();\n              return reject(getInfoRequest.error);\n            };\n          }\n        };\n\n        getInfoRequest.onerror = error => {\n          db.close();\n          return reject(getInfoRequest.error);\n        };\n\n        infoTx.oncomplete = () => {\n          if (modelTx == null) {\n            db.close();\n          } else {\n            modelTx.oncomplete = () => db.close();\n          }\n        };\n      };\n\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../../../../tfjs-core/src/io/indexed_db.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport '../flags';\n\nimport {env} from '../environment';\n\nimport {getModelArtifactsInfoForJSON} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelArtifactsInfo, ModelStoreManager, SaveResult} from './types';\n\nconst DATABASE_NAME = 'tensorflowjs';\nconst DATABASE_VERSION = 1;\n\n// Model data and ModelArtifactsInfo (metadata) are stored in two separate\n// stores for efficient access of the list of stored models and their metadata.\n// 1. The object store for model data: topology, weights and weight manifests.\nconst MODEL_STORE_NAME = 'models_store';\n// 2. The object store for ModelArtifactsInfo, including meta-information such\n//    as the type of topology (JSON vs binary), byte size of the topology, byte\n//    size of the weights, etc.\nconst INFO_STORE_NAME = 'model_info_store';\n\n/**\n * Delete the entire database for tensorflow.js, including the models store.\n */\nexport async function deleteDatabase(): Promise<void> {\n  const idbFactory = getIndexedDBFactory();\n\n  return new Promise<void>((resolve, reject) => {\n    const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\n    deleteRequest.onsuccess = () => resolve();\n    deleteRequest.onerror = error => reject(error);\n  });\n}\n\nfunction getIndexedDBFactory(): IDBFactory {\n  if (!env().getBool('IS_BROWSER')) {\n    // TODO(cais): Add more info about what IOHandler subtypes are available.\n    //   Maybe point to a doc page on the web and/or automatically determine\n    //   the available IOHandlers and print them in the error message.\n    throw new Error(\n        'Failed to obtain IndexedDB factory because the current environment' +\n        'is not a web browser.');\n  }\n  // tslint:disable-next-line:no-any\n  const theWindow: any = typeof window === 'undefined' ? self : window;\n  const factory = theWindow.indexedDB || theWindow.mozIndexedDB ||\n      theWindow.webkitIndexedDB || theWindow.msIndexedDB ||\n      theWindow.shimIndexedDB;\n  if (factory == null) {\n    throw new Error(\n        'The current browser does not appear to support IndexedDB.');\n  }\n  return factory;\n}\n\nfunction setUpDatabase(openRequest: IDBRequest) {\n  const db = openRequest.result as IDBDatabase;\n  db.createObjectStore(MODEL_STORE_NAME, {keyPath: 'modelPath'});\n  db.createObjectStore(INFO_STORE_NAME, {keyPath: 'modelPath'});\n}\n\n/**\n * IOHandler subclass: Browser IndexedDB.\n *\n * See the doc string of `browserIndexedDB` for more details.\n */\nexport class BrowserIndexedDB implements IOHandler {\n  protected readonly indexedDB: IDBFactory;\n  protected readonly modelPath: string;\n\n  static readonly URL_SCHEME = 'indexeddb://';\n\n  constructor(modelPath: string) {\n    this.indexedDB = getIndexedDBFactory();\n\n    if (modelPath == null || !modelPath) {\n      throw new Error(\n          'For IndexedDB, modelPath must not be null, undefined or empty.');\n    }\n    this.modelPath = modelPath;\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    // TODO(cais): Support saving GraphDef models.\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserLocalStorage.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    }\n\n    return this.databaseAction(this.modelPath, modelArtifacts) as\n        Promise<SaveResult>;\n  }\n\n  async load(): Promise<ModelArtifacts> {\n    return this.databaseAction(this.modelPath) as Promise<ModelArtifacts>;\n  }\n\n  /**\n   * Perform database action to put model artifacts into or read model artifacts\n   * from IndexedDB object store.\n   *\n   * Whether the action is put or get depends on whether `modelArtifacts` is\n   * specified. If it is specified, the action will be put; otherwise the action\n   * will be get.\n   *\n   * @param modelPath A unique string path for the model.\n   * @param modelArtifacts If specified, it will be the model artifacts to be\n   *   stored in IndexedDB.\n   * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`\n   *   of `ModelArtifacts`, if the action is get.\n   */\n  private databaseAction(modelPath: string, modelArtifacts?: ModelArtifacts):\n      Promise<ModelArtifacts|SaveResult> {\n    return new Promise<ModelArtifacts|SaveResult>((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n\n        if (modelArtifacts == null) {\n          // Read model out from object store.\n          const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\n          const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n          const getRequest = modelStore.get(this.modelPath);\n          getRequest.onsuccess = () => {\n            if (getRequest.result == null) {\n              db.close();\n              return reject(new Error(\n                  `Cannot find model with path '${this.modelPath}' ` +\n                  `in IndexedDB.`));\n            } else {\n              resolve(getRequest.result.modelArtifacts);\n            }\n          };\n          getRequest.onerror = error => {\n            db.close();\n            return reject(getRequest.error);\n          };\n          modelTx.oncomplete = () => db.close();\n        } else {\n          // Put model into object store.\n          const modelArtifactsInfo: ModelArtifactsInfo =\n              getModelArtifactsInfoForJSON(modelArtifacts);\n          // First, put ModelArtifactsInfo into info store.\n          const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n          let infoStore = infoTx.objectStore(INFO_STORE_NAME);\n          const putInfoRequest =\n              infoStore.put({modelPath: this.modelPath, modelArtifactsInfo});\n          let modelTx: IDBTransaction;\n          putInfoRequest.onsuccess = () => {\n            // Second, put model data into model store.\n            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n            const putModelRequest = modelStore.put({\n              modelPath: this.modelPath,\n              modelArtifacts,\n              modelArtifactsInfo\n            });\n            putModelRequest.onsuccess = () => resolve({modelArtifactsInfo});\n            putModelRequest.onerror = error => {\n              // If the put-model request fails, roll back the info entry as\n              // well.\n              infoStore = infoTx.objectStore(INFO_STORE_NAME);\n              const deleteInfoRequest = infoStore.delete(this.modelPath);\n              deleteInfoRequest.onsuccess = () => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n              deleteInfoRequest.onerror = error => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n            };\n          };\n          putInfoRequest.onerror = error => {\n            db.close();\n            return reject(putInfoRequest.error);\n          };\n          infoTx.oncomplete = () => {\n            if (modelTx == null) {\n              db.close();\n            } else {\n              modelTx.oncomplete = () => db.close();\n            }\n          };\n        }\n      };\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n}\n\nexport const indexedDBRouter: IORouter = (url: string|string[]) => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n      return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\n\n/**\n * Creates a browser IndexedDB IOHandler for saving and loading models.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save('indexeddb://MyModel'));\n * console.log(saveResult);\n * ```\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),\n *   which can be used with, e.g., `tf.Model.save`.\n */\nexport function browserIndexedDB(modelPath: string): IOHandler {\n  return new BrowserIndexedDB(modelPath);\n}\n\nfunction maybeStripScheme(key: string) {\n  return key.startsWith(BrowserIndexedDB.URL_SCHEME) ?\n      key.slice(BrowserIndexedDB.URL_SCHEME.length) :\n      key;\n}\n\nexport class BrowserIndexedDBManager implements ModelStoreManager {\n  private indexedDB: IDBFactory;\n\n  constructor() {\n    this.indexedDB = getIndexedDBFactory();\n  }\n\n  async listModels(): Promise<{[path: string]: ModelArtifactsInfo}> {\n    return new Promise<{[path: string]: ModelArtifactsInfo}>(\n        (resolve, reject) => {\n          const openRequest =\n              this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n          openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n          openRequest.onsuccess = () => {\n            const db = openRequest.result;\n            const tx = db.transaction(INFO_STORE_NAME, 'readonly');\n            const store = tx.objectStore(INFO_STORE_NAME);\n            // tslint:disable:max-line-length\n            // Need to cast `store` as `any` here because TypeScript's DOM\n            // library does not have the `getAll()` method even though the\n            // method is supported in the latest version of most mainstream\n            // browsers:\n            // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll\n            // tslint:enable:max-line-length\n            // tslint:disable-next-line:no-any\n            const getAllInfoRequest = (store as any).getAll() as IDBRequest;\n            getAllInfoRequest.onsuccess = () => {\n              const out: {[path: string]: ModelArtifactsInfo} = {};\n              for (const item of getAllInfoRequest.result) {\n                out[item.modelPath] = item.modelArtifactsInfo;\n              }\n              resolve(out);\n            };\n            getAllInfoRequest.onerror = error => {\n              db.close();\n              return reject(getAllInfoRequest.error);\n            };\n            tx.oncomplete = () => db.close();\n          };\n          openRequest.onerror = error => reject(openRequest.error);\n        });\n  }\n\n  async removeModel(path: string): Promise<ModelArtifactsInfo> {\n    path = maybeStripScheme(path);\n    return new Promise<ModelArtifactsInfo>((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n        const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n        const infoStore = infoTx.objectStore(INFO_STORE_NAME);\n\n        const getInfoRequest = infoStore.get(path);\n        let modelTx: IDBTransaction;\n        getInfoRequest.onsuccess = () => {\n          if (getInfoRequest.result == null) {\n            db.close();\n            return reject(new Error(\n                `Cannot find model with path '${path}' ` +\n                `in IndexedDB.`));\n          } else {\n            // First, delete the entry in the info store.\n            const deleteInfoRequest = infoStore.delete(path);\n            const deleteModelData = () => {\n              // Second, delete the entry in the model store.\n              modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n              const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n              const deleteModelRequest = modelStore.delete(path);\n              deleteModelRequest.onsuccess = () =>\n                  resolve(getInfoRequest.result.modelArtifactsInfo);\n              deleteModelRequest.onerror = error =>\n                  reject(getInfoRequest.error);\n            };\n            // Proceed with deleting model data regardless of whether deletion\n            // of info data succeeds or not.\n            deleteInfoRequest.onsuccess = deleteModelData;\n            deleteInfoRequest.onerror = error => {\n              deleteModelData();\n              db.close();\n              return reject(getInfoRequest.error);\n            };\n          }\n        };\n        getInfoRequest.onerror = error => {\n          db.close();\n          return reject(getInfoRequest.error);\n        };\n\n        infoTx.oncomplete = () => {\n          if (modelTx == null) {\n            db.close();\n          } else {\n            modelTx.oncomplete = () => db.close();\n          }\n        };\n      };\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}