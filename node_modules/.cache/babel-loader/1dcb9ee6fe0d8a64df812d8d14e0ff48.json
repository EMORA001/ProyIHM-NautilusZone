{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { tidy } from '../globals';\nimport { Transpose } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { complex } from './complex';\nimport { imag } from './imag';\nimport { neg } from './neg';\nimport { op } from './operation';\nimport { real } from './real';\n/**\n * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.\n *\n * The returned `tf.Tensor`'s dimension `i` will correspond to the input\n * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,\n * where `n` is the rank of the input `tf.Tensor`. Hence by default, this\n * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);\n *\n * a.transpose().print();  // or tf.transpose(a)\n * ```\n *\n * @param x The tensor to transpose.\n * @param perm The permutation of the dimensions of a.\n * @param conjugate Will conjugate complex input if true.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\n\nfunction transpose_(x, perm, conjugate) {\n  const $x = convertToTensor(x, 'x', 'transpose');\n\n  if (perm == null) {\n    perm = $x.shape.map((s, i) => i).reverse();\n  }\n\n  util.assert($x.rank === perm.length, () => `Error in transpose: rank of input ${$x.rank} ` + `must match length of perm ${perm}.`);\n  perm.forEach(axis => {\n    util.assert(axis >= 0 && axis < $x.rank, () => `All entries in 'perm' must be between 0 and ${$x.rank - 1}` + ` but got ${perm}`);\n  });\n\n  if ($x.rank <= 1) {\n    return $x.clone();\n  }\n\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    perm\n  };\n\n  if ($x.dtype === 'complex64') {\n    return tidy(() => {\n      let $real = real($x);\n      let $imag = imag($x);\n      $real = ENGINE.runKernel(Transpose, {\n        x: $real\n      }, attrs);\n      $imag = ENGINE.runKernel(Transpose, {\n        x: $imag\n      }, attrs);\n\n      if (conjugate) {\n        $imag = neg($imag);\n      }\n\n      return complex($real, $imag);\n    });\n  }\n\n  return ENGINE.runKernel(Transpose, inputs, attrs);\n}\n\nexport const transpose = op({\n  transpose_\n});","map":{"version":3,"sources":["../../../../../../tfjs-core/src/ops/transpose.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAqB,WAArB;AACA,SAAQ,IAAR,QAAmB,YAAnB;AACA,SAAQ,SAAR,QAAyD,iBAAzD;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AACA,SAAQ,OAAR,QAAsB,WAAtB;AACA,SAAQ,IAAR,QAAmB,QAAnB;AACA,SAAQ,GAAR,QAAkB,OAAlB;AACA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,IAAR,QAAmB,QAAnB;AAEA;;;;;;;;;;;;;;;;;;;AAmBG;;AACH,SAAS,UAAT,CACI,CADJ,EACqB,IADrB,EACsC,SADtC,EACyD;EACvD,MAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,WAAT,CAA1B;;EAEA,IAAI,IAAI,IAAI,IAAZ,EAAkB;IAChB,IAAI,GAAG,EAAE,CAAC,KAAH,CAAS,GAAT,CAAa,CAAC,CAAD,EAAI,CAAJ,KAAU,CAAvB,EAA0B,OAA1B,EAAP;EACD;;EACD,IAAI,CAAC,MAAL,CACI,EAAE,CAAC,IAAH,KAAY,IAAI,CAAC,MADrB,EAEI,MAAM,qCAAqC,EAAE,CAAC,IAAI,GAA5C,GACF,6BAA6B,IAAI,GAHzC;EAIA,IAAI,CAAC,OAAL,CAAa,IAAI,IAAG;IAClB,IAAI,CAAC,MAAL,CACI,IAAI,IAAI,CAAR,IAAa,IAAI,GAAG,EAAE,CAAC,IAD3B,EAEI,MAAM,+CAA+C,EAAE,CAAC,IAAH,GAAU,CAAC,EAA1D,GACF,YAAY,IAAI,EAHxB;EAID,CALD;;EAOA,IAAI,EAAE,CAAC,IAAH,IAAW,CAAf,EAAkB;IAChB,OAAO,EAAE,CAAC,KAAH,EAAP;EACD;;EAED,MAAM,MAAM,GAAoB;IAAC,CAAC,EAAE;EAAJ,CAAhC;EACA,MAAM,KAAK,GAAmB;IAAC;EAAD,CAA9B;;EAEA,IAAI,EAAE,CAAC,KAAH,KAAa,WAAjB,EAA8B;IAC5B,OAAO,IAAI,CAAC,MAAK;MACf,IAAI,KAAK,GAAG,IAAI,CAAC,EAAD,CAAhB;MACA,IAAI,KAAK,GAAG,IAAI,CAAC,EAAD,CAAhB;MACA,KAAK,GAAG,MAAM,CAAC,SAAP,CACJ,SADI,EACO;QAAC,CAAC,EAAE;MAAJ,CADP,EAEJ,KAFI,CAAR;MAGA,KAAK,GAAG,MAAM,CAAC,SAAP,CACJ,SADI,EACO;QAAC,CAAC,EAAE;MAAJ,CADP,EAEJ,KAFI,CAAR;;MAGA,IAAI,SAAJ,EAAe;QACb,KAAK,GAAG,GAAG,CAAC,KAAD,CAAX;MACD;;MACD,OAAO,OAAO,CAAC,KAAD,EAAQ,KAAR,CAAd;IACD,CAbU,CAAX;EAcD;;EAED,OAAO,MAAM,CAAC,SAAP,CACH,SADG,EACQ,MADR,EACwC,KADxC,CAAP;AAED;;AAED,OAAO,MAAM,SAAS,GAAG,EAAE,CAAC;EAAC;AAAD,CAAD,CAApB","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {tidy} from '../globals';\nimport {Transpose, TransposeAttrs, TransposeInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\nimport {complex} from './complex';\nimport {imag} from './imag';\nimport {neg} from './neg';\nimport {op} from './operation';\nimport {real} from './real';\n\n/**\n * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.\n *\n * The returned `tf.Tensor`'s dimension `i` will correspond to the input\n * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,\n * where `n` is the rank of the input `tf.Tensor`. Hence by default, this\n * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);\n *\n * a.transpose().print();  // or tf.transpose(a)\n * ```\n *\n * @param x The tensor to transpose.\n * @param perm The permutation of the dimensions of a.\n * @param conjugate Will conjugate complex input if true.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction transpose_<T extends Tensor>(\n    x: T|TensorLike, perm?: number[], conjugate?: boolean): T {\n  const $x = convertToTensor(x, 'x', 'transpose');\n\n  if (perm == null) {\n    perm = $x.shape.map((s, i) => i).reverse();\n  }\n  util.assert(\n      $x.rank === perm.length,\n      () => `Error in transpose: rank of input ${$x.rank} ` +\n          `must match length of perm ${perm}.`);\n  perm.forEach(axis => {\n    util.assert(\n        axis >= 0 && axis < $x.rank,\n        () => `All entries in 'perm' must be between 0 and ${$x.rank - 1}` +\n            ` but got ${perm}`);\n  });\n\n  if ($x.rank <= 1) {\n    return $x.clone();\n  }\n\n  const inputs: TransposeInputs = {x: $x};\n  const attrs: TransposeAttrs = {perm};\n\n  if ($x.dtype === 'complex64') {\n    return tidy(() => {\n      let $real = real($x);\n      let $imag = imag($x);\n      $real = ENGINE.runKernel(\n          Transpose, {x: $real} as {} as NamedTensorMap,\n          attrs as {} as NamedAttrMap);\n      $imag = ENGINE.runKernel(\n          Transpose, {x: $imag} as {} as NamedTensorMap,\n          attrs as {} as NamedAttrMap);\n      if (conjugate) {\n        $imag = neg($imag);\n      }\n      return complex($real, $imag);\n    });\n  }\n\n  return ENGINE.runKernel(\n      Transpose, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const transpose = op({transpose_});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}