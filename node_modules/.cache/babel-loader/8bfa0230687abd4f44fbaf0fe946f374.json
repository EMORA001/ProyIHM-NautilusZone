{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n *  Advanced activation layers.\n */\nimport { cast, clipByValue, elu, greater, leakyRelu, mul, prelu, relu, serialization } from '@tensorflow/tfjs-core';\nimport { Softmax as softmaxActivation } from '../activations';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nexport class ReLU extends Layer {\n  constructor(args) {\n    super(args == null ? {} : args);\n    this.supportsMasking = true;\n\n    if (args != null) {\n      this.maxValue = args.maxValue;\n    }\n  }\n\n  call(inputs, kwargs) {\n    inputs = getExactlyOneTensor(inputs);\n    let output = relu(inputs);\n\n    if (this.maxValue != null) {\n      output = clipByValue(output, 0, this.maxValue);\n    }\n\n    return output;\n  }\n\n  computeOutputShape(inputShape) {\n    return inputShape;\n  }\n\n  getConfig() {\n    const config = {\n      maxValue: this.maxValue\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nReLU.className = 'ReLU';\nserialization.registerClass(ReLU);\nexport class LeakyReLU extends Layer {\n  constructor(args) {\n    super(args == null ? {} : args);\n    this.DEFAULT_ALPHA = 0.3;\n\n    if (args == null) {\n      args = {};\n    }\n\n    this.alpha = args.alpha == null ? this.DEFAULT_ALPHA : args.alpha;\n  }\n\n  call(inputs, kwargs) {\n    const x = getExactlyOneTensor(inputs);\n    return leakyRelu(x, this.alpha);\n  }\n\n  computeOutputShape(inputShape) {\n    return inputShape;\n  }\n\n  getConfig() {\n    const config = {\n      alpha: this.alpha\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nLeakyReLU.className = 'LeakyReLU';\nserialization.registerClass(LeakyReLU);\nexport class PReLU extends Layer {\n  constructor(args) {\n    super(args == null ? {} : args);\n    this.DEFAULT_ALPHA_INITIALIZER = 'zeros';\n\n    if (args == null) {\n      args = {};\n    }\n\n    this.supportsMasking = true;\n    this.alphaInitializer = getInitializer(args.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER);\n    this.alphaRegularizer = getRegularizer(args.alphaRegularizer);\n    this.alphaConstraint = getConstraint(args.alphaConstraint);\n\n    if (args.sharedAxes == null) {\n      this.sharedAxes = null;\n    } else if (Array.isArray(args.sharedAxes)) {\n      this.sharedAxes = args.sharedAxes;\n    } else if (typeof args.sharedAxes === 'number') {\n      this.sharedAxes = [args.sharedAxes];\n    } else {\n      throw new ValueError(`Expected sharedAxes to be a number or an array of numbers, ` + `but got ${args.sharedAxes}`);\n    }\n  }\n\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const paramShape = inputShape.slice(1);\n\n    if (this.sharedAxes != null) {\n      for (const i of this.sharedAxes) {\n        paramShape[i - 1] = 1;\n      }\n    }\n\n    this.alpha = this.addWeight('alpha', paramShape, 'float32', this.alphaInitializer, this.alphaRegularizer, true, this.alphaConstraint); // Set input spec.\n\n    const axes = {};\n\n    if (this.sharedAxes != null) {\n      for (let i = 1; i < inputShape.length; ++i) {\n        axes[i] = inputShape[i];\n      }\n    }\n\n    this.inputSpec = [new InputSpec({\n      ndim: inputShape.length,\n      axes\n    })];\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    inputs = getExactlyOneTensor(inputs);\n    return prelu(inputs, this.alpha.read());\n  }\n\n  getConfig() {\n    const config = {\n      alphaInitializer: serializeInitializer(this.alphaInitializer),\n      alphaRegularizer: serializeRegularizer(this.alphaRegularizer),\n      alphaConstraint: serializeConstraint(this.alphaConstraint),\n      sharedAxes: this.sharedAxes\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nPReLU.className = 'PReLU';\nserialization.registerClass(PReLU);\nexport class ELU extends Layer {\n  constructor(args) {\n    super(args == null ? {} : args);\n    this.DEFAULT_ALPHA = 1.0;\n\n    if (args == null) {\n      args = {};\n    }\n\n    if (args.alpha != null && args.alpha !== this.DEFAULT_ALPHA) {\n      throw new NotImplementedError(`Non-default alpha value (${args.alpha}) is not supported by the ` + `ELU layer yet.`);\n    }\n\n    this.alpha = args.alpha == null ? this.DEFAULT_ALPHA : args.alpha;\n  }\n\n  call(inputs, kwargs) {\n    const x = getExactlyOneTensor(inputs);\n    return elu(x);\n  }\n\n  computeOutputShape(inputShape) {\n    return inputShape;\n  }\n\n  getConfig() {\n    const config = {\n      alpha: this.alpha\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nELU.className = 'ELU';\nserialization.registerClass(ELU);\nexport class ThresholdedReLU extends Layer {\n  constructor(args) {\n    super(args == null ? {} : args);\n    this.DEFAULT_THETA = 1.0;\n\n    if (args == null) {\n      args = {};\n    }\n\n    this.theta = args.theta == null ? this.DEFAULT_THETA : args.theta;\n  }\n\n  call(inputs, kwargs) {\n    const x = getExactlyOneTensor(inputs);\n    return mul(x, cast(greater(x, this.theta), 'float32'));\n  }\n\n  computeOutputShape(inputShape) {\n    return inputShape;\n  }\n\n  getConfig() {\n    const config = {\n      theta: this.theta\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nThresholdedReLU.className = 'ThresholdedReLU';\nserialization.registerClass(ThresholdedReLU);\nexport class Softmax extends Layer {\n  constructor(args) {\n    super(args == null ? {} : args);\n    this.DEFAULT_AXIS = 1.0;\n\n    if (args == null) {\n      args = {};\n    }\n\n    this.softmax = new softmaxActivation().apply;\n    this.axis = args.axis == null ? this.DEFAULT_AXIS : args.axis;\n  }\n\n  call(inputs, kwargs) {\n    const x = getExactlyOneTensor(inputs);\n    return this.softmax(x, this.axis);\n  }\n\n  computeOutputShape(inputShape) {\n    return inputShape;\n  }\n\n  getConfig() {\n    const config = {\n      axis: this.axis\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nSoftmax.className = 'Softmax';\nserialization.registerClass(Softmax);","map":{"version":3,"sources":["../../../../../../tfjs-layers/src/layers/advanced_activations.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n *  Advanced activation layers.\n */\n\nimport {cast, clipByValue, elu, greater, leakyRelu, mul, prelu, relu, serialization, Tensor} from '@tensorflow/tfjs-core';\n\nimport {Softmax as softmaxActivation} from '../activations';\nimport {Constraint, getConstraint, serializeConstraint} from '../constraints';\nimport {InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\nexport declare interface ReLULayerArgs extends LayerArgs {\n  /**\n   * Float, the maximum output value.\n   */\n  maxValue?: number;\n}\n\nexport class ReLU extends Layer {\n  /** @nocollapse */\n  static className = 'ReLU';\n  maxValue: number;\n\n  constructor(args?: ReLULayerArgs) {\n    super(args == null ? {} : args);\n    this.supportsMasking = true;\n    if (args != null) {\n      this.maxValue = args.maxValue;\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    inputs = getExactlyOneTensor(inputs);\n    let output = relu(inputs);\n    if (this.maxValue != null) {\n      output = clipByValue(output, 0, this.maxValue);\n    }\n    return output;\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {maxValue: this.maxValue};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(ReLU);\n\nexport declare interface LeakyReLULayerArgs extends LayerArgs {\n  /**\n   * Float `>= 0`. Negative slope coefficient. Defaults to `0.3`.\n   */\n  alpha?: number;\n}\n\nexport class LeakyReLU extends Layer {\n  /** @nocollapse */\n  static className = 'LeakyReLU';\n  readonly alpha: number;\n\n  readonly DEFAULT_ALPHA = 0.3;\n\n  constructor(args?: LeakyReLULayerArgs) {\n    super(args == null ? {} : args);\n    if (args == null) {\n      args = {};\n    }\n    this.alpha = args.alpha == null ? this.DEFAULT_ALPHA : args.alpha;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    const x = getExactlyOneTensor(inputs);\n    return leakyRelu(x, this.alpha);\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {alpha: this.alpha};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(LeakyReLU);\n\nexport declare interface PReLULayerArgs extends LayerArgs {\n  /**\n   * Initializer for the learnable alpha.\n   */\n  alphaInitializer?: Initializer|InitializerIdentifier;\n\n  /**\n   * Regularizer for the learnable alpha.\n   */\n  alphaRegularizer?: Regularizer;\n\n  /**\n   * Constraint for the learnable alpha.\n   */\n  alphaConstraint?: Constraint;\n\n  /**\n   * The axes along which to share learnable parameters for the activation\n   * function. For example, if the incoming feature maps are from a 2D\n   * convolution with output shape `[numExamples, height, width, channels]`,\n   * and you wish to share parameters across space (height and width) so that\n   * each filter channels has only one set of parameters, set\n   * `shared_axes: [1, 2]`.\n   */\n  sharedAxes?: number|number[];\n}\n\nexport class PReLU extends Layer {\n  /** @nocollapse */\n  static className = 'PReLU';\n  private readonly alphaInitializer: Initializer;\n  private readonly alphaRegularizer: Regularizer;\n  private readonly alphaConstraint: Constraint;\n  private readonly sharedAxes: number[];\n  private alpha: LayerVariable;\n\n  readonly DEFAULT_ALPHA_INITIALIZER: InitializerIdentifier = 'zeros';\n\n  constructor(args?: PReLULayerArgs) {\n    super(args == null ? {} : args);\n    if (args == null) {\n      args = {};\n    }\n\n    this.supportsMasking = true;\n    this.alphaInitializer =\n        getInitializer(args.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER);\n    this.alphaRegularizer = getRegularizer(args.alphaRegularizer);\n    this.alphaConstraint = getConstraint(args.alphaConstraint);\n    if (args.sharedAxes == null) {\n      this.sharedAxes = null;\n    } else if (Array.isArray(args.sharedAxes)) {\n      this.sharedAxes = args.sharedAxes;\n    } else if (typeof args.sharedAxes === 'number') {\n      this.sharedAxes = [args.sharedAxes];\n    } else {\n      throw new ValueError(\n          `Expected sharedAxes to be a number or an array of numbers, ` +\n          `but got ${args.sharedAxes}`);\n    }\n  }\n\n  build(inputShape: Shape|Shape[]) {\n    inputShape = getExactlyOneShape(inputShape);\n    const paramShape: Shape = inputShape.slice(1);\n    if (this.sharedAxes != null) {\n      for (const i of this.sharedAxes) {\n        paramShape[i - 1] = 1;\n      }\n    }\n    this.alpha = this.addWeight(\n        'alpha', paramShape, 'float32', this.alphaInitializer,\n        this.alphaRegularizer, true, this.alphaConstraint);\n    // Set input spec.\n    const axes: {[axis: number]: number} = {};\n    if (this.sharedAxes != null) {\n      for (let i = 1; i < inputShape.length; ++i) {\n        axes[i] = inputShape[i];\n      }\n    }\n    this.inputSpec = [new InputSpec({\n      ndim: inputShape.length,\n      axes,\n    })];\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    inputs = getExactlyOneTensor(inputs);\n    return prelu(inputs, this.alpha.read());\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      alphaInitializer: serializeInitializer(this.alphaInitializer),\n      alphaRegularizer: serializeRegularizer(this.alphaRegularizer),\n      alphaConstraint: serializeConstraint(this.alphaConstraint),\n      sharedAxes: this.sharedAxes\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(PReLU);\n\nexport declare interface ELULayerArgs extends LayerArgs {\n  /**\n   * Float `>= 0`. Negative slope coefficient. Defaults to `1.0`.\n   */\n  alpha?: number;\n}\n\nexport class ELU extends Layer {\n  /** @nocollapse */\n  static className = 'ELU';\n  readonly alpha: number;\n\n  readonly DEFAULT_ALPHA = 1.0;\n\n  constructor(args?: ELULayerArgs) {\n    super(args == null ? {} : args);\n    if (args == null) {\n      args = {};\n    }\n\n    if (args.alpha != null && args.alpha !== this.DEFAULT_ALPHA) {\n      throw new NotImplementedError(\n          `Non-default alpha value (${args.alpha}) is not supported by the ` +\n          `ELU layer yet.`);\n    }\n\n    this.alpha = args.alpha == null ? this.DEFAULT_ALPHA : args.alpha;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    const x = getExactlyOneTensor(inputs);\n    return elu(x);\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {alpha: this.alpha};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(ELU);\n\nexport declare interface ThresholdedReLULayerArgs extends LayerArgs {\n  /**\n   * Float >= 0. Threshold location of activation.\n   */\n  theta?: number;\n}\n\nexport class ThresholdedReLU extends Layer {\n  /** @nocollapse */\n  static className = 'ThresholdedReLU';\n  readonly theta: number;\n\n  readonly DEFAULT_THETA = 1.0;\n\n  constructor(args?: ThresholdedReLULayerArgs) {\n    super(args == null ? {} : args);\n    if (args == null) {\n      args = {};\n    }\n\n    this.theta = args.theta == null ? this.DEFAULT_THETA : args.theta;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    const x = getExactlyOneTensor(inputs);\n    return mul(x, cast(greater(x, this.theta), 'float32'));\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {theta: this.theta};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(ThresholdedReLU);\n\nexport declare interface SoftmaxLayerArgs extends LayerArgs {\n  /**\n   * Integer, axis along which the softmax normalization is applied.\n   * Defaults to `-1` (i.e., the last axis).\n   */\n  axis?: number;\n}\n\nexport class Softmax extends Layer {\n  /** @nocollapse */\n  static className = 'Softmax';\n  readonly axis: number;\n  readonly softmax: (t: Tensor, a?: number) => Tensor;\n  readonly DEFAULT_AXIS = 1.0;\n\n  constructor(args?: SoftmaxLayerArgs) {\n    super(args == null ? {} : args);\n    if (args == null) {\n      args = {};\n    }\n    this.softmax = new softmaxActivation().apply;\n    this.axis = args.axis == null ? this.DEFAULT_AXIS : args.axis;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    const x = getExactlyOneTensor(inputs);\n    return this.softmax(x, this.axis);\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {axis: this.axis};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Softmax);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}