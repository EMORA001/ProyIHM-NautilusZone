{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * LruCache: A mapping from the String to T. If the number of the entries is\n * exceeding the `maxEntries`, the LruCache will delete the least recently\n * used entry.\n */\nexport class LruCache {\n  constructor(maxEntries) {\n    this.maxEntries = maxEntries || 100;\n    this.cache = new Map();\n  }\n  /**\n   * Get the entry for the key and mark it as used recently.\n   */\n\n\n  get(key) {\n    let entry;\n\n    if (this.cache.has(key)) {\n      entry = this.cache.get(key);\n      this.cache.delete(key);\n      this.cache.set(key, entry);\n    }\n\n    return entry;\n  }\n  /**\n   * Put the entry into the cache. If the key already existed, mark the key as\n   * used recently.\n   */\n\n\n  put(key, value) {\n    if (this.cache.has(key)) {\n      this.cache.delete(key);\n    } else if (this.cache.size >= this.maxEntries) {\n      const keyToDelete = this.cache.keys().next().value;\n      this.cache.delete(keyToDelete);\n    }\n\n    this.cache.set(key, value);\n  }\n  /**\n   * Get the MaxEntries of the cache.\n   */\n\n\n  getMaxEntries() {\n    return this.maxEntries;\n  }\n  /**\n   * Set the MaxEntries of the cache. If the maxEntries is decreased, reduce\n   * entries in the cache.\n   */\n\n\n  setMaxEntries(maxEntries) {\n    if (maxEntries < 0) {\n      throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${maxEntries}.`);\n    }\n\n    if (this.maxEntries > maxEntries) {\n      for (let i = 0; i < this.maxEntries - maxEntries; i++) {\n        const keyToDelete = this.cache.keys().next().value;\n        this.cache.delete(keyToDelete);\n      }\n    }\n\n    this.maxEntries = maxEntries;\n  }\n\n}","map":{"version":3,"sources":["../../../../../../tfjs-layers/src/utils/executor_utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;AAQG;;AACH;;;;AAIG;AAEH,OAAM,MAAO,QAAP,CAAe;EAInB,WAAA,CAAY,UAAZ,EAA+B;IAC7B,KAAK,UAAL,GAAkB,UAAU,IAAI,GAAhC;IACA,KAAK,KAAL,GAAa,IAAI,GAAJ,EAAb;EACD;EAED;;AAEG;;;EACI,GAAG,CAAC,GAAD,EAAY;IACpB,IAAI,KAAJ;;IACA,IAAI,KAAK,KAAL,CAAW,GAAX,CAAe,GAAf,CAAJ,EAAyB;MACvB,KAAK,GAAG,KAAK,KAAL,CAAW,GAAX,CAAe,GAAf,CAAR;MACA,KAAK,KAAL,CAAW,MAAX,CAAkB,GAAlB;MACA,KAAK,KAAL,CAAW,GAAX,CAAe,GAAf,EAAoB,KAApB;IACD;;IACD,OAAO,KAAP;EACD;EAED;;;AAGG;;;EACI,GAAG,CAAC,GAAD,EAAc,KAAd,EAAsB;IAC9B,IAAI,KAAK,KAAL,CAAW,GAAX,CAAe,GAAf,CAAJ,EAAyB;MACvB,KAAK,KAAL,CAAW,MAAX,CAAkB,GAAlB;IACD,CAFD,MAEO,IAAI,KAAK,KAAL,CAAW,IAAX,IAAmB,KAAK,UAA5B,EAAwC;MAC7C,MAAM,WAAW,GAAG,KAAK,KAAL,CAAW,IAAX,GAAkB,IAAlB,GAAyB,KAA7C;MACA,KAAK,KAAL,CAAW,MAAX,CAAkB,WAAlB;IACD;;IACD,KAAK,KAAL,CAAW,GAAX,CAAe,GAAf,EAAoB,KAApB;EACD;EAED;;AAEG;;;EACI,aAAa,GAAA;IAClB,OAAO,KAAK,UAAZ;EACD;EAED;;;AAGG;;;EACI,aAAa,CAAC,UAAD,EAAmB;IACrC,IAAI,UAAU,GAAG,CAAjB,EAAoB;MAClB,MAAM,IAAI,KAAJ,CACF,4DACI,UAAU,GAFZ,CAAN;IAGD;;IAED,IAAI,KAAK,UAAL,GAAkB,UAAtB,EAAkC;MAChC,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,UAAL,GAAkB,UAAtC,EAAkD,CAAC,EAAnD,EAAuD;QACrD,MAAM,WAAW,GAAG,KAAK,KAAL,CAAW,IAAX,GAAkB,IAAlB,GAAyB,KAA7C;QACA,KAAK,KAAL,CAAW,MAAX,CAAkB,WAAlB;MACD;IACF;;IAED,KAAK,UAAL,GAAkB,UAAlB;EACD;;AA9DkB","sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * LruCache: A mapping from the String to T. If the number of the entries is\n * exceeding the `maxEntries`, the LruCache will delete the least recently\n * used entry.\n */\n\nexport class LruCache<T> {\n  private cache: Map<string, T>;\n  private maxEntries: number;\n\n  constructor(maxEntries?: number) {\n    this.maxEntries = maxEntries || 100;\n    this.cache = new Map<string, T>();\n  }\n\n  /**\n   * Get the entry for the key and mark it as used recently.\n   */\n  public get(key: string): T {\n    let entry: T;\n    if (this.cache.has(key)) {\n      entry = this.cache.get(key);\n      this.cache.delete(key);\n      this.cache.set(key, entry);\n    }\n    return entry;\n  }\n\n  /**\n   * Put the entry into the cache. If the key already existed, mark the key as\n   * used recently.\n   */\n  public put(key: string, value: T): void {\n    if (this.cache.has(key)) {\n      this.cache.delete(key);\n    } else if (this.cache.size >= this.maxEntries) {\n      const keyToDelete = this.cache.keys().next().value;\n      this.cache.delete(keyToDelete);\n    }\n    this.cache.set(key, value);\n  }\n\n  /**\n   * Get the MaxEntries of the cache.\n   */\n  public getMaxEntries(): number {\n    return this.maxEntries;\n  }\n\n  /**\n   * Set the MaxEntries of the cache. If the maxEntries is decreased, reduce\n   * entries in the cache.\n   */\n  public setMaxEntries(maxEntries: number): void {\n    if (maxEntries < 0) {\n      throw new Error(\n          `The maxEntries of LRU caches must be at least 0, but got ${\n              maxEntries}.`);\n    }\n\n    if (this.maxEntries > maxEntries) {\n      for (let i = 0; i < this.maxEntries - maxEntries; i++) {\n        const keyToDelete = this.cache.keys().next().value;\n        this.cache.delete(keyToDelete);\n      }\n    }\n\n    this.maxEntries = maxEntries;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}