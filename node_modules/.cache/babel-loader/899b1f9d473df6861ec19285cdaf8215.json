{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { FileChunkIterator } from './file_chunk_iterator';\n/**\n * Provide a stream of chunks from a URL.\n *\n * Note this class first downloads the entire file into memory before providing\n * the first element from the stream.  This is because the Fetch API does not\n * yet reliably provide a reader stream for the response body.\n */\n\nexport async function urlChunkIterator(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let fetchFunc = arguments.length > 2 ? arguments[2] : undefined;\n  let urlString;\n  let requestInit;\n\n  if (typeof url === 'string') {\n    urlString = url;\n  } else {\n    urlString = url.url;\n    requestInit = getRequestInitFromRequest(url);\n  }\n\n  const response = await (fetchFunc || util.fetch)(urlString, requestInit);\n\n  if (response.ok) {\n    const uint8Array = new Uint8Array(await response.arrayBuffer());\n    return new FileChunkIterator(uint8Array, options);\n  } else {\n    throw new Error(response.statusText);\n  }\n} // Generate RequestInit from Request to match tf.util.fetch signature.\n\nconst getRequestInitFromRequest = request => {\n  const init = {\n    method: request.method,\n    headers: request.headers,\n    body: request.body,\n    mode: request.mode,\n    credentials: request.credentials,\n    cache: request.cache,\n    redirect: request.redirect,\n    referrer: request.referrer,\n    integrity: request.integrity\n  };\n  return init;\n};","map":{"version":3,"sources":["../../../../../../tfjs-data/src/iterators/url_chunk_iterator.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBG;AAEH,SAAQ,IAAR,QAAmB,uBAAnB;AACA,SAAQ,iBAAR,QAA0D,uBAA1D;AAEA;;;;;;AAMG;;AACH,OAAO,eAAe,gBAAf,CACH,GADG,EAEiB;EAAA,IADF,OACE,uEADkC,EAClC;EAAA,IAApB,SAAoB;EACtB,IAAI,SAAJ;EACA,IAAI,WAAJ;;EACA,IAAK,OAAO,GAAR,KAAiB,QAArB,EAA+B;IAC7B,SAAS,GAAG,GAAZ;EACD,CAFD,MAEO;IACL,SAAS,GAAI,GAAe,CAAC,GAA7B;IACA,WAAW,GAAG,yBAAyB,CAAC,GAAD,CAAvC;EACD;;EACD,MAAM,QAAQ,GAAG,MAAM,CAAC,SAAS,IAAI,IAAI,CAAC,KAAnB,EAA0B,SAA1B,EAAqC,WAArC,CAAvB;;EACA,IAAI,QAAQ,CAAC,EAAb,EAAiB;IACf,MAAM,UAAU,GAAG,IAAI,UAAJ,CAAe,MAAM,QAAQ,CAAC,WAAT,EAArB,CAAnB;IACA,OAAO,IAAI,iBAAJ,CAAsB,UAAtB,EAAkC,OAAlC,CAAP;EACD,CAHD,MAGO;IACL,MAAM,IAAI,KAAJ,CAAU,QAAQ,CAAC,UAAnB,CAAN;EACD;AACF,C,CAED;;AACA,MAAM,yBAAyB,GAAI,OAAD,IAAqB;EACrD,MAAM,IAAI,GAAG;IACX,MAAM,EAAE,OAAO,CAAC,MADL;IAEX,OAAO,EAAE,OAAO,CAAC,OAFN;IAGX,IAAI,EAAE,OAAO,CAAC,IAHH;IAIX,IAAI,EAAE,OAAO,CAAC,IAJH;IAKX,WAAW,EAAE,OAAO,CAAC,WALV;IAMX,KAAK,EAAE,OAAO,CAAC,KANJ;IAOX,QAAQ,EAAE,OAAO,CAAC,QAPP;IAQX,QAAQ,EAAE,OAAO,CAAC,QARP;IASX,SAAS,EAAE,OAAO,CAAC;EATR,CAAb;EAWA,OAAO,IAAP;AACD,CAbD","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\nimport {FileChunkIterator, FileChunkIteratorOptions} from './file_chunk_iterator';\n\n/**\n * Provide a stream of chunks from a URL.\n *\n * Note this class first downloads the entire file into memory before providing\n * the first element from the stream.  This is because the Fetch API does not\n * yet reliably provide a reader stream for the response body.\n */\nexport async function urlChunkIterator(\n    url: RequestInfo, options: FileChunkIteratorOptions = {},\n    fetchFunc?: Function) {\n  let urlString;\n  let requestInit;\n  if ((typeof url) === 'string') {\n    urlString = url as string;\n  } else {\n    urlString = (url as Request).url;\n    requestInit = getRequestInitFromRequest(url as Request);\n  }\n  const response = await (fetchFunc || util.fetch)(urlString, requestInit);\n  if (response.ok) {\n    const uint8Array = new Uint8Array(await response.arrayBuffer());\n    return new FileChunkIterator(uint8Array, options);\n  } else {\n    throw new Error(response.statusText);\n  }\n}\n\n// Generate RequestInit from Request to match tf.util.fetch signature.\nconst getRequestInitFromRequest = (request: Request) => {\n  const init = {\n    method: request.method,\n    headers: request.headers,\n    body: request.body,\n    mode: request.mode,\n    credentials: request.credentials,\n    cache: request.cache,\n    redirect: request.redirect,\n    referrer: request.referrer,\n    integrity: request.integrity,\n  };\n  return init;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}