{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Optimizers.\n */\nimport { train } from '@tensorflow/tfjs-core';\nimport { epsilon } from './backend/common';\nimport { ValueError } from './errors'; // Add (de)serialize()\n// Porting note: This diverges from the PyKeras implementation and may need to\n// change based on (de)serialization requirements.\n\nexport function getOptimizer(identifier) {\n  const optimizerMap = {\n    'Adagrad': () => train.adagrad(0.01),\n    'Adadelta': () => train.adadelta(1, 0.95, epsilon()),\n    'Adam': () => train.adam(0.001, 0.9, 0.999, epsilon()),\n    'Adamax': () => train.adamax(0.002, 0.9, 0.999, epsilon(), 0),\n    'RMSProp': () => train.rmsprop(0.001, 0.9, 0, epsilon()),\n    'SGD': () => train.sgd(0.01)\n  };\n  optimizerMap['adagrad'] = optimizerMap['Adagrad'];\n  optimizerMap['adadelta'] = optimizerMap['Adadelta'];\n  optimizerMap['adam'] = optimizerMap['Adam'];\n  optimizerMap['adamax'] = optimizerMap['Adamax'];\n  optimizerMap['rmsprop'] = optimizerMap['RMSProp'];\n  optimizerMap['sgd'] = optimizerMap['SGD'];\n\n  if (identifier in optimizerMap) {\n    return optimizerMap[identifier]();\n  }\n\n  throw new ValueError(`Unknown Optimizer ${identifier}`);\n}","map":{"version":3,"sources":["../../../../../tfjs-layers/src/optimizers.ts"],"names":[],"mappings":"AAAA;;;;;;;;AAQG;;AAEH;;AAEG;AAEH,SAAmB,KAAnB,QAA+B,uBAA/B;AAEA,SAAQ,OAAR,QAAsB,kBAAtB;AAEA,SAAQ,UAAR,QAAyB,UAAzB,C,CAEA;AAEA;AACA;;AACA,OAAM,SAAU,YAAV,CAAuB,UAAvB,EAAyC;EAC7C,MAAM,YAAY,GAA+C;IAC/D,WAAW,MAAM,KAAK,CAAC,OAAN,CAAc,IAAd,CAD8C;IAE/D,YAAY,MAAM,KAAK,CAAC,QAAN,CAAe,CAAf,EAAkB,IAAlB,EAAwB,OAAO,EAA/B,CAF6C;IAG/D,QAAQ,MAAM,KAAK,CAAC,IAAN,CAAW,KAAX,EAAkB,GAAlB,EAAuB,KAAvB,EAA8B,OAAO,EAArC,CAHiD;IAI/D,UAAU,MAAM,KAAK,CAAC,MAAN,CAAa,KAAb,EAAoB,GAApB,EAAyB,KAAzB,EAAgC,OAAO,EAAvC,EAA2C,CAA3C,CAJ+C;IAK/D,WAAW,MAAM,KAAK,CAAC,OAAN,CAAc,KAAd,EAAqB,GAArB,EAA0B,CAA1B,EAA6B,OAAO,EAApC,CAL8C;IAM/D,OAAO,MAAM,KAAK,CAAC,GAAN,CAAU,IAAV;EANkD,CAAjE;EAQA,YAAY,CAAC,SAAD,CAAZ,GAA0B,YAAY,CAAC,SAAD,CAAtC;EACA,YAAY,CAAC,UAAD,CAAZ,GAA2B,YAAY,CAAC,UAAD,CAAvC;EACA,YAAY,CAAC,MAAD,CAAZ,GAAuB,YAAY,CAAC,MAAD,CAAnC;EACA,YAAY,CAAC,QAAD,CAAZ,GAAyB,YAAY,CAAC,QAAD,CAArC;EACA,YAAY,CAAC,SAAD,CAAZ,GAA0B,YAAY,CAAC,SAAD,CAAtC;EACA,YAAY,CAAC,KAAD,CAAZ,GAAsB,YAAY,CAAC,KAAD,CAAlC;;EAEA,IAAI,UAAU,IAAI,YAAlB,EAAgC;IAC9B,OAAO,YAAY,CAAC,UAAD,CAAZ,EAAP;EACD;;EACD,MAAM,IAAI,UAAJ,CAAe,qBAAqB,UAAU,EAA9C,CAAN;AACD","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Optimizers.\n */\n\nimport {Optimizer, train} from '@tensorflow/tfjs-core';\n\nimport {epsilon} from './backend/common';\n\nimport {ValueError} from './errors';\n\n// Add (de)serialize()\n\n// Porting note: This diverges from the PyKeras implementation and may need to\n// change based on (de)serialization requirements.\nexport function getOptimizer(identifier: string): Optimizer {\n  const optimizerMap: {[optimizerName: string]: () => Optimizer} = {\n    'Adagrad': () => train.adagrad(0.01),\n    'Adadelta': () => train.adadelta(1, 0.95, epsilon()),\n    'Adam': () => train.adam(0.001, 0.9, 0.999, epsilon()),\n    'Adamax': () => train.adamax(0.002, 0.9, 0.999, epsilon(), 0),\n    'RMSProp': () => train.rmsprop(0.001, 0.9, 0, epsilon()),\n    'SGD': () => train.sgd(0.01)\n  };\n  optimizerMap['adagrad'] = optimizerMap['Adagrad'];\n  optimizerMap['adadelta'] = optimizerMap['Adadelta'];\n  optimizerMap['adam'] = optimizerMap['Adam'];\n  optimizerMap['adamax'] = optimizerMap['Adamax'];\n  optimizerMap['rmsprop'] = optimizerMap['RMSProp'];\n  optimizerMap['sgd'] = optimizerMap['SGD'];\n\n  if (identifier in optimizerMap) {\n    return optimizerMap[identifier]();\n  }\n  throw new ValueError(`Unknown Optimizer ${identifier}`);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}