{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function scatterImpl(indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices) {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n  const indicesData = indices.values;\n  const updatesData = updates.values;\n\n  if (outputSize === 0) {\n    return buffer(shape, updates.dtype);\n  }\n\n  const outBuf = buffer(flattenShape, updates.dtype);\n\n  if (typeof defaultValue === 'string') {\n    outBuf.values.fill(defaultValue);\n  } else if (typeof defaultValue === 'number') {\n    outBuf.values.fill(defaultValue);\n  } else if (typeof defaultValue === 'boolean') {\n    outBuf.values.fill(+defaultValue);\n  }\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        outBuf.values[flattenIndex * sliceSize + k] += updatesData[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ? updatesData[0] : updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf;\n}","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/Scatter_impl.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,MAAR,QAA+D,uBAA/D;AASA,OAAM,SACN,WADM,CAEF,OAFE,EAEiC,OAFjC,EAGF,KAHE,EAGe,UAHf,EAGmC,SAHnC,EAGsD,UAHtD,EAIF,SAJE,EAIiB,OAJjB,EAIoC,YAJpC,EAKF,cALE,EAKqB;EACzB,MAAM,YAAY,GAAG,CAAC,UAAU,GAAG,SAAd,EAAyB,SAAzB,CAArB;EAEA,MAAM,WAAW,GAAG,OAAO,CAAC,MAA5B;EACA,MAAM,WAAW,GAAG,OAAO,CAAC,MAA5B;;EAEA,IAAI,UAAU,KAAK,CAAnB,EAAsB;IACpB,OAAO,MAAM,CAAC,KAAD,EAAuB,OAAO,CAAC,KAA/B,CAAb;EACD;;EAED,MAAM,MAAM,GAAG,MAAM,CAAC,YAAD,EAAe,OAAO,CAAC,KAAvB,CAArB;;EACA,IAAI,OAAO,YAAP,KAAwB,QAA5B,EAAsC;IACnC,MAAM,CAAC,MAAP,CAA2B,IAA3B,CAAgC,YAAhC;EACF,CAFD,MAEO,IAAI,OAAO,YAAP,KAAwB,QAA5B,EAAsC;IAC1C,MAAM,CAAC,MAAP,CAA6B,IAA7B,CAAkC,YAAlC;EACF,CAFM,MAEA,IAAI,OAAO,YAAP,KAAwB,SAA5B,EAAuC;IAC3C,MAAM,CAAC,MAAP,CAA6B,IAA7B,CAAkC,CAAC,YAAnC;EACF;;EAED,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,UAApB,EAAgC,CAAC,EAAjC,EAAqC;IACnC,MAAM,KAAK,GAAG,EAAd;IACA,IAAI,YAAY,GAAG,CAAnB;;IACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAApB,EAA+B,CAAC,EAAhC,EAAoC;MAClC,MAAM,GAAG,GAAG,WAAW,CAAC,CAAC,GAAG,SAAJ,GAAgB,CAAjB,CAAvB;MACA,KAAK,CAAC,IAAN,CAAW,GAAX;MACA,YAAY,IAAI,GAAG,GAAG,OAAO,CAAC,CAAD,CAA7B;IACD;;IAED,IAAI,YAAY,GAAG,CAAf,IAAoB,YAAY,IAAI,UAAU,GAAG,SAArD,EAAgE;MAC9D,MAAM,IAAI,KAAJ,CAAU,oBAAoB,KAAK,wBAAwB,KAAK,EAAhE,CAAN;IACD;;IAED,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAApB,EAA+B,CAAC,EAAhC,EAAoC;MAClC,IAAI,cAAJ,EAAoB;QACjB,MAAM,CAAC,MAAP,CAA6B,YAAY,GAAG,SAAf,GAA2B,CAAxD,KACI,WAA0B,CAAC,CAAC,GAAG,SAAJ,GAAgB,CAAjB,CAD9B;MAEF,CAHD,MAGO;QACL,MAAM,CAAC,MAAP,CAAc,YAAY,GAAG,SAAf,GAA2B,CAAzC,IAA8C,OAAO,CAAC,IAAR,KAAiB,CAAjB,GAC1C,WAAW,CAAC,CAAD,CAD+B,GAE1C,WAAW,CAAC,CAAC,GAAG,SAAJ,GAAgB,CAAjB,CAFf;MAGD;IACF;EACF;;EAED,OAAO,MAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\ninterface DefaultValueTypeMap {\n  bool: boolean;\n  int32: number;\n  float32: number;\n  string: string;\n}\n\nexport function\nscatterImpl<R extends Rank, D extends 'float32'|'int32'|'bool'|'string'>(\n    indices: TensorBuffer<R, 'int32'>, updates: TensorBuffer<R, D>,\n    shape: number[], outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[], defaultValue: DefaultValueTypeMap[D],\n    sumDupeIndices: boolean): TensorBuffer<R, D> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = buffer(flattenShape, updates.dtype);\n  if (typeof defaultValue === 'string') {\n    (outBuf.values as string[]).fill(defaultValue);\n  } else if (typeof defaultValue === 'number') {\n    (outBuf.values as TypedArray).fill(defaultValue);\n  } else if (typeof defaultValue === 'boolean') {\n    (outBuf.values as TypedArray).fill(+defaultValue);\n  }\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        (outBuf.values as TypedArray)[flattenIndex * sliceSize + k] +=\n            (updatesData as TypedArray)[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}