{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { scalar } from '@tensorflow/tfjs-core';\nimport { TensorArray } from '../../executor/tensor_array';\nimport { fromTensor, reserve, scatter, split } from '../../executor/tensor_list';\nimport { cloneTensor, getParamValue, getTensor } from './utils';\nexport const executeOp = async (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'If':\n    case 'StatelessIf':\n      {\n        const thenFunc = getParamValue('thenBranch', node, tensorMap, context);\n        const elseFunc = getParamValue('elseBranch', node, tensorMap, context);\n        const cond = getParamValue('cond', node, tensorMap, context);\n        const args = getParamValue('args', node, tensorMap, context);\n        const condValue = await cond.data();\n\n        if (condValue[0]) {\n          return context.functionMap[thenFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n        } else {\n          return context.functionMap[elseFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n        }\n      }\n\n    case 'While':\n    case 'StatelessWhile':\n      {\n        const bodyFunc = getParamValue('body', node, tensorMap, context);\n        const condFunc = getParamValue('cond', node, tensorMap, context);\n        const args = getParamValue('args', node, tensorMap, context); // Calculate the condition of the loop\n\n        const condResult = await context.functionMap[condFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n        const argIds = args.map(tensor => tensor.id);\n        let condValue = await condResult[0].data(); // Dispose the intermediate tensors for condition function\n\n        condResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n        let result = args;\n\n        while (condValue[0]) {\n          // Record the previous result for intermediate tensor tracking\n          const origResult = result; // Execution the body of the loop\n\n          result = await context.functionMap[bodyFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);\n          const resultIds = result.map(tensor => tensor.id); // Dispose the intermediate tensor for body function that is not global\n          // kept, not input/output of the body function\n\n          origResult.forEach(tensor => {\n            if (!tensor.kept && argIds.indexOf(tensor.id) === -1 && resultIds.indexOf(tensor.id) === -1) {\n              tensor.dispose();\n            }\n          }); // Recalcuate the condition of the loop using the latest results.\n\n          const condResult = await context.functionMap[condFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);\n          condValue = await condResult[0].data(); // Dispose the intermediate tensors for condition function\n\n          condResult.forEach(tensor => {\n            if (!tensor.kept && argIds.indexOf(tensor.id) === -1 && resultIds.indexOf(tensor.id) === -1) {\n              tensor.dispose();\n            }\n          });\n        }\n\n        return result;\n      }\n\n    case 'LoopCond':\n      {\n        const pred = getParamValue('pred', node, tensorMap, context);\n        return [cloneTensor(pred)];\n      }\n\n    case 'Switch':\n      {\n        const pred = getParamValue('pred', node, tensorMap, context);\n        let data = getParamValue('data', node, tensorMap, context);\n\n        if (!data.kept) {\n          data = cloneTensor(data);\n        } // Outputs nodes :0 => false, :1 => true\n\n\n        return (await pred.data())[0] ? [undefined, data] : [data, undefined];\n      }\n\n    case 'Merge':\n      {\n        const inputName = node.inputNames.find(name => getTensor(name, tensorMap, context) !== undefined);\n\n        if (inputName) {\n          const data = getTensor(inputName, tensorMap, context);\n          return [cloneTensor(data)];\n        }\n\n        return undefined;\n      }\n\n    case 'Enter':\n      {\n        const frameId = getParamValue('frameName', node, tensorMap, context);\n        const data = getParamValue('tensor', node, tensorMap, context);\n        context.enterFrame(frameId);\n        return [cloneTensor(data)];\n      }\n\n    case 'Exit':\n      {\n        const data = getParamValue('tensor', node, tensorMap, context);\n        context.exitFrame();\n        return [cloneTensor(data)];\n      }\n\n    case 'NextIteration':\n      {\n        const data = getParamValue('tensor', node, tensorMap, context);\n        context.nextIteration();\n        return [cloneTensor(data)];\n      }\n\n    case 'TensorArrayV3':\n      {\n        const size = getParamValue('size', node, tensorMap, context);\n        const dtype = getParamValue('dtype', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const dynamicSize = getParamValue('dynamicSize', node, tensorMap, context);\n        const clearAfterRead = getParamValue('clearAfterRead', node, tensorMap, context);\n        const identicalElementShapes = getParamValue('identicalElementShapes', node, tensorMap, context);\n        const name = getParamValue('name', node, tensorMap, context);\n        const tensorArray = new TensorArray(name, dtype, size, elementShape, identicalElementShapes, dynamicSize, clearAfterRead);\n        context.addTensorArray(tensorArray);\n        return [tensorArray.idTensor, scalar(1.0)];\n      }\n\n    case 'TensorArrayWriteV3':\n      {\n        const id = getParamValue('tensorArrayId', node, tensorMap, context);\n        const index = getParamValue('index', node, tensorMap, context);\n        const writeTensor = getParamValue('tensor', node, tensorMap, context);\n        const writeTensorArray = context.getTensorArray(id.id);\n        writeTensorArray.write(index, writeTensor);\n        return [writeTensorArray.idTensor];\n      }\n\n    case 'TensorArrayReadV3':\n      {\n        const readId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const readIndex = getParamValue('index', node, tensorMap, context);\n        const readTensorArray = context.getTensorArray(readId.id);\n        return [readTensorArray.read(readIndex)];\n      }\n\n    case 'TensorArrayGatherV3':\n      {\n        const gatherId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const gatherIndices = getParamValue('indices', node, tensorMap, context);\n        const gatherDtype = getParamValue('dtype', node, tensorMap, context);\n        const gatherTensorArray = context.getTensorArray(gatherId.id);\n        return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n      }\n\n    case 'TensorArrayScatterV3':\n      {\n        const scatterId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const scatterIndices = getParamValue('indices', node, tensorMap, context);\n        const scatterTensor = getParamValue('tensor', node, tensorMap, context);\n        const scatterTensorArray = context.getTensorArray(scatterId.id);\n        scatterTensorArray.scatter(scatterIndices, scatterTensor);\n        return [scatterTensorArray.idTensor];\n      }\n\n    case 'TensorArrayConcatV3':\n      {\n        const concatId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const concatTensorArray = context.getTensorArray(concatId.id);\n        const concatDtype = getParamValue('dtype', node, tensorMap, context);\n        return [concatTensorArray.concat(concatDtype)];\n      }\n\n    case 'TensorArraySplitV3':\n      {\n        const splitId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const splitTensor = getParamValue('tensor', node, tensorMap, context);\n        const lengths = getParamValue('lengths', node, tensorMap, context);\n        const splitTensorArray = context.getTensorArray(splitId.id);\n        splitTensorArray.split(lengths, splitTensor);\n        return [splitTensorArray.idTensor];\n      }\n\n    case 'TensorArraySizeV3':\n      {\n        const sizeId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const sizeTensorArray = context.getTensorArray(sizeId.id);\n        return [scalar(sizeTensorArray.size(), 'int32')];\n      }\n\n    case 'TensorArrayCloseV3':\n      {\n        const closeId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const closeTensorArray = context.getTensorArray(closeId.id);\n        closeTensorArray.clearAndClose();\n        return [closeTensorArray.idTensor];\n      }\n\n    case 'TensorListSetItem':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const index = getParamValue('index', node, tensorMap, context);\n        const writeTensor = getParamValue('tensor', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        tensorList.setItem(index, writeTensor);\n        return [tensorList.idTensor];\n      }\n\n    case 'TensorListGetItem':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const readIndex = getParamValue('index', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDType = getParamValue('elementDType', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        return [tensorList.getItem(readIndex, elementShape, elementDType)];\n      }\n\n    case 'TensorListScatterV2':\n    case 'TensorListScatter':\n      {\n        const scatterIndices = getParamValue('indices', node, tensorMap, context);\n        const scatterTensor = getParamValue('tensor', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const numElements = getParamValue('numElements', node, tensorMap, context);\n        const tensorList = scatter(scatterTensor, scatterIndices, elementShape, numElements);\n        context.addTensorList(tensorList);\n        return [tensorList.idTensor];\n      }\n\n    case 'TensorListReserve':\n    case 'EmptyTensorList':\n      {\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n        let numElementsParam;\n\n        if (node.op === 'TensorListReserve') {\n          numElementsParam = 'numElements';\n        } else {\n          numElementsParam = 'maxNumElements';\n        }\n\n        const numElements = getParamValue(numElementsParam, node, tensorMap, context);\n        const maxNumElements = node.op === 'TensorListReserve' ? -1 : numElements;\n        const tensorList = reserve(elementShape, elementDtype, numElements, maxNumElements);\n        context.addTensorList(tensorList);\n        return [tensorList.idTensor];\n      }\n\n    case 'TensorListGather':\n      {\n        const gatherId = getParamValue('tensorListId', node, tensorMap, context);\n        const gatherIndices = getParamValue('indices', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n        const tensorList = context.getTensorList(gatherId.id);\n        return [tensorList.gather(gatherIndices, elementDtype, elementShape)];\n      }\n\n    case 'TensorListStack':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n        const numElements = getParamValue('numElements', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        return [tensorList.stack(elementShape, elementDtype, numElements)];\n      }\n\n    case 'TensorListFromTensor':\n      {\n        const tensor = getParamValue('tensor', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n        const tensorList = fromTensor(tensor, elementShape, elementDtype);\n        context.addTensorList(tensorList);\n        return [tensorList.idTensor];\n      }\n\n    case 'TensorListConcat':\n    case 'TensorListConcatV2':\n      {\n        const concatId = getParamValue('tensorListId', node, tensorMap, context);\n        const tensorList = context.getTensorList(concatId.id);\n        const concatDtype = getParamValue('dtype', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        return [tensorList.concat(concatDtype, elementShape)];\n      }\n\n    case 'TensorListPushBack':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const writeTensor = getParamValue('tensor', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        tensorList.pushBack(writeTensor);\n        return [tensorList.idTensor];\n      }\n\n    case 'TensorListPopBack':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDType = getParamValue('elementDType', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        return [tensorList.popBack(elementShape, elementDType)];\n      }\n\n    case 'TensorListSplit':\n      {\n        const splitTensor = getParamValue('tensor', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const lengths = getParamValue('lengths', node, tensorMap, context);\n        const tensorList = split(splitTensor, lengths, elementShape);\n        context.addTensorList(tensorList);\n        return [tensorList.idTensor];\n      }\n\n    case 'TensorListLength':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        return [scalar(tensorList.size(), 'int32')];\n      }\n\n    case 'TensorListResize':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const size = getParamValue('size', node, tensorMap, context);\n        const srcTensorList = context.getTensorList(idTensor.id);\n        const destTensorList = srcTensorList.resize(size);\n        context.addTensorList(destTensorList);\n        return [destTensorList.idTensor];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'control';","map":{"version":3,"sources":["../../../../../../../tfjs-converter/src/operations/executors/control_executor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, scalar, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {TensorArray} from '../../executor/tensor_array';\nimport {fromTensor, reserve, scatter, split} from '../../executor/tensor_list';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {cloneTensor, getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'If':\n    case 'StatelessIf': {\n      const thenFunc =\n          getParamValue('thenBranch', node, tensorMap, context) as string;\n      const elseFunc =\n          getParamValue('elseBranch', node, tensorMap, context) as string;\n      const cond = getParamValue('cond', node, tensorMap, context) as Tensor;\n      const args = getParamValue('args', node, tensorMap, context) as Tensor[];\n      const condValue = await cond.data();\n      if (condValue[0]) {\n        return context.functionMap[thenFunc].executeFunctionAsync(\n            args, context.tensorArrayMap, context.tensorListMap);\n      } else {\n        return context.functionMap[elseFunc].executeFunctionAsync(\n            args, context.tensorArrayMap, context.tensorListMap);\n      }\n    }\n    case 'While':\n    case 'StatelessWhile': {\n      const bodyFunc =\n          getParamValue('body', node, tensorMap, context) as string;\n      const condFunc =\n          getParamValue('cond', node, tensorMap, context) as string;\n      const args = getParamValue('args', node, tensorMap, context) as Tensor[];\n\n      // Calculate the condition of the loop\n      const condResult =\n          (await context.functionMap[condFunc].executeFunctionAsync(\n              args, context.tensorArrayMap, context.tensorListMap));\n      const argIds = args.map(tensor => tensor.id);\n      let condValue = await condResult[0].data();\n      // Dispose the intermediate tensors for condition function\n      condResult.forEach(tensor => {\n        if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {\n          tensor.dispose();\n        }\n      });\n\n      let result: Tensor[] = args;\n\n      while (condValue[0]) {\n        // Record the previous result for intermediate tensor tracking\n        const origResult = result;\n        // Execution the body of the loop\n        result = await context.functionMap[bodyFunc].executeFunctionAsync(\n            result, context.tensorArrayMap, context.tensorListMap);\n        const resultIds = result.map(tensor => tensor.id);\n\n        // Dispose the intermediate tensor for body function that is not global\n        // kept, not input/output of the body function\n        origResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n              resultIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n\n        // Recalcuate the condition of the loop using the latest results.\n        const condResult =\n            (await context.functionMap[condFunc].executeFunctionAsync(\n                result, context.tensorArrayMap, context.tensorListMap));\n        condValue = await condResult[0].data();\n        // Dispose the intermediate tensors for condition function\n        condResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n              resultIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n      }\n      return result;\n    }\n    case 'LoopCond': {\n      const pred = getParamValue('pred', node, tensorMap, context) as Tensor;\n      return [cloneTensor(pred)];\n    }\n    case 'Switch': {\n      const pred = getParamValue('pred', node, tensorMap, context) as Tensor;\n      let data = getParamValue('data', node, tensorMap, context) as Tensor;\n      if (!data.kept) {\n        data = cloneTensor(data);\n      }\n      // Outputs nodes :0 => false, :1 => true\n      return (await pred.data())[0] ? [undefined, data] : [data, undefined];\n    }\n    case 'Merge': {\n      const inputName = node.inputNames.find(\n          name => getTensor(name, tensorMap, context) !== undefined);\n      if (inputName) {\n        const data = getTensor(inputName, tensorMap, context);\n        return [cloneTensor(data)];\n      }\n      return undefined;\n    }\n    case 'Enter': {\n      const frameId =\n          getParamValue('frameName', node, tensorMap, context) as string;\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.enterFrame(frameId);\n      return [cloneTensor(data)];\n    }\n    case 'Exit': {\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.exitFrame();\n      return [cloneTensor(data)];\n    }\n    case 'NextIteration': {\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.nextIteration();\n      return [cloneTensor(data)];\n    }\n    case 'TensorArrayV3': {\n      const size = getParamValue('size', node, tensorMap, context) as number;\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const dynamicSize =\n          getParamValue('dynamicSize', node, tensorMap, context) as boolean;\n      const clearAfterRead =\n          getParamValue('clearAfterRead', node, tensorMap, context) as boolean;\n      const identicalElementShapes =\n          getParamValue('identicalElementShapes', node, tensorMap, context) as\n          boolean;\n      const name = getParamValue('name', node, tensorMap, context) as string;\n      const tensorArray = new TensorArray(\n          name, dtype, size, elementShape, identicalElementShapes, dynamicSize,\n          clearAfterRead);\n      context.addTensorArray(tensorArray);\n      return [tensorArray.idTensor, scalar(1.0)];\n    }\n    case 'TensorArrayWriteV3': {\n      const id =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const writeTensorArray = context.getTensorArray(id.id);\n      writeTensorArray.write(index, writeTensor);\n      return [writeTensorArray.idTensor];\n    }\n    case 'TensorArrayReadV3': {\n      const readId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const readTensorArray = context.getTensorArray(readId.id);\n      return [readTensorArray.read(readIndex)];\n    }\n    case 'TensorArrayGatherV3': {\n      const gatherId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const gatherDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const gatherTensorArray = context.getTensorArray(gatherId.id);\n      return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n    }\n    case 'TensorArrayScatterV3': {\n      const scatterId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const scatterTensorArray = context.getTensorArray(scatterId.id);\n      scatterTensorArray.scatter(scatterIndices, scatterTensor);\n      return [scatterTensorArray.idTensor];\n    }\n    case 'TensorArrayConcatV3': {\n      const concatId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const concatTensorArray = context.getTensorArray(concatId.id);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      return [concatTensorArray.concat(concatDtype)];\n    }\n    case 'TensorArraySplitV3': {\n      const splitId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n      const splitTensorArray = context.getTensorArray(splitId.id);\n      splitTensorArray.split(lengths, splitTensor);\n      return [splitTensorArray.idTensor];\n    }\n    case 'TensorArraySizeV3': {\n      const sizeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const sizeTensorArray = context.getTensorArray(sizeId.id);\n      return [scalar(sizeTensorArray.size(), 'int32')];\n    }\n    case 'TensorArrayCloseV3': {\n      const closeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const closeTensorArray = context.getTensorArray(closeId.id);\n      closeTensorArray.clearAndClose();\n      return [closeTensorArray.idTensor];\n    }\n    case 'TensorListSetItem': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(idTensor.id);\n      tensorList.setItem(index, writeTensor);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListGetItem': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n\n      const elementDType =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.getItem(readIndex, elementShape, elementDType)];\n    }\n    case 'TensorListScatterV2':\n    case 'TensorListScatter': {\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const numElements =\n          getParamValue('numElements', node, tensorMap, context) as number;\n      const tensorList =\n          scatter(scatterTensor, scatterIndices, elementShape, numElements);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListReserve':\n    case 'EmptyTensorList': {\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      let numElementsParam;\n\n      if (node.op === 'TensorListReserve') {\n        numElementsParam = 'numElements';\n      } else {\n        numElementsParam = 'maxNumElements';\n      }\n\n      const numElements =\n          getParamValue(numElementsParam, node, tensorMap, context) as number;\n      const maxNumElements = node.op === 'TensorListReserve' ? -1 : numElements;\n      const tensorList =\n          reserve(elementShape, elementDtype, numElements, maxNumElements);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListGather': {\n      const gatherId =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(gatherId.id);\n      return [tensorList.gather(gatherIndices, elementDtype, elementShape)];\n    }\n    case 'TensorListStack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const numElements =\n          getParamValue('numElements', node, tensorMap, context) as number;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.stack(elementShape, elementDtype, numElements)];\n    }\n    case 'TensorListFromTensor': {\n      const tensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = fromTensor(tensor, elementShape, elementDtype);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListConcat':\n    case 'TensorListConcatV2': {\n      const concatId =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(concatId.id);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      return [tensorList.concat(concatDtype, elementShape)];\n    }\n    case 'TensorListPushBack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(idTensor.id);\n      tensorList.pushBack(writeTensor);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListPopBack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDType =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.popBack(elementShape, elementDType)];\n    }\n    case 'TensorListSplit': {\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n\n      const tensorList = split(splitTensor, lengths, elementShape);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListLength': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [scalar(tensorList.size(), 'int32')];\n    }\n    case 'TensorListResize': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const size = getParamValue('size', node, tensorMap, context) as number;\n\n      const srcTensorList = context.getTensorList(idTensor.id);\n      const destTensorList = srcTensorList.resize(size);\n      context.addTensorList(destTensorList);\n      return [destTensorList.idTensor];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'control';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}