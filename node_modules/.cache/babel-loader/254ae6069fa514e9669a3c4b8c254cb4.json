{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherNd, util } from '@tensorflow/tfjs-core';\nimport { GatherNDProgram } from '../gather_nd_gpu';\nimport { gatherNdImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nexport function gatherNd(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    params,\n    indices\n  } = inputs;\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util.sizeFromShape(params.shape);\n  const [resultShape, numSlices, sliceSize, strides] = backend_util.prepareAndValidate(params, indices);\n  const flattenIndices = reshape({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      shape: [numSlices, sliceRank]\n    }\n  });\n  const flattenX = reshape({\n    inputs: {\n      x: params\n    },\n    backend,\n    attrs: {\n      shape: [util.sizeFromShape(params.shape) / sliceSize, sliceSize]\n    }\n  });\n\n  if (backend.shouldExecuteOnCPU([params, indices]) || params.dtype === 'string') {\n    const indicesData = backend.readSync(indices.dataId);\n    const paramsBuf = backend.bufferSync(params);\n    const outValue = gatherNdImplCPU(indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize, strides, params.shape, paramsSize);\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n\n  const program = new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize], params.shape);\n  const res = backend.runWebGLProgram(program, [flattenX, flattenIndices], flattenX.dtype);\n  const reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape: resultShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\nexport const gatherNdConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgl',\n  kernelFunc: gatherNd\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-webgl/src/kernels/GatherNd.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAsB,QAAtB,EAAwG,IAAxG,QAAmH,uBAAnH;AAGA,SAAQ,eAAR,QAA8B,kBAA9B;AACA,SAAQ,eAAR,QAA8B,wBAA9B;AAEA,SAAQ,OAAR,QAAsB,WAAtB;AAEA,OAAM,SAAU,QAAV,CACF,IADE,EACuD;EAC3D,MAAM;IAAC,MAAD;IAAS;EAAT,IAAoB,IAA1B;EACA,MAAM;IAAC,MAAD;IAAS;EAAT,IAAoB,MAA1B;EAEA,MAAM,YAAY,GAAG,OAAO,CAAC,KAA7B;EACA,MAAM,SAAS,GAAG,YAAY,CAAC,YAAY,CAAC,MAAb,GAAsB,CAAvB,CAA9B;EACA,MAAM,UAAU,GAAG,IAAI,CAAC,aAAL,CAAmB,MAAM,CAAC,KAA1B,CAAnB;EAEA,MAAM,CAAC,WAAD,EAAc,SAAd,EAAyB,SAAzB,EAAoC,OAApC,IACF,YAAY,CAAC,kBAAb,CAAgC,MAAhC,EAAwC,OAAxC,CADJ;EAGA,MAAM,cAAc,GAAG,OAAO,CAC1B;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAJ,CAAT;IAAuB,OAAvB;IAAgC,KAAK,EAAE;MAAC,KAAK,EAAE,CAAC,SAAD,EAAY,SAAZ;IAAR;EAAvC,CAD0B,CAA9B;EAEA,MAAM,QAAQ,GAAG,OAAO,CAAC;IACvB,MAAM,EAAE;MAAC,CAAC,EAAE;IAAJ,CADe;IAEvB,OAFuB;IAGvB,KAAK,EAAE;MAAC,KAAK,EAAE,CAAE,IAAI,CAAC,aAAL,CAAmB,MAAM,CAAC,KAA1B,IAAmC,SAArC,EAAiD,SAAjD;IAAR;EAHgB,CAAD,CAAxB;;EAMA,IAAI,OAAO,CAAC,kBAAR,CAA2B,CAAC,MAAD,EAAS,OAAT,CAA3B,KACA,MAAM,CAAC,KAAP,KAAiB,QADrB,EAC+B;IAC7B,MAAM,WAAW,GAAG,OAAO,CAAC,QAAR,CAAiB,OAAO,CAAC,MAAzB,CAApB;IACA,MAAM,SAAS,GAAG,OAAO,CAAC,UAAR,CAAoC,MAApC,CAAlB;IACA,MAAM,QAAQ,GAAG,eAAe,CAC5B,WAD4B,EACf,SADe,EACJ,MAAM,CAAC,KADH,EACU,SADV,EACqB,SADrB,EACgC,SADhC,EAE5B,OAF4B,EAEnB,MAAM,CAAC,KAFY,EAEL,UAFK,CAAhC;IAIA,OAAO,OAAO,CAAC,cAAR,CAAuB,WAAvB,EAAoC,MAAM,CAAC,KAA3C,EAAkD,QAAQ,CAAC,MAA3D,CAAP;EACD;;EACD,MAAM,OAAO,GACT,IAAI,eAAJ,CAAoB,SAApB,EAA+B,OAA/B,EAAwC,CAAC,SAAD,EAAY,SAAZ,CAAxC,EACE,MAAM,CAAC,KADT,CADJ;EAGA,MAAM,GAAG,GAAG,OAAO,CAAC,eAAR,CACR,OADQ,EACC,CAAC,QAAD,EAAW,cAAX,CADD,EAC6B,QAAQ,CAAC,KADtC,CAAZ;EAGA,MAAM,QAAQ,GACV,OAAO,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAJ,CAAT;IAAmB,OAAnB;IAA4B,KAAK,EAAE;MAAC,KAAK,EAAE;IAAR;EAAnC,CAAD,CADX;EAGA,OAAO,CAAC,6BAAR,CAAsC,cAAtC;EACA,OAAO,CAAC,6BAAR,CAAsC,QAAtC;EACA,OAAO,CAAC,6BAAR,CAAsC,GAAtC;EAEA,OAAO,QAAP;AACD;AAED,OAAO,MAAM,cAAc,GAAiB;EAC1C,UAAU,EAAE,QAD8B;EAE1C,WAAW,EAAE,OAF6B;EAG1C,UAAU,EAAE;AAH8B,CAArC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherNDProgram} from '../gather_nd_gpu';\nimport {gatherNdImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numSlices, sliceRank]}});\n  const flattenX = reshape({\n    inputs: {x: params},\n    backend,\n    attrs: {shape: [(util.sizeFromShape(params.shape) / sliceSize), sliceSize]}\n  });\n\n  if (backend.shouldExecuteOnCPU([params, indices]) ||\n      params.dtype === 'string') {\n    const indicesData = backend.readSync(indices.dataId) as TypedArray;\n    const paramsBuf = backend.bufferSync<Rank, 'float32'>(params);\n    const outValue = gatherNdImplCPU(\n        indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n        strides, params.shape, paramsSize);\n\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n  const program =\n      new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize], \n        params.shape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices], flattenX.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: resultShape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return reshaped;\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgl',\n  kernelFunc: gatherNd as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}