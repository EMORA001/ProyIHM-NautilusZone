{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2D, util } from '@tensorflow/tfjs-core';\nexport const dilation2DConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: _ref => {\n    let {\n      inputs,\n      backend,\n      attrs\n    } = _ref;\n    const {\n      x,\n      filter\n    } = inputs;\n    const {\n      strides,\n      pad,\n      dilations\n    } = attrs;\n    const cpuBackend = backend;\n    const xVals = cpuBackend.data.get(x.dataId).values;\n    const xRank = x.shape.length;\n    const filterVals = cpuBackend.data.get(filter.dataId).values;\n    const filterRank = filter.shape.length;\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC'\n    /* dataFormat */\n    , dilations);\n    const outSize = util.sizeFromShape(outShape);\n    const outRank = outShape.length;\n    const outputVals = util.getArrayFromDType(x.dtype, outSize); // Upsampling the input by fill in `dilation size - 1` values between each\n    // input value.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const xIndex = util.locToIndex([b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                    const filterIndex = util.locToIndex([h, w, d], filterRank, util.computeStrides(filter.shape));\n                    const val = xVals[xIndex] + filterVals[filterIndex];\n\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n\n            const outputIndex = util.locToIndex([b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n    return {\n      dataId,\n      shape: outShape,\n      dtype: x.dtype\n    };\n  }\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/Dilation2D.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter} = inputs as Dilation2DInputs;\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xRank = x.shape.length;\n\n    const filterVals = cpuBackend.data.get(filter.dataId).values as TypedArray;\n    const filterRank = filter.shape.length;\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    const outSize = util.sizeFromShape(outShape);\n    const outRank = outShape.length;\n    const outputVals = util.getArrayFromDType(x.dtype, outSize);\n\n    // Upsampling the input by fill in `dilation size - 1` values between each\n    // input value.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const xIndex = util.locToIndex(\n                        [b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                    const filterIndex = util.locToIndex(\n                        [h, w, d], filterRank,\n                        util.computeStrides(filter.shape));\n                    const val = xVals[xIndex] + filterVals[filterIndex];\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n            const outputIndex = util.locToIndex(\n                [b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n\n    return {dataId, shape: outShape, dtype: x.dtype};\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}