{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import webgl flags.\nimport './flags_webgl';\nimport { backend_util, buffer, DataStorage, engine, env, kernel_impls, KernelBackend, nextFrame, scalar, tidy, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext } from './canvas_util';\nimport { DecodeMatrixProgram } from './decode_matrix_gpu';\nimport { DecodeMatrixPackedProgram } from './decode_matrix_packed_gpu';\nimport { EncodeFloatProgram } from './encode_float_gpu';\nimport { EncodeFloatPackedProgram } from './encode_float_packed_gpu';\nimport { EncodeMatrixProgram } from './encode_matrix_gpu';\nimport { EncodeMatrixPackedProgram } from './encode_matrix_packed_gpu';\nimport { GPGPUContext } from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport { getUniformLocations } from './gpgpu_math';\nimport { simpleAbsImplCPU } from './kernel_utils/shared';\nimport { PackProgram } from './pack_gpu';\nimport { ReshapePackedProgram } from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport { TextureUsage } from './tex_util';\nimport { TextureManager } from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport { UnaryOpProgram } from './unaryop_gpu';\nimport { UnaryOpPackedProgram } from './unaryop_packed_gpu';\nimport { UnpackProgram } from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nconst whereImpl = kernel_impls.whereImpl;\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\nconst binaryCaches = {};\nexport function getBinaryCache(webGLVersion) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n} // Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\n\nconst CPU_HANDOFF_SIZE_THRESHOLD = env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD'); // Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\n\nconst BEFORE_PAGING_CONSTANT = 600;\n\nfunction numMBBeforeWarning() {\n  if (env().global.screen == null) {\n    return 1024; // 1 GB.\n  }\n\n  return env().global.screen.height * env().global.screen.width * window.devicePixelRatio * BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\nexport class MathBackendWebGL extends KernelBackend {\n  constructor(gpuResource) {\n    super(); // Maps data ids that have a pending read operation, to list of subscribers.\n\n    this.pendingRead = new WeakMap(); // List of data ids that are scheduled for disposal, but are waiting on a\n    // pending read operation.\n\n    this.pendingDisposal = new WeakSet(); // Used to count the number of 'shallow' sliced tensors that point to the\n    // same data id.\n\n    this.dataRefCount = new WeakMap();\n    this.numBytesInGPU = 0; // Accumulated time spent (including blocking) in uploading data to webgl.\n\n    this.uploadWaitMs = 0; // Accumulated time spent (including blocking in downloading data from webgl.\n\n    this.downloadWaitMs = 0; // record the last manual GL Flush time.\n\n    this.lastGlFlushTime = 0;\n    this.warnedAboutMemory = false;\n    this.pendingDeletes = 0;\n    this.disposed = false;\n\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    let newGPGPU;\n\n    if (gpuResource != null) {\n      if (gpuResource instanceof GPGPUContext) {\n        newGPGPU = gpuResource;\n      } else {\n        const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'), gpuResource);\n        newGPGPU = new GPGPUContext(gl);\n      }\n\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n    } else {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      newGPGPU = new GPGPUContext(gl);\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpuCreatedLocally = true;\n    }\n\n    this.gpgpu = newGPGPU;\n    this.canvas = this.gpgpu.gl.canvas;\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n    this.texData = new DataStorage(this, engine());\n  }\n\n  nextDataId() {\n    return MathBackendWebGL.nextDataId++;\n  }\n\n  numDataIds() {\n    return this.texData.numDataIds() - this.pendingDeletes;\n  }\n\n  write(values, shape, dtype) {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') || env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);\n    }\n\n    const dataId = {\n      id: this.nextDataId()\n    };\n    this.texData.set(dataId, {\n      shape,\n      dtype,\n      values,\n      usage: TextureUsage.UPLOAD,\n      refCount: 1\n    });\n    return dataId;\n  }\n  /** Return refCount of a `TensorData`. */\n\n\n  refCount(dataId) {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n\n    return 0;\n  }\n  /** Increase refCount of a `TextureData`. */\n\n\n  incRef(dataId) {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n  /** Decrease refCount of a `TextureData`. */\n\n\n  decRef(dataId) {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n\n  move(dataId, values, shape, dtype, refCount) {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n\n    if (dtype === 'complex64') {\n      throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);\n    }\n\n    this.texData.set(dataId, {\n      shape,\n      dtype,\n      values,\n      usage: TextureUsage.UPLOAD,\n      refCount\n    });\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo) {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  readSync(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      values,\n      dtype,\n      complexTensorInfos,\n      slice,\n      shape,\n      isPacked\n    } = texData; // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n\n    if (slice != null) {\n      let program;\n\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n\n      const res = this.runWebGLProgram(program, [{\n        dataId,\n        shape,\n        dtype\n      }], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (dtype === 'string') {\n      return values;\n    }\n\n    const shouldTimeProgram = this.activeTimers != null;\n    let start;\n\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result;\n\n    if (dtype === 'complex64') {\n      const realValues = this.readSync(complexTensorInfos.real.dataId);\n      const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  async read(dataId) {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise(resolve => subscribers.push(resolve));\n    }\n\n    const texData = this.texData.get(dataId);\n    const {\n      values,\n      shape,\n      slice,\n      dtype,\n      complexTensorInfos,\n      isPacked\n    } = texData; // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n\n    if (slice != null) {\n      let program;\n\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n\n      const res = this.runWebGLProgram(program, [{\n        dataId,\n        shape,\n        dtype\n      }], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (env().getBool('DEBUG')) {\n      // getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') caused a blocking GPU call.\n      // For performance reason, only check it for debugging. In production,\n      // it doesn't handle this use case anyway, so behavior is not changed.\n      if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') && env().getNumber('WEBGL_VERSION') === 2) {\n        throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` + `WEBGL_VERSION=2 not yet supported.`);\n      }\n    }\n\n    let buffer = null;\n    let tmpDownloadTarget;\n\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n      buffer = this.gpgpu.createBufferFromTexture(tmpData.texture.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    } // Download the values from the GPU.\n\n\n    let vals;\n\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([this.read(complexTensorInfos.real.dataId), this.read(complexTensorInfos.imag.dataId)]);\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n\n    if (buffer != null) {\n      const gl = this.gpgpu.gl;\n      webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));\n    }\n\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId); // Notify all pending reads.\n\n    subscribers.forEach(resolve => resolve(dTypeVals));\n\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n\n      if (this.disposeData(dataId)) {\n        engine().removeDataId(dataId, this);\n      }\n\n      this.pendingDeletes--;\n    }\n\n    return dTypeVals;\n  }\n  /**\n   * Read tensor to a new texture that is densely packed for ease of use.\n   * @param dataId The source tensor.\n   * @param options\n   *     customTexShape: Optional. If set, will use the user defined texture\n   *     shape to create the texture.\n   */\n\n\n  readToGPU(dataId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const texData = this.texData.get(dataId);\n    const {\n      values,\n      shape,\n      slice,\n      dtype,\n      isPacked,\n      texture\n    } = texData;\n\n    if (dtype === 'complex64') {\n      throw new Error('Does not support reading texture for complex64 dtype.');\n    } // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n\n\n    if (slice != null) {\n      let program;\n\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n\n      const res = this.runWebGLProgram(program, [{\n        dataId,\n        shape,\n        dtype\n      }], dtype);\n      const gpuResouorce = this.readToGPU(res, options);\n      this.disposeIntermediateTensorInfo(res);\n      return gpuResouorce;\n    }\n\n    if (texture == null) {\n      if (values != null) {\n        throw new Error('Data is not on GPU but on CPU.');\n      } else {\n        throw new Error('There is no data on GPU or CPU.');\n      }\n    } // Decode the texture so that it is stored densely (using four channels).\n\n\n    const tmpTarget = this.decode(dataId, options.customTexShape); // Make engine track this tensor, so that we can dispose it later.\n\n    const tensorRef = engine().makeTensorFromTensorInfo(tmpTarget);\n    const tmpData = this.texData.get(tmpTarget.dataId);\n    return Object.assign({\n      tensorRef\n    }, tmpData.texture);\n  }\n\n  bufferSync(t) {\n    const data = this.readSync(t.dataId);\n\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = data.map(d => util.decodeString(d));\n        return buffer(t.shape, t.dtype, strings);\n      } catch (_a) {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n\n    return buffer(t.shape, t.dtype, data);\n  }\n\n  checkNumericalProblems(values) {\n    if (values == null) {\n      return;\n    }\n\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i];\n\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(`The value ${num} cannot be represented with your ` + `current settings. Consider enabling float32 rendering: ` + `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  getValuesFromTexture(dataId) {\n    const {\n      shape,\n      dtype,\n      isPacked\n    } = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals = this.gpgpu.downloadMatrixFromPackedTexture(tmpData.texture.texture, ...tex_util.getDenseTexShape(shape)).subarray(0, size);\n      this.disposeIntermediateTensorInfo(tmpTarget);\n      return vals;\n    }\n\n    const shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ? new EncodeFloatPackedProgram(outputShape) : new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(program, [{\n      shape: outputShape,\n      dtype,\n      dataId\n    }], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture.texture, tmpData.texShape[0], tmpData.texShape[1]).subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n    return vals;\n  }\n\n  timerAvailable() {\n    return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n  }\n\n  time(f) {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers = [];\n    let outerMostTime = false;\n\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n\n    this.activeTimers = newActiveTimers;\n    f(); // needing to split these up because util.flatten only accepts certain types\n\n    const flattenedActiveTimerQueries = util.flatten(this.activeTimers.map(d => d.query)).filter(d => d != null);\n    const flattenedActiveTimerNames = util.flatten(this.activeTimers.map(d => d.name)).filter(d => d != null);\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const res = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null // will be filled by the engine\n\n    };\n    return (async () => {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n        const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n        res['kernelMs'] = util.sum(kernelMs);\n\n        res['getExtraProfileInfo'] = () => kernelMs.map((d, i) => ({\n          name: flattenedActiveTimerNames[i],\n          ms: d\n        })).map(d => `${d.name}: ${d.ms}`).join(', ');\n      } else {\n        res['kernelMs'] = {\n          error: 'WebGL query timers are not supported in this environment.'\n        };\n      }\n\n      this.uploadWaitMs = 0;\n      this.downloadWaitMs = 0;\n      return res;\n    })();\n  }\n\n  memory() {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    };\n  }\n\n  startTimer() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n\n    return {\n      startMs: util.now(),\n      endMs: null\n    };\n  }\n\n  endTimer(query) {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n\n    query.endMs = util.now();\n    return query;\n  }\n\n  async getQueryTime(query) {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query);\n    }\n\n    const timerQuery = query;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n  /**\n   * Decrease the RefCount on the dataId and dispose the memory if the dataId\n   * has 0 refCount. If there are pending read on the data, the disposal would\n   * added to the pending delete queue. Return true if the dataId is removed\n   * from backend or the backend does not contain the dataId, false if the\n   * dataId is not removed. Memory may or may not be released even when dataId\n   * is removed, which also depends on dataRefCount, see `releaseGPU`.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n\n\n  disposeData(dataId) {\n    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    } // No-op if already disposed.\n\n\n    if (!this.texData.has(dataId)) {\n      return true;\n    } // if force flag is set, change refCount to 0, this would ensure disposal\n    // when added to the pendingDisposal queue. Memory may or may not be\n    // released, which also depends on dataRefCount, see `releaseGPU`.\n\n\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n\n    this.releaseGPUData(dataId);\n    const {\n      complexTensorInfos\n    } = this.texData.get(dataId);\n\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n\n    this.texData.delete(dataId);\n    return true;\n  }\n\n  releaseGPUData(dataId) {\n    const {\n      texture,\n      dtype,\n      texShape,\n      usage,\n      isPacked,\n      slice\n    } = this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId) {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture.texture;\n  }\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n\n\n  getDataInfo(dataId) {\n    return this.texData.get(dataId);\n  }\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n\n\n  shouldExecuteOnCPU(inputs) {\n    let sizeThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CPU_HANDOFF_SIZE_THRESHOLD;\n    return env().getBool('WEBGL_CPU_FORWARD') && inputs.every(input => this.texData.get(input.dataId).texture == null && util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext() {\n    return this.gpgpu;\n  }\n\n  where(condition) {\n    backend_util.warn('tf.where() in webgl locks the UI thread. ' + 'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  packedUnaryOp(x, op, dtype) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromTensorInfo(outInfo);\n  } // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n\n\n  abs(x) {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues = simpleAbsImplCPU(this.texData.get(x.dataId).values);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype);\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromTensorInfo(outInfo);\n  }\n\n  makeTensorInfo(shape, dtype, values) {\n    let dataId;\n\n    if (dtype === 'string' && values != null && values.length > 0 && util.isString(values[0])) {\n      const encodedValues = values.map(d => util.encodeString(d));\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values, shape, dtype);\n    }\n\n    this.texData.get(dataId).usage = null;\n    return {\n      dataId,\n      shape,\n      dtype\n    };\n  }\n\n  makeOutput(shape, dtype, values) {\n    return engine().makeTensorFromTensorInfo(this.makeTensorInfo(shape, dtype, values), this);\n  }\n\n  unpackTensor(input) {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  packTensor(input) {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(program, [input], input.dtype, null\n    /* customUniformValues */\n    , preventEagerUnpackingOutput);\n  }\n\n  packedReshape(input, afterShape) {\n    const input3DShape = [webgl_util.getBatchDim(input.shape), ...webgl_util.getRowsCols(input.shape)];\n    const input3D = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)];\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [input3DShape];\n    const output = this.runWebGLProgram(program, [input3D], input.dtype, customValues, preventEagerUnpackingOfOutput);\n    return {\n      dataId: output.dataId,\n      shape: afterShape,\n      dtype: output.dtype\n    };\n  }\n\n  decode(dataId, customTexShape) {\n    const texData = this.texData.get(dataId);\n    const {\n      isPacked,\n      shape,\n      dtype\n    } = texData;\n\n    if (customTexShape != null) {\n      const size = util.sizeFromShape(shape);\n      const texSize = customTexShape[0] * customTexShape[1] * 4;\n      util.assert(size <= texSize, () => 'customTexShape is too small. ' + 'Row * Column * 4 should be equal or larger than the ' + 'size of the tensor data.');\n    }\n\n    const shapeAs3D = webgl_util.getShapeAs3D(shape);\n    let program;\n\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [customTexShape != null ? customTexShape : tex_util.getDenseTexShape(shapeAs3D)];\n    const out = this.runWebGLProgram(program, [{\n      shape: shapeAs3D,\n      dtype,\n      dataId\n    }], dtype, customValues, preventEagerUnpackingOfOutput, customTexShape);\n    return {\n      dtype,\n      shape,\n      dataId: out.dataId\n    };\n  }\n\n  runWebGLProgram(program, inputs, outputDtype, customUniformValues) {\n    let preventEagerUnpackingOfOutput = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    let customTexShape = arguments.length > 5 ? arguments[5] : undefined;\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = customTexShape != null ? customTexShape : tex_util.getDenseTexShape(program.outputShape); // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n\n      outData.texShape = texelShape.map(d => d * 2);\n    }\n\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values = util.getTypedArrayFromDType(output.dtype, 0);\n      return output;\n    }\n\n    const dataToDispose = [];\n    const inputsData = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` + `dtypes, please separate the program into real and imaginary ` + `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs && util.sizeFromShape(input.shape) <= env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values\n          };\n        } // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n\n\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      }\n\n      this.uploadToGPU(input.dataId);\n\n      if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) : this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (texData.isPacked && !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n        const savedInput = input;\n        const targetShape = input.shape;\n        input.shape = texData.shape;\n        input = this.packedReshape(input, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n        savedInput.shape = targetShape;\n      }\n\n      return {\n        shape: input.shape,\n        texData,\n        isUniform: false\n      };\n    });\n    this.uploadToGPU(output.dataId);\n    const outputData = {\n      shape: output.shape,\n      texData: outData,\n      isUniform: false\n    };\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query;\n\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    if (!env().get('ENGINE_COMPILE_ONLY')) {\n      gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customUniformValues);\n    }\n\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push({\n        name: program.constructor.name,\n        query: this.getQueryTime(query)\n      });\n    }\n\n    const glFlushThreshold = env().get('WEBGL_FLUSH_THRESHOLD'); // Manually GL flush requested\n\n    if (glFlushThreshold > 0) {\n      const time = util.now();\n\n      if (time - this.lastGlFlushTime > glFlushThreshold) {\n        this.gpgpu.gl.flush();\n        this.lastGlFlushTime = time;\n      }\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked && preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n\n    return output;\n  }\n\n  compileAndRun(program, inputs, outputDtype, customUniformValues) {\n    let preventEagerUnpackingOfOutput = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n\n  getAndSaveBinary(key, getBinary) {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n\n    return this.binaryCache[key];\n  }\n\n  getTextureManager() {\n    return this.textureManager;\n  }\n\n  dispose() {\n    if (this.disposed) {\n      return;\n    } // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n\n\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n\n    this.textureManager.dispose();\n\n    if (this.canvas != null && typeof HTMLCanvasElement !== 'undefined' && this.canvas instanceof HTMLCanvasElement) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n\n    this.disposed = true;\n  }\n\n  floatPrecision() {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n\n        return 16;\n      });\n    }\n\n    return this.floatPrecisionValue;\n  }\n  /** Returns the smallest representable number.  */\n\n\n  epsilon() {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  uploadToGPU(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      shape,\n      dtype,\n      values,\n      texture,\n      usage,\n      isPacked\n    } = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n\n    const shouldTimeProgram = this.activeTimers != null;\n    let start;\n\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n\n    if (texShape == null) {\n      // This texShape may not be the final texture shape. For packed or dense\n      // textures, the texShape will be changed when textures are created.\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n      let program;\n      let width = texShape[1],\n          height = texShape[0];\n      const isByteArray = values instanceof Uint8Array || values instanceof Uint8ClampedArray; // texture for float array is PhysicalTextureType.PACKED_2X2_FLOAT32, we\n      // need to make sure the upload uses the same packed size\n\n      if (isPacked || !isByteArray) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n      }\n\n      if (isPacked) {\n        program = new EncodeMatrixPackedProgram(shapeAs3D, isByteArray);\n      } else {\n        program = new EncodeMatrixProgram(shapeAs3D, isByteArray);\n      } // TexShape for float array needs to be the original shape, which byte\n      // array needs to be packed size. This allow the data upload shape to be\n      // matched with texture creation logic.\n\n\n      const tempDenseInputTexShape = isByteArray ? [height, width] : texShape;\n      const tempDenseInputHandle = this.makeTensorInfo(tempDenseInputTexShape, dtype);\n      const tempDenseInputTexData = this.texData.get(tempDenseInputHandle.dataId);\n\n      if (isByteArray) {\n        tempDenseInputTexData.usage = TextureUsage.PIXELS;\n      } else {\n        tempDenseInputTexData.usage = TextureUsage.UPLOAD;\n      }\n\n      tempDenseInputTexData.texShape = tempDenseInputTexShape;\n      this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);\n      const customValues = [[height, width]]; // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, customValues, preventEagerUnpacking); // Have the original texture assume the identity of the encoded output.\n\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n\n      if (!env().get('ENGINE_COMPILE_ONLY')) {\n        texData.texture = outputTexData.texture; // Once uploaded, don't store the values on cpu.\n\n        texData.values = null;\n        this.texData.delete(encodedOutputTarget.dataId);\n      } else {\n        this.disposeData(encodedOutputTarget.dataId);\n      }\n\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  convertAndCacheOnCPU(dataId, float32Values) {\n    const texData = this.texData.get(dataId);\n    const {\n      dtype\n    } = texData;\n    this.releaseGPUData(dataId);\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype);\n    }\n\n    return texData.values;\n  }\n\n  acquireTexture(texShape, texType, dtype, isPacked) {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n\n    if (!this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(`High memory usage in GPU: ${mb} MB, ` + `most likely due to a memory leak`);\n    }\n\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  computeBytes(shape, dtype) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n\n  checkCompileCompletion() {\n    for (const [, binary] of Object.entries(this.binaryCache)) {\n      this.checkCompletion_(binary);\n    }\n  }\n\n  async checkCompileCompletionAsync() {\n    const ps = [];\n\n    if (this.gpgpu.parallelCompilationExtension) {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        ps.push(this.checkCompletionAsync_(binary));\n      }\n\n      return Promise.all(ps);\n    } else {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        const p = new Promise(resolve => {\n          try {\n            this.checkCompletion_(binary);\n            resolve(true);\n          } catch (error) {\n            throw error;\n          }\n        });\n        ps.push(p);\n      }\n\n      return Promise.all(ps);\n    }\n  }\n\n  async checkCompletionAsync_(binary) {\n    if (this.gpgpu.gl.getProgramParameter(binary.webGLProgram, this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)) {\n      return this.checkCompletion_(binary);\n    } else {\n      await nextFrame();\n      return this.checkCompletionAsync_(binary);\n    }\n  }\n\n  checkCompletion_(binary) {\n    if (this.gpgpu.gl.getProgramParameter(binary.webGLProgram, this.gpgpu.gl.LINK_STATUS) === false) {\n      console.log(this.gpgpu.gl.getProgramInfoLog(binary.webGLProgram));\n\n      if (this.gpgpu.gl.getShaderParameter(binary.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === false) {\n        webgl_util.logShaderSourceAndInfoLog(binary.source, this.gpgpu.gl.getShaderInfoLog(binary.fragmentShader));\n        throw new Error('Failed to compile fragment shader.');\n      }\n\n      throw new Error('Failed to link vertex and fragment shaders.');\n    }\n\n    return true;\n  }\n\n  getUniformLocations() {\n    for (const [, binary] of Object.entries(this.binaryCache)) {\n      const {\n        uniformLocations,\n        customUniformLocations,\n        infLoc,\n        nanLoc,\n        inShapesLocations,\n        inTexShapesLocations,\n        outShapeLocation,\n        outShapeStridesLocation,\n        outTexShapeLocation\n      } = getUniformLocations(this.gpgpu, binary.program, binary.webGLProgram);\n      binary.uniformLocations = uniformLocations;\n      binary.customUniformLocations = customUniformLocations;\n      binary.infLoc = infLoc;\n      binary.nanLoc = nanLoc;\n      binary.inShapesLocations = inShapesLocations;\n      binary.inTexShapesLocations = inTexShapesLocations;\n      binary.outShapeLocation = outShapeLocation;\n      binary.outShapeStridesLocation = outShapeStridesLocation;\n      binary.outTexShapeLocation = outTexShapeLocation;\n    }\n  }\n\n}\nMathBackendWebGL.nextDataId = 0;\n\nfunction float32ToTypedArray(a, dtype) {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a;\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = dtype === 'int32' ? new Int32Array(a.length) : new Uint8Array(a.length);\n\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n\n    return result;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}","map":{"version":3,"sources":["../../../../../tfjs-backend-webgl/src/backend_webgl.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import webgl flags.\nimport './flags_webgl';\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {backend_util, BackendValues, buffer, DataId, DataStorage, DataToGPUWebGLOption, DataType, engine, env, GPUData, kernel_impls, KernelBackend, MemoryInfo, nextFrame, NumericDataType, Rank, RecursiveArray, scalar, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, tidy, TimingInfo, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {getWebGLContext} from './canvas_util';\nimport {DecodeMatrixProgram} from './decode_matrix_gpu';\nimport {DecodeMatrixPackedProgram} from './decode_matrix_packed_gpu';\nimport {EncodeFloatProgram} from './encode_float_gpu';\nimport {EncodeFloatPackedProgram} from './encode_float_packed_gpu';\nimport {EncodeMatrixProgram} from './encode_matrix_gpu';\nimport {EncodeMatrixPackedProgram} from './encode_matrix_packed_gpu';\nimport {GPGPUContext} from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport {getUniformLocations, GPGPUBinary, GPGPUProgram, TensorData} from './gpgpu_math';\nimport {simpleAbsImplCPU} from './kernel_utils/shared';\nimport {PackProgram} from './pack_gpu';\nimport {ReshapePackedProgram} from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureData, TextureUsage} from './tex_util';\nimport {TextureManager} from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport {UnaryOpProgram} from './unaryop_gpu';\nimport {UnaryOpPackedProgram} from './unaryop_packed_gpu';\nimport {UnpackProgram} from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\n\nconst whereImpl = kernel_impls.whereImpl;\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\ntype KernelInfo = {\n  name: string; query: Promise<number>;\n};\n\nexport type TimerNode = RecursiveArray<KernelInfo>|KernelInfo;\nexport interface CPUTimerQuery {\n  startMs: number;\n  endMs?: number;\n}\n\nexport interface WebGLMemoryInfo extends MemoryInfo {\n  numBytesInGPU: number;\n  // Tracks the total number of bytes allocated on the GPU, accounting for the\n  // physical texture type.\n  numBytesInGPUAllocated: number;\n  // Tracks byte size of textures that were created and then made available for\n  // reuse (disposed).\n  numBytesInGPUFree: number;\n  unreliable: boolean;\n}\n\nexport interface WebGLTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\nconst binaryCaches: {[webGLVersion: string]: {[key: string]: GPGPUBinary}} = {};\n\nexport function getBinaryCache(webGLVersion: number) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD =\n    env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD');\n\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning(): number {\n  if (env().global.screen == null) {\n    return 1024;  // 1 GB.\n  }\n  return (env().global.screen.height * env().global.screen.width *\n          window.devicePixelRatio) *\n      BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\nexport class MathBackendWebGL extends KernelBackend {\n  texData: DataStorage<TextureData>;\n  gpgpu: GPGPUContext;\n\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendWebGL.nextDataId++;\n  }\n  // Maps data ids that have a pending read operation, to list of subscribers.\n  private pendingRead = new WeakMap<DataId, Array<(arr: TypedArray) => void>>();\n  // List of data ids that are scheduled for disposal, but are waiting on a\n  // pending read operation.\n  private pendingDisposal = new WeakSet<DataId>();\n\n  // Used to count the number of 'shallow' sliced tensors that point to the\n  // same data id.\n  dataRefCount = new WeakMap<DataId, number>();\n  private numBytesInGPU = 0;\n\n  private canvas: HTMLCanvasElement|OffscreenCanvas;\n\n  private programTimersStack: TimerNode[];\n  private activeTimers: TimerNode[];\n  // Accumulated time spent (including blocking) in uploading data to webgl.\n  private uploadWaitMs = 0;\n  // Accumulated time spent (including blocking in downloading data from webgl.\n  private downloadWaitMs = 0;\n\n  // record the last manual GL Flush time.\n  private lastGlFlushTime = 0;\n\n  // Number of bits of precision of this backend.\n  private floatPrecisionValue: 32|16;\n\n  private textureManager: TextureManager;\n  private binaryCache: {[key: string]: GPGPUBinary};\n  private gpgpuCreatedLocally: boolean;\n  private numMBBeforeWarning: number;\n  private warnedAboutMemory = false;\n\n  constructor(gpuResource?: GPGPUContext|HTMLCanvasElement|OffscreenCanvas) {\n    super();\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    let newGPGPU;\n    if (gpuResource != null) {\n      if (gpuResource instanceof GPGPUContext) {\n        newGPGPU = gpuResource;\n      } else {\n        const gl =\n            getWebGLContext(env().getNumber('WEBGL_VERSION'), gpuResource);\n        newGPGPU = new GPGPUContext(gl);\n      }\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n    } else {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      newGPGPU = new GPGPUContext(gl);\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpuCreatedLocally = true;\n    }\n\n    this.gpgpu = newGPGPU;\n    this.canvas = this.gpgpu.gl.canvas;\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n    this.texData = new DataStorage(this, engine());\n  }\n\n  numDataIds() {\n    return this.texData.numDataIds() - this.pendingDeletes;\n  }\n\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n        env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {id: this.nextDataId()};\n    this.texData.set(\n        dataId,\n        {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1});\n    return dataId;\n  }\n\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId: DataId): number {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TextureData`. */\n  incRef(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n\n  /** Decrease refCount of a `TextureData`. */\n  decRef(dataId: DataId): void {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n\n  move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    this.texData.set(\n        dataId, {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount});\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  readSync(dataId: DataId): BackendValues {\n    const texData = this.texData.get(dataId);\n    const {values, dtype, complexTensorInfos, slice, shape, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result: Float32Array;\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  async read(dataId: DataId): Promise<BackendValues> {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<TypedArray>(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, complexTensorInfos, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (env().getBool('DEBUG')) {\n      // getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') caused a blocking GPU call.\n      // For performance reason, only check it for debugging. In production,\n      // it doesn't handle this use case anyway, so behavior is not changed.\n      if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n          env().getNumber('WEBGL_VERSION') === 2) {\n        throw new Error(\n            `tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n            `WEBGL_VERSION=2 not yet supported.`);\n      }\n    }\n\n    let buffer: WebGLBuffer = null;\n    let tmpDownloadTarget: TensorInfo;\n\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n\n      buffer = this.gpgpu.createBufferFromTexture(\n          tmpData.texture.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n\n    // Download the values from the GPU.\n    let vals: Float32Array;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([\n        this.read(complexTensorInfos.real.dataId),\n        this.read(complexTensorInfos.imag.dataId)\n      ]);\n\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n    if (buffer != null) {\n      const gl = this.gpgpu.gl;\n      webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      if (this.disposeData(dataId)) {\n        engine().removeDataId(dataId, this);\n      }\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n\n  /**\n   * Read tensor to a new texture that is densely packed for ease of use.\n   * @param dataId The source tensor.\n   * @param options\n   *     customTexShape: Optional. If set, will use the user defined texture\n   *     shape to create the texture.\n   */\n  readToGPU(dataId: DataId, options: DataToGPUWebGLOption = {}): GPUData {\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, isPacked, texture} = texData;\n\n    if (dtype === 'complex64') {\n      throw new Error('Does not support reading texture for complex64 dtype.');\n    }\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const gpuResouorce = this.readToGPU(res, options);\n      this.disposeIntermediateTensorInfo(res);\n      return gpuResouorce;\n    }\n\n    if (texture == null) {\n      if (values != null) {\n        throw new Error('Data is not on GPU but on CPU.');\n      } else {\n        throw new Error('There is no data on GPU or CPU.');\n      }\n    }\n\n    // Decode the texture so that it is stored densely (using four channels).\n    const tmpTarget = this.decode(dataId, options.customTexShape);\n\n    // Make engine track this tensor, so that we can dispose it later.\n    const tensorRef = engine().makeTensorFromTensorInfo(tmpTarget);\n\n    const tmpData = this.texData.get(tmpTarget.dataId);\n    return {tensorRef, ...tmpData.texture};\n  }\n\n  bufferSync<R extends Rank, D extends DataType>(t: TensorInfo):\n      TensorBuffer<R, D> {\n    const data = this.readSync(t.dataId);\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = (data as Uint8Array[]).map(d => util.decodeString(d));\n        return buffer(t.shape as ShapeMap[R], t.dtype, strings) as\n            TensorBuffer<R, D>;\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, data as TypedArray) as\n        TensorBuffer<R, D>;\n  }\n\n  private checkNumericalProblems(values: BackendValues): void {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i] as number;\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(\n              `The value ${num} cannot be represented with your ` +\n              `current settings. Consider enabling float32 rendering: ` +\n              `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  private getValuesFromTexture(dataId: DataId): Float32Array {\n    const {shape, dtype, isPacked} = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals =\n          this.gpgpu\n              .downloadMatrixFromPackedTexture(\n                  tmpData.texture.texture, ...tex_util.getDenseTexShape(shape))\n              .subarray(0, size);\n\n      this.disposeIntermediateTensorInfo(tmpTarget);\n\n      return vals;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape =\n        shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ?\n        new EncodeFloatPackedProgram(outputShape as [number, number, number]) :\n        new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(\n        program, [{shape: outputShape, dtype, dataId}], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals = this.gpgpu\n                     .downloadByteEncodedFloatMatrixFromOutputTexture(\n                         tmpData.texture.texture, tmpData.texShape[0],\n                         tmpData.texShape[1])\n                     .subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n\n    return vals;\n  }\n\n  timerAvailable(): boolean {\n    return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n  }\n\n  time(f: () => void): Promise<WebGLTimingInfo> {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const res: WebGLTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null  // will be filled by the engine\n    };\n\n    return (async () => {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') >\n          0) {\n        const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n\n        res['kernelMs'] = util.sum(kernelMs);\n        res['getExtraProfileInfo'] = () =>\n            kernelMs\n                .map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n                .map(d => `${d.name}: ${d.ms}`)\n                .join(', ');\n      } else {\n        res['kernelMs'] = {\n          error: 'WebGL query timers are not supported in this environment.'\n        };\n      }\n\n      this.uploadWaitMs = 0;\n      this.downloadWaitMs = 0;\n      return res;\n    })();\n  }\n  memory(): WebGLMemoryInfo {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    } as WebGLMemoryInfo;\n  }\n\n  private startTimer(): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {startMs: util.now(), endMs: null};\n  }\n\n  private endTimer(query: WebGLQuery|CPUTimerQuery): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    (query as CPUTimerQuery).endMs = util.now();\n    return query;\n  }\n\n  private async getQueryTime(query: WebGLQuery|CPUTimerQuery): Promise<number> {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query as WebGLQuery);\n    }\n    const timerQuery = query as CPUTimerQuery;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n\n  private pendingDeletes = 0;\n\n  /**\n   * Decrease the RefCount on the dataId and dispose the memory if the dataId\n   * has 0 refCount. If there are pending read on the data, the disposal would\n   * added to the pending delete queue. Return true if the dataId is removed\n   * from backend or the backend does not contain the dataId, false if the\n   * dataId is not removed. Memory may or may not be released even when dataId\n   * is removed, which also depends on dataRefCount, see `releaseGPU`.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId: DataId, force = false): boolean {\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    }\n\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return true;\n    }\n\n    // if force flag is set, change refCount to 0, this would ensure disposal\n    // when added to the pendingDisposal queue. Memory may or may not be\n    // released, which also depends on dataRefCount, see `releaseGPU`.\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n\n    this.releaseGPUData(dataId);\n    const {complexTensorInfos} = this.texData.get(dataId);\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n\n    this.texData.delete(dataId);\n\n    return true;\n  }\n\n  private releaseGPUData(dataId: DataId): void {\n    const {texture, dtype, texShape, usage, isPacked, slice} =\n        this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId: DataId): WebGLTexture {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture.texture;\n  }\n\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId: DataId): TextureData {\n    return this.texData.get(dataId);\n  }\n\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  shouldExecuteOnCPU(\n      inputs: TensorInfo[],\n      sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    return env().getBool('WEBGL_CPU_FORWARD') &&\n        inputs.every(\n            input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext(): GPGPUContext {\n    return this.gpgpu;\n  }\n\n  where(condition: Tensor): Tensor2D {\n    backend_util.warn(\n        'tf.where() in webgl locks the UI thread. ' +\n        'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  private packedUnaryOp(x: TensorInfo, op: string, dtype: DataType) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromTensorInfo(outInfo);\n  }\n\n  // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n  abs<T extends Tensor>(x: T): T {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues =\n          simpleAbsImplCPU(this.texData.get(x.dataId).values as TypedArray);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromTensorInfo(outInfo) as T;\n  }\n\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: BackendValues|string[]): TensorInfo {\n    let dataId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    this.texData.get(dataId).usage = null;\n    return {dataId, shape, dtype};\n  }\n\n  private makeOutput<T extends Tensor>(\n      shape: number[], dtype: DataType, values?: BackendValues): T {\n    return engine().makeTensorFromTensorInfo(\n               this.makeTensorInfo(shape, dtype, values), this) as T;\n  }\n\n  unpackTensor(input: TensorInfo): TensorInfo {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  packTensor(input: TensorInfo): TensorInfo {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(\n        program, [input], input.dtype, null /* customUniformValues */,\n        preventEagerUnpackingOutput);\n  }\n\n  private packedReshape(input: TensorInfo, afterShape: number[]): TensorInfo {\n    const input3DShape = [\n      webgl_util.getBatchDim(input.shape),\n      ...webgl_util.getRowsCols(input.shape)\n    ] as [number, number, number];\n    const input3D: TensorInfo = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [\n      webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n    ] as [number, number, number];\n\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [input3DShape];\n    const output = this.runWebGLProgram(\n        program, [input3D], input.dtype, customValues,\n        preventEagerUnpackingOfOutput);\n    return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n  }\n\n  private decode(dataId: DataId, customTexShape?: [number, number]):\n      TensorInfo {\n    const texData = this.texData.get(dataId);\n    const {isPacked, shape, dtype} = texData;\n    if (customTexShape != null) {\n      const size = util.sizeFromShape(shape);\n      const texSize = customTexShape[0] * customTexShape[1] * 4;\n      util.assert(\n          size <= texSize,\n          () => 'customTexShape is too small. ' +\n              'Row * Column * 4 should be equal or larger than the ' +\n              'size of the tensor data.');\n    }\n    const shapeAs3D =\n        webgl_util.getShapeAs3D(shape) as [number, number, number];\n    let program;\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const customValues =\n        [customTexShape != null ? customTexShape :\n                                  tex_util.getDenseTexShape(shapeAs3D)];\n    const out = this.runWebGLProgram(\n        program, [{shape: shapeAs3D, dtype, dataId}], dtype, customValues,\n        preventEagerUnpackingOfOutput, customTexShape);\n    return {dtype, shape, dataId: out.dataId};\n  }\n\n  runWebGLProgram(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype: DataType,\n      customUniformValues?: number[][], preventEagerUnpackingOfOutput = false,\n      customTexShape?: [number, number]): TensorInfo {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = customTexShape != null ?\n          customTexShape :\n          tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2) as [number, number];\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values =\n          util.getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n\n    const dataToDispose: TensorInfo[] = [];\n    const inputsData: TensorData[] = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs &&\n            util.sizeFromShape(input.shape) <=\n                env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values as TypedArray\n          };\n        }\n\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      }\n\n      this.uploadToGPU(input.dataId);\n      if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) :\n                                   this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (\n          texData.isPacked &&\n          !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n\n        const savedInput = input;\n        const targetShape = input.shape;\n\n        input.shape = texData.shape;\n        input = this.packedReshape(input as Tensor, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n\n        savedInput.shape = targetShape;\n      }\n\n      return {shape: input.shape, texData, isUniform: false};\n    });\n\n    this.uploadToGPU(output.dataId);\n    const outputData:\n        TensorData = {shape: output.shape, texData: outData, isUniform: false};\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(\n          this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query: WebGLQuery|CPUTimerQuery;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    if (!env().get('ENGINE_COMPILE_ONLY')) {\n      gpgpu_math.runProgram(\n          this.gpgpu, binary, inputsData, outputData, customUniformValues);\n    }\n\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push(\n          {name: program.constructor.name, query: this.getQueryTime(query)});\n    }\n\n    const glFlushThreshold = env().get('WEBGL_FLUSH_THRESHOLD');\n    // Manually GL flush requested\n    if (glFlushThreshold > 0) {\n      const time = util.now();\n      if ((time - this.lastGlFlushTime) > glFlushThreshold) {\n        this.gpgpu.gl.flush();\n        this.lastGlFlushTime = time;\n      }\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n        preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n    return output;\n  }\n\n  compileAndRun(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype?: DataType,\n      customUniformValues?: number[][],\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(\n        program, inputs, outputDtype, customUniformValues,\n        preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n\n  private getAndSaveBinary(key: string, getBinary: () => GPGPUBinary):\n      GPGPUBinary {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n\n  getTextureManager(): TextureManager {\n    return this.textureManager;\n  }\n\n  private disposed = false;\n\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null &&\n        (typeof (HTMLCanvasElement) !== 'undefined' &&\n         this.canvas instanceof HTMLCanvasElement)) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n\n  floatPrecision(): 16|32 {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  uploadToGPU(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    const {shape, dtype, values, texture, usage, isPacked} = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      // This texShape may not be the final texture shape. For packed or dense\n      // textures, the texShape will be changed when textures are created.\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n\n      let program;\n      let width = texShape[1], height = texShape[0];\n      const isByteArray =\n          values instanceof Uint8Array || values instanceof Uint8ClampedArray;\n\n      // texture for float array is PhysicalTextureType.PACKED_2X2_FLOAT32, we\n      // need to make sure the upload uses the same packed size\n      if (isPacked || !isByteArray) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(\n            texShape[0], texShape[1]);\n      }\n\n      if (isPacked) {\n        program = new EncodeMatrixPackedProgram(shapeAs3D, isByteArray);\n      } else {\n        program = new EncodeMatrixProgram(shapeAs3D, isByteArray);\n      }\n\n      // TexShape for float array needs to be the original shape, which byte\n      // array needs to be packed size. This allow the data upload shape to be\n      // matched with texture creation logic.\n      const tempDenseInputTexShape: [number, number] =\n          isByteArray ? [height, width] : texShape;\n      const tempDenseInputHandle =\n          this.makeTensorInfo(tempDenseInputTexShape, dtype);\n      const tempDenseInputTexData =\n          this.texData.get(tempDenseInputHandle.dataId);\n      if (isByteArray) {\n        tempDenseInputTexData.usage = TextureUsage.PIXELS;\n      } else {\n        tempDenseInputTexData.usage = TextureUsage.UPLOAD;\n      }\n      tempDenseInputTexData.texShape = tempDenseInputTexShape;\n      this.gpgpu.uploadDenseMatrixToTexture(\n          this.getTexture(tempDenseInputHandle.dataId), width, height,\n          values as TypedArray);\n\n      const customValues = [[height, width]];\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(\n          program, [tempDenseInputHandle], dtype, customValues,\n          preventEagerUnpacking);\n\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n\n      if (!env().get('ENGINE_COMPILE_ONLY')) {\n        texData.texture = outputTexData.texture;\n        // Once uploaded, don't store the values on cpu.\n        texData.values = null;\n        this.texData.delete(encodedOutputTarget.dataId);\n      } else {\n        this.disposeData(encodedOutputTarget.dataId);\n      }\n\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, float32Values?: Float32Array):\n      TypedArray {\n    const texData = this.texData.get(dataId);\n    const {dtype} = texData;\n\n    this.releaseGPUData(dataId);\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype as 'float32');\n    }\n    return texData.values as TypedArray;\n  }\n\n  private acquireTexture(\n      texShape: [number, number], texType: TextureUsage, dtype: DataType,\n      isPacked: boolean): Texture {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory &&\n        this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(\n          `High memory usage in GPU: ${mb} MB, ` +\n          `most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  private computeBytes(shape: [number, number], dtype: DataType) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n\n  checkCompileCompletion() {\n    for (const [, binary] of Object.entries(this.binaryCache)) {\n      this.checkCompletion_(binary);\n    }\n  }\n\n  async checkCompileCompletionAsync(): Promise<boolean[]> {\n    const ps = [];\n    if (this.gpgpu.parallelCompilationExtension) {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        ps.push(this.checkCompletionAsync_(binary));\n      }\n      return Promise.all(ps);\n    } else {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        const p: Promise<boolean> = new Promise((resolve) => {\n          try {\n            this.checkCompletion_(binary);\n            resolve(true);\n          } catch (error) {\n            throw error;\n          }\n        });\n        ps.push(p);\n      }\n      return Promise.all(ps);\n    }\n  }\n\n  private async checkCompletionAsync_(binary: GPGPUBinary): Promise<boolean> {\n    if (this.gpgpu.gl.getProgramParameter(\n            binary.webGLProgram,\n            this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)) {\n      return this.checkCompletion_(binary);\n    } else {\n      await nextFrame();\n      return this.checkCompletionAsync_(binary);\n    }\n  }\n\n  private checkCompletion_(binary: GPGPUBinary): boolean {\n    if (this.gpgpu.gl.getProgramParameter(\n            binary.webGLProgram, this.gpgpu.gl.LINK_STATUS) === false) {\n      console.log(this.gpgpu.gl.getProgramInfoLog(binary.webGLProgram));\n      if (this.gpgpu.gl.getShaderParameter(\n              binary.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === false) {\n        webgl_util.logShaderSourceAndInfoLog(\n            binary.source,\n            this.gpgpu.gl.getShaderInfoLog(binary.fragmentShader));\n        throw new Error('Failed to compile fragment shader.');\n      }\n      throw new Error('Failed to link vertex and fragment shaders.');\n    }\n    return true;\n  }\n\n  getUniformLocations() {\n    for (const [, binary] of Object.entries(this.binaryCache)) {\n      const {\n        uniformLocations,\n        customUniformLocations,\n        infLoc,\n        nanLoc,\n        inShapesLocations,\n        inTexShapesLocations,\n        outShapeLocation,\n        outShapeStridesLocation,\n        outTexShapeLocation\n      } = getUniformLocations(this.gpgpu, binary.program, binary.webGLProgram);\n      binary.uniformLocations = uniformLocations;\n      binary.customUniformLocations = customUniformLocations;\n      binary.infLoc = infLoc;\n      binary.nanLoc = nanLoc;\n      binary.inShapesLocations = inShapesLocations;\n      binary.inTexShapesLocations = inTexShapesLocations;\n      binary.outShapeLocation = outShapeLocation;\n      binary.outShapeStridesLocation = outShapeStridesLocation;\n      binary.outTexShapeLocation = outTexShapeLocation;\n    }\n  }\n}\n\nfunction float32ToTypedArray<D extends NumericDataType>(\n    a: Float32Array, dtype: D): tf.DataTypeMap[D] {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a as tf.DataTypeMap[D];\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = (dtype === 'int32') ? new Int32Array(a.length) :\n                                         new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result as tf.DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}