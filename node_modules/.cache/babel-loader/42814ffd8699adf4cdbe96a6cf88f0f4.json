{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tensor } from './tensor';\nimport { upcastType } from './types';\nimport { assert } from './util';\nexport function makeTypesMatch(a, b) {\n  if (a.dtype === b.dtype) {\n    return [a, b];\n  }\n\n  const dtype = upcastType(a.dtype, b.dtype);\n  return [a.cast(dtype), b.cast(dtype)];\n}\nexport function assertTypesMatch(a, b) {\n  assert(a.dtype === b.dtype, () => `The dtypes of the first(${a.dtype}) and` + ` second(${b.dtype}) input must match`);\n}\nexport function isTensorInList(tensor, tensorList) {\n  return tensorList.some(x => x.id === tensor.id);\n}\n/**\n * Extracts any `Tensor`s found within the provided object.\n *\n * @param container an object that may be a `Tensor` or may directly contain\n *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it\n *   is safe to pass any object here, except that `Promise`s are not\n *   supported.\n * @returns An array of `Tensors` found within the passed object. If the\n *   argument is simply a `Tensor', a list containing that `Tensor` is\n *   returned. If the object is not a `Tensor` or does not\n *   contain `Tensors`, an empty list is returned.\n */\n\nexport function getTensorsInContainer(result) {\n  const list = [];\n  const seen = new Set();\n  walkTensorContainer(result, list, seen);\n  return list;\n}\n\nfunction walkTensorContainer(container, list, seen) {\n  if (container == null) {\n    return;\n  }\n\n  if (container instanceof Tensor) {\n    list.push(container);\n    return;\n  }\n\n  if (!isIterable(container)) {\n    return;\n  } // Iteration over keys works also for arrays.\n\n\n  const iterable = container;\n\n  for (const k in iterable) {\n    const val = iterable[k];\n\n    if (!seen.has(val)) {\n      seen.add(val);\n      walkTensorContainer(val, list, seen);\n    }\n  }\n} // tslint:disable-next-line:no-any\n\n\nfunction isIterable(obj) {\n  return Array.isArray(obj) || typeof obj === 'object';\n}","map":{"version":3,"sources":["../../../../../tfjs-core/src/tensor_util.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAqB,UAArB;AAEA,SAAQ,UAAR,QAAyB,SAAzB;AACA,SAAQ,MAAR,QAAqB,QAArB;AAEA,OAAM,SAAU,cAAV,CAA2C,CAA3C,EAAiD,CAAjD,EAAqD;EACzD,IAAI,CAAC,CAAC,KAAF,KAAY,CAAC,CAAC,KAAlB,EAAyB;IACvB,OAAO,CAAC,CAAD,EAAI,CAAJ,CAAP;EACD;;EACD,MAAM,KAAK,GAAG,UAAU,CAAC,CAAC,CAAC,KAAH,EAAU,CAAC,CAAC,KAAZ,CAAxB;EACA,OAAO,CAAC,CAAC,CAAC,IAAF,CAAO,KAAP,CAAD,EAAgB,CAAC,CAAC,IAAF,CAAO,KAAP,CAAhB,CAAP;AACD;AAED,OAAM,SAAU,gBAAV,CAA2B,CAA3B,EAAsC,CAAtC,EAA+C;EACnD,MAAM,CACF,CAAC,CAAC,KAAF,KAAY,CAAC,CAAC,KADZ,EAEF,MAAM,2BAA2B,CAAC,CAAC,KAAK,OAAlC,GACF,WAAW,CAAC,CAAC,KAAK,oBAHpB,CAAN;AAID;AAED,OAAM,SAAU,cAAV,CAAyB,MAAzB,EAAyC,UAAzC,EAA6D;EACjE,OAAO,UAAU,CAAC,IAAX,CAAgB,CAAC,IAAI,CAAC,CAAC,EAAF,KAAS,MAAM,CAAC,EAArC,CAAP;AACD;AAED;;;;;;;;;;;AAWG;;AACH,OAAM,SAAU,qBAAV,CAAgC,MAAhC,EAAuD;EAC3D,MAAM,IAAI,GAAa,EAAvB;EACA,MAAM,IAAI,GAAG,IAAI,GAAJ,EAAb;EACA,mBAAmB,CAAC,MAAD,EAAS,IAAT,EAAe,IAAf,CAAnB;EACA,OAAO,IAAP;AACD;;AAED,SAAS,mBAAT,CACI,SADJ,EACgC,IADhC,EACgD,IADhD,EACkE;EAChE,IAAI,SAAS,IAAI,IAAjB,EAAuB;IACrB;EACD;;EACD,IAAI,SAAS,YAAY,MAAzB,EAAiC;IAC/B,IAAI,CAAC,IAAL,CAAU,SAAV;IACA;EACD;;EACD,IAAI,CAAC,UAAU,CAAC,SAAD,CAAf,EAA4B;IAC1B;EACD,CAV+D,CAWhE;;;EACA,MAAM,QAAQ,GAAG,SAAjB;;EACA,KAAK,MAAM,CAAX,IAAgB,QAAhB,EAA0B;IACxB,MAAM,GAAG,GAAG,QAAQ,CAAC,CAAD,CAApB;;IACA,IAAI,CAAC,IAAI,CAAC,GAAL,CAAS,GAAT,CAAL,EAAoB;MAClB,IAAI,CAAC,GAAL,CAAS,GAAT;MACA,mBAAmB,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,CAAnB;IACD;EACF;AACF,C,CAED;;;AACA,SAAS,UAAT,CAAoB,GAApB,EAA4B;EAC1B,OAAO,KAAK,CAAC,OAAN,CAAc,GAAd,KAAsB,OAAO,GAAP,KAAe,QAA5C;AACD","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from './tensor';\nimport {TensorContainer, TensorContainerArray} from './tensor_types';\nimport {upcastType} from './types';\nimport {assert} from './util';\n\nexport function makeTypesMatch<T extends Tensor>(a: T, b: T): [T, T] {\n  if (a.dtype === b.dtype) {\n    return [a, b];\n  }\n  const dtype = upcastType(a.dtype, b.dtype);\n  return [a.cast(dtype), b.cast(dtype)];\n}\n\nexport function assertTypesMatch(a: Tensor, b: Tensor): void {\n  assert(\n      a.dtype === b.dtype,\n      () => `The dtypes of the first(${a.dtype}) and` +\n          ` second(${b.dtype}) input must match`);\n}\n\nexport function isTensorInList(tensor: Tensor, tensorList: Tensor[]): boolean {\n  return tensorList.some(x => x.id === tensor.id);\n}\n\n/**\n * Extracts any `Tensor`s found within the provided object.\n *\n * @param container an object that may be a `Tensor` or may directly contain\n *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it\n *   is safe to pass any object here, except that `Promise`s are not\n *   supported.\n * @returns An array of `Tensors` found within the passed object. If the\n *   argument is simply a `Tensor', a list containing that `Tensor` is\n *   returned. If the object is not a `Tensor` or does not\n *   contain `Tensors`, an empty list is returned.\n */\nexport function getTensorsInContainer(result: TensorContainer): Tensor[] {\n  const list: Tensor[] = [];\n  const seen = new Set<{}|void>();\n  walkTensorContainer(result, list, seen);\n  return list;\n}\n\nfunction walkTensorContainer(\n    container: TensorContainer, list: Tensor[], seen: Set<{}|void>): void {\n  if (container == null) {\n    return;\n  }\n  if (container instanceof Tensor) {\n    list.push(container);\n    return;\n  }\n  if (!isIterable(container)) {\n    return;\n  }\n  // Iteration over keys works also for arrays.\n  const iterable = container as TensorContainerArray;\n  for (const k in iterable) {\n    const val = iterable[k];\n    if (!seen.has(val)) {\n      seen.add(val);\n      walkTensorContainer(val, list, seen);\n    }\n  }\n}\n\n// tslint:disable-next-line:no-any\nfunction isIterable(obj: any): boolean {\n  return Array.isArray(obj) || typeof obj === 'object';\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}