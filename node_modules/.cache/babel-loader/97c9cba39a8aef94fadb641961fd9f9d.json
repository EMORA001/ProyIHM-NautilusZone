{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, RotateWithOffset, util } from '@tensorflow/tfjs-core';\nexport const rotateWithOffsetConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: _ref => {\n    let {\n      inputs,\n      attrs,\n      backend\n    } = _ref;\n    const {\n      image\n    } = inputs;\n    const {\n      radians,\n      fillValue,\n      center\n    } = attrs;\n    const cpuBackend = backend;\n    const output = util.getTypedArrayFromDType(image.dtype, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n    const [centerX, centerY] = backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n            const x = coords[2];\n            const y = coords[1]; // coordX/coordY are the result of rotating and translating x/y.\n\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n            let outputValue = fillValue;\n\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            } // If the coordinate position falls within the image boundaries...\n\n\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 && coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx = batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {\n      dataId,\n      shape: image.shape,\n      dtype: image.dtype\n    };\n  }\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/RotateWithOffset.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {backend_util, RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n            const y = coords[1];\n\n            // coordX/coordY are the result of rotating and translating x/y.\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n\n            let outputValue = fillValue;\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            }\n\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue as number;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}