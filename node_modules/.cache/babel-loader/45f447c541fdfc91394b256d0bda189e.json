{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Noise Layers.\n */\nimport { add, greaterEqual, mul, randomUniform, serialization, tidy } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { Layer } from '../engine/topology';\nimport { getExactlyOneTensor } from '../utils/types_utils';\nexport class GaussianNoise extends Layer {\n  constructor(args) {\n    super(args);\n    this.supportsMasking = true;\n    this.stddev = args.stddev;\n  }\n\n  computeOutputShape(inputShape) {\n    return inputShape;\n  }\n\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {\n      stddev: this.stddev\n    };\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n\n      const noised = () => add(K.randomNormal(input.shape, 0, this.stddev), input);\n\n      const output = K.inTrainPhase(noised, () => input, kwargs['training'] || false);\n      return output;\n    });\n  }\n\n}\n/** @nocollapse */\n\nGaussianNoise.className = 'GaussianNoise';\nserialization.registerClass(GaussianNoise);\nexport class GaussianDropout extends Layer {\n  constructor(args) {\n    super(args);\n    this.supportsMasking = true;\n    this.rate = args.rate;\n  }\n\n  computeOutputShape(inputShape) {\n    return inputShape;\n  }\n\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {\n      rate: this.rate\n    };\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n\n      if (this.rate > 0 && this.rate < 1) {\n        const noised = () => {\n          const stddev = Math.sqrt(this.rate / (1 - this.rate));\n          return mul(input, K.randomNormal(input.shape, 1, stddev));\n        };\n\n        return K.inTrainPhase(noised, () => input, kwargs['training'] || false);\n      }\n\n      return input;\n    });\n  }\n\n}\n/** @nocollapse */\n\nGaussianDropout.className = 'GaussianDropout';\nserialization.registerClass(GaussianDropout);\n/**\n * Applies Alpha Dropout to the input.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs\n * to their original values, in order to ensure the self-normalizing property\n * even after this dropout.\n * Alpha Dropout fits well to Scaled Exponential Linear Units\n * by randomly setting activations to the negative saturation value.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the\n *     shape for randomly generated keep/drop flags.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\n */\n\nexport class AlphaDropout extends Layer {\n  constructor(args) {\n    super(args);\n    this.supportsMasking = true;\n    this.rate = args.rate;\n    this.noiseShape = args.noiseShape;\n  }\n\n  _getNoiseShape(inputs) {\n    return this.noiseShape || getExactlyOneTensor(inputs).shape;\n  }\n\n  computeOutputShape(inputShape) {\n    return inputShape;\n  }\n\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {\n      rate: this.rate\n    };\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      if (this.rate < 1 && this.rate > 0) {\n        const noiseShape = this._getNoiseShape(inputs);\n\n        const droppedInputs = () => {\n          const input = getExactlyOneTensor(inputs);\n          const alpha = 1.6732632423543772848170429916717;\n          const scale = 1.0507009873554804934193349852946;\n          const alphaP = -alpha * scale;\n          let keptIdx = greaterEqual(randomUniform(noiseShape), this.rate);\n          keptIdx = K.cast(keptIdx, 'float32'); // get default dtype.\n          // Get affine transformation params.\n\n          const a = ((1 - this.rate) * (1 + this.rate * alphaP ** 2)) ** -0.5;\n          const b = -a * alphaP * this.rate; // Apply mask.\n\n          const x = add(mul(input, keptIdx), mul(add(keptIdx, -1), alphaP));\n          return add(mul(x, a), b);\n        };\n\n        return K.inTrainPhase(droppedInputs, () => getExactlyOneTensor(inputs), kwargs['training'] || false);\n      }\n\n      return inputs;\n    });\n  }\n\n}\n/** @nocollapse */\n\nAlphaDropout.className = 'AlphaDropout';\nserialization.registerClass(AlphaDropout);","map":{"version":3,"sources":["../../../../../../tfjs-layers/src/layers/noise.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Noise Layers.\n */\n\nimport {add, greaterEqual, mul, randomUniform, serialization, Tensor, tidy} from '@tensorflow/tfjs-core';\n\nimport * as K from '../backend/tfjs_backend';\nimport {Layer, LayerArgs} from '../engine/topology';\nimport {Shape} from '../keras_format/common';\nimport {Kwargs} from '../types';\nimport {getExactlyOneTensor} from '../utils/types_utils';\n\nexport declare interface GaussianNoiseArgs extends LayerArgs {\n  /** Standard Deviation.  */\n  stddev: number;\n}\n\nexport class GaussianNoise extends Layer {\n  /** @nocollapse */\n  static className = 'GaussianNoise';\n  readonly stddev: number;\n\n  constructor(args: GaussianNoiseArgs) {\n    super(args);\n    this.supportsMasking = true;\n    this.stddev = args.stddev;\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {stddev: this.stddev};\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n      const noised = () =>\n          add(K.randomNormal(input.shape, 0, this.stddev), input);\n      const output =\n          K.inTrainPhase(noised, () => input, kwargs['training'] || false);\n      return output;\n    });\n  }\n}\nserialization.registerClass(GaussianNoise);\n\nexport declare interface GaussianDropoutArgs extends LayerArgs {\n  /** drop probability.  */\n  rate: number;\n}\n\nexport class GaussianDropout extends Layer {\n  /** @nocollapse */\n  static className = 'GaussianDropout';\n  readonly rate: number;\n\n  constructor(args: GaussianDropoutArgs) {\n    super(args);\n    this.supportsMasking = true;\n    this.rate = args.rate;\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {rate: this.rate};\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n      if (this.rate > 0 && this.rate < 1) {\n        const noised = () => {\n          const stddev = Math.sqrt(this.rate / (1 - this.rate));\n          return mul(input, K.randomNormal(input.shape, 1, stddev));\n        };\n        return K.inTrainPhase(noised, () => input, kwargs['training'] || false);\n      }\n      return input;\n    });\n  }\n}\nserialization.registerClass(GaussianDropout);\n\nexport declare interface AlphaDropoutArgs extends LayerArgs {\n  /** drop probability.  */\n  rate: number;\n  /**\n   * A 1-D `Tensor` of type `int32`, representing the\n   * shape for randomly generated keep/drop flags.\n   */\n  noiseShape?: Shape;\n}\n\n/**\n * Applies Alpha Dropout to the input.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs\n * to their original values, in order to ensure the self-normalizing property\n * even after this dropout.\n * Alpha Dropout fits well to Scaled Exponential Linear Units\n * by randomly setting activations to the negative saturation value.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the\n *     shape for randomly generated keep/drop flags.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\n */\nexport class AlphaDropout extends Layer {\n  /** @nocollapse */\n  static className = 'AlphaDropout';\n  readonly rate: number;\n  readonly noiseShape: Shape;\n\n  constructor(args: AlphaDropoutArgs) {\n    super(args);\n    this.supportsMasking = true;\n    this.rate = args.rate;\n    this.noiseShape = args.noiseShape;\n  }\n\n  _getNoiseShape(inputs: Tensor|Tensor[]) {\n    return this.noiseShape || getExactlyOneTensor(inputs).shape;\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    return inputShape;\n  }\n\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {rate: this.rate};\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      if (this.rate < 1 && this.rate > 0) {\n        const noiseShape = this._getNoiseShape(inputs);\n\n        const droppedInputs = () => {\n          const input = getExactlyOneTensor(inputs);\n\n          const alpha = 1.6732632423543772848170429916717;\n          const scale = 1.0507009873554804934193349852946;\n\n          const alphaP = -alpha * scale;\n\n          let keptIdx = greaterEqual(randomUniform(noiseShape), this.rate);\n\n          keptIdx = K.cast(keptIdx, 'float32');  // get default dtype.\n\n          // Get affine transformation params.\n          const a = ((1 - this.rate) * (1 + this.rate * alphaP ** 2)) ** -0.5;\n          const b = -a * alphaP * this.rate;\n\n          // Apply mask.\n          const x = add(mul(input, keptIdx), mul(add(keptIdx, -1), alphaP));\n\n          return add(mul(x, a), b);\n        };\n        return K.inTrainPhase(\n            droppedInputs, () => getExactlyOneTensor(inputs),\n            kwargs['training'] || false);\n      }\n      return inputs;\n    });\n  }\n}\nserialization.registerClass(AlphaDropout);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}