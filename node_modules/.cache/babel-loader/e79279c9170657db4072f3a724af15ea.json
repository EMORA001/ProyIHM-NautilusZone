{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nconst {\n  getBroadcastDims\n} = backend_util;\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nexport function makeShader(inputsInfo, outputShape, program) {\n  const prefixSnippets = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape); // Snippet when we decided to upload the values as uniform.\n\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(`uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n\n    if (program.enableShapeUniforms) {\n      const {\n        uniformShape\n      } = getUniformInfoFromShape(program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(`uniform int ${x.name}Shape;`);\n          break;\n\n        case 2:\n          prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);\n          break;\n\n        case 3:\n          prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);\n          break;\n\n        case 4:\n          prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);\n          break;\n\n        default:\n          break;\n      }\n\n      prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);\n    }\n  });\n\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(`uniform int outShape;`);\n        break;\n\n      case 2:\n        prefixSnippets.push(`uniform ivec2 outShape;`);\n        prefixSnippets.push(`uniform int outShapeStrides;`);\n        break;\n\n      case 3:\n        prefixSnippets.push(`uniform ivec3 outShape;`);\n        prefixSnippets.push(`uniform ivec2 outShapeStrides;`);\n        break;\n\n      case 4:\n        prefixSnippets.push(`uniform ivec4 outShape;`);\n        prefixSnippets.push(`uniform ivec3 outShapeStrides;`);\n        break;\n\n      default:\n        break;\n    }\n\n    prefixSnippets.push(`uniform ivec2 outTexShape;`);\n  }\n\n  if (program.customUniforms) {\n    program.customUniforms.forEach(d => {\n      prefixSnippets.push(`uniform ${d.type} ${d.name}${d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);\n    });\n  }\n\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n  const inputSamplingSnippet = inputsInfo.map(x => getInputSamplingSnippet(x, outputShape, program.packedInputs, program.enableShapeUniforms)).join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet;\n  let floatTextureSetOutputSnippet;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet, inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, program.userCode].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(inInfo) {\n  let enableShapeUniforms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const shape = inInfo.shapeInfo.logicalShape;\n\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n\n    case 5:\n      return getSampler5D(inInfo);\n\n    case 6:\n      return getSampler6D(inInfo);\n\n    default:\n      throw new Error(`${shape.length}-D input sampling` + ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(inInfo, enableShapeUniforms) {\n  const shape = inInfo.shapeInfo.logicalShape;\n\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\n\nfunction getInputSamplingSnippet(inInfo, outShapeInfo) {\n  let usesPackedTextures = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let enableShapeUniforms = arguments.length > 3 ? arguments[3] : undefined;\n  let res = '';\n\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n\n    case 1:\n      return getOutputPacked1DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    case 2:\n      return getOutputPacked2DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    case 3:\n      return getOutputPacked3DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    default:\n      return getOutputPackedNDCoords(outShape, outTexShape, enableShapeUniforms);\n  }\n}\n\nfunction getOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n\n    case 1:\n      return getOutput1DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    case 2:\n      return getOutput2DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    case 3:\n      return getOutput3DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    case 4:\n      return getOutput4DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    case 5:\n      return getOutput5DCoords(outShape, outTexShape);\n\n    case 6:\n      return getOutput6DCoords(outShape, outTexShape);\n\n    default:\n      throw new Error(`${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl) {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl) {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl) {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl) {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(shape, texShape, enableShapeUniforms) {\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(shape, texShape, enableShapeUniforms) {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n  }\n\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet = shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], shape);\n    return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${coordsFromIndexSnippet}\n    return ivec3(r, c, d);\n  }\n`;\n  }\n\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  `;\n  }\n\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet = shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd', 'd2'], shape);\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n  }\n\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2'], shape);\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(shape, texShape) {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3'], shape);\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(shape, texShape) {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(shape, texShape, enableShapeUniforms) {\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      }\n    `;\n  } // texels needed to accommodate a logical row\n\n\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n  }\n\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(shape, texShape, enableShapeUniforms) {\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  `;\n  }\n\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName) {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const glsl = getGlslDifferences();\n\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${texName}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${texName}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n      float ${funcName}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${texName}Shape[1] + col + ${offset};\n        vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const glsl = getGlslDifferences();\n\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        int stride1 = ${texName}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];\n      int stride1 = ${texName}Shape[2];\n      int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n      return sampleTexture(${texName}, uv);\n    }\n    `;\n  }\n\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    vec4 ${funcName}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${texName}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${texName}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const stride2Str = `int stride2 = ${texName}Shape[3];`;\n  const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;\n  const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        ${stride2Str}\n        ${stride1Str}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${texName}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${stride2Str}\n      ${stride1Str}\n      ${stride0Str}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo) {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n  const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n  }\n\n  let unpackedCoordsSnippet = '';\n\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` + `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank && inputInfo.shapeInfo.flatOffset == null && util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n  }\n\n  let unpackedCoordsSnippet = '';\n\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank) {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\nexport function getUniformInfoFromShape(isPacked, shape, texShape) {\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  const rank = shape.length;\n  const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n  const useSqueezeShape = !isPacked && rank > 1 && !util.arraysEqual(shape, texShape) && newShape.length < rank || useSqueezePackedShape;\n  const uniformShape = useSqueezeShape ? squeezeShape : shape;\n  return {\n    useSqueezeShape,\n    uniformShape,\n    keptDims\n  };\n}\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\n\nexport function squeezeInputInfo(inInfo, squeezedShape) {\n  // Deep copy.\n  const newInputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params, keptDims) {\n  return keptDims.map(d => params[d]).join(', ');\n}","map":{"version":3,"sources":["../../../../../tfjs-backend-webgl/src/shader_compiler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nconst {getBroadcastDims} = backend_util;\nimport {getGlslDifferences, GLSL} from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n\nexport type ShapeInfo = {\n  logicalShape: number[],\n  texShape: [number, number],\n  isUniform: boolean,\n  isPacked: boolean,\n  flatOffset: number\n};\n\nexport type InputInfo = {\n  name: string,\n  shapeInfo: ShapeInfo\n};\n\nexport type UniformType =\n    'float'|'vec2'|'vec3'|'vec4'|'int'|'ivec2'|'ivec3'|'ivec4';\n\ninterface ProgramParams {\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  packedInputs?: boolean;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport function makeShader(\n    inputsInfo: InputInfo[], outputShape: ShapeInfo,\n    program: ProgramParams): string {\n  const prefixSnippets: string[] = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\n          `uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n\n    if (program.enableShapeUniforms) {\n      const {uniformShape} = getUniformInfoFromShape(\n          program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(`uniform int ${x.name}Shape;`);\n          break;\n        case 2:\n          prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);\n          break;\n        case 3:\n          prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);\n          break;\n        case 4:\n          prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);\n          break;\n        default:\n          break;\n      }\n      prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);\n    }\n  });\n\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(`uniform int outShape;`);\n        break;\n      case 2:\n        prefixSnippets.push(`uniform ivec2 outShape;`);\n        prefixSnippets.push(`uniform int outShapeStrides;`);\n        break;\n      case 3:\n        prefixSnippets.push(`uniform ivec3 outShape;`);\n        prefixSnippets.push(`uniform ivec2 outShapeStrides;`);\n        break;\n      case 4:\n        prefixSnippets.push(`uniform ivec4 outShape;`);\n        prefixSnippets.push(`uniform ivec3 outShapeStrides;`);\n        break;\n      default:\n        break;\n    }\n    prefixSnippets.push(`uniform ivec2 outTexShape;`);\n  }\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d) => {\n      prefixSnippets.push(`uniform ${d.type} ${d.name}${\n          d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);\n    });\n  }\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n\n  const inputSamplingSnippet = inputsInfo\n                                   .map(\n                                       x => getInputSamplingSnippet(\n                                           x, outputShape, program.packedInputs,\n                                           program.enableShapeUniforms))\n                                   .join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet: string;\n  let floatTextureSetOutputSnippet: string;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [\n    shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n    inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet,\n    program.userCode\n  ].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms = false): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\n          `${shape.length}-D input sampling` +\n          ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\n\nfunction getInputSamplingSnippet(\n    inInfo: InputInfo, outShapeInfo: ShapeInfo, usesPackedTextures = false,\n    enableShapeUniforms: boolean): string {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutputPacked2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutputPacked3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    default:\n      return getOutputPackedNDCoords(\n          outShape, outTexShape, enableShapeUniforms);\n  }\n}\n\nfunction getOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutput2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutput3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 4:\n      return getOutput4DCoords(\n          outShape as [number, number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 5:\n      return getOutput5DCoords(\n          outShape as [number, number, number, number, number], outTexShape);\n    case 6:\n      return getOutput6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape);\n    default:\n      throw new Error(\n          `${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl: GLSL): string {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl: GLSL): string {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl: GLSL): string {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl: GLSL): string {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n  }\n\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd'], shape);\n\n    return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${coordsFromIndexSnippet}\n    return ivec3(r, c, d);\n  }\n`;\n  }\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(\n    shape: number[], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch =\n      texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(\n    shape: [number, number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd', 'd2'], shape);\n\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n  }\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2'], shape);\n\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3'], shape);\n\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${\n        packedTexShape[1]}));\n      }\n    `;\n  }\n\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n  }\n\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName: string): string {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${\n        offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${\n      packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n      float ${funcName}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${texName}Shape[1] + col + ${offset};\n        vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        int stride1 = ${texName}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];\n      int stride1 = ${texName}Shape[2];\n      int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n      return sampleTexture(${texName}, uv);\n    }\n    `;\n  }\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    vec4 ${funcName}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${texName}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${\n        glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  const stride2Str = `int stride2 = ${texName}Shape[3];`;\n  const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;\n  const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        ${stride2Str}\n        ${stride1Str}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${\n          texName}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${stride2Str}\n      ${stride1Str}\n      ${stride0Str}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` +\n          `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n      inputInfo.shapeInfo.flatOffset == null &&\n      util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getUniformInfoFromShape(\n    isPacked: boolean, shape: number[], texShape: number[]) {\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const rank = shape.length;\n  const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n  const useSqueezeShape =\n      (!isPacked && rank > 1 && !util.arraysEqual(shape, texShape) &&\n       newShape.length < rank) ||\n      useSqueezePackedShape;\n  const uniformShape = useSqueezeShape ? squeezeShape : shape;\n  return {useSqueezeShape, uniformShape, keptDims};\n}\n\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nexport function squeezeInputInfo(\n    inInfo: InputInfo, squeezedShape: number[]): InputInfo {\n  // Deep copy.\n  const newInputInfo: InputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}