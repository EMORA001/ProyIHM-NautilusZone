{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, ScatterNd } from '@tensorflow/tfjs-core';\nimport { scatterImpl } from './Scatter_impl';\nexport function scatterNd(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    indices,\n    updates\n  } = inputs;\n  const {\n    shape\n  } = attrs;\n  const {\n    sliceRank,\n    numUpdates,\n    sliceSize,\n    strides,\n    outputSize\n  } = backend_util.calculateShapes(updates, indices, shape);\n  const sumDupeIndices = true;\n  const indicesBuf = backend.bufferSync(indices);\n  const updatesBuf = backend.bufferSync(updates);\n  const outBuf = scatterImpl(indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, 0\n  /* defaultValue */\n  , sumDupeIndices);\n  return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\nexport const scatterNdConfig = {\n  kernelName: ScatterNd,\n  backendName: 'cpu',\n  kernelFunc: scatterNd\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/ScatterNd.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAsD,SAAtD,QAAmH,uBAAnH;AAGA,SAAQ,WAAR,QAA0B,gBAA1B;AAEA,OAAM,SAAU,SAAV,CAAoB,IAApB,EAIL;EACC,MAAM;IAAC,MAAD;IAAS,OAAT;IAAkB;EAAlB,IAA2B,IAAjC;EACA,MAAM;IAAC,OAAD;IAAU;EAAV,IAAqB,MAA3B;EACA,MAAM;IAAC;EAAD,IAAU,KAAhB;EAEA,MAAM;IAAC,SAAD;IAAY,UAAZ;IAAwB,SAAxB;IAAmC,OAAnC;IAA4C;EAA5C,IACF,YAAY,CAAC,eAAb,CAA6B,OAA7B,EAAsC,OAAtC,EAA+C,KAA/C,CADJ;EAEA,MAAM,cAAc,GAAG,IAAvB;EAEA,MAAM,UAAU,GAAG,OAAO,CAAC,UAAR,CAAkC,OAAlC,CAAnB;EACA,MAAM,UAAU,GAAG,OAAO,CAAC,UAAR,CAA4C,OAA5C,CAAnB;EAEA,MAAM,MAAM,GAAG,WAAW,CACtB,UADsB,EACV,UADU,EACE,KADF,EACS,UADT,EACqB,SADrB,EACgC,UADhC,EAEtB,SAFsB,EAEX,OAFW,EAEF;EAAE;EAFA,EAEoB,cAFpB,CAA1B;EAIA,OAAO,OAAO,CAAC,cAAR,CAAuB,KAAvB,EAA8B,MAAM,CAAC,KAArC,EAA4C,MAAM,CAAC,MAAnD,CAAP;AACD;AAED,OAAO,MAAM,eAAe,GAAiB;EAC3C,UAAU,EAAE,SAD+B;EAE3C,WAAW,EAAE,KAF8B;EAG3C,UAAU,EAAE;AAH+B,CAAtC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendCPU,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n  const sumDupeIndices = true;\n\n  const indicesBuf = backend.bufferSync<Rank, 'int32'>(indices);\n  const updatesBuf = backend.bufferSync<Rank, 'int32'|'float32'>(updates);\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, 0 /* defaultValue */, sumDupeIndices);\n\n  return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'cpu',\n  kernelFunc: scatterNd as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}