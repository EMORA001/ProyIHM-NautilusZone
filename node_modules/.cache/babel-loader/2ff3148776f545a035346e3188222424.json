{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue, getTensor } from './utils';\nexport const executeOp = function (node, tensorMap, context) {\n  let ops = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : tfOps;\n\n  switch (node.op) {\n    case 'Abs':\n    case 'ComplexAbs':\n      return [ops.abs(getParamValue('x', node, tensorMap, context))];\n\n    case 'Acos':\n      return [ops.acos(getParamValue('x', node, tensorMap, context))];\n\n    case 'Acosh':\n      return [ops.acosh(getParamValue('x', node, tensorMap, context))];\n\n    case 'Asin':\n      return [ops.asin(getParamValue('x', node, tensorMap, context))];\n\n    case 'Asinh':\n      return [ops.asinh(getParamValue('x', node, tensorMap, context))];\n\n    case 'Atan':\n      return [ops.atan(getParamValue('x', node, tensorMap, context))];\n\n    case 'Atan2':\n      return [ops.atan2(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context))];\n\n    case 'Atanh':\n      return [ops.atanh(getParamValue('x', node, tensorMap, context))];\n\n    case 'Ceil':\n      return [ops.ceil(getParamValue('x', node, tensorMap, context))];\n\n    case 'Complex':\n      return [ops.complex(getParamValue('real', node, tensorMap, context), getParamValue('imag', node, tensorMap, context))];\n\n    case 'Cos':\n      return [ops.cos(getParamValue('x', node, tensorMap, context))];\n\n    case 'Cosh':\n      return [ops.cosh(getParamValue('x', node, tensorMap, context))];\n\n    case 'Elu':\n      return [ops.elu(getParamValue('x', node, tensorMap, context))];\n\n    case 'Erf':\n      return [ops.erf(getParamValue('x', node, tensorMap, context))];\n\n    case 'Exp':\n      return [ops.exp(getParamValue('x', node, tensorMap, context))];\n\n    case 'Expm1':\n      {\n        return [ops.expm1(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Floor':\n      return [ops.floor(getParamValue('x', node, tensorMap, context))];\n\n    case 'Log':\n      return [ops.log(getParamValue('x', node, tensorMap, context))];\n\n    case 'Log1p':\n      {\n        return [ops.log1p(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Imag':\n      return [ops.imag(getParamValue('x', node, tensorMap, context))];\n\n    case 'Neg':\n      return [ops.neg(getParamValue('x', node, tensorMap, context))];\n\n    case 'Reciprocal':\n      {\n        return [ops.reciprocal(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Real':\n      return [ops.real(getParamValue('x', node, tensorMap, context))];\n\n    case 'Relu':\n      return [ops.relu(getParamValue('x', node, tensorMap, context))];\n\n    case 'Round':\n      {\n        return [ops.round(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Selu':\n      return [ops.selu(getParamValue('x', node, tensorMap, context))];\n\n    case 'Sigmoid':\n      return [ops.sigmoid(getParamValue('x', node, tensorMap, context))];\n\n    case 'Sin':\n      return [ops.sin(getParamValue('x', node, tensorMap, context))];\n\n    case 'Sign':\n      {\n        return [ops.sign(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Sinh':\n      {\n        return [ops.sinh(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Softplus':\n      {\n        return [ops.softplus(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Sqrt':\n      {\n        return [ops.sqrt(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Square':\n      {\n        return [ops.square(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Tanh':\n      {\n        return [ops.tanh(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Tan':\n      return [ops.tan(getParamValue('x', node, tensorMap, context))];\n\n    case 'ClipByValue':\n      return [ops.clipByValue(getParamValue('x', node, tensorMap, context), getParamValue('clipValueMin', node, tensorMap, context), getParamValue('clipValueMax', node, tensorMap, context))];\n\n    case 'Relu6':\n      return [ops.relu6(getParamValue('x', node, tensorMap, context))];\n\n    case 'Rsqrt':\n      return [ops.rsqrt(getTensor(node.inputNames[0], tensorMap, context))];\n\n    case 'Prod':\n      return [ops.prod(getParamValue('x', node, tensorMap, context), getParamValue('axes', node, tensorMap, context))];\n\n    case 'LeakyRelu':\n      return [ops.leakyRelu(getParamValue('x', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context))];\n\n    case 'Prelu':\n      return [ops.prelu(getParamValue('x', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context))];\n\n    case 'IsNan':\n      return [ops.isNaN(getTensor(node.inputNames[0], tensorMap, context))];\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'basic_math';","map":{"version":3,"sources":["../../../../../../../tfjs-converter/src/operations/executors/basic_math_executor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext, ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'Abs':\n        case 'ComplexAbs':\n          return [ops.abs(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Acos':\n          return [ops.acos(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Acosh':\n          return [ops.acosh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Asin':\n          return [ops.asin(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Asinh':\n          return [ops.asinh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Atan':\n          return [ops.atan(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Atan2':\n          return [ops.atan2(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('y', node, tensorMap, context) as Tensor)];\n        case 'Atanh':\n          return [ops.atanh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Ceil':\n          return [ops.ceil(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Complex':\n          return [ops.complex(\n              getParamValue('real', node, tensorMap, context) as Tensor,\n              getParamValue('imag', node, tensorMap, context) as Tensor)];\n        case 'Cos':\n          return [ops.cos(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Cosh':\n          return [ops.cosh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Elu':\n          return [ops.elu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Erf':\n          return [ops.erf(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Exp':\n          return [ops.exp(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Expm1': {\n          return [ops.expm1(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Floor':\n          return [ops.floor(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Log':\n          return [ops.log(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Log1p': {\n          return [ops.log1p(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Imag':\n          return [ops.imag(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n\n        case 'Neg':\n          return [ops.neg(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Reciprocal': {\n          return [ops.reciprocal(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Real':\n          return [ops.real(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Relu':\n          return [ops.relu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Round': {\n          return [ops.round(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Selu':\n          return [ops.selu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sigmoid':\n          return [ops.sigmoid(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sin':\n          return [ops.sin(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sign': {\n          return [ops.sign(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Sinh': {\n          return [ops.sinh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Softplus': {\n          return [ops.softplus(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Sqrt': {\n          return [ops.sqrt(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Square': {\n          return [ops.square(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Tanh': {\n          return [ops.tanh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Tan':\n          return [ops.tan(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'ClipByValue':\n          return [ops.clipByValue(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('clipValueMin', node, tensorMap, context) as number,\n              getParamValue('clipValueMax', node, tensorMap, context) as\n                  number)];\n        case 'Relu6':\n          return [ops.relu6(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Rsqrt':\n          return [ops.rsqrt(\n              getTensor(node.inputNames[0], tensorMap, context))];\n        case 'Prod':\n          return [ops.prod(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('axes', node, tensorMap, context) as number[])];\n        case 'LeakyRelu':\n          return [ops.leakyRelu(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('alpha', node, tensorMap, context) as number)];\n        case 'Prelu':\n          return [ops.prelu(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('alpha', node, tensorMap, context) as Tensor)];\n        case 'IsNan':\n          return [ops.isNaN(\n              getTensor(node.inputNames[0], tensorMap, context))];\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'basic_math';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}