{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { argMax, clone, dispose, mul, reshape, tensor1d, tidy } from '@tensorflow/tfjs-core';\n\nfunction standardizeSampleOrClassWeights(xWeight, outputNames, weightType) {\n  const numOutputs = outputNames.length;\n\n  if (xWeight == null || Array.isArray(xWeight) && xWeight.length === 0) {\n    return outputNames.map(name => null);\n  }\n\n  if (numOutputs === 1) {\n    if (Array.isArray(xWeight) && xWeight.length === 1) {\n      return xWeight;\n    } else if (typeof xWeight === 'object' && outputNames[0] in xWeight) {\n      return [xWeight[outputNames[0]]];\n    } else {\n      return [xWeight];\n    }\n  }\n\n  if (Array.isArray(xWeight)) {\n    if (xWeight.length !== numOutputs) {\n      throw new Error(`Provided ${weightType} is an array of ${xWeight.length} ` + `element(s), but the model has ${numOutputs} outputs. ` + `Make sure a set of weights is provided for each model output.`);\n    }\n\n    return xWeight;\n  } else if (typeof xWeight === 'object' && Object.keys(xWeight).length > 0 && typeof xWeight[Object.keys(xWeight)[0]] === 'object') {\n    const output = [];\n    outputNames.forEach(outputName => {\n      if (outputName in xWeight) {\n        output.push(xWeight[outputName]);\n      } else {\n        output.push(null);\n      }\n    });\n    return output;\n  } else {\n    throw new Error(`The model has multiple (${numOutputs}) outputs, ` + `so ${weightType} must be either an array with ` + `${numOutputs} elements or an object with ${outputNames} keys. ` + `Provided ${weightType} not understood: ${JSON.stringify(xWeight)}`);\n  }\n}\n/**\n * Standardize class weighting objects.\n *\n * This function takes a single class-weighting object, an array of them,\n * or a map from output name to class-weighting object. It compares it to the\n * output name(s) of the model, base on which it outputs an array of\n * class-weighting objects of which the length matches the number of outputs.\n *\n * @param classWeight Input class-weighting object(s).\n * @param outputNames All output name(s) of the model.\n * @return An array of class-weighting objects. The length of the array matches\n *   the model's number of outputs.\n */\n\n\nexport function standardizeClassWeights(classWeight, outputNames) {\n  return standardizeSampleOrClassWeights(classWeight, outputNames, 'classWeight');\n}\nexport function standardizeSampleWeights(classWeight, outputNames) {\n  return standardizeSampleOrClassWeights(classWeight, outputNames, 'sampleWeight');\n}\n/**\n * Standardize by-sample and/or by-class weights for training.\n *\n * Note that this function operates on one model output at a time. For a model\n * with multiple outputs, you must call this function multiple times.\n *\n * @param y The target tensor that the by-sample and/or by-class weight is for.\n *     The values of y are assumed to encode the classes, either directly\n *     as an integer index, or as one-hot encoding.\n * @param sampleWeight By-sample weights.\n * @param classWeight By-class weights: an object mapping class indices\n *     (integers) to a weight (float) to apply to the model's loss for the\n *     samples from this class during training. This can be useful to tell the\n *     model to \"pay more attention\" to samples from an under-represented class.\n * @param sampleWeightMode The mode for the sample weights.\n * @return A Promise of weight tensor, of which the size of the first dimension\n *     matches that of `y`.\n */\n\nexport async function standardizeWeights(y, sampleWeight, classWeight, sampleWeightMode) {\n  if (sampleWeight != null || sampleWeightMode != null) {\n    // TODO(cais): Once 'temporal' mode is implemented, document it in the doc\n    // string.\n    throw new Error('Support sampleWeight is not implemented yet');\n  }\n\n  if (classWeight != null) {\n    // Apply class weights per sample.\n    const yClasses = tidy(() => {\n      if (y.shape.length === 1) {\n        // Assume class indices.\n        return clone(y);\n      } else if (y.shape.length === 2) {\n        if (y.shape[1] > 1) {\n          // Assume one-hot encoding of classes.\n          const axis = 1;\n          return argMax(y, axis);\n        } else if (y.shape[1] === 1) {\n          // Class index.\n          return reshape(y, [y.shape[0]]);\n        } else {\n          throw new Error(`Encountered unexpected last-dimension size (${y.shape[1]}) ` + `during handling of class weights. The size is expected to be ` + `>= 1.`);\n        }\n      } else {\n        throw new Error(`Unexpected rank of target (y) tensor (${y.rank}) during ` + `handling of class weights. The rank is expected to be 1 or 2.`);\n      }\n    });\n    const yClassIndices = Array.from(await yClasses.data());\n    dispose(yClasses);\n    const classSampleWeight = [];\n    yClassIndices.forEach(classIndex => {\n      if (classWeight[classIndex] == null) {\n        throw new Error(`classWeight must contain all classes in the training data. ` + `The class ${classIndex} exists in the data but not in ` + `classWeight`);\n      } else {\n        classSampleWeight.push(classWeight[classIndex]);\n      }\n    });\n    return tensor1d(classSampleWeight, 'float32');\n  } else {\n    return null;\n  }\n}\n/**\n * Apply per-sample weights on the loss values from a number of samples.\n *\n * @param losses Loss tensor of shape `[batchSize]`.\n * @param sampleWeights Per-sample weight tensor of shape `[batchSize]`.\n * @returns Tensor of the same shape as`losses`.\n */\n\nexport function computeWeightedLoss(losses, sampleWeights) {\n  return mul(losses, sampleWeights);\n}","map":{"version":3,"sources":["../../../../../../tfjs-layers/src/engine/training_utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {argMax, clone, dispose, mul, reshape, Tensor, Tensor1D, tensor1d, tidy} from '@tensorflow/tfjs-core';\n\n/**\n * For multi-class classification problems, this object is designed to store a\n * mapping from class index to the \"weight\" of the class, where higher weighted\n * classes have larger impact on loss, accuracy, and other metrics.\n *\n * This is useful for cases in which you want the model to \"pay more attention\"\n * to examples from an under-represented class, e.g., in unbalanced datasets.\n */\nexport type ClassWeight = {\n  [classIndex: number]: number\n};\n\n/**\n * Class weighting for a model with multiple outputs.\n *\n * This object maps each output name to a class-weighting object.\n */\nexport type ClassWeightMap = {\n  [outputName: string]: ClassWeight\n};\n\nfunction standardizeSampleOrClassWeights(\n    xWeight: ClassWeight|ClassWeight[]|ClassWeightMap, outputNames: string[],\n    weightType: 'sampleWeight'|'classWeight'): ClassWeight[] {\n  const numOutputs = outputNames.length;\n  if (xWeight == null || (Array.isArray(xWeight) && xWeight.length === 0)) {\n    return outputNames.map(name => null);\n  }\n  if (numOutputs === 1) {\n    if (Array.isArray(xWeight) && xWeight.length === 1) {\n      return xWeight;\n    } else if (typeof xWeight === 'object' && outputNames[0] in xWeight) {\n      return [(xWeight as ClassWeightMap)[outputNames[0]]];\n    } else {\n      return [xWeight as ClassWeight];\n    }\n  }\n  if (Array.isArray(xWeight)) {\n    if (xWeight.length !== numOutputs) {\n      throw new Error(\n          `Provided ${weightType} is an array of ${xWeight.length} ` +\n          `element(s), but the model has ${numOutputs} outputs. ` +\n          `Make sure a set of weights is provided for each model output.`);\n    }\n    return xWeight;\n  } else if (\n      typeof xWeight === 'object' && Object.keys(xWeight).length > 0 &&\n      typeof (xWeight as ClassWeightMap)[Object.keys(xWeight)[0]] ===\n          'object') {\n    const output: ClassWeight[] = [];\n    outputNames.forEach(outputName => {\n      if (outputName in xWeight) {\n        output.push((xWeight as ClassWeightMap)[outputName]);\n      } else {\n        output.push(null);\n      }\n    });\n    return output;\n  } else {\n    throw new Error(\n        `The model has multiple (${numOutputs}) outputs, ` +\n        `so ${weightType} must be either an array with ` +\n        `${numOutputs} elements or an object with ${outputNames} keys. ` +\n        `Provided ${weightType} not understood: ${JSON.stringify(xWeight)}`);\n  }\n}\n\n/**\n * Standardize class weighting objects.\n *\n * This function takes a single class-weighting object, an array of them,\n * or a map from output name to class-weighting object. It compares it to the\n * output name(s) of the model, base on which it outputs an array of\n * class-weighting objects of which the length matches the number of outputs.\n *\n * @param classWeight Input class-weighting object(s).\n * @param outputNames All output name(s) of the model.\n * @return An array of class-weighting objects. The length of the array matches\n *   the model's number of outputs.\n */\nexport function standardizeClassWeights(\n    classWeight: ClassWeight|ClassWeight[]|ClassWeightMap,\n    outputNames: string[]): ClassWeight[] {\n  return standardizeSampleOrClassWeights(\n      classWeight, outputNames, 'classWeight');\n}\n\nexport function standardizeSampleWeights(\n    classWeight: ClassWeight|ClassWeight[]|ClassWeightMap,\n    outputNames: string[]): ClassWeight[] {\n  return standardizeSampleOrClassWeights(\n      classWeight, outputNames, 'sampleWeight');\n}\n\n/**\n * Standardize by-sample and/or by-class weights for training.\n *\n * Note that this function operates on one model output at a time. For a model\n * with multiple outputs, you must call this function multiple times.\n *\n * @param y The target tensor that the by-sample and/or by-class weight is for.\n *     The values of y are assumed to encode the classes, either directly\n *     as an integer index, or as one-hot encoding.\n * @param sampleWeight By-sample weights.\n * @param classWeight By-class weights: an object mapping class indices\n *     (integers) to a weight (float) to apply to the model's loss for the\n *     samples from this class during training. This can be useful to tell the\n *     model to \"pay more attention\" to samples from an under-represented class.\n * @param sampleWeightMode The mode for the sample weights.\n * @return A Promise of weight tensor, of which the size of the first dimension\n *     matches that of `y`.\n */\nexport async function standardizeWeights(\n    y: Tensor, sampleWeight?: Tensor, classWeight?: ClassWeight,\n    sampleWeightMode?: 'temporal'): Promise<Tensor> {\n  if (sampleWeight != null || sampleWeightMode != null) {\n    // TODO(cais): Once 'temporal' mode is implemented, document it in the doc\n    // string.\n    throw new Error('Support sampleWeight is not implemented yet');\n  }\n\n  if (classWeight != null) {\n    // Apply class weights per sample.\n    const yClasses: Tensor1D = tidy(() => {\n      if (y.shape.length === 1) {\n        // Assume class indices.\n        return clone(y) as Tensor1D;\n      } else if (y.shape.length === 2) {\n        if (y.shape[1] > 1) {\n          // Assume one-hot encoding of classes.\n          const axis = 1;\n          return argMax(y, axis);\n        } else if (y.shape[1] === 1) {\n          // Class index.\n          return reshape(y, [y.shape[0]]);\n        } else {\n          throw new Error(\n              `Encountered unexpected last-dimension size (${y.shape[1]}) ` +\n              `during handling of class weights. The size is expected to be ` +\n              `>= 1.`);\n        }\n      } else {\n        throw new Error(\n            `Unexpected rank of target (y) tensor (${y.rank}) during ` +\n            `handling of class weights. The rank is expected to be 1 or 2.`);\n      }\n    });\n\n    const yClassIndices = Array.from(await yClasses.data());\n    dispose(yClasses);\n    const classSampleWeight: number[] = [];\n    yClassIndices.forEach(classIndex => {\n      if (classWeight[classIndex] == null) {\n        throw new Error(\n            `classWeight must contain all classes in the training data. ` +\n            `The class ${classIndex} exists in the data but not in ` +\n            `classWeight`);\n      } else {\n        classSampleWeight.push(classWeight[classIndex]);\n      }\n    });\n\n    return tensor1d(classSampleWeight, 'float32');\n  } else {\n    return null;\n  }\n}\n\n/**\n * Apply per-sample weights on the loss values from a number of samples.\n *\n * @param losses Loss tensor of shape `[batchSize]`.\n * @param sampleWeights Per-sample weight tensor of shape `[batchSize]`.\n * @returns Tensor of the same shape as`losses`.\n */\nexport function computeWeightedLoss(losses: Tensor, sampleWeights: Tensor) {\n  return mul(losses, sampleWeights);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}