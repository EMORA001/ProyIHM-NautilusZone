{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\n\nexport function unaryKernelFunc(name, op, dtype) {\n  return _ref => {\n    let {\n      inputs,\n      attrs,\n      backend\n    } = _ref;\n    const {\n      x\n    } = inputs;\n    assertNotComplex(x, name);\n\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend;\n    const values = cpuBackend.data.get(x.dataId).values;\n    const xSize = util.sizeFromShape(x.shape);\n    const $dtype = dtype || x.dtype;\n    const newValues = util.getArrayFromDType($dtype, xSize);\n\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\n\nexport function unaryKernelFuncFromImpl(name, unaryImpl, dtype) {\n  return _ref2 => {\n    let {\n      inputs,\n      attrs,\n      backend\n    } = _ref2;\n    const {\n      x\n    } = inputs;\n    assertNotComplex(x, name);\n\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend;\n    const values = cpuBackend.data.get(x.dataId).values;\n    const $dtype = dtype || x.dtype;\n    const newValues = unaryImpl(values, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/utils/unary_utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAuD,IAAvD,QAAkE,uBAAlE;AAGA,SAAQ,gBAAR,QAA+B,aAA/B;AAIA;;;;;;;AAOG;;AACH,OAAM,SAAU,eAAV,CACF,IADE,EACY,EADZ,EACsC,KADtC,EACsD;EAC1D,OAAO,QAA6B;IAAA,IAA5B;MAAC,MAAD;MAAS,KAAT;MAAgB;IAAhB,CAA4B;IAClC,MAAM;MAAC;IAAD,IAAM,MAAZ;IACA,gBAAgB,CAAC,CAAD,EAAI,IAAJ,CAAhB;;IACA,IAAI,CAAC,CAAC,KAAF,KAAY,QAAZ,IAAwB,KAAK,KAAK,QAAtC,EAAgD;MAC9C,MAAM,IAAI,KAAJ,CAAU,sDAAV,CAAN;IACD;;IAED,MAAM,UAAU,GAAG,OAAnB;IACA,MAAM,MAAM,GAAG,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAAoB,CAAC,CAAC,MAAtB,EAA8B,MAA7C;IACA,MAAM,KAAK,GAAG,IAAI,CAAC,aAAL,CAAmB,CAAC,CAAC,KAArB,CAAd;IACA,MAAM,MAAM,GAAG,KAAK,IAAI,CAAC,CAAC,KAA1B;IACA,MAAM,SAAS,GAAG,IAAI,CAAC,iBAAL,CAAuB,MAAvB,EAA+B,KAA/B,CAAlB;;IACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAApB,EAA2B,EAAE,CAA7B,EAAgC;MAC9B,SAAS,CAAC,CAAD,CAAT,GAAe,EAAE,CAAC,MAAM,CAAC,CAAD,CAAP,EAAY,KAAZ,CAAjB;IACD;;IACD,OAAO,UAAU,CAAC,cAAX,CAA0B,CAAC,CAAC,KAA5B,EAAmC,MAAnC,EAA2C,SAA3C,CAAP;EACD,CAhBD;AAiBD;AAED;;;;;;;;AAQG;;AACH,OAAM,SAAU,uBAAV,CACF,IADE,EACY,SADZ,EACwC,KADxC,EACwD;EAC5D,OAAO,SAA6B;IAAA,IAA5B;MAAC,MAAD;MAAS,KAAT;MAAgB;IAAhB,CAA4B;IAClC,MAAM;MAAC;IAAD,IAAM,MAAZ;IACA,gBAAgB,CAAC,CAAD,EAAI,IAAJ,CAAhB;;IACA,IAAI,CAAC,CAAC,KAAF,KAAY,QAAZ,IAAwB,KAAK,KAAK,QAAtC,EAAgD;MAC9C,MAAM,IAAI,KAAJ,CAAU,sDAAV,CAAN;IACD;;IAED,MAAM,UAAU,GAAG,OAAnB;IACA,MAAM,MAAM,GAAG,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAAoB,CAAC,CAAC,MAAtB,EAA8B,MAA7C;IACA,MAAM,MAAM,GAAG,KAAK,IAAI,CAAC,CAAC,KAA1B;IACA,MAAM,SAAS,GAAG,SAAS,CAAC,MAAD,EAAS,MAAT,EAAiB,KAAjB,CAA3B;IACA,OAAO,UAAU,CAAC,cAAX,CAA0B,CAAC,CAAC,KAA5B,EAAmC,MAAnC,EAA2C,SAA3C,CAAP;EACD,CAZD;AAaD","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelFunc, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc(\n    name: string, op: SimpleUnaryOperation, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xSize = util.sizeFromShape(x.shape);\n    const $dtype = dtype || x.dtype;\n    const newValues = util.getArrayFromDType($dtype, xSize);\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl(\n    name: string, unaryImpl: SimpleUnaryImpl, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const $dtype = dtype || x.dtype;\n    const newValues = unaryImpl(values, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}