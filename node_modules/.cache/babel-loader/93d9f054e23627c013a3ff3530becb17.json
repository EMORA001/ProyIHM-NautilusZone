{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { MeanProgram } from '../mean_gpu';\nimport { ReduceProgram } from '../reduce_gpu'; // Returns an array of configuration objects that describe each stage of the\n// reduction.\n\nfunction getReductionStages(inShape) {\n  const stages = [];\n\n  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n    const outSize = stages.length ? stages[stages.length - 1].outSize : inShape[1];\n    const windowSize = backend_util.computeOptimalWindowSize(outSize);\n    stages.push({\n      inSize: outSize,\n      windowSize,\n      outSize: Math.ceil(outSize / windowSize)\n    });\n  }\n\n  return stages;\n}\n\nexport function reduce(x, dtype, reductionType, backend) {\n  const reductionStages = getReductionStages(x.shape);\n  let result = x;\n\n  for (let i = 0; i < reductionStages.length; i++) {\n    const {\n      inSize,\n      windowSize,\n      outSize\n    } = reductionStages[i];\n    let program;\n    let previousResult;\n\n    if (reductionType === 'mean') {\n      program = i === 0 ? new MeanProgram({\n        windowSize,\n        inSize,\n        batchSize: x.shape[0],\n        outSize\n      }, inSize) : new MeanProgram({\n        windowSize,\n        inSize,\n        batchSize: x.shape[0],\n        outSize\n      });\n    } else {\n      program = new ReduceProgram({\n        windowSize,\n        inSize,\n        batchSize: x.shape[0],\n        outSize\n      }, reductionType);\n    }\n\n    previousResult = result;\n    result = backend.runWebGLProgram(program, [result], dtype);\n\n    if (previousResult.dataId !== x.dataId) {\n      backend.disposeIntermediateTensorInfo(previousResult);\n    }\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../../../../../../tfjs-backend-webgl/src/kernel_utils/reduce.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,QAAiD,uBAAjD;AAGA,SAAQ,WAAR,QAA0B,aAA1B;AACA,SAAQ,aAAR,QAA4B,eAA5B,C,CAIA;AACA;;AACA,SAAS,kBAAT,CAA4B,OAA5B,EAA6C;EAE3C,MAAM,MAAM,GAAG,EAAf;;EAEA,OAAO,MAAM,CAAC,MAAP,KAAkB,CAAlB,IAAuB,MAAM,CAAC,MAAM,CAAC,MAAP,GAAgB,CAAjB,CAAN,CAA0B,OAA1B,KAAsC,CAApE,EAAuE;IACrE,MAAM,OAAO,GACT,MAAM,CAAC,MAAP,GAAgB,MAAM,CAAC,MAAM,CAAC,MAAP,GAAgB,CAAjB,CAAN,CAA0B,OAA1C,GAAoD,OAAO,CAAC,CAAD,CAD/D;IAEA,MAAM,UAAU,GAAG,YAAY,CAAC,wBAAb,CAAsC,OAAtC,CAAnB;IACA,MAAM,CAAC,IAAP,CAAY;MACV,MAAM,EAAE,OADE;MAEV,UAFU;MAGV,OAAO,EAAE,IAAI,CAAC,IAAL,CAAU,OAAO,GAAG,UAApB;IAHC,CAAZ;EAKD;;EAED,OAAO,MAAP;AACD;;AAED,OAAM,SAAU,MAAV,CACF,CADE,EACa,KADb,EAC8B,aAD9B,EAEF,OAFE,EAEuB;EAC3B,MAAM,eAAe,GAAG,kBAAkB,CAAC,CAAC,CAAC,KAAH,CAA1C;EAEA,IAAI,MAAM,GAAG,CAAb;;EACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,eAAe,CAAC,MAApC,EAA4C,CAAC,EAA7C,EAAiD;IAC/C,MAAM;MAAC,MAAD;MAAS,UAAT;MAAqB;IAArB,IAAgC,eAAe,CAAC,CAAD,CAArD;IAEA,IAAI,OAAJ;IACA,IAAI,cAAJ;;IACA,IAAI,aAAa,KAAK,MAAtB,EAA8B;MAC5B,OAAO,GAAG,CAAC,KAAK,CAAN,GACN,IAAI,WAAJ,CACI;QAAC,UAAD;QAAa,MAAb;QAAqB,SAAS,EAAE,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAhC;QAA4C;MAA5C,CADJ,EAC0D,MAD1D,CADM,GAGN,IAAI,WAAJ,CAAgB;QAAC,UAAD;QAAa,MAAb;QAAqB,SAAS,EAAE,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAhC;QAA4C;MAA5C,CAAhB,CAHJ;IAID,CALD,MAKO;MACL,OAAO,GAAG,IAAI,aAAJ,CACN;QAAC,UAAD;QAAa,MAAb;QAAqB,SAAS,EAAE,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAhC;QAA4C;MAA5C,CADM,EACgD,aADhD,CAAV;IAED;;IAED,cAAc,GAAG,MAAjB;IACA,MAAM,GAAG,OAAO,CAAC,eAAR,CAAwB,OAAxB,EAAiC,CAAC,MAAD,CAAjC,EAA2C,KAA3C,CAAT;;IAEA,IAAI,cAAc,CAAC,MAAf,KAA0B,CAAC,CAAC,MAAhC,EAAwC;MACtC,OAAO,CAAC,6BAAR,CAAsC,cAAtC;IACD;EACF;;EAED,OAAO,MAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MeanProgram} from '../mean_gpu';\nimport {ReduceProgram} from '../reduce_gpu';\n\ntype ReduceTypes = 'all'|'any'|'max'|'min'|'sum'|'prod'|'mean';\n\n// Returns an array of configuration objects that describe each stage of the\n// reduction.\nfunction getReductionStages(inShape: number[]):\n    Array<{inSize: number, windowSize: number, outSize: number}> {\n  const stages = [];\n\n  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n    const outSize: number =\n        stages.length ? stages[stages.length - 1].outSize : inShape[1];\n    const windowSize = backend_util.computeOptimalWindowSize(outSize);\n    stages.push({\n      inSize: outSize,\n      windowSize,\n      outSize: Math.ceil(outSize / windowSize)\n    });\n  }\n\n  return stages;\n}\n\nexport function reduce(\n    x: TensorInfo, dtype: DataType, reductionType: ReduceTypes,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionStages = getReductionStages(x.shape);\n\n  let result = x;\n  for (let i = 0; i < reductionStages.length; i++) {\n    const {inSize, windowSize, outSize} = reductionStages[i];\n\n    let program: ReduceProgram|MeanProgram;\n    let previousResult: TensorInfo;\n    if (reductionType === 'mean') {\n      program = i === 0 ?\n          new MeanProgram(\n              {windowSize, inSize, batchSize: x.shape[0], outSize}, inSize) :\n          new MeanProgram({windowSize, inSize, batchSize: x.shape[0], outSize});\n    } else {\n      program = new ReduceProgram(\n          {windowSize, inSize, batchSize: x.shape[0], outSize}, reductionType);\n    }\n\n    previousResult = result;\n    result = backend.runWebGLProgram(program, [result], dtype);\n\n    if (previousResult.dataId !== x.dataId) {\n      backend.disposeIntermediateTensorInfo(previousResult);\n    }\n  }\n\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}