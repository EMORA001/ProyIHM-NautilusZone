{"ast":null,"code":"/**\n * Contains global resources of a model.\n */\nexport class ResourceManager {\n  constructor() {\n    let hashTableNameToHandle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let hashTableMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.hashTableNameToHandle = hashTableNameToHandle;\n    this.hashTableMap = hashTableMap;\n  }\n  /**\n   * Register a `HashTable` in the resource manager.\n   *\n   * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,\n   * where id is the table handle tensor's id.\n   *\n   * @param name Op node name that creates the `HashTable`.\n   * @param hashTable The `HashTable` to be added to resource manager.\n   */\n\n\n  addHashTable(name, hashTable) {\n    this.hashTableNameToHandle[name] = hashTable.handle;\n    this.hashTableMap[hashTable.id] = hashTable;\n  }\n  /**\n   * Get the table handle by node name.\n   * @param name Op node name that creates the `HashTable`. This name is also\n   *     used in the inputs list of lookup and import `HashTable` ops.\n   */\n\n\n  getHashTableHandleByName(name) {\n    return this.hashTableNameToHandle[name];\n  }\n  /**\n   * Get the actual `HashTable` by its handle tensor's id.\n   * @param id The id of the handle tensor.\n   */\n\n\n  getHashTableById(id) {\n    return this.hashTableMap[id];\n  }\n  /**\n   * Dispose `ResourceManager`, including its hashTables and tensors in them.\n   */\n\n\n  dispose() {\n    for (const key in this.hashTableMap) {\n      this.hashTableMap[key].clearAndClose();\n      delete this.hashTableMap[key];\n    }\n\n    for (const name in this.hashTableNameToHandle) {\n      this.hashTableNameToHandle[name].dispose();\n      delete this.hashTableNameToHandle[name];\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../../../../tfjs-converter/src/executor/resource_manager.ts"],"names":[],"mappings":"AAmBA;;AAEG;AACH,OAAM,MAAO,eAAP,CAAsB;EAC1B,WAAA,GAE4C;IAAA,IAD/B,qBAC+B,uEADS,EACT;IAAA,IAA/B,YAA+B,uEAAF,EAAE;IAD/B,KAAA,qBAAA,GAAA,qBAAA;IACA,KAAA,YAAA,GAAA,YAAA;EAAmC;EAEhD;;;;;;;;AAQG;;;EACH,YAAY,CAAC,IAAD,EAAe,SAAf,EAAmC;IAC7C,KAAK,qBAAL,CAA2B,IAA3B,IAAmC,SAAS,CAAC,MAA7C;IACA,KAAK,YAAL,CAAkB,SAAS,CAAC,EAA5B,IAAkC,SAAlC;EACD;EAED;;;;AAIG;;;EACH,wBAAwB,CAAC,IAAD,EAAa;IACnC,OAAO,KAAK,qBAAL,CAA2B,IAA3B,CAAP;EACD;EAED;;;AAGG;;;EACH,gBAAgB,CAAC,EAAD,EAAW;IACzB,OAAO,KAAK,YAAL,CAAkB,EAAlB,CAAP;EACD;EAED;;AAEG;;;EACH,OAAO,GAAA;IACL,KAAK,MAAM,GAAX,IAAkB,KAAK,YAAvB,EAAqC;MACnC,KAAK,YAAL,CAAkB,GAAlB,EAAuB,aAAvB;MACA,OAAO,KAAK,YAAL,CAAkB,GAAlB,CAAP;IACD;;IAED,KAAK,MAAM,IAAX,IAAmB,KAAK,qBAAxB,EAA+C;MAC7C,KAAK,qBAAL,CAA2B,IAA3B,EAAiC,OAAjC;MACA,OAAO,KAAK,qBAAL,CAA2B,IAA3B,CAAP;IACD;EACF;;AAjDyB","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {HashTableMap, NamedTensorMap} from '../data/types';\nimport {HashTable} from './hash_table';\n\n/**\n * Contains global resources of a model.\n */\nexport class ResourceManager {\n  constructor(\n      readonly hashTableNameToHandle: NamedTensorMap = {},\n      readonly hashTableMap: HashTableMap = {}) {}\n\n  /**\n   * Register a `HashTable` in the resource manager.\n   *\n   * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,\n   * where id is the table handle tensor's id.\n   *\n   * @param name Op node name that creates the `HashTable`.\n   * @param hashTable The `HashTable` to be added to resource manager.\n   */\n  addHashTable(name: string, hashTable: HashTable) {\n    this.hashTableNameToHandle[name] = hashTable.handle;\n    this.hashTableMap[hashTable.id] = hashTable;\n  }\n\n  /**\n   * Get the table handle by node name.\n   * @param name Op node name that creates the `HashTable`. This name is also\n   *     used in the inputs list of lookup and import `HashTable` ops.\n   */\n  getHashTableHandleByName(name: string) {\n    return this.hashTableNameToHandle[name];\n  }\n\n  /**\n   * Get the actual `HashTable` by its handle tensor's id.\n   * @param id The id of the handle tensor.\n   */\n  getHashTableById(id: number): HashTable {\n    return this.hashTableMap[id];\n  }\n\n  /**\n   * Dispose `ResourceManager`, including its hashTables and tensors in them.\n   */\n  dispose() {\n    for (const key in this.hashTableMap) {\n      this.hashTableMap[key].clearAndClose();\n      delete this.hashTableMap[key];\n    }\n\n    for (const name in this.hashTableNameToHandle) {\n      this.hashTableNameToHandle[name].dispose();\n      delete this.hashTableNameToHandle[name];\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}