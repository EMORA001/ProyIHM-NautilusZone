{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tile } from '../kernel_names';\nimport { add } from '../ops/add';\nimport { slice } from '../ops/slice';\nimport { zerosLike } from '../ops/zeros_like';\nexport const tileGradConfig = {\n  kernelName: Tile,\n  inputsToSave: ['x'],\n  gradFunc: (dy, saved, attrs) => {\n    const [x] = saved;\n    const {\n      reps\n    } = attrs;\n\n    const derX = () => {\n      let xGrad = zerosLike(x); // TODO(cais): Maybe reduce memory footprint by avoiding repeated\n      // slicing.\n\n      if (x.rank === 1) {\n        for (let i = 0; i < reps[0]; ++i) {\n          xGrad = add(xGrad, slice(dy, [i * x.shape[0]], [x.shape[0]]));\n        }\n      } else if (x.rank === 2) {\n        for (let i = 0; i < reps[0]; ++i) {\n          for (let j = 0; j < reps[1]; ++j) {\n            xGrad = add(xGrad, slice(dy, [i * x.shape[0], j * x.shape[1]], [x.shape[0], x.shape[1]]));\n          }\n        }\n      } else if (x.rank === 3) {\n        for (let i = 0; i < reps[0]; ++i) {\n          for (let j = 0; j < reps[1]; ++j) {\n            for (let k = 0; k < reps[2]; ++k) {\n              xGrad = add(xGrad, slice(dy, [i * x.shape[0], j * x.shape[1], k * x.shape[2]], [x.shape[0], x.shape[1], x.shape[2]]));\n            }\n          }\n        }\n      } else if (x.rank === 4) {\n        for (let i = 0; i < reps[0]; ++i) {\n          for (let j = 0; j < reps[1]; ++j) {\n            for (let k = 0; k < reps[2]; ++k) {\n              for (let l = 0; l < reps[3]; ++l) {\n                xGrad = add(xGrad, slice(dy, [i * x.shape[0], j * x.shape[1], k * x.shape[2], l * x.shape[3]], [x.shape[0], x.shape[1], x.shape[2], x.shape[3]]));\n              }\n            }\n          }\n        }\n      } else {\n        throw new Error(`Gradient for tile operation is not implemented for rank-` + `${x.rank} tensors yet.`);\n      }\n\n      return xGrad;\n    };\n\n    return {\n      x: derX\n    };\n  }\n};","map":{"version":3,"sources":["../../../../../../tfjs-core/src/gradients/Tile_grad.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tile, TileAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {add} from '../ops/add';\nimport {slice} from '../ops/slice';\nimport {zerosLike} from '../ops/zeros_like';\nimport {Tensor} from '../tensor';\n\nexport const tileGradConfig: GradConfig = {\n  kernelName: Tile,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x] = saved;\n    const {reps} = attrs as unknown as TileAttrs;\n\n    const derX = () => {\n      let xGrad = zerosLike(x);\n      // TODO(cais): Maybe reduce memory footprint by avoiding repeated\n      // slicing.\n      if (x.rank === 1) {\n        for (let i = 0; i < reps[0]; ++i) {\n          xGrad = add(xGrad, slice(dy, [i * x.shape[0]], [x.shape[0]]));\n        }\n      } else if (x.rank === 2) {\n        for (let i = 0; i < reps[0]; ++i) {\n          for (let j = 0; j < reps[1]; ++j) {\n            xGrad = add(xGrad, slice(dy, [i * x.shape[0], j * x.shape[1]], [\n                          x.shape[0], x.shape[1]\n                        ]));\n          }\n        }\n      } else if (x.rank === 3) {\n        for (let i = 0; i < reps[0]; ++i) {\n          for (let j = 0; j < reps[1]; ++j) {\n            for (let k = 0; k < reps[2]; ++k) {\n              xGrad =\n                  add(xGrad,\n                      slice(\n                          dy, [i * x.shape[0], j * x.shape[1], k * x.shape[2]],\n                          [x.shape[0], x.shape[1], x.shape[2]]));\n            }\n          }\n        }\n      } else if (x.rank === 4) {\n        for (let i = 0; i < reps[0]; ++i) {\n          for (let j = 0; j < reps[1]; ++j) {\n            for (let k = 0; k < reps[2]; ++k) {\n              for (let l = 0; l < reps[3]; ++l) {\n                xGrad =\n                    add(xGrad,\n                        slice(\n                            dy,\n                            [\n                              i * x.shape[0], j * x.shape[1], k * x.shape[2],\n                              l * x.shape[3]\n                            ],\n                            [x.shape[0], x.shape[1], x.shape[2], x.shape[3]]));\n              }\n            }\n          }\n        }\n      } else {\n        throw new Error(\n            `Gradient for tile operation is not implemented for rank-` +\n            `${x.rank} tensors yet.`);\n      }\n      return xGrad;\n    };\n    return {x: derX};\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}